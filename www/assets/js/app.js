!function e(t,n,r){function o(i,a){if(!n[i]){if(!t[i]){var u="function"==typeof require&&require;if(!a&&u)return u(i,!0);if(s)return s(i,!0);var c=new Error("Cannot find module '"+i+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[i]={exports:{}};t[i][0].call(l.exports,function(e){var n=t[i][1][e];return o(n?n:e)},l,l.exports,e,t,n,r)}return n[i].exports}for(var s="function"==typeof require&&require,i=0;i<r.length;i++)o(r[i]);return o}({"./app/index.js":[function(e,t,n){"use strict";var r=e("react"),o=e("react-router"),s=e("./routes");o.run(s,o.HashLocation,function(e){r.render(r.createElement(e,null),document.body)})},{"./routes":"/Users/Dane/Projects/meetup/twitter-stream/app/routes.js",react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js","react-router":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/index.js"}],"/Users/Dane/Projects/meetup/twitter-stream/app/components/App.react.js":[function(e,t,n){"use strict";var r=e("react"),o=e("react-router"),s=e("./Header.react"),i=o.RouteHandler,a=r.createClass({displayName:"App",render:function(){return r.createElement("div",{id:"app"},r.createElement(s,null),r.createElement(i,null))}});t.exports=a},{"./Header.react":"/Users/Dane/Projects/meetup/twitter-stream/app/components/Header.react.js",react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js","react-router":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/index.js"}],"/Users/Dane/Projects/meetup/twitter-stream/app/components/Footer.react.js":[function(e,t,n){"use strict";var r=e("react"),o=r.createClass({displayName:"Footer",render:function(){return r.createElement("footer",{id:"app-footer"},r.createElement("div",{className:"contain"},r.createElement("div",{className:"site-info"},"A site by ",r.createElement("a",{href:"https://twitter.com/danecando"},"@danecando")," for my Node4U! presentation at ",r.createElement("a",{href:"http://www.meetup.com/Boca-JS"},"BocaJS"))))}});t.exports=o},{react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js"}],"/Users/Dane/Projects/meetup/twitter-stream/app/components/Header.react.js":[function(e,t,n){"use strict";var r=e("react"),o=e("react-router").Link,s=e("lodash"),i=r.createClass({displayName:"Header",hashInputSubmit:function(e){var t=s.cloneDeep(e);if(13===t.keyCode){var n=document.getElementById("hash-link");n.click()}},hashInputChange:function(e){var t=encodeURIComponent(e.target.value);this.setState({hashLink:t})},getInitialState:function(){return{hashLink:""}},render:function(){var e="/"+this.state.hashLink;return r.createElement("header",{id:"app-header"},r.createElement("div",{className:"contain"},r.createElement("section",{className:"site-title"},r.createElement("h2",null,"Node4U Twitter Feed")),r.createElement("section",{className:"app-nav"},r.createElement("nav",{className:"nav"},r.createElement("div",{className:"btn-container"},r.createElement(o,{to:"/",className:"btn btn-home"},"Home")),r.createElement("div",{className:"hash-nav"},r.createElement("div",{className:"uk-form-icon"},r.createElement("span",{className:"hash-mark"},"#"),r.createElement("input",{id:"hash-link-input",type:"text",onChange:this.hashInputChange,onKeyDown:this.hashInputSubmit,placeholder:"hashtag"}),"                    "),r.createElement(o,{id:"hash-link",to:e},"Find"))))))}});t.exports=i},{lodash:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/lodash/index.js",react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js","react-router":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/index.js"}],"/Users/Dane/Projects/meetup/twitter-stream/app/components/feed/Feed.react.js":[function(e,t,n){"use strict";var r=e("react"),o=e("./Tweet.react"),s=r.createClass({displayName:"Feed",componentWillReceiveProps:function(e){var t=e.tweets;this.setState({tweets:t})},getInitialState:function(){return{tweets:this.props.tweets}},render:function(){var e=this.state.tweets.map(function(e){return r.createElement("li",{className:"tweet",key:e.id},r.createElement(o,{tweet:e}))});return r.createElement("div",{id:"tweet-feed"},r.createElement("ol",{className:"tweets"},e))}});t.exports=s},{"./Tweet.react":"/Users/Dane/Projects/meetup/twitter-stream/app/components/feed/Tweet.react.js",react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js"}],"/Users/Dane/Projects/meetup/twitter-stream/app/components/feed/Tweet.react.js":[function(e,t,n){"use strict";var r=e("react"),o=r.createClass({displayName:"Tweet",render:function(){var e=this.props.tweet,t="https://twitter.com/"+e.user.screen_name;return r.createElement("div",{className:"tweet-container"},r.createElement("div",{className:"profile-pic"},r.createElement("a",{href:t},r.createElement("img",{src:e.user.profile_image_url,alt:""}))),r.createElement("div",{className:"content-box"},r.createElement("div",{className:"tweet-meta"},r.createElement("h2",{className:"user-name"},e.user.name," ",r.createElement("small",null,r.createElement("a",{href:t},"@",e.user.screen_name))),r.createElement("div",{className:"content"},e.text))))}});t.exports=o},{react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js"}],"/Users/Dane/Projects/meetup/twitter-stream/app/components/pages/Hash.react.js":[function(e,t,n){"use strict";var r=e("react"),o=e("superagent"),s=e("bluebird"),i=e("../feed/Feed.react"),a=e("../Footer.react"),u=r.createClass({displayName:"Hash",getTweets:function(e){return new s(function(t,n){o.get("/hash/"+e).end(function(e,r){return e?n(e):t(r.body)})})},getInitialState:function(){var e=this.props.params.tag;return document.title="Tweets via: #"+e+" - BocaJS",{tweets:[]}},componentWillReceiveProps:function(e){var t=this,n=e.params.tag;document.title="Tweets via: #"+n+" - BocaJS",t.getTweets(n).then(function(e){t.setState({tweets:e})})["catch"](function(e){console.log(e)})},componentDidMount:function(){var e=this,t=this.props.params.tag;e.getTweets(t).then(function(t){e.setState({tweets:t})})["catch"](function(e){console.log(e)})},render:function(){return r.createElement("section",{id:"app-main"},r.createElement("div",{className:"contain"},r.createElement("h2",{className:"page-title"},"Recent ",r.createElement("span",{className:"hash"},"#",this.props.params.tag)," Tweets ",r.createElement("small",null,"(25)")),r.createElement(i,{tweets:this.state.tweets})),r.createElement(a,null))}});t.exports=u},{"../Footer.react":"/Users/Dane/Projects/meetup/twitter-stream/app/components/Footer.react.js","../feed/Feed.react":"/Users/Dane/Projects/meetup/twitter-stream/app/components/feed/Feed.react.js",bluebird:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/bluebird/js/browser/bluebird.js",react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js",superagent:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/superagent/lib/client.js"}],"/Users/Dane/Projects/meetup/twitter-stream/app/components/pages/Stream.react.js":[function(e,t,n){"use strict";var r=e("react"),o=e("superagent"),s=e("bluebird"),i=e("../feed/Feed.react"),a=e("../Footer.react"),u=r.createClass({displayName:"Stream",getTweets:function(e){return new s(function(t,n){o.get("/hash/"+e).end(function(e,r){return e?n(e):t(r.body)})})},getInitialState:function(){return{tweets:[],count:0}},componentDidMount:function(){var e=this;document.title="Streaming tweets via: #BocaJS";var t=io.connect("http://twitter-stream.dane.link");t.on("newTweet",function(t){var n=e.state.tweets,r=e.state.count+1;n.unshift(t),e.setState({tweets:n,count:r})}),e.getTweets("bocajs").then(function(t){e.setState({tweets:t})})["catch"](function(e){console.log(e)})},render:function(){return r.createElement("section",{id:"app-main"},r.createElement("div",{className:"contain"},r.createElement("h2",{className:"page-title"},r.createElement("span",{className:"hash"},"#BocaJS")," Live Streaming Tweets ",r.createElement("small",null,"(",this.state.count," new)")),r.createElement(i,{tweets:this.state.tweets})),r.createElement(a,null))}});t.exports=u},{"../Footer.react":"/Users/Dane/Projects/meetup/twitter-stream/app/components/Footer.react.js","../feed/Feed.react":"/Users/Dane/Projects/meetup/twitter-stream/app/components/feed/Feed.react.js",bluebird:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/bluebird/js/browser/bluebird.js",react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js",superagent:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/superagent/lib/client.js"}],"/Users/Dane/Projects/meetup/twitter-stream/app/routes.js":[function(e,t,n){"use strict";var r=e("react"),o=e("react-router"),s=e("./components/App.react"),i=e("./components/pages/Stream.react"),a=e("./components/pages/Hash.react"),u=o.Route,c=r.createElement(u,{handler:s},r.createElement(u,{name:"stream",path:"/",handler:i}),r.createElement(u,{name:"hash",path:":tag",handler:a}));t.exports=c},{"./components/App.react":"/Users/Dane/Projects/meetup/twitter-stream/app/components/App.react.js","./components/pages/Hash.react":"/Users/Dane/Projects/meetup/twitter-stream/app/components/pages/Hash.react.js","./components/pages/Stream.react":"/Users/Dane/Projects/meetup/twitter-stream/app/components/pages/Stream.react.js",react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js","react-router":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/index.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/bluebird/js/browser/bluebird.js":[function(e,t,n){(function(e,r){!function(e){if("object"==typeof n&&"undefined"!=typeof t)t.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var o;"undefined"!=typeof window?o=window:"undefined"!=typeof r?o=r:"undefined"!=typeof self&&(o=self),o.Promise=e()}}(function(){var t,n,o;return function s(e,t,n){function r(i,a){if(!t[i]){if(!e[i]){var u="function"==typeof _dereq_&&_dereq_;if(!a&&u)return u(i,!0);if(o)return o(i,!0);var c=new Error("Cannot find module '"+i+"'");throw c.code="MODULE_NOT_FOUND",c}var l=t[i]={exports:{}};e[i][0].call(l.exports,function(t){var n=e[i][1][t];return r(n?n:t)},l,l.exports,s,e,t,n)}return t[i].exports}for(var o="function"==typeof _dereq_&&_dereq_,i=0;i<n.length;i++)r(n[i]);return r}({1:[function(e,t,n){"use strict";t.exports=function(e){function t(e){var t=new n(e),r=t.promise();return t.setHowMany(1),t.setUnwrap(),t.init(),r}var n=e._SomePromiseArray;e.any=function(e){return t(e)},e.prototype.any=function(){return t(this)}}},{}],2:[function(e,t,n){"use strict";function r(){this._isTickUsed=!1,this._lateQueue=new l(16),this._normalQueue=new l(16),this._trampolineEnabled=!0;var e=this;this.drainQueues=function(){e._drainQueues()},this._schedule=c.isStatic?c(this.drainQueues):c}function o(e,t,n){this._lateQueue.push(e,t,n),this._queueTick()}function s(e,t,n){this._normalQueue.push(e,t,n),this._queueTick()}function i(e){this._normalQueue._pushOne(e),this._queueTick()}var a;try{throw new Error}catch(u){a=u}var c=e("./schedule.js"),l=e("./queue.js"),p=e("./util.js");r.prototype.disableTrampolineIfNecessary=function(){p.hasDevTools&&(this._trampolineEnabled=!1)},r.prototype.enableTrampoline=function(){this._trampolineEnabled||(this._trampolineEnabled=!0,this._schedule=function(e){setTimeout(e,0)})},r.prototype.haveItemsQueued=function(){return this._normalQueue.length()>0},r.prototype.throwLater=function(e,t){if(1===arguments.length&&(t=e,e=function(){throw t}),"undefined"!=typeof setTimeout)setTimeout(function(){e(t)},0);else try{this._schedule(function(){e(t)})}catch(n){throw new Error("No async scheduler available\n\n    See http://goo.gl/m3OTXk\n")}},p.hasDevTools?(c.isStatic&&(c=function(e){setTimeout(e,0)}),r.prototype.invokeLater=function(e,t,n){this._trampolineEnabled?o.call(this,e,t,n):this._schedule(function(){setTimeout(function(){e.call(t,n)},100)})},r.prototype.invoke=function(e,t,n){this._trampolineEnabled?s.call(this,e,t,n):this._schedule(function(){e.call(t,n)})},r.prototype.settlePromises=function(e){this._trampolineEnabled?i.call(this,e):this._schedule(function(){e._settlePromises()})}):(r.prototype.invokeLater=o,r.prototype.invoke=s,r.prototype.settlePromises=i),r.prototype.invokeFirst=function(e,t,n){this._normalQueue.unshift(e,t,n),this._queueTick()},r.prototype._drainQueue=function(e){for(;e.length()>0;){var t=e.shift();if("function"==typeof t){var n=e.shift(),r=e.shift();t.call(n,r)}else t._settlePromises()}},r.prototype._drainQueues=function(){this._drainQueue(this._normalQueue),this._reset(),this._drainQueue(this._lateQueue)},r.prototype._queueTick=function(){this._isTickUsed||(this._isTickUsed=!0,this._schedule(this.drainQueues))},r.prototype._reset=function(){this._isTickUsed=!1},t.exports=new r,t.exports.firstLineError=a},{"./queue.js":28,"./schedule.js":31,"./util.js":38}],3:[function(e,t,n){"use strict";t.exports=function(e,t,n){var r=function(e,t){this._reject(t)},o=function(e,t){t.promiseRejectionQueued=!0,t.bindingPromise._then(r,r,null,this,e)},s=function(e,t){this._setBoundTo(e),this._isPending()&&this._resolveCallback(t.target)},i=function(e,t){t.promiseRejectionQueued||this._reject(e)};e.prototype.bind=function(r){var a=n(r),u=new e(t);u._propagateFrom(this,1);var c=this._target();if(a instanceof e){var l={promiseRejectionQueued:!1,promise:u,target:c,bindingPromise:a};c._then(t,o,u._progress,u,l),a._then(s,i,u._progress,u,l)}else u._setBoundTo(r),u._resolveCallback(c);return u},e.prototype._setBoundTo=function(e){void 0!==e?(this._bitField=131072|this._bitField,this._boundTo=e):this._bitField=-131073&this._bitField},e.prototype._isBound=function(){return 131072===(131072&this._bitField)},e.bind=function(r,o){var s=n(r),i=new e(t);return s instanceof e?s._then(function(e){i._setBoundTo(e),i._resolveCallback(o)},i._reject,i._progress,i,null):(i._setBoundTo(r),i._resolveCallback(o)),i}}},{}],4:[function(e,t,n){"use strict";function r(){try{Promise===s&&(Promise=o)}catch(e){}return s}var o;"undefined"!=typeof Promise&&(o=Promise);var s=e("./promise.js")();s.noConflict=r,t.exports=s},{"./promise.js":23}],5:[function(e,t,n){"use strict";var r=Object.create;if(r){var o=r(null),s=r(null);o[" size"]=s[" size"]=0}t.exports=function(t){function n(e,n){var r;if(null!=e&&(r=e[n]),"function"!=typeof r){var o="Object "+a.classString(e)+" has no method '"+a.toString(n)+"'";throw new t.TypeError(o)}return r}function r(e){var t=this.pop(),r=n(e,t);return r.apply(e,this)}function o(e){return e[this]}function s(e){var t=+this;return 0>t&&(t=Math.max(0,t+e.length)),e[t]}{var i,a=e("./util.js"),u=a.canEvaluate;a.isIdentifier}t.prototype.call=function(e){for(var t=arguments.length,n=new Array(t-1),o=1;t>o;++o)n[o-1]=arguments[o];return n.push(e),this._then(r,void 0,void 0,n,void 0)},t.prototype.get=function(e){var t,n="number"==typeof e;if(n)t=s;else if(u){var r=i(e);t=null!==r?r:o}else t=o;return this._then(t,void 0,void 0,e,void 0)}}},{"./util.js":38}],6:[function(e,t,n){"use strict";t.exports=function(t){var n=e("./errors.js"),r=e("./async.js"),o=n.CancellationError;t.prototype._cancel=function(e){if(!this.isCancellable())return this;for(var t,n=this;void 0!==(t=n._cancellationParent)&&t.isCancellable();)n=t;this._unsetCancellable(),n._target()._rejectCallback(e,!1,!0)},t.prototype.cancel=function(e){return this.isCancellable()?(void 0===e&&(e=new o),r.invokeLater(this._cancel,this,e),this):this},t.prototype.cancellable=function(){return this._cancellable()?this:(r.enableTrampoline(),this._setCancellable(),this._cancellationParent=void 0,this)},t.prototype.uncancellable=function(){var e=this.then();return e._unsetCancellable(),e},t.prototype.fork=function(e,t,n){var r=this._then(e,t,n,void 0,void 0);return r._setCancellable(),r._cancellationParent=void 0,r}}},{"./async.js":2,"./errors.js":13}],7:[function(t,n,r){"use strict";n.exports=function(){function n(e){this._parent=e;var t=this._length=1+(void 0===e?0:e._length);j(this,n),t>32&&this.uncycle()}function r(e,t){for(var n=0;n<t.length-1;++n)t[n].push("From previous event:"),t[n]=t[n].join("\n");return n<t.length&&(t[n]=t[n].join("\n")),e+"\n"+t.join("\n")}function o(e){for(var t=0;t<e.length;++t)(0===e[t].length||t+1<e.length&&e[t][0]===e[t+1][0])&&(e.splice(t,1),t--)}function s(e){for(var t=e[0],n=1;n<e.length;++n){for(var r=e[n],o=t.length-1,s=t[o],i=-1,a=r.length-1;a>=0;--a)if(r[a]===s){i=a;break}for(var a=i;a>=0;--a){var u=r[a];if(t[o]!==u)break;t.pop(),o--}t=r}}function i(e){for(var t=[],n=0;n<e.length;++n){var r=e[n],o=h.test(r)||"    (No stack trace)"===r,s=o&&y(r);o&&!s&&(_&&" "!==r.charAt(0)&&(r="    "+r),t.push(r))}return t}function a(e){for(var t=e.stack.replace(/\s+$/g,"").split("\n"),n=0;n<t.length;++n){var r=t[n];if("    (No stack trace)"===r||h.test(r))break}return n>0&&(t=t.slice(n)),t}function u(e){var t;if("function"==typeof e)t="[function "+(e.name||"anonymous")+"]";else{t=e.toString();var n=/\[object [a-zA-Z0-9$_]+\]/;if(n.test(t))try{var r=JSON.stringify(e);t=r}catch(o){}0===t.length&&(t="(empty array)")}return"(<"+c(t)+">, no stack trace)"}function c(e){var t=41;return e.length<t?e:e.substr(0,t-3)+"..."}function l(e){var t=e.match(g);return t?{fileName:t[1],line:parseInt(t[2],10)}:void 0}var p,d=t("./async.js"),m=t("./util.js"),f=/[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo|instrumented)/,h=null,v=null,_=!1;m.inherits(n,Error),n.prototype.uncycle=function(){var e=this._length;if(!(2>e)){for(var t=[],n={},r=0,o=this;void 0!==o;++r)t.push(o),o=o._parent;e=this._length=r;for(var r=e-1;r>=0;--r){var s=t[r].stack;void 0===n[s]&&(n[s]=r)}for(var r=0;e>r;++r){var i=t[r].stack,a=n[i];if(void 0!==a&&a!==r){a>0&&(t[a-1]._parent=void 0,t[a-1]._length=1),t[r]._parent=void 0,t[r]._length=1;var u=r>0?t[r-1]:this;e-1>a?(u._parent=t[a+1],u._parent.uncycle(),u._length=u._parent._length+1):(u._parent=void 0,u._length=1);for(var c=u._length+1,l=r-2;l>=0;--l)t[l]._length=c,c++;return}}}},n.prototype.parent=function(){return this._parent},n.prototype.hasParent=function(){return void 0!==this._parent},n.prototype.attachExtraTrace=function(e){if(!e.__stackCleaned__){this.uncycle();for(var t=n.parseStackAndMessage(e),a=t.message,u=[t.stack],c=this;void 0!==c;)u.push(i(c.stack.split("\n"))),c=c._parent;s(u),o(u),m.notEnumerableProp(e,"stack",r(a,u)),m.notEnumerableProp(e,"__stackCleaned__",!0)}},n.parseStackAndMessage=function(e){var t=e.stack,n=e.toString();return t="string"==typeof t&&t.length>0?a(e):["    (No stack trace)"],{message:n,stack:i(t)}},n.formatAndLogError=function(e,t){if("undefined"!=typeof console){var n;if("object"==typeof e||"function"==typeof e){var r=e.stack;n=t+v(r,e)}else n=t+String(e);"function"==typeof p?p(n):("function"==typeof console.log||"object"==typeof console.log)&&console.log(n)}},n.unhandledRejection=function(e){n.formatAndLogError(e,"^--- With additional stack trace: ")},n.isSupported=function(){return"function"==typeof j},n.fireRejectionEvent=function(e,t,r,o){var s=!1;try{"function"==typeof t&&(s=!0,"rejectionHandled"===e?t(o):t(r,o))}catch(i){d.throwLater(i)}var a=!1;try{a=w(e,r,o)}catch(i){a=!0,d.throwLater(i)}var u=!1;if(b)try{u=b(e.toLowerCase(),{reason:r,promise:o})}catch(i){u=!0,d.throwLater(i)}a||s||u||"unhandledRejection"!==e||n.formatAndLogError(r,"Unhandled rejection ")};var y=function(){return!1},g=/[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;n.setBounds=function(e,t){if(n.isSupported()){for(var r,o,s=e.stack.split("\n"),i=t.stack.split("\n"),a=-1,u=-1,c=0;c<s.length;++c){var p=l(s[c]);if(p){r=p.fileName,a=p.line;break}}for(var c=0;c<i.length;++c){var p=l(i[c]);if(p){o=p.fileName,u=p.line;break}}0>a||0>u||!r||!o||r!==o||a>=u||(y=function(e){if(f.test(e))return!0;var t=l(e);return t&&t.fileName===r&&a<=t.line&&t.line<=u?!0:!1})}};var b,j=function(){var e=/^\s*at\s*/,t=function(e,t){return"string"==typeof e?e:void 0!==t.name&&void 0!==t.message?t.toString():u(t)};if("number"==typeof Error.stackTraceLimit&&"function"==typeof Error.captureStackTrace){Error.stackTraceLimit=Error.stackTraceLimit+6,h=e,v=t;var n=Error.captureStackTrace;return y=function(e){return f.test(e)},function(e,t){Error.stackTraceLimit=Error.stackTraceLimit+6,n(e,t),Error.stackTraceLimit=Error.stackTraceLimit-6}}var r=new Error;if("string"==typeof r.stack&&r.stack.split("\n")[0].indexOf("stackDetection@")>=0)return h=/@/,v=t,_=!0,function(e){e.stack=(new Error).stack};var o;try{throw new Error}catch(s){o="stack"in s}return"stack"in r||!o||"number"!=typeof Error.stackTraceLimit?(v=function(e,t){return"string"==typeof e?e:"object"!=typeof t&&"function"!=typeof t||void 0===t.name||void 0===t.message?u(t):t.toString()},null):(h=e,v=t,function(e){Error.stackTraceLimit=Error.stackTraceLimit+6;try{throw new Error}catch(t){e.stack=t.stack}Error.stackTraceLimit=Error.stackTraceLimit-6})}([]),w=function(){if(m.isNode)return function(t,n,r){return"rejectionHandled"===t?e.emit(t,r):e.emit(t,n,r)};var t=!1,n=!0;try{var r=new self.CustomEvent("test");t=r instanceof CustomEvent}catch(o){}if(!t)try{var s=document.createEvent("CustomEvent");s.initCustomEvent("testingtheevent",!1,!0,{}),self.dispatchEvent(s)}catch(o){n=!1}n&&(b=function(e,n){var r;return t?r=new self.CustomEvent(e,{detail:n,bubbles:!1,cancelable:!0}):self.dispatchEvent&&(r=document.createEvent("CustomEvent"),r.initCustomEvent(e,!1,!0,n)),r?!self.dispatchEvent(r):!1});var i={};return i.unhandledRejection="onunhandledRejection".toLowerCase(),i.rejectionHandled="onrejectionHandled".toLowerCase(),function(e,t,n){var r=i[e],o=self[r];return o?("rejectionHandled"===e?o.call(self,n):o.call(self,t,n),!0):!1}}();return"undefined"!=typeof console&&"undefined"!=typeof console.warn&&(p=function(e){console.warn(e)},m.isNode&&e.stderr.isTTY?p=function(t){e.stderr.write("[31m"+t+"[39m\n")}:m.isNode||"string"!=typeof(new Error).stack||(p=function(e){console.warn("%c"+e,"color: red")})),n}},{"./async.js":2,"./util.js":38}],8:[function(e,t,n){"use strict";t.exports=function(t){function n(e,t,n){this._instances=e,this._callback=t,this._promise=n}function r(e,t){var n={},r=i(e).call(n,t);if(r===a)return r;var o=u(n);return o.length?(a.e=new c("Catch filter must inherit from Error or be a simple predicate function\n\n    See http://goo.gl/o84o68\n"),a):r}var o=e("./util.js"),s=e("./errors.js"),i=o.tryCatch,a=o.errorObj,u=e("./es5.js").keys,c=s.TypeError;return n.prototype.doFilter=function(e){for(var n=this._callback,o=this._promise,s=o._boundTo,u=0,c=this._instances.length;c>u;++u){var l=this._instances[u],p=l===Error||null!=l&&l.prototype instanceof Error;if(p&&e instanceof l){var d=i(n).call(s,e);return d===a?(t.e=d.e,t):d}if("function"==typeof l&&!p){var m=r(l,e);if(m===a){e=a.e;break}if(m){var d=i(n).call(s,e);return d===a?(t.e=d.e,t):d}}}return t.e=e,t},n}},{"./errors.js":13,"./es5.js":14,"./util.js":38}],9:[function(e,t,n){"use strict";t.exports=function(e,t,n){function r(){this._trace=new t(s())}function o(){return n()?new r:void 0}function s(){var e=i.length-1;return e>=0?i[e]:void 0}var i=[];return r.prototype._pushContext=function(){n()&&void 0!==this._trace&&i.push(this._trace)},r.prototype._popContext=function(){n()&&void 0!==this._trace&&i.pop()},e.prototype._peekContext=s,e.prototype._pushContext=r.prototype._pushContext,e.prototype._popContext=r.prototype._popContext,o}},{}],10:[function(t,n,r){"use strict";n.exports=function(n,r){var o,s,i=n._getDomain,a=t("./async.js"),u=t("./errors.js").Warning,c=t("./util.js"),l=c.canAttachTrace,p=!1||c.isNode&&(!!e.env.BLUEBIRD_DEBUG||"development"===e.env.NODE_ENV);return p&&a.disableTrampolineIfNecessary(),n.prototype._ignoreRejections=function(){this._unsetRejectionIsUnhandled(),this._bitField=16777216|this._bitField},n.prototype._ensurePossibleRejectionHandled=function(){0===(16777216&this._bitField)&&(this._setRejectionIsUnhandled(),a.invokeLater(this._notifyUnhandledRejection,this,void 0))},n.prototype._notifyUnhandledRejectionIsHandled=function(){r.fireRejectionEvent("rejectionHandled",o,void 0,this)},n.prototype._notifyUnhandledRejection=function(){if(this._isRejectionUnhandled()){var e=this._getCarriedStackTrace()||this._settledValue;this._setUnhandledRejectionIsNotified(),r.fireRejectionEvent("unhandledRejection",s,e,this)}},n.prototype._setUnhandledRejectionIsNotified=function(){this._bitField=524288|this._bitField},n.prototype._unsetUnhandledRejectionIsNotified=function(){this._bitField=-524289&this._bitField},n.prototype._isUnhandledRejectionNotified=function(){return(524288&this._bitField)>0},n.prototype._setRejectionIsUnhandled=function(){this._bitField=2097152|this._bitField},n.prototype._unsetRejectionIsUnhandled=function(){this._bitField=-2097153&this._bitField,this._isUnhandledRejectionNotified()&&(this._unsetUnhandledRejectionIsNotified(),this._notifyUnhandledRejectionIsHandled())},n.prototype._isRejectionUnhandled=function(){return(2097152&this._bitField)>0},n.prototype._setCarriedStackTrace=function(e){this._bitField=1048576|this._bitField,this._fulfillmentHandler0=e},n.prototype._isCarryingStackTrace=function(){return(1048576&this._bitField)>0},n.prototype._getCarriedStackTrace=function(){return this._isCarryingStackTrace()?this._fulfillmentHandler0:void 0},n.prototype._captureStackTrace=function(){return p&&(this._trace=new r(this._peekContext())),this},n.prototype._attachExtraTrace=function(e,t){if(p&&l(e)){var n=this._trace;if(void 0!==n&&t&&(n=n._parent),void 0!==n)n.attachExtraTrace(e);else if(!e.__stackCleaned__){var o=r.parseStackAndMessage(e);c.notEnumerableProp(e,"stack",o.message+"\n"+o.stack.join("\n")),c.notEnumerableProp(e,"__stackCleaned__",!0)}}},n.prototype._warn=function(e){var t=new u(e),n=this._peekContext();if(n)n.attachExtraTrace(t);else{var o=r.parseStackAndMessage(t);t.stack=o.message+"\n"+o.stack.join("\n")}r.formatAndLogError(t,"")},n.onPossiblyUnhandledRejection=function(e){var t=i();s="function"==typeof e?null===t?e:t.bind(e):void 0},n.onUnhandledRejectionHandled=function(e){var t=i();o="function"==typeof e?null===t?e:t.bind(e):void 0},n.longStackTraces=function(){if(a.haveItemsQueued()&&p===!1)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/DT1qyG\n");p=r.isSupported(),p&&a.disableTrampolineIfNecessary()},n.hasLongStackTraces=function(){return p&&r.isSupported()},r.isSupported()||(n.longStackTraces=function(){},p=!1),function(){return p}}},{"./async.js":2,"./errors.js":13,"./util.js":38}],11:[function(e,t,n){"use strict";var r=e("./util.js"),o=r.isPrimitive;t.exports=function(e){var t=function(){return this},n=function(){throw this},r=function(){},s=function(){throw void 0},i=function(e,t){return 1===t?function(){throw e}:2===t?function(){return e}:void 0};e.prototype["return"]=e.prototype.thenReturn=function(e){return void 0===e?this.then(r):o(e)?this._then(i(e,2),void 0,void 0,void 0,void 0):this._then(t,void 0,void 0,e,void 0)},e.prototype["throw"]=e.prototype.thenThrow=function(e){return void 0===e?this.then(s):o(e)?this._then(i(e,1),void 0,void 0,void 0,void 0):this._then(n,void 0,void 0,e,void 0)}}},{"./util.js":38}],12:[function(e,t,n){"use strict";t.exports=function(e,t){var n=e.reduce;e.prototype.each=function(e){return n(this,e,null,t)},e.each=function(e,r){return n(e,r,null,t)}}},{}],13:[function(e,t,n){"use strict";function r(e,t){function n(r){return this instanceof n?(p(this,"message","string"==typeof r?r:t),p(this,"name",e),void(Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):Error.call(this))):new n(r)}return l(n,Error),n}function o(e){return this instanceof o?(p(this,"name","OperationalError"),p(this,"message",e),this.cause=e,this.isOperational=!0,void(e instanceof Error?(p(this,"message",e.message),p(this,"stack",e.stack)):Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor))):new o(e)}var s,i,a=e("./es5.js"),u=a.freeze,c=e("./util.js"),l=c.inherits,p=c.notEnumerableProp,d=r("Warning","warning"),m=r("CancellationError","cancellation error"),f=r("TimeoutError","timeout error"),h=r("AggregateError","aggregate error");try{s=TypeError,i=RangeError}catch(v){s=r("TypeError","type error"),i=r("RangeError","range error")}for(var _="join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "),y=0;y<_.length;++y)"function"==typeof Array.prototype[_[y]]&&(h.prototype[_[y]]=Array.prototype[_[y]]);a.defineProperty(h.prototype,"length",{value:0,configurable:!1,writable:!0,enumerable:!0}),h.prototype.isOperational=!0;var g=0;h.prototype.toString=function(){var e=Array(4*g+1).join(" "),t="\n"+e+"AggregateError of:\n";g++,e=Array(4*g+1).join(" ");for(var n=0;n<this.length;++n){for(var r=this[n]===this?"[Circular AggregateError]":this[n]+"",o=r.split("\n"),s=0;s<o.length;++s)o[s]=e+o[s];r=o.join("\n"),t+=r+"\n"}return g--,t},l(o,Error);var b=Error.__BluebirdErrorTypes__;b||(b=u({CancellationError:m,TimeoutError:f,OperationalError:o,RejectionError:o,AggregateError:h}),p(Error,"__BluebirdErrorTypes__",b)),t.exports={Error:Error,TypeError:s,RangeError:i,CancellationError:b.CancellationError,OperationalError:b.OperationalError,TimeoutError:b.TimeoutError,AggregateError:b.AggregateError,Warning:d}},{"./es5.js":14,"./util.js":38}],14:[function(e,t,n){var r=function(){"use strict";return void 0===this}();if(r)t.exports={freeze:Object.freeze,defineProperty:Object.defineProperty,getDescriptor:Object.getOwnPropertyDescriptor,keys:Object.keys,names:Object.getOwnPropertyNames,getPrototypeOf:Object.getPrototypeOf,isArray:Array.isArray,isES5:r,propertyIsWritable:function(e,t){var n=Object.getOwnPropertyDescriptor(e,t);return!(n&&!n.writable&&!n.set)}};else{var o={}.hasOwnProperty,s={}.toString,i={}.constructor.prototype,a=function(e){var t=[];for(var n in e)o.call(e,n)&&t.push(n);return t},u=function(e,t){return{value:e[t]}},c=function(e,t,n){return e[t]=n.value,e},l=function(e){return e},p=function(e){try{return Object(e).constructor.prototype}catch(t){return i}},d=function(e){try{return"[object Array]"===s.call(e)}catch(t){return!1}};t.exports={isArray:d,keys:a,names:a,defineProperty:c,getDescriptor:u,freeze:l,getPrototypeOf:p,isES5:r,propertyIsWritable:function(){return!0}}}},{}],15:[function(e,t,n){"use strict";t.exports=function(e,t){var n=e.map;e.prototype.filter=function(e,r){return n(this,e,r,t)},e.filter=function(e,r,o){return n(e,r,o,t)}}},{}],16:[function(e,t,n){"use strict";t.exports=function(t,n,r){function o(){return this}function s(){throw this}function i(e){return function(){return e}}function a(e){return function(){throw e}}function u(e,t,n){var r;return r=d(t)?n?i(t):a(t):n?o:s,e._then(r,m,void 0,t,void 0)}function c(e){var o=this.promise,s=this.handler,i=o._isBound()?s.call(o._boundTo):s();if(void 0!==i){var a=r(i,o);if(a instanceof t)return a=a._target(),u(a,e,o.isFulfilled())}return o.isRejected()?(n.e=e,n):e}function l(e){var n=this.promise,o=this.handler,s=n._isBound()?o.call(n._boundTo,e):o(e);if(void 0!==s){var i=r(s,n);if(i instanceof t)return i=i._target(),u(i,e,!0)}return e}var p=e("./util.js"),d=p.isPrimitive,m=p.thrower;t.prototype._passThroughHandler=function(e,t){if("function"!=typeof e)return this.then();var n={promise:this,handler:e};return this._then(t?c:l,t?c:void 0,void 0,n,void 0)},t.prototype.lastly=t.prototype["finally"]=function(e){return this._passThroughHandler(e,!0)},t.prototype.tap=function(e){return this._passThroughHandler(e,!1)}}},{"./util.js":38}],17:[function(e,t,n){"use strict";t.exports=function(t,n,r,o){function s(e,n,r){for(var s=0;s<n.length;++s){r._pushContext();var i=p(n[s])(e);if(r._popContext(),i===l){r._pushContext();var a=t.reject(l.e);return r._popContext(),a}var u=o(i,r);if(u instanceof t)return u}return null}function i(e,n,o,s){var i=this._promise=new t(r);i._captureStackTrace(),this._stack=s,this._generatorFunction=e,this._receiver=n,this._generator=void 0,this._yieldHandlers="function"==typeof o?[o].concat(d):d}var a=e("./errors.js"),u=a.TypeError,c=e("./util.js"),l=c.errorObj,p=c.tryCatch,d=[];i.prototype.promise=function(){return this._promise;

},i.prototype._run=function(){this._generator=this._generatorFunction.call(this._receiver),this._receiver=this._generatorFunction=void 0,this._next(void 0)},i.prototype._continue=function(e){if(e===l)return this._promise._rejectCallback(e.e,!1,!0);var n=e.value;if(e.done===!0)this._promise._resolveCallback(n);else{var r=o(n,this._promise);if(!(r instanceof t)&&(r=s(r,this._yieldHandlers,this._promise),null===r))return void this._throw(new u("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/4Y4pDk\n\n".replace("%s",n)+"From coroutine:\n"+this._stack.split("\n").slice(1,-7).join("\n")));r._then(this._next,this._throw,void 0,this,null)}},i.prototype._throw=function(e){this._promise._attachExtraTrace(e),this._promise._pushContext();var t=p(this._generator["throw"]).call(this._generator,e);this._promise._popContext(),this._continue(t)},i.prototype._next=function(e){this._promise._pushContext();var t=p(this._generator.next).call(this._generator,e);this._promise._popContext(),this._continue(t)},t.coroutine=function(e,t){if("function"!=typeof e)throw new u("generatorFunction must be a function\n\n    See http://goo.gl/6Vqhm0\n");var n=Object(t).yieldHandler,r=i,o=(new Error).stack;return function(){var t=e.apply(this,arguments),s=new r(void 0,void 0,n,o);return s._generator=t,s._next(void 0),s.promise()}},t.coroutine.addYieldHandler=function(e){if("function"!=typeof e)throw new u("fn must be a function\n\n    See http://goo.gl/916lJJ\n");d.push(e)},t.spawn=function(e){if("function"!=typeof e)return n("generatorFunction must be a function\n\n    See http://goo.gl/6Vqhm0\n");var r=new i(e,this),o=r.promise();return r._run(t.spawn),o}}},{"./errors.js":13,"./util.js":38}],18:[function(e,t,n){"use strict";t.exports=function(t,n,r,o){{var s=e("./util.js");s.canEvaluate,s.tryCatch,s.errorObj}t.join=function(){var e,t=arguments.length-1;if(t>0&&"function"==typeof arguments[t]){e=arguments[t];var r}for(var o=arguments.length,s=new Array(o),i=0;o>i;++i)s[i]=arguments[i];e&&s.pop();var r=new n(s).promise();return void 0!==e?r.spread(e):r}}},{"./util.js":38}],19:[function(e,t,n){"use strict";t.exports=function(t,n,r,o,s){function i(e,t,n,r){this.constructor$(e),this._promise._captureStackTrace(),this._callback=t,this._preservedValues=r===s?new Array(this.length()):null,this._limit=n,this._inFlight=0,this._queue=n>=1?[]:f,c.invoke(a,this,void 0)}function a(){this._init$(void 0,-2)}function u(e,t,n,r){var o="object"==typeof n&&null!==n?n.concurrency:0;return o="number"==typeof o&&isFinite(o)&&o>=1?o:0,new i(e,t,o,r)}var c=e("./async.js"),l=e("./util.js"),p=l.tryCatch,d=l.errorObj,m={},f=[];l.inherits(i,n),i.prototype._init=function(){},i.prototype._promiseFulfilled=function(e,n){var r=this._values,s=this.length(),i=this._preservedValues,a=this._limit;if(r[n]===m){if(r[n]=e,a>=1&&(this._inFlight--,this._drainQueue(),this._isResolved()))return}else{if(a>=1&&this._inFlight>=a)return r[n]=e,void this._queue.push(n);null!==i&&(i[n]=e);var u=this._callback,c=this._promise._boundTo;this._promise._pushContext();var l=p(u).call(c,e,n,s);if(this._promise._popContext(),l===d)return this._reject(l.e);var f=o(l,this._promise);if(f instanceof t){if(f=f._target(),f._isPending())return a>=1&&this._inFlight++,r[n]=m,f._proxyPromiseArray(this,n);if(!f._isFulfilled())return this._reject(f._reason());l=f._value()}r[n]=l}var h=++this._totalResolved;h>=s&&(null!==i?this._filter(r,i):this._resolve(r))},i.prototype._drainQueue=function(){for(var e=this._queue,t=this._limit,n=this._values;e.length>0&&this._inFlight<t;){if(this._isResolved())return;var r=e.pop();this._promiseFulfilled(n[r],r)}},i.prototype._filter=function(e,t){for(var n=t.length,r=new Array(n),o=0,s=0;n>s;++s)e[s]&&(r[o++]=t[s]);r.length=o,this._resolve(r)},i.prototype.preservedValues=function(){return this._preservedValues},t.prototype.map=function(e,t){return"function"!=typeof e?r("fn must be a function\n\n    See http://goo.gl/916lJJ\n"):u(this,e,t,null).promise()},t.map=function(e,t,n,o){return"function"!=typeof t?r("fn must be a function\n\n    See http://goo.gl/916lJJ\n"):u(e,t,n,o).promise()}}},{"./async.js":2,"./util.js":38}],20:[function(e,t,n){"use strict";t.exports=function(t,n,r,o){var s=e("./util.js"),i=s.tryCatch;t.method=function(e){if("function"!=typeof e)throw new t.TypeError("fn must be a function\n\n    See http://goo.gl/916lJJ\n");return function(){var r=new t(n);r._captureStackTrace(),r._pushContext();var o=i(e).apply(this,arguments);return r._popContext(),r._resolveFromSyncValue(o),r}},t.attempt=t["try"]=function(e,r,a){if("function"!=typeof e)return o("fn must be a function\n\n    See http://goo.gl/916lJJ\n");var u=new t(n);u._captureStackTrace(),u._pushContext();var c=s.isArray(r)?i(e).apply(a,r):i(e).call(a,r);return u._popContext(),u._resolveFromSyncValue(c),u},t.prototype._resolveFromSyncValue=function(e){e===s.errorObj?this._rejectCallback(e.e,!1,!0):this._resolveCallback(e,!0)}}},{"./util.js":38}],21:[function(e,t,n){"use strict";t.exports=function(t){function n(e,t){var n=this;if(!s.isArray(e))return r.call(n,e,t);var o=a(t).apply(n._boundTo,[null].concat(e));o===u&&i.throwLater(o.e)}function r(e,t){var n=this,r=n._boundTo,o=void 0===e?a(t).call(r,null):a(t).call(r,null,e);o===u&&i.throwLater(o.e)}function o(e,t){var n=this;if(!e){var r=n._target(),o=r._getCarriedStackTrace();o.cause=e,e=o}var s=a(t).call(n._boundTo,e);s===u&&i.throwLater(s.e)}var s=e("./util.js"),i=e("./async.js"),a=s.tryCatch,u=s.errorObj;t.prototype.asCallback=t.prototype.nodeify=function(e,t){if("function"==typeof e){var s=r;void 0!==t&&Object(t).spread&&(s=n),this._then(s,o,void 0,this,e)}return this}}},{"./async.js":2,"./util.js":38}],22:[function(e,t,n){"use strict";t.exports=function(t,n){var r=e("./util.js"),o=e("./async.js"),s=r.tryCatch,i=r.errorObj;t.prototype.progressed=function(e){return this._then(void 0,void 0,e,void 0,void 0)},t.prototype._progress=function(e){this._isFollowingOrFulfilledOrRejected()||this._target()._progressUnchecked(e)},t.prototype._progressHandlerAt=function(e){return 0===e?this._progressHandler0:this[(e<<2)+e-5+2]},t.prototype._doProgressWith=function(e){var n=e.value,o=e.handler,a=e.promise,u=e.receiver,c=s(o).call(u,n);if(c===i){if(null!=c.e&&"StopProgressPropagation"!==c.e.name){var l=r.canAttachTrace(c.e)?c.e:new Error(r.toString(c.e));a._attachExtraTrace(l),a._progress(c.e)}}else c instanceof t?c._then(a._progress,null,null,a,void 0):a._progress(c)},t.prototype._progressUnchecked=function(e){for(var r=this._length(),s=this._progress,i=0;r>i;i++){var a=this._progressHandlerAt(i),u=this._promiseAt(i);if(u instanceof t)"function"==typeof a?o.invoke(this._doProgressWith,this,{handler:a,promise:u,receiver:this._receiverAt(i),value:e}):o.invoke(s,u,e);else{var c=this._receiverAt(i);"function"==typeof a?a.call(c,e,u):c instanceof n&&!c._isResolved()&&c._promiseProgressed(e,u)}}}}},{"./async.js":2,"./util.js":38}],23:[function(t,n,r){"use strict";n.exports=function(){function n(e){if("function"!=typeof e)throw new p("the promise constructor requires a resolver function\n\n    See http://goo.gl/EC22Yn\n");if(this.constructor!==n)throw new p("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/KsIlge\n");this._bitField=0,this._fulfillmentHandler0=void 0,this._rejectionHandler0=void 0,this._progressHandler0=void 0,this._promise0=void 0,this._receiver0=void 0,this._settledValue=void 0,e!==d&&this._resolveFromResolver(e)}function r(e){var t=new n(d);t._fulfillmentHandler0=e,t._rejectionHandler0=e,t._progressHandler0=e,t._promise0=e,t._receiver0=e,t._settledValue=e}var o,s=function(){return new p("circular promise resolution chain\n\n    See http://goo.gl/LhFpo0\n")},i=function(){return new n.PromiseInspection(this._target())},a=function(e){return n.reject(new p(e))},u=t("./util.js");o=u.isNode?function(){var t=e.domain;return void 0===t&&(t=null),t}:function(){return null},u.notEnumerableProp(n,"_getDomain",o);var c=t("./async.js"),l=t("./errors.js"),p=n.TypeError=l.TypeError;n.RangeError=l.RangeError,n.CancellationError=l.CancellationError,n.TimeoutError=l.TimeoutError,n.OperationalError=l.OperationalError,n.RejectionError=l.OperationalError,n.AggregateError=l.AggregateError;var d=function(){},m={},f={e:null},h=t("./thenables.js")(n,d),v=t("./promise_array.js")(n,d,h,a),_=t("./captured_trace.js")(),y=t("./debuggability.js")(n,_),g=t("./context.js")(n,_,y),b=t("./catch_filter.js")(f),j=t("./promise_resolver.js"),w=j._nodebackForPromise,E=u.errorObj,D=u.tryCatch;return n.prototype.toString=function(){return"[object Promise]"},n.prototype.caught=n.prototype["catch"]=function(e){var t=arguments.length;if(t>1){var r,o=new Array(t-1),s=0;for(r=0;t-1>r;++r){var i=arguments[r];if("function"!=typeof i)return n.reject(new p("Catch filter must inherit from Error or be a simple predicate function\n\n    See http://goo.gl/o84o68\n"));o[s++]=i}o.length=s,e=arguments[r];var a=new b(o,e,this);return this._then(void 0,a.doFilter,void 0,a,void 0)}return this._then(void 0,e,void 0,void 0,void 0)},n.prototype.reflect=function(){return this._then(i,i,void 0,this,void 0)},n.prototype.then=function(e,t,n){if(y()&&arguments.length>0&&"function"!=typeof e&&"function"!=typeof t){var r=".then() only accepts functions but was passed: "+u.classString(e);arguments.length>1&&(r+=", "+u.classString(t)),this._warn(r)}return this._then(e,t,n,void 0,void 0)},n.prototype.done=function(e,t,n){var r=this._then(e,t,n,void 0,void 0);r._setIsFinal()},n.prototype.spread=function(e,t){return this.all()._then(e,t,void 0,m,void 0)},n.prototype.isCancellable=function(){return!this.isResolved()&&this._cancellable()},n.prototype.toJSON=function(){var e={isFulfilled:!1,isRejected:!1,fulfillmentValue:void 0,rejectionReason:void 0};return this.isFulfilled()?(e.fulfillmentValue=this.value(),e.isFulfilled=!0):this.isRejected()&&(e.rejectionReason=this.reason(),e.isRejected=!0),e},n.prototype.all=function(){return new v(this).promise()},n.prototype.error=function(e){return this.caught(u.originatesFromRejection,e)},n.is=function(e){return e instanceof n},n.fromNode=function(e){var t=new n(d),r=D(e)(w(t));return r===E&&t._rejectCallback(r.e,!0,!0),t},n.all=function(e){return new v(e).promise()},n.defer=n.pending=function(){var e=new n(d);return new j(e)},n.cast=function(e){var t=h(e);if(!(t instanceof n)){var r=t;t=new n(d),t._fulfillUnchecked(r)}return t},n.resolve=n.fulfilled=n.cast,n.reject=n.rejected=function(e){var t=new n(d);return t._captureStackTrace(),t._rejectCallback(e,!0),t},n.setScheduler=function(e){if("function"!=typeof e)throw new p("fn must be a function\n\n    See http://goo.gl/916lJJ\n");var t=c._schedule;return c._schedule=e,t},n.prototype._then=function(e,t,r,s,i){var a=void 0!==i,u=a?i:new n(d);a||(u._propagateFrom(this,5),u._captureStackTrace());var l=this._target();l!==this&&(void 0===s&&(s=this._boundTo),a||u._setIsMigrated());var p=l._addCallbacks(e,t,r,u,s,o());return l._isResolved()&&!l._isSettlePromisesQueued()&&c.invoke(l._settlePromiseAtPostResolution,l,p),u},n.prototype._settlePromiseAtPostResolution=function(e){this._isRejectionUnhandled()&&this._unsetRejectionIsUnhandled(),this._settlePromiseAt(e)},n.prototype._length=function(){return 131071&this._bitField},n.prototype._isFollowingOrFulfilledOrRejected=function(){return(939524096&this._bitField)>0},n.prototype._isFollowing=function(){return 536870912===(536870912&this._bitField)},n.prototype._setLength=function(e){this._bitField=-131072&this._bitField|131071&e},n.prototype._setFulfilled=function(){this._bitField=268435456|this._bitField},n.prototype._setRejected=function(){this._bitField=134217728|this._bitField},n.prototype._setFollowing=function(){this._bitField=536870912|this._bitField},n.prototype._setIsFinal=function(){this._bitField=33554432|this._bitField},n.prototype._isFinal=function(){return(33554432&this._bitField)>0},n.prototype._cancellable=function(){return(67108864&this._bitField)>0},n.prototype._setCancellable=function(){this._bitField=67108864|this._bitField},n.prototype._unsetCancellable=function(){this._bitField=-67108865&this._bitField},n.prototype._setIsMigrated=function(){this._bitField=4194304|this._bitField},n.prototype._unsetIsMigrated=function(){this._bitField=-4194305&this._bitField},n.prototype._isMigrated=function(){return(4194304&this._bitField)>0},n.prototype._receiverAt=function(e){var t=0===e?this._receiver0:this[5*e-5+4];return void 0===t&&this._isBound()?this._boundTo:t},n.prototype._promiseAt=function(e){return 0===e?this._promise0:this[5*e-5+3]},n.prototype._fulfillmentHandlerAt=function(e){return 0===e?this._fulfillmentHandler0:this[5*e-5+0]},n.prototype._rejectionHandlerAt=function(e){return 0===e?this._rejectionHandler0:this[5*e-5+1]},n.prototype._migrateCallbacks=function(e,t){var r=e._fulfillmentHandlerAt(t),o=e._rejectionHandlerAt(t),s=e._progressHandlerAt(t),i=e._promiseAt(t),a=e._receiverAt(t);i instanceof n&&i._setIsMigrated(),this._addCallbacks(r,o,s,i,a,null)},n.prototype._addCallbacks=function(e,t,n,r,o,s){var i=this._length();if(i>=131066&&(i=0,this._setLength(0)),0===i)this._promise0=r,void 0!==o&&(this._receiver0=o),"function"!=typeof e||this._isCarryingStackTrace()||(this._fulfillmentHandler0=null===s?e:s.bind(e)),"function"==typeof t&&(this._rejectionHandler0=null===s?t:s.bind(t)),"function"==typeof n&&(this._progressHandler0=null===s?n:s.bind(n));else{var a=5*i-5;this[a+3]=r,this[a+4]=o,"function"==typeof e&&(this[a+0]=null===s?e:s.bind(e)),"function"==typeof t&&(this[a+1]=null===s?t:s.bind(t)),"function"==typeof n&&(this[a+2]=null===s?n:s.bind(n))}return this._setLength(i+1),i},n.prototype._setProxyHandlers=function(e,t){var n=this._length();if(n>=131066&&(n=0,this._setLength(0)),0===n)this._promise0=t,this._receiver0=e;else{var r=5*n-5;this[r+3]=t,this[r+4]=e}this._setLength(n+1)},n.prototype._proxyPromiseArray=function(e,t){this._setProxyHandlers(e,t)},n.prototype._resolveCallback=function(e,t){if(!this._isFollowingOrFulfilledOrRejected()){if(e===this)return this._rejectCallback(s(),!1,!0);var r=h(e,this);if(!(r instanceof n))return this._fulfill(e);var o=1|(t?4:0);this._propagateFrom(r,o);var i=r._target();if(i._isPending()){for(var a=this._length(),u=0;a>u;++u)i._migrateCallbacks(this,u);this._setFollowing(),this._setLength(0),this._setFollowee(i)}else i._isFulfilled()?this._fulfillUnchecked(i._value()):this._rejectUnchecked(i._reason(),i._getCarriedStackTrace())}},n.prototype._rejectCallback=function(e,t,n){n||u.markAsOriginatingFromRejection(e);var r=u.ensureErrorObject(e),o=r===e;this._attachExtraTrace(r,t?o:!1),this._reject(e,o?void 0:r)},n.prototype._resolveFromResolver=function(e){var t=this;this._captureStackTrace(),this._pushContext();var n=!0,r=D(e)(function(e){null!==t&&(t._resolveCallback(e),t=null)},function(e){null!==t&&(t._rejectCallback(e,n),t=null)});n=!1,this._popContext(),void 0!==r&&r===E&&null!==t&&(t._rejectCallback(r.e,!0,!0),t=null)},n.prototype._settlePromiseFromHandler=function(e,t,n,r){if(!r._isRejected()){r._pushContext();var o;if(o=t!==m||this._isRejected()?D(e).call(t,n):D(e).apply(this._boundTo,n),r._popContext(),o===E||o===r||o===f){var i=o===r?s():o.e;r._rejectCallback(i,!1,!0)}else r._resolveCallback(o)}},n.prototype._target=function(){for(var e=this;e._isFollowing();)e=e._followee();return e},n.prototype._followee=function(){return this._rejectionHandler0},n.prototype._setFollowee=function(e){this._rejectionHandler0=e},n.prototype._cleanValues=function(){this._cancellable()&&(this._cancellationParent=void 0)},n.prototype._propagateFrom=function(e,t){(1&t)>0&&e._cancellable()&&(this._setCancellable(),this._cancellationParent=e),(4&t)>0&&e._isBound()&&this._setBoundTo(e._boundTo)},n.prototype._fulfill=function(e){this._isFollowingOrFulfilledOrRejected()||this._fulfillUnchecked(e)},n.prototype._reject=function(e,t){this._isFollowingOrFulfilledOrRejected()||this._rejectUnchecked(e,t)},n.prototype._settlePromiseAt=function(e){var t=this._promiseAt(e),r=t instanceof n;if(r&&t._isMigrated())return t._unsetIsMigrated(),c.invoke(this._settlePromiseAt,this,e);var o=this._isFulfilled()?this._fulfillmentHandlerAt(e):this._rejectionHandlerAt(e),s=this._isCarryingStackTrace()?this._getCarriedStackTrace():void 0,i=this._settledValue,a=this._receiverAt(e);this._clearCallbackDataAtIndex(e),"function"==typeof o?r?this._settlePromiseFromHandler(o,a,i,t):o.call(a,i,t):a instanceof v?a._isResolved()||(this._isFulfilled()?a._promiseFulfilled(i,t):a._promiseRejected(i,t)):r&&(this._isFulfilled()?t._fulfill(i):t._reject(i,s)),e>=4&&4===(31&e)&&c.invokeLater(this._setLength,this,0)},n.prototype._clearCallbackDataAtIndex=function(e){if(0===e)this._isCarryingStackTrace()||(this._fulfillmentHandler0=void 0),this._rejectionHandler0=this._progressHandler0=this._receiver0=this._promise0=void 0;else{var t=5*e-5;this[t+3]=this[t+4]=this[t+0]=this[t+1]=this[t+2]=void 0}},n.prototype._isSettlePromisesQueued=function(){return-1073741824===(-1073741824&this._bitField)},n.prototype._setSettlePromisesQueued=function(){this._bitField=-1073741824|this._bitField},n.prototype._unsetSettlePromisesQueued=function(){this._bitField=1073741823&this._bitField},n.prototype._queueSettlePromises=function(){c.settlePromises(this),this._setSettlePromisesQueued()},n.prototype._fulfillUnchecked=function(e){if(e===this){var t=s();return this._attachExtraTrace(t),this._rejectUnchecked(t,void 0)}this._setFulfilled(),this._settledValue=e,this._cleanValues(),this._length()>0&&this._queueSettlePromises()},n.prototype._rejectUncheckedCheckError=function(e){var t=u.ensureErrorObject(e);this._rejectUnchecked(e,t===e?void 0:t)},n.prototype._rejectUnchecked=function(e,t){if(e===this){var n=s();return this._attachExtraTrace(n),this._rejectUnchecked(n)}return this._setRejected(),this._settledValue=e,this._cleanValues(),this._isFinal()?void c.throwLater(function(e){throw"stack"in e&&c.invokeFirst(_.unhandledRejection,void 0,e),e},void 0===t?e:t):(void 0!==t&&t!==e&&this._setCarriedStackTrace(t),void(this._length()>0?this._queueSettlePromises():this._ensurePossibleRejectionHandled()))},n.prototype._settlePromises=function(){this._unsetSettlePromisesQueued();for(var e=this._length(),t=0;e>t;t++)this._settlePromiseAt(t)},u.notEnumerableProp(n,"_makeSelfResolutionError",s),t("./progress.js")(n,v),t("./method.js")(n,d,h,a),t("./bind.js")(n,d,h),t("./finally.js")(n,f,h),t("./direct_resolve.js")(n),t("./synchronous_inspection.js")(n),t("./join.js")(n,v,h,d),n.Promise=n,t("./map.js")(n,v,a,h,d),t("./cancel.js")(n),t("./using.js")(n,a,h,g),t("./generators.js")(n,a,d,h),t("./nodeify.js")(n),t("./call_get.js")(n),t("./props.js")(n,v,h,a),t("./race.js")(n,d,h,a),t("./reduce.js")(n,v,a,h,d),t("./settle.js")(n,v),t("./some.js")(n,v,a),t("./promisify.js")(n,d),t("./any.js")(n),t("./each.js")(n,d),t("./timers.js")(n,d),t("./filter.js")(n,d),u.toFastProperties(n),u.toFastProperties(n.prototype),r({a:1}),r({b:2}),r({c:3}),r(1),r(function(){}),r(void 0),r(!1),r(new n(d)),_.setBounds(c.firstLineError,u.lastLineError),n}},{"./any.js":1,"./async.js":2,"./bind.js":3,"./call_get.js":5,"./cancel.js":6,"./captured_trace.js":7,"./catch_filter.js":8,"./context.js":9,"./debuggability.js":10,"./direct_resolve.js":11,"./each.js":12,"./errors.js":13,"./filter.js":15,"./finally.js":16,"./generators.js":17,"./join.js":18,"./map.js":19,"./method.js":20,"./nodeify.js":21,"./progress.js":22,"./promise_array.js":24,"./promise_resolver.js":25,"./promisify.js":26,"./props.js":27,"./race.js":29,"./reduce.js":30,"./settle.js":32,"./some.js":33,"./synchronous_inspection.js":34,"./thenables.js":35,"./timers.js":36,"./using.js":37,"./util.js":38}],24:[function(e,t,n){"use strict";t.exports=function(t,n,r,o){function s(e){switch(e){case-2:return[];case-3:return{}}}function i(e){var r,o=this._promise=new t(n);e instanceof t&&(r=e,o._propagateFrom(r,5)),this._values=e,this._length=0,this._totalResolved=0,this._init(void 0,-2)}var a=e("./util.js"),u=a.isArray;return i.prototype.length=function(){return this._length},i.prototype.promise=function(){return this._promise},i.prototype._init=function c(e,n){var i=r(this._values,this._promise);if(i instanceof t){if(i=i._target(),this._values=i,!i._isFulfilled())return i._isPending()?void i._then(c,this._reject,void 0,this,n):void this._reject(i._reason());if(i=i._value(),!u(i)){var a=new t.TypeError("expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n");return void this.__hardReject__(a)}}else if(!u(i))return void this._promise._reject(o("expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n")._reason());if(0===i.length)return void(-5===n?this._resolveEmptyArray():this._resolve(s(n)));var l=this.getActualLength(i.length);this._length=l,this._values=this.shouldCopyValues()?new Array(l):this._values;for(var p=this._promise,d=0;l>d;++d){var m=this._isResolved(),f=r(i[d],p);f instanceof t?(f=f._target(),m?f._ignoreRejections():f._isPending()?f._proxyPromiseArray(this,d):f._isFulfilled()?this._promiseFulfilled(f._value(),d):this._promiseRejected(f._reason(),d)):m||this._promiseFulfilled(f,d)}},i.prototype._isResolved=function(){return null===this._values},i.prototype._resolve=function(e){this._values=null,this._promise._fulfill(e)},i.prototype.__hardReject__=i.prototype._reject=function(e){this._values=null,this._promise._rejectCallback(e,!1,!0)},i.prototype._promiseProgressed=function(e,t){this._promise._progress({index:t,value:e})},i.prototype._promiseFulfilled=function(e,t){this._values[t]=e;var n=++this._totalResolved;n>=this._length&&this._resolve(this._values)},i.prototype._promiseRejected=function(e,t){this._totalResolved++,this._reject(e)},i.prototype.shouldCopyValues=function(){return!0},i.prototype.getActualLength=function(e){return e},i}},{"./util.js":38}],25:[function(e,t,n){"use strict";function r(e){return e instanceof Error&&m.getPrototypeOf(e)===Error.prototype}function o(e){var t;if(r(e)){t=new p(e),t.name=e.name,t.message=e.message,t.stack=e.stack;for(var n=m.keys(e),o=0;o<n.length;++o){var s=n[o];f.test(s)||(t[s]=e[s])}return t}return a.markAsOriginatingFromRejection(e),e}function s(e){return function(t,n){if(null!==e){if(t){var r=o(u(t));e._attachExtraTrace(r),e._reject(r)}else if(arguments.length>2){for(var s=arguments.length,i=new Array(s-1),a=1;s>a;++a)i[a-1]=arguments[a];e._fulfill(i)}else e._fulfill(n);e=null}}}var i,a=e("./util.js"),u=a.maybeWrapAsError,c=e("./errors.js"),l=c.TimeoutError,p=c.OperationalError,d=a.haveGetters,m=e("./es5.js"),f=/^(?:name|message|stack|cause)$/;if(i=d?function(e){this.promise=e}:function(e){this.promise=e,this.asCallback=s(e),this.callback=this.asCallback},d){var h={get:function(){return s(this.promise)}};m.defineProperty(i.prototype,"asCallback",h),m.defineProperty(i.prototype,"callback",h)}i._nodebackForPromise=s,i.prototype.toString=function(){return"[object PromiseResolver]"},i.prototype.resolve=i.prototype.fulfill=function(e){if(!(this instanceof i))throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n");this.promise._resolveCallback(e)},i.prototype.reject=function(e){if(!(this instanceof i))throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n");this.promise._rejectCallback(e)},i.prototype.progress=function(e){if(!(this instanceof i))throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n");this.promise._progress(e)},i.prototype.cancel=function(e){this.promise.cancel(e)},i.prototype.timeout=function(){this.reject(new l("timeout"))},i.prototype.isResolved=function(){return this.promise.isResolved()},i.prototype.toJSON=function(){return this.promise.toJSON()},t.exports=i},{"./errors.js":13,"./es5.js":14,"./util.js":38}],26:[function(e,t,n){"use strict";t.exports=function(t,n){function r(e){return!w.test(e)}function o(e){try{return e.__isPromisified__===!0}catch(t){return!1}}function s(e,t,n){var r=m.getDataPropertyOrDefault(e,t+n,b);return r?o(r):!1}function i(e,t,n){for(var r=0;r<e.length;r+=2){var o=e[r];if(n.test(o))for(var s=o.replace(n,""),i=0;i<e.length;i+=2)if(e[i]===s)throw new y("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/iWrZbw\n".replace("%s",t))}}function a(e,t,n,r){for(var a=m.inheritedDataKeys(e),u=[],c=0;c<a.length;++c){var l=a[c],p=e[l],d=r===E?!0:E(l,p,e);"function"!=typeof p||o(p)||s(e,l,t)||!r(l,p,e,d)||u.push(l,p)}return i(u,t,n),u}function u(e,r,o,s){function i(){var o=r;r===d&&(o=this);var s=new t(n);s._captureStackTrace();var i="string"==typeof u&&this!==a?this[u]:e,c=f(s);try{i.apply(o,h(arguments,c))}catch(l){s._rejectCallback(v(l),!0,!0)}return s}var a=function(){return this}(),u=e;return"string"==typeof u&&(e=s),m.notEnumerableProp(i,"__isPromisified__",!0),i}function c(e,t,n,r){for(var o=new RegExp(D(t)+"$"),s=a(e,t,o,n),i=0,u=s.length;u>i;i+=2){var c=s[i],l=s[i+1],p=c+t;e[p]=r===P?P(c,d,c,l,t):r(l,function(){return P(c,d,c,l,t)})}return m.toFastProperties(e),e}function l(e,t){return P(e,t,void 0,e)}var p,d={},m=e("./util.js"),f=e("./promise_resolver.js")._nodebackForPromise,h=m.withAppended,v=m.maybeWrapAsError,_=m.canEvaluate,y=e("./errors").TypeError,g="Async",b={__isPromisified__:!0},j=["arity","length","name","arguments","caller","callee","prototype","__isPromisified__"],w=new RegExp("^(?:"+j.join("|")+")$"),E=function(e){return m.isIdentifier(e)&&"_"!==e.charAt(0)&&"constructor"!==e},D=function(e){return e.replace(/([$])/,"\\$")},P=_?p:u;t.promisify=function(e,t){if("function"!=typeof e)throw new y("fn must be a function\n\n    See http://goo.gl/916lJJ\n");if(o(e))return e;var n=l(e,arguments.length<2?d:t);return m.copyDescriptors(e,n,r),n},t.promisifyAll=function(e,t){if("function"!=typeof e&&"object"!=typeof e)throw new y("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/9ITlV0\n");t=Object(t);var n=t.suffix;"string"!=typeof n&&(n=g);var r=t.filter;"function"!=typeof r&&(r=E);var o=t.promisifier;if("function"!=typeof o&&(o=P),!m.isIdentifier(n))throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/8FZo5V\n");for(var s=m.inheritedDataKeys(e),i=0;i<s.length;++i){var a=e[s[i]];"constructor"!==s[i]&&m.isClass(a)&&(c(a.prototype,n,r,o),c(a,n,r,o))}return c(e,n,r,o)}}},{"./errors":13,"./promise_resolver.js":25,"./util.js":38}],27:[function(e,t,n){"use strict";t.exports=function(t,n,r,o){function s(e){for(var t=c.keys(e),n=t.length,r=new Array(2*n),o=0;n>o;++o){var s=t[o];r[o]=e[s],r[o+n]=s}this.constructor$(r)}function i(e){var n,i=r(e);return u(i)?(n=i instanceof t?i._then(t.props,void 0,void 0,void 0,void 0):new s(i).promise(),i instanceof t&&n._propagateFrom(i,4),n):o("cannot await properties of a non-object\n\n    See http://goo.gl/OsFKC8\n")}var a=e("./util.js"),u=a.isObject,c=e("./es5.js");a.inherits(s,n),s.prototype._init=function(){this._init$(void 0,-3)},s.prototype._promiseFulfilled=function(e,t){this._values[t]=e;var n=++this._totalResolved;if(n>=this._length){for(var r={},o=this.length(),s=0,i=this.length();i>s;++s)r[this._values[s+o]]=this._values[s];this._resolve(r)}},s.prototype._promiseProgressed=function(e,t){this._promise._progress({key:this._values[t+this.length()],value:e})},s.prototype.shouldCopyValues=function(){return!1},s.prototype.getActualLength=function(e){return e>>1},t.prototype.props=function(){return i(this)},t.props=function(e){return i(e)}}},{"./es5.js":14,"./util.js":38}],28:[function(e,t,n){"use strict";function r(e,t,n,r,o){for(var s=0;o>s;++s)n[s+r]=e[s+t],e[s+t]=void 0}function o(e){this._capacity=e,this._length=0,this._front=0}o.prototype._willBeOverCapacity=function(e){return this._capacity<e},o.prototype._pushOne=function(e){var t=this.length();this._checkCapacity(t+1);var n=this._front+t&this._capacity-1;this[n]=e,this._length=t+1},o.prototype._unshiftOne=function(e){var t=this._capacity;this._checkCapacity(this.length()+1);var n=this._front,r=(n-1&t-1^t)-t;this[r]=e,this._front=r,this._length=this.length()+1},o.prototype.unshift=function(e,t,n){this._unshiftOne(n),this._unshiftOne(t),this._unshiftOne(e)},o.prototype.push=function(e,t,n){var r=this.length()+3;if(this._willBeOverCapacity(r))return this._pushOne(e),this._pushOne(t),void this._pushOne(n);var o=this._front+r-3;this._checkCapacity(r);var s=this._capacity-1;this[o+0&s]=e,this[o+1&s]=t,this[o+2&s]=n,this._length=r},o.prototype.shift=function(){var e=this._front,t=this[e];return this[e]=void 0,this._front=e+1&this._capacity-1,this._length--,t},o.prototype.length=function(){return this._length},o.prototype._checkCapacity=function(e){this._capacity<e&&this._resizeTo(this._capacity<<1)},o.prototype._resizeTo=function(e){var t=this._capacity;this._capacity=e;var n=this._front,o=this._length,s=n+o&t-1;r(this,0,this,t,s)},t.exports=o},{}],29:[function(e,t,n){"use strict";t.exports=function(t,n,r,o){function s(e,s){var u=r(e);if(u instanceof t)return a(u);if(!i(e))return o("expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n");var c=new t(n);void 0!==s&&c._propagateFrom(s,5);for(var l=c._fulfill,p=c._reject,d=0,m=e.length;m>d;++d){var f=e[d];(void 0!==f||d in e)&&t.cast(f)._then(l,p,void 0,c,null)}return c}var i=e("./util.js").isArray,a=function(e){return e.then(function(t){return s(t,e)})};t.race=function(e){return s(e,void 0)},t.prototype.race=function(){return s(this,void 0)}}},{"./util.js":38}],30:[function(e,t,n){"use strict";t.exports=function(t,n,r,o,s){function i(e,n,r,i){this.constructor$(e),this._promise._captureStackTrace(),this._preservedValues=i===s?[]:null,this._zerothIsAccum=void 0===r,this._gotAccum=!1,this._reducingIndex=this._zerothIsAccum?1:0,this._valuesPhase=void 0;var u=o(r,this._promise),l=!1,p=u instanceof t;p&&(u=u._target(),u._isPending()?u._proxyPromiseArray(this,-1):u._isFulfilled()?(r=u._value(),this._gotAccum=!0):(this._reject(u._reason()),l=!0)),p||this._zerothIsAccum||(this._gotAccum=!0),this._callback=n,this._accum=r,l||c.invoke(a,this,void 0)}function a(){this._init$(void 0,-5)}function u(e,t,n,o){if("function"!=typeof t)return r("fn must be a function\n\n    See http://goo.gl/916lJJ\n");var s=new i(e,t,n,o);return s.promise()}var c=e("./async.js"),l=e("./util.js"),p=l.tryCatch,d=l.errorObj;l.inherits(i,n),i.prototype._init=function(){},i.prototype._resolveEmptyArray=function(){(this._gotAccum||this._zerothIsAccum)&&this._resolve(null!==this._preservedValues?[]:this._accum)},i.prototype._promiseFulfilled=function(e,n){var r=this._values;r[n]=e;var s,i=this.length(),a=this._preservedValues,u=null!==a,c=this._gotAccum,l=this._valuesPhase;if(!l)for(l=this._valuesPhase=new Array(i),s=0;i>s;++s)l[s]=0;if(s=l[n],0===n&&this._zerothIsAccum?(this._accum=e,this._gotAccum=c=!0,l[n]=0===s?1:2):-1===n?(this._accum=e,this._gotAccum=c=!0):0===s?l[n]=1:(l[n]=2,this._accum=e),c){for(var m,f=this._callback,h=this._promise._boundTo,v=this._reducingIndex;i>v;++v)if(s=l[v],2!==s){if(1!==s)return;if(e=r[v],this._promise._pushContext(),u?(a.push(e),m=p(f).call(h,e,v,i)):m=p(f).call(h,this._accum,e,v,i),this._promise._popContext(),m===d)return this._reject(m.e);var _=o(m,this._promise);if(_ instanceof t){if(_=_._target(),_._isPending())return l[v]=4,_._proxyPromiseArray(this,v);if(!_._isFulfilled())return this._reject(_._reason());m=_._value()}this._reducingIndex=v+1,this._accum=m}else this._reducingIndex=v+1;this._resolve(u?a:this._accum)}},t.prototype.reduce=function(e,t){return u(this,e,t,null)},t.reduce=function(e,t,n,r){return u(e,t,n,r)}}},{"./async.js":2,"./util.js":38}],31:[function(t,n,o){"use strict";var s,i=t("./util"),a=function(){throw new Error("No async scheduler available\n\n    See http://goo.gl/m3OTXk\n")};if(i.isNode&&"undefined"==typeof MutationObserver){
var u=r.setImmediate,c=e.nextTick;s=i.isRecentNode?function(e){u.call(r,e)}:function(t){c.call(e,t)}}else"undefined"==typeof MutationObserver||"undefined"!=typeof window&&window.navigator&&window.navigator.standalone?s="undefined"!=typeof setImmediate?function(e){setImmediate(e)}:"undefined"!=typeof setTimeout?function(e){setTimeout(e,0)}:a:(s=function(e){var t=document.createElement("div"),n=new MutationObserver(e);return n.observe(t,{attributes:!0}),function(){t.classList.toggle("foo")}},s.isStatic=!0);n.exports=s},{"./util":38}],32:[function(e,t,n){"use strict";t.exports=function(t,n){function r(e){this.constructor$(e)}var o=t.PromiseInspection,s=e("./util.js");s.inherits(r,n),r.prototype._promiseResolved=function(e,t){this._values[e]=t;var n=++this._totalResolved;n>=this._length&&this._resolve(this._values)},r.prototype._promiseFulfilled=function(e,t){var n=new o;n._bitField=268435456,n._settledValue=e,this._promiseResolved(t,n)},r.prototype._promiseRejected=function(e,t){var n=new o;n._bitField=134217728,n._settledValue=e,this._promiseResolved(t,n)},t.settle=function(e){return new r(e).promise()},t.prototype.settle=function(){return new r(this).promise()}}},{"./util.js":38}],33:[function(e,t,n){"use strict";t.exports=function(t,n,r){function o(e){this.constructor$(e),this._howMany=0,this._unwrap=!1,this._initialized=!1}function s(e,t){if((0|t)!==t||0>t)return r("expecting a positive integer\n\n    See http://goo.gl/1wAmHx\n");var n=new o(e),s=n.promise();return n.setHowMany(t),n.init(),s}var i=e("./util.js"),a=e("./errors.js").RangeError,u=e("./errors.js").AggregateError,c=i.isArray;i.inherits(o,n),o.prototype._init=function(){if(this._initialized){if(0===this._howMany)return void this._resolve([]);this._init$(void 0,-5);var e=c(this._values);!this._isResolved()&&e&&this._howMany>this._canPossiblyFulfill()&&this._reject(this._getRangeError(this.length()))}},o.prototype.init=function(){this._initialized=!0,this._init()},o.prototype.setUnwrap=function(){this._unwrap=!0},o.prototype.howMany=function(){return this._howMany},o.prototype.setHowMany=function(e){this._howMany=e},o.prototype._promiseFulfilled=function(e){this._addFulfilled(e),this._fulfilled()===this.howMany()&&(this._values.length=this.howMany(),this._resolve(1===this.howMany()&&this._unwrap?this._values[0]:this._values))},o.prototype._promiseRejected=function(e){if(this._addRejected(e),this.howMany()>this._canPossiblyFulfill()){for(var t=new u,n=this.length();n<this._values.length;++n)t.push(this._values[n]);this._reject(t)}},o.prototype._fulfilled=function(){return this._totalResolved},o.prototype._rejected=function(){return this._values.length-this.length()},o.prototype._addRejected=function(e){this._values.push(e)},o.prototype._addFulfilled=function(e){this._values[this._totalResolved++]=e},o.prototype._canPossiblyFulfill=function(){return this.length()-this._rejected()},o.prototype._getRangeError=function(e){var t="Input array must contain at least "+this._howMany+" items but contains only "+e+" items";return new a(t)},o.prototype._resolveEmptyArray=function(){this._reject(this._getRangeError(0))},t.some=function(e,t){return s(e,t)},t.prototype.some=function(e){return s(this,e)},t._SomePromiseArray=o}},{"./errors.js":13,"./util.js":38}],34:[function(e,t,n){"use strict";t.exports=function(e){function t(e){void 0!==e?(e=e._target(),this._bitField=e._bitField,this._settledValue=e._settledValue):(this._bitField=0,this._settledValue=void 0)}t.prototype.value=function(){if(!this.isFulfilled())throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/hc1DLj\n");return this._settledValue},t.prototype.error=t.prototype.reason=function(){if(!this.isRejected())throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/hPuiwB\n");return this._settledValue},t.prototype.isFulfilled=e.prototype._isFulfilled=function(){return(268435456&this._bitField)>0},t.prototype.isRejected=e.prototype._isRejected=function(){return(134217728&this._bitField)>0},t.prototype.isPending=e.prototype._isPending=function(){return 0===(402653184&this._bitField)},t.prototype.isResolved=e.prototype._isResolved=function(){return(402653184&this._bitField)>0},e.prototype.isPending=function(){return this._target()._isPending()},e.prototype.isRejected=function(){return this._target()._isRejected()},e.prototype.isFulfilled=function(){return this._target()._isFulfilled()},e.prototype.isResolved=function(){return this._target()._isResolved()},e.prototype._value=function(){return this._settledValue},e.prototype._reason=function(){return this._unsetRejectionIsUnhandled(),this._settledValue},e.prototype.value=function(){var e=this._target();if(!e.isFulfilled())throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/hc1DLj\n");return e._settledValue},e.prototype.reason=function(){var e=this._target();if(!e.isRejected())throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/hPuiwB\n");return e._unsetRejectionIsUnhandled(),e._settledValue},e.PromiseInspection=t}},{}],35:[function(e,t,n){"use strict";t.exports=function(t,n){function r(e,r){if(c(e)){if(e instanceof t)return e;if(s(e)){var l=new t(n);return e._then(l._fulfillUnchecked,l._rejectUncheckedCheckError,l._progressUnchecked,l,null),l}var p=a.tryCatch(o)(e);if(p===u){r&&r._pushContext();var l=t.reject(p.e);return r&&r._popContext(),l}if("function"==typeof p)return i(e,p,r)}return e}function o(e){return e.then}function s(e){return l.call(e,"_promise0")}function i(e,r,o){function s(e){l&&(l._resolveCallback(e),l=null)}function i(e){l&&(l._rejectCallback(e,d,!0),l=null)}function c(e){l&&"function"==typeof l._progress&&l._progress(e)}var l=new t(n),p=l;o&&o._pushContext(),l._captureStackTrace(),o&&o._popContext();var d=!0,m=a.tryCatch(r).call(e,s,i,c);return d=!1,l&&m===u&&(l._rejectCallback(m.e,!0,!0),l=null),p}var a=e("./util.js"),u=a.errorObj,c=a.isObject,l={}.hasOwnProperty;return r}},{"./util.js":38}],36:[function(e,t,n){"use strict";t.exports=function(t,n){function r(e){var t=this;return t instanceof Number&&(t=+t),clearTimeout(t),e}function o(e){var t=this;throw t instanceof Number&&(t=+t),clearTimeout(t),e}var s=e("./util.js"),i=t.TimeoutError,a=function(e,t){if(e.isPending()){"string"!=typeof t&&(t="operation timed out");var n=new i(t);s.markAsOriginatingFromRejection(n),e._attachExtraTrace(n),e._cancel(n)}},u=function(e){return c(+this).thenReturn(e)},c=t.delay=function(e,r){if(void 0===r){r=e,e=void 0;var o=new t(n);return setTimeout(function(){o._fulfill()},r),o}return r=+r,t.resolve(e)._then(u,null,null,r,void 0)};t.prototype.delay=function(e){return c(this,e)},t.prototype.timeout=function(e,t){e=+e;var n=this.then().cancellable();n._cancellationParent=this;var s=setTimeout(function(){a(n,t)},e);return n._then(r,o,void 0,s,void 0)}}},{"./util.js":38}],37:[function(e,t,n){"use strict";t.exports=function(t,n,r,o){function s(e){for(var n=e.length,r=0;n>r;++r){var o=e[r];if(o.isRejected())return t.reject(o.error());e[r]=o._settledValue}return e}function i(e){setTimeout(function(){throw e},0)}function a(e){var t=r(e);return t!==e&&"function"==typeof e._isDisposable&&"function"==typeof e._getDisposer&&e._isDisposable()&&t._setDisposable(e._getDisposer()),t}function u(e,n){function o(){if(s>=u)return c.resolve();var l=a(e[s++]);if(l instanceof t&&l._isDisposable()){try{l=r(l._getDisposer().tryDispose(n),e.promise)}catch(p){return i(p)}if(l instanceof t)return l._then(o,i,null,null,null)}o()}var s=0,u=e.length,c=t.defer();return o(),c.promise}function c(e){var t=new v;return t._settledValue=e,t._bitField=268435456,u(this,t).thenReturn(e)}function l(e){var t=new v;return t._settledValue=e,t._bitField=134217728,u(this,t).thenThrow(e)}function p(e,t,n){this._data=e,this._promise=t,this._context=n}function d(e,t,n){this.constructor$(e,t,n)}function m(e){return p.isDisposer(e)?(this.resources[this.index]._setDisposable(e),e.promise()):e}var f=e("./errors.js").TypeError,h=e("./util.js").inherits,v=t.PromiseInspection;p.prototype.data=function(){return this._data},p.prototype.promise=function(){return this._promise},p.prototype.resource=function(){return this.promise().isFulfilled()?this.promise().value():null},p.prototype.tryDispose=function(e){var t=this.resource(),n=this._context;void 0!==n&&n._pushContext();var r=null!==t?this.doDispose(t,e):null;return void 0!==n&&n._popContext(),this._promise._unsetDisposable(),this._data=null,r},p.isDisposer=function(e){return null!=e&&"function"==typeof e.resource&&"function"==typeof e.tryDispose},h(d,p),d.prototype.doDispose=function(e,t){var n=this.data();return n.call(e,e,t)},t.using=function(){var e=arguments.length;if(2>e)return n("you must pass at least 2 arguments to Promise.using");var o=arguments[e-1];if("function"!=typeof o)return n("fn must be a function\n\n    See http://goo.gl/916lJJ\n");e--;for(var i=new Array(e),a=0;e>a;++a){var u=arguments[a];if(p.isDisposer(u)){var d=u;u=u.promise(),u._setDisposable(d)}else{var f=r(u);f instanceof t&&(u=f._then(m,null,null,{resources:i,index:a},void 0))}i[a]=u}var h=t.settle(i).then(s).then(function(e){h._pushContext();var t;try{t=o.apply(void 0,e)}finally{h._popContext()}return t})._then(c,l,void 0,i,void 0);return i.promise=h,h},t.prototype._setDisposable=function(e){this._bitField=262144|this._bitField,this._disposer=e},t.prototype._isDisposable=function(){return(262144&this._bitField)>0},t.prototype._getDisposer=function(){return this._disposer},t.prototype._unsetDisposable=function(){this._bitField=-262145&this._bitField,this._disposer=void 0},t.prototype.disposer=function(e){if("function"==typeof e)return new d(e,this,o());throw new f}}},{"./errors.js":13,"./util.js":38}],38:[function(t,n,r){"use strict";function o(){try{var e=C;return C=null,e.apply(this,arguments)}catch(t){return R.e=t,R}}function s(e){return C=e,o}function i(e){return null==e||e===!0||e===!1||"string"==typeof e||"number"==typeof e}function a(e){return!i(e)}function u(e){return i(e)?new Error(_(e)):e}function c(e,t){var n,r=e.length,o=new Array(r+1);for(n=0;r>n;++n)o[n]=e[n];return o[n]=t,o}function l(e,t,n){if(!E.isES5)return{}.hasOwnProperty.call(e,t)?e[t]:void 0;var r=Object.getOwnPropertyDescriptor(e,t);return null!=r?null==r.get&&null==r.set?r.value:n:void 0}function p(e,t,n){if(i(e))return e;var r={value:n,configurable:!0,enumerable:!1,writable:!0};return E.defineProperty(e,t,r),e}function d(e){throw e}function m(e){try{if("function"==typeof e){var t=E.names(e.prototype),n=E.isES5&&t.length>1,r=t.length>0&&!(1===t.length&&"constructor"===t[0]),o=N.test(e+"")&&E.names(e).length>0;if(n||r||o)return!0}return!1}catch(s){return!1}}function f(e){function t(){}t.prototype=e;for(var n=8;n--;)new t;return e}function h(e){return x.test(e)}function v(e,t,n){for(var r=new Array(e),o=0;e>o;++o)r[o]=t+o+n;return r}function _(e){try{return e+""}catch(t){return"[no string representation]"}}function y(e){try{p(e,"isOperational",!0)}catch(t){}}function g(e){return null==e?!1:e instanceof Error.__BluebirdErrorTypes__.OperationalError||e.isOperational===!0}function b(e){return e instanceof Error&&E.propertyIsWritable(e,"stack")}function j(e){return{}.toString.call(e)}function w(e,t,n){for(var r=E.names(e),o=0;o<r.length;++o){var s=r[o];if(n(s))try{E.defineProperty(t,s,E.getDescriptor(e,s))}catch(i){}}}var E=t("./es5.js"),D="undefined"==typeof navigator,P=function(){try{var e={};return E.defineProperty(e,"f",{get:function(){return 3}}),3===e.f}catch(t){return!1}}(),R={e:{}},C,U=function(e,t){function n(){this.constructor=e,this.constructor$=t;for(var n in t.prototype)r.call(t.prototype,n)&&"$"!==n.charAt(n.length-1)&&(this[n+"$"]=t.prototype[n])}var r={}.hasOwnProperty;return n.prototype=t.prototype,e.prototype=new n,e.prototype},O=function(){var e=[Array.prototype,Object.prototype,Function.prototype],t=function(t){for(var n=0;n<e.length;++n)if(e[n]===t)return!0;return!1};if(E.isES5){var n=Object.getOwnPropertyNames;return function(e){for(var r=[],o=Object.create(null);null!=e&&!t(e);){var s;try{s=n(e)}catch(i){return r}for(var a=0;a<s.length;++a){var u=s[a];if(!o[u]){o[u]=!0;var c=Object.getOwnPropertyDescriptor(e,u);null!=c&&null==c.get&&null==c.set&&r.push(u)}}e=E.getPrototypeOf(e)}return r}}var r={}.hasOwnProperty;return function(n){if(t(n))return[];var o=[];e:for(var s in n)if(r.call(n,s))o.push(s);else{for(var i=0;i<e.length;++i)if(r.call(e[i],s))continue e;o.push(s)}return o}}(),N=/this\s*\.\s*\S+\s*=/,x=/^[a-z$_][a-z$_0-9]*$/i,T=function(){return"stack"in new Error?function(e){return b(e)?e:new Error(_(e))}:function(e){if(b(e))return e;try{throw new Error(_(e))}catch(t){return t}}}(),M={isClass:m,isIdentifier:h,inheritedDataKeys:O,getDataPropertyOrDefault:l,thrower:d,isArray:E.isArray,haveGetters:P,notEnumerableProp:p,isPrimitive:i,isObject:a,canEvaluate:D,errorObj:R,tryCatch:s,inherits:U,withAppended:c,maybeWrapAsError:u,toFastProperties:f,filledRange:v,toString:_,canAttachTrace:b,ensureErrorObject:T,originatesFromRejection:g,markAsOriginatingFromRejection:y,classString:j,copyDescriptors:w,hasDevTools:"undefined"!=typeof chrome&&chrome&&"function"==typeof chrome.loadTimes,isNode:"undefined"!=typeof e&&"[object process]"===j(e).toLowerCase()};M.isRecentNode=M.isNode&&function(){var t=e.versions.node.split(".").map(Number);return 0===t[0]&&t[1]>10||t[0]>0}(),M.isNode&&M.toFastProperties(e);try{throw new Error}catch(k){M.lastLineError=k}n.exports=M},{"./es5.js":14}]},{},[4])(4)}),"undefined"!=typeof window&&null!==window?window.P=window.Promise:"undefined"!=typeof self&&null!==self&&(self.P=self.Promise)}).call(this,e("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js":[function(e,t,n){function r(){l=!1,a.length?c=a.concat(c):p=-1,c.length&&o()}function o(){if(!l){var e=setTimeout(r);l=!0;for(var t=c.length;t;){for(a=c,c=[];++p<t;)a[p].run();p=-1,t=c.length}a=null,l=!1,clearTimeout(e)}}function s(e,t){this.fun=e,this.array=t}function i(){}var a,u=t.exports={},c=[],l=!1,p=-1;u.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new s(e,t)),1!==c.length||l||setTimeout(o,0)},s.prototype.run=function(){this.fun.apply(null,this.array)},u.title="browser",u.browser=!0,u.env={},u.argv=[],u.version="",u.versions={},u.on=i,u.addListener=i,u.once=i,u.off=i,u.removeListener=i,u.removeAllListeners=i,u.emit=i,u.binding=function(e){throw new Error("process.binding is not supported")},u.cwd=function(){return"/"},u.chdir=function(e){throw new Error("process.chdir is not supported")},u.umask=function(){return 0}},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/lodash/index.js":[function(e,t,n){(function(e){(function(){function r(e,t){if(e!==t){var n=null===e,r=e===P,o=e===e,s=null===t,i=t===P,a=t===t;if(e>t&&!s||!o||n&&!i&&a||r&&a)return 1;if(t>e&&!n||!a||s&&!r&&o||i&&o)return-1}return 0}function o(e,t,n){for(var r=e.length,o=n?r:-1;n?o--:++o<r;)if(t(e[o],o,e))return o;return-1}function s(e,t,n){if(t!==t)return v(e,n);for(var r=n-1,o=e.length;++r<o;)if(e[r]===t)return r;return-1}function i(e){return"function"==typeof e||!1}function a(e){return null==e?"":e+""}function u(e,t){for(var n=-1,r=e.length;++n<r&&t.indexOf(e.charAt(n))>-1;);return n}function c(e,t){for(var n=e.length;n--&&t.indexOf(e.charAt(n))>-1;);return n}function l(e,t){return r(e.criteria,t.criteria)||e.index-t.index}function p(e,t,n){for(var o=-1,s=e.criteria,i=t.criteria,a=s.length,u=n.length;++o<a;){var c=r(s[o],i[o]);if(c){if(o>=u)return c;var l=n[o];return c*("asc"===l||l===!0?1:-1)}}return e.index-t.index}function d(e){return We[e]}function m(e){return Ke[e]}function f(e,t,n){return t?e=Ye[e]:n&&(e=$e[e]),"\\"+e}function h(e){return"\\"+$e[e]}function v(e,t,n){for(var r=e.length,o=t+(n?0:-1);n?o--:++o<r;){var s=e[o];if(s!==s)return o}return-1}function _(e){return!!e&&"object"==typeof e}function y(e){return 160>=e&&e>=9&&13>=e||32==e||160==e||5760==e||6158==e||e>=8192&&(8202>=e||8232==e||8233==e||8239==e||8287==e||12288==e||65279==e)}function g(e,t){for(var n=-1,r=e.length,o=-1,s=[];++n<r;)e[n]===t&&(e[n]=W,s[++o]=n);return s}function b(e,t){for(var n,r=-1,o=e.length,s=-1,i=[];++r<o;){var a=e[r],u=t?t(a,r,e):a;r&&n===u||(n=u,i[++s]=a)}return i}function j(e){for(var t=-1,n=e.length;++t<n&&y(e.charCodeAt(t)););return t}function w(e){for(var t=e.length;t--&&y(e.charCodeAt(t)););return t}function E(e){return Qe[e]}function D(e){function t(e){if(_(e)&&!Oa(e)&&!(e instanceof X)){if(e instanceof y)return e;if(ti.call(e,"__chain__")&&ti.call(e,"__wrapped__"))return mr(e)}return new y(e)}function n(){}function y(e,t,n){this.__wrapped__=e,this.__actions__=n||[],this.__chain__=!!t}function X(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=Ui,this.__views__=[]}function te(){var e=new X(this.__wrapped__);return e.__actions__=et(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=et(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=et(this.__views__),e}function re(){if(this.__filtered__){var e=new X(this);e.__dir__=-1,e.__filtered__=!0}else e=this.clone(),e.__dir__*=-1;return e}function We(){var e=this.__wrapped__.value(),t=this.__dir__,n=Oa(e),r=0>t,o=n?e.length:0,s=Qn(0,o,this.__views__),i=s.start,a=s.end,u=a-i,c=r?a:i-1,l=this.__iteratees__,p=l.length,d=0,m=Ei(u,this.__takeCount__);if(!n||V>o||o==u&&m==u)return nn(r&&n?e.reverse():e,this.__actions__);var f=[];e:for(;u--&&m>d;){c+=t;for(var h=-1,v=e[c];++h<p;){var _=l[h],y=_.iteratee,g=_.type,b=y(v);if(g==H)v=b;else if(!b){if(g==B)continue e;break e}}f[d++]=v}return f}function Ke(){this.__data__={}}function Qe(e){return this.has(e)&&delete this.__data__[e]}function ze(e){return"__proto__"==e?P:this.__data__[e]}function Ye(e){return"__proto__"!=e&&ti.call(this.__data__,e)}function $e(e,t){return"__proto__"!=e&&(this.__data__[e]=t),this}function Ge(e){var t=e?e.length:0;for(this.data={hash:_i(null),set:new pi};t--;)this.push(e[t])}function Xe(e,t){var n=e.data,r="string"==typeof t||So(t)?n.set.has(t):n.hash[t];return r?0:-1}function Je(e){var t=this.data;"string"==typeof e||So(e)?t.set.add(e):t.hash[e]=!0}function Ze(e,t){for(var n=-1,r=e.length,o=-1,s=t.length,i=Bs(r+s);++n<r;)i[n]=e[n];for(;++o<s;)i[n++]=t[o];return i}function et(e,t){var n=-1,r=e.length;for(t||(t=Bs(r));++n<r;)t[n]=e[n];return t}function tt(e,t){for(var n=-1,r=e.length;++n<r&&t(e[n],n,e)!==!1;);return e}function ot(e,t){for(var n=e.length;n--&&t(e[n],n,e)!==!1;);return e}function st(e,t){for(var n=-1,r=e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function it(e,t,n,r){for(var o=-1,s=e.length,i=r,a=i;++o<s;){var u=e[o],c=+t(u);n(c,i)&&(i=c,a=u)}return a}function at(e,t){for(var n=-1,r=e.length,o=-1,s=[];++n<r;){var i=e[n];t(i,n,e)&&(s[++o]=i)}return s}function ut(e,t){for(var n=-1,r=e.length,o=Bs(r);++n<r;)o[n]=t(e[n],n,e);return o}function ct(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}function lt(e,t,n,r){var o=-1,s=e.length;for(r&&s&&(n=e[++o]);++o<s;)n=t(n,e[o],o,e);return n}function pt(e,t,n,r){var o=e.length;for(r&&o&&(n=e[--o]);o--;)n=t(n,e[o],o,e);return n}function dt(e,t){for(var n=-1,r=e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function mt(e,t){for(var n=e.length,r=0;n--;)r+=+t(e[n])||0;return r}function ft(e,t){return e===P?t:e}function ht(e,t,n,r){return e!==P&&ti.call(r,n)?e:t}function vt(e,t,n){for(var r=-1,o=Va(t),s=o.length;++r<s;){var i=o[r],a=e[i],u=n(a,t[i],i,e,t);(u===u?u===a:a!==a)&&(a!==P||i in e)||(e[i]=u)}return e}function _t(e,t){return null==t?e:gt(t,Va(t),e)}function yt(e,t){for(var n=-1,r=null==e,o=!r&&Xn(e),s=o?e.length:0,i=t.length,a=Bs(i);++n<i;){var u=t[n];a[n]=o?Jn(u,s)?e[u]:P:r?P:e[u]}return a}function gt(e,t,n){n||(n={});for(var r=-1,o=t.length;++r<o;){var s=t[r];n[s]=e[s]}return n}function bt(e,t,n){var r=typeof e;return"function"==r?t===P?e:sn(e,t,n):null==e?Us:"object"==r?Ft(e):t===P?ks(e):Vt(e,t)}function jt(e,t,n,r,o,s,i){var a;if(n&&(a=o?n(e,r,o):n(e)),a!==P)return a;if(!So(e))return e;var u=Oa(e);if(u){if(a=zn(e),!t)return et(e,a)}else{var c=ri.call(e),l=c==G;if(c!=Z&&c!=K&&(!l||o))return qe[c]?$n(e,c,t):o?e:{};if(a=Yn(l?{}:e),!t)return _t(a,e)}s||(s=[]),i||(i=[]);for(var p=s.length;p--;)if(s[p]==e)return i[p];return s.push(e),i.push(a),(u?tt:xt)(e,function(r,o){a[o]=jt(r,t,n,o,e,s,i)}),a}function wt(e,t,n){if("function"!=typeof e)throw new Gs(q);return di(function(){e.apply(P,n)},t)}function Et(e,t){var n=e?e.length:0,r=[];if(!n)return r;var o=-1,i=qn(),a=i==s,u=a&&t.length>=V?hn(t):null,c=t.length;u&&(i=Xe,a=!1,t=u);e:for(;++o<n;){var l=e[o];if(a&&l===l){for(var p=c;p--;)if(t[p]===l)continue e;r.push(l)}else i(t,l,0)<0&&r.push(l)}return r}function Dt(e,t){var n=!0;return Ii(e,function(e,r,o){return n=!!t(e,r,o)}),n}function Pt(e,t,n,r){var o=r,s=o;return Ii(e,function(e,i,a){var u=+t(e,i,a);(n(u,o)||u===r&&u===s)&&(o=u,s=e)}),s}function Rt(e,t,n,r){var o=e.length;for(n=null==n?0:+n||0,0>n&&(n=-n>o?0:o+n),r=r===P||r>o?o:+r||0,0>r&&(r+=o),o=n>r?0:r>>>0,n>>>=0;o>n;)e[n++]=t;return e}function Ct(e,t){var n=[];return Ii(e,function(e,r,o){t(e,r,o)&&n.push(e)}),n}function Ut(e,t,n,r){var o;return n(e,function(e,n,s){return t(e,n,s)?(o=r?n:e,!1):void 0}),o}function Ot(e,t,n,r){r||(r=[]);for(var o=-1,s=e.length;++o<s;){var i=e[o];_(i)&&Xn(i)&&(n||Oa(i)||Ro(i))?t?Ot(i,t,n,r):ct(r,i):n||(r[r.length]=i)}return r}function Nt(e,t){return Li(e,t,ts)}function xt(e,t){return Li(e,t,Va)}function Tt(e,t){return Fi(e,t,Va)}function Mt(e,t){for(var n=-1,r=t.length,o=-1,s=[];++n<r;){var i=t[n];ko(e[i])&&(s[++o]=i)}return s}function kt(e,t,n){if(null!=e){n!==P&&n in pr(e)&&(t=[n]);for(var r=0,o=t.length;null!=e&&o>r;)e=e[t[r++]];return r&&r==o?e:P}}function St(e,t,n,r,o,s){return e===t?!0:null==e||null==t||!So(e)&&!_(t)?e!==e&&t!==t:It(e,t,St,n,r,o,s)}function It(e,t,n,r,o,s,i){var a=Oa(e),u=Oa(t),c=Q,l=Q;a||(c=ri.call(e),c==K?c=Z:c!=Z&&(a=Wo(e))),u||(l=ri.call(t),l==K?l=Z:l!=Z&&(u=Wo(t)));var p=c==Z,d=l==Z,m=c==l;if(m&&!a&&!p)return Fn(e,t,c);if(!o){var f=p&&ti.call(e,"__wrapped__"),h=d&&ti.call(t,"__wrapped__");if(f||h)return n(f?e.value():e,h?t.value():t,r,o,s,i)}if(!m)return!1;s||(s=[]),i||(i=[]);for(var v=s.length;v--;)if(s[v]==e)return i[v]==t;s.push(e),i.push(t);var _=(a?Ln:Vn)(e,t,n,r,o,s,i);return s.pop(),i.pop(),_}function At(e,t,n){var r=t.length,o=r,s=!n;if(null==e)return!o;for(e=pr(e);r--;){var i=t[r];if(s&&i[2]?i[1]!==e[i[0]]:!(i[0]in e))return!1}for(;++r<o;){i=t[r];var a=i[0],u=e[a],c=i[1];if(s&&i[2]){if(u===P&&!(a in e))return!1}else{var l=n?n(u,c,a):P;if(!(l===P?St(c,u,n,!0):l))return!1}}return!0}function Lt(e,t){var n=-1,r=Xn(e)?Bs(e.length):[];return Ii(e,function(e,o,s){r[++n]=t(e,o,s)}),r}function Ft(e){var t=Wn(e);if(1==t.length&&t[0][2]){var n=t[0][0],r=t[0][1];return function(e){return null==e?!1:e[n]===r&&(r!==P||n in pr(e))}}return function(e){return At(e,t)}}function Vt(e,t){var n=Oa(e),r=er(e)&&rr(t),o=e+"";return e=dr(e),function(s){if(null==s)return!1;var i=o;if(s=pr(s),!(!n&&r||i in s)){if(s=1==e.length?s:kt(s,Yt(e,0,-1)),null==s)return!1;i=Rr(e),s=pr(s)}return s[i]===t?t!==P||i in s:St(t,s[i],P,!0)}}function Bt(e,t,n,r,o){if(!So(e))return e;var s=Xn(t)&&(Oa(t)||Wo(t)),i=s?P:Va(t);return tt(i||t,function(a,u){if(i&&(u=a,a=t[u]),_(a))r||(r=[]),o||(o=[]),Ht(e,t,u,Bt,n,r,o);else{var c=e[u],l=n?n(c,a,u,e,t):P,p=l===P;p&&(l=a),l===P&&(!s||u in e)||!p&&(l===l?l===c:c!==c)||(e[u]=l)}}),e}function Ht(e,t,n,r,o,s,i){for(var a=s.length,u=t[n];a--;)if(s[a]==u)return void(e[n]=i[a]);var c=e[n],l=o?o(c,u,n,e,t):P,p=l===P;p&&(l=u,Xn(u)&&(Oa(u)||Wo(u))?l=Oa(c)?c:Xn(c)?et(c):[]:Bo(u)||Ro(u)?l=Ro(c)?$o(c):Bo(c)?c:{}:p=!1),s.push(u),i.push(l),p?e[n]=r(l,u,o,s,i):(l===l?l!==c:c===c)&&(e[n]=l)}function qt(e){return function(t){return null==t?P:t[e]}}function Wt(e){var t=e+"";return e=dr(e),function(n){return kt(n,e,t)}}function Kt(e,t){for(var n=e?t.length:0;n--;){var r=t[n];if(r!=o&&Jn(r)){var o=r;mi.call(e,r,1)}}return e}function Qt(e,t){return e+yi(Ri()*(t-e+1))}function zt(e,t,n,r,o){return o(e,function(e,o,s){n=r?(r=!1,e):t(n,e,o,s)}),n}function Yt(e,t,n){var r=-1,o=e.length;t=null==t?0:+t||0,0>t&&(t=-t>o?0:o+t),n=n===P||n>o?o:+n||0,0>n&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var s=Bs(o);++r<o;)s[r]=e[r+t];return s}function $t(e,t){var n;return Ii(e,function(e,r,o){return n=t(e,r,o),!n}),!!n}function Gt(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}function Xt(e,t,n){var r=Bn(),o=-1;t=ut(t,function(e){return r(e)});var s=Lt(e,function(e){var n=ut(t,function(t){return t(e)});return{criteria:n,index:++o,value:e}});return Gt(s,function(e,t){return p(e,t,n)})}function Jt(e,t){var n=0;return Ii(e,function(e,r,o){n+=+t(e,r,o)||0}),n}function Zt(e,t){var n=-1,r=qn(),o=e.length,i=r==s,a=i&&o>=V,u=a?hn():null,c=[];u?(r=Xe,i=!1):(a=!1,u=t?[]:c);e:for(;++n<o;){var l=e[n],p=t?t(l,n,e):l;if(i&&l===l){for(var d=u.length;d--;)if(u[d]===p)continue e;t&&u.push(p),c.push(l)}else r(u,p,0)<0&&((t||a)&&u.push(p),c.push(l))}return c}function en(e,t){for(var n=-1,r=t.length,o=Bs(r);++n<r;)o[n]=e[t[n]];return o}function tn(e,t,n,r){for(var o=e.length,s=r?o:-1;(r?s--:++s<o)&&t(e[s],s,e););return n?Yt(e,r?0:s,r?s+1:o):Yt(e,r?s+1:0,r?o:s)}function nn(e,t){var n=e;n instanceof X&&(n=n.value());for(var r=-1,o=t.length;++r<o;){var s=t[r];n=s.func.apply(s.thisArg,ct([n],s.args))}return n}function rn(e,t,n){var r=0,o=e?e.length:r;if("number"==typeof t&&t===t&&xi>=o){for(;o>r;){var s=r+o>>>1,i=e[s];(n?t>=i:t>i)&&null!==i?r=s+1:o=s}return o}return on(e,t,Us,n)}function on(e,t,n,r){t=n(t);for(var o=0,s=e?e.length:0,i=t!==t,a=null===t,u=t===P;s>o;){var c=yi((o+s)/2),l=n(e[c]),p=l!==P,d=l===l;if(i)var m=d||r;else m=a?d&&p&&(r||null!=l):u?d&&(r||p):null==l?!1:r?t>=l:t>l;m?o=c+1:s=c}return Ei(s,Ni)}function sn(e,t,n){if("function"!=typeof e)return Us;if(t===P)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 3:return function(n,r,o){return e.call(t,n,r,o)};case 4:return function(n,r,o,s){return e.call(t,n,r,o,s)};case 5:return function(n,r,o,s,i){return e.call(t,n,r,o,s,i)}}return function(){return e.apply(t,arguments)}}function an(e){var t=new ii(e.byteLength),n=new fi(t);return n.set(new fi(e)),t}function un(e,t,n){for(var r=n.length,o=-1,s=wi(e.length-r,0),i=-1,a=t.length,u=Bs(a+s);++i<a;)u[i]=t[i];for(;++o<r;)u[n[o]]=e[o];for(;s--;)u[i++]=e[o++];return u}function cn(e,t,n){for(var r=-1,o=n.length,s=-1,i=wi(e.length-o,0),a=-1,u=t.length,c=Bs(i+u);++s<i;)c[s]=e[s];for(var l=s;++a<u;)c[l+a]=t[a];for(;++r<o;)c[l+n[r]]=e[s++];return c}function ln(e,t){return function(n,r,o){var s=t?t():{};if(r=Bn(r,o,3),Oa(n))for(var i=-1,a=n.length;++i<a;){var u=n[i];e(s,u,r(u,i,n),n)}else Ii(n,function(t,n,o){e(s,t,r(t,n,o),o)});return s}}function pn(e){return yo(function(t,n){var r=-1,o=null==t?0:n.length,s=o>2?n[o-2]:P,i=o>2?n[2]:P,a=o>1?n[o-1]:P;for("function"==typeof s?(s=sn(s,a,5),o-=2):(s="function"==typeof a?a:P,o-=s?1:0),i&&Zn(n[0],n[1],i)&&(s=3>o?P:s,o=1);++r<o;){var u=n[r];u&&e(t,u,s)}return t})}function dn(e,t){return function(n,r){var o=n?Hi(n):0;if(!nr(o))return e(n,r);for(var s=t?o:-1,i=pr(n);(t?s--:++s<o)&&r(i[s],s,i)!==!1;);return n}}function mn(e){return function(t,n,r){for(var o=pr(t),s=r(t),i=s.length,a=e?i:-1;e?a--:++a<i;){var u=s[a];if(n(o[u],u,o)===!1)break}return t}}function fn(e,t){function n(){var o=this&&this!==nt&&this instanceof n?r:e;return o.apply(t,arguments)}var r=_n(e);return n}function hn(e){return _i&&pi?new Ge(e):null}function vn(e){return function(t){for(var n=-1,r=Ps(ps(t)),o=r.length,s="";++n<o;)s=e(s,r[n],n);return s}}function _n(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=Si(e.prototype),r=e.apply(n,t);return So(r)?r:n}}function yn(e){function t(n,r,o){o&&Zn(n,r,o)&&(r=P);var s=An(n,e,P,P,P,P,P,r);return s.placeholder=t.placeholder,s}return t}function gn(e,t){return yo(function(n){var r=n[0];return null==r?r:(n.push(t),e.apply(P,n))})}function bn(e,t){return function(n,r,o){if(o&&Zn(n,r,o)&&(r=P),r=Bn(r,o,3),1==r.length){n=Oa(n)?n:lr(n);var s=it(n,r,e,t);if(!n.length||s!==t)return s}return Pt(n,r,e,t)}}function jn(e,t){return function(n,r,s){if(r=Bn(r,s,3),Oa(n)){var i=o(n,r,t);return i>-1?n[i]:P}return Ut(n,r,e)}}function wn(e){return function(t,n,r){return t&&t.length?(n=Bn(n,r,3),o(t,n,e)):-1}}function En(e){return function(t,n,r){return n=Bn(n,r,3),Ut(t,n,e,!0)}}function Dn(e){return function(){for(var t,n=arguments.length,r=e?n:-1,o=0,s=Bs(n);e?r--:++r<n;){var i=s[o++]=arguments[r];if("function"!=typeof i)throw new Gs(q);!t&&y.prototype.thru&&"wrapper"==Hn(i)&&(t=new y([],!0))}for(r=t?-1:n;++r<n;){i=s[r];var a=Hn(i),u="wrapper"==a?Bi(i):P;t=u&&tr(u[0])&&u[1]==(k|N|T|S)&&!u[4].length&&1==u[9]?t[Hn(u[0])].apply(t,u[3]):1==i.length&&tr(i)?t[a]():t.thru(i)}return function(){var e=arguments,r=e[0];if(t&&1==e.length&&Oa(r)&&r.length>=V)return t.plant(r).value();for(var o=0,i=n?s[o].apply(this,e):r;++o<n;)i=s[o].call(this,i);return i}}}function Pn(e,t){return function(n,r,o){return"function"==typeof r&&o===P&&Oa(n)?e(n,r):t(n,sn(r,o,3))}}function Rn(e){return function(t,n,r){return("function"!=typeof n||r!==P)&&(n=sn(n,r,3)),e(t,n,ts)}}function Cn(e){return function(t,n,r){return("function"!=typeof n||r!==P)&&(n=sn(n,r,3)),e(t,n)}}function Un(e){return function(t,n,r){var o={};return n=Bn(n,r,3),xt(t,function(t,r,s){var i=n(t,r,s);r=e?i:r,t=e?t:i,o[r]=t}),o}}function On(e){return function(t,n,r){return t=a(t),(e?t:"")+Mn(t,n,r)+(e?"":t)}}function Nn(e){var t=yo(function(n,r){var o=g(r,t.placeholder);return An(n,e,P,r,o)});return t}function xn(e,t){return function(n,r,o,s){var i=arguments.length<3;return"function"==typeof r&&s===P&&Oa(n)?e(n,r,o,i):zt(n,Bn(r,s,4),o,i,t)}}function Tn(e,t,n,r,o,s,i,a,u,c){function l(){for(var y=arguments.length,b=y,j=Bs(y);b--;)j[b]=arguments[b];if(r&&(j=un(j,r,o)),s&&(j=cn(j,s,i)),f||v){var w=l.placeholder,E=g(j,w);if(y-=E.length,c>y){var D=a?et(a):P,R=wi(c-y,0),O=f?E:P,N=f?P:E,x=f?j:P,k=f?P:j;t|=f?T:M,t&=~(f?M:T),h||(t&=~(C|U));var S=[e,t,n,x,O,k,N,D,u,R],I=Tn.apply(P,S);return tr(e)&&qi(I,S),I.placeholder=w,I}}var A=d?n:this,L=m?A[e]:e;return a&&(j=ur(j,a)),p&&u<j.length&&(j.length=u),this&&this!==nt&&this instanceof l&&(L=_||_n(e)),L.apply(A,j)}var p=t&k,d=t&C,m=t&U,f=t&N,h=t&O,v=t&x,_=m?P:_n(e);return l}function Mn(e,t,n){var r=e.length;if(t=+t,r>=t||!bi(t))return"";var o=t-r;return n=null==n?" ":n+"",_s(n,vi(o/n.length)).slice(0,o)}function kn(e,t,n,r){function o(){for(var t=-1,a=arguments.length,u=-1,c=r.length,l=Bs(c+a);++u<c;)l[u]=r[u];for(;a--;)l[u++]=arguments[++t];var p=this&&this!==nt&&this instanceof o?i:e;return p.apply(s?n:this,l)}var s=t&C,i=_n(e);return o}function Sn(e){var t=Ks[e];return function(e,n){return n=n===P?0:+n||0,n?(n=ci(10,n),t(e*n)/n):t(e)}}function In(e){return function(t,n,r,o){var s=Bn(r);return null==r&&s===bt?rn(t,n,e):on(t,n,s(r,o,1),e)}}function An(e,t,n,r,o,s,i,a){var u=t&U;if(!u&&"function"!=typeof e)throw new Gs(q);var c=r?r.length:0;if(c||(t&=~(T|M),r=o=P),c-=o?o.length:0,t&M){var l=r,p=o;r=o=P}var d=u?P:Bi(e),m=[e,t,n,r,o,l,p,s,i,a];if(d&&(or(m,d),t=m[1],a=m[9]),m[9]=null==a?u?0:e.length:wi(a-c,0)||0,t==C)var f=fn(m[0],m[2]);else f=t!=T&&t!=(C|T)||m[4].length?Tn.apply(P,m):kn.apply(P,m);var h=d?Vi:qi;return h(f,m)}function Ln(e,t,n,r,o,s,i){var a=-1,u=e.length,c=t.length;if(u!=c&&!(o&&c>u))return!1;for(;++a<u;){var l=e[a],p=t[a],d=r?r(o?p:l,o?l:p,a):P;if(d!==P){
if(d)continue;return!1}if(o){if(!dt(t,function(e){return l===e||n(l,e,r,o,s,i)}))return!1}else if(l!==p&&!n(l,p,r,o,s,i))return!1}return!0}function Fn(e,t,n){switch(n){case z:case Y:return+e==+t;case $:return e.name==t.name&&e.message==t.message;case J:return e!=+e?t!=+t:e==+t;case ee:case ne:return e==t+""}return!1}function Vn(e,t,n,r,o,s,i){var a=Va(e),u=a.length,c=Va(t),l=c.length;if(u!=l&&!o)return!1;for(var p=u;p--;){var d=a[p];if(!(o?d in t:ti.call(t,d)))return!1}for(var m=o;++p<u;){d=a[p];var f=e[d],h=t[d],v=r?r(o?h:f,o?f:h,d):P;if(!(v===P?n(f,h,r,o,s,i):v))return!1;m||(m="constructor"==d)}if(!m){var _=e.constructor,y=t.constructor;if(_!=y&&"constructor"in e&&"constructor"in t&&!("function"==typeof _&&_ instanceof _&&"function"==typeof y&&y instanceof y))return!1}return!0}function Bn(e,n,r){var o=t.callback||Rs;return o=o===Rs?bt:o,r?o(e,n,r):o}function Hn(e){for(var t=e.name,n=ki[t],r=n?n.length:0;r--;){var o=n[r],s=o.func;if(null==s||s==e)return o.name}return t}function qn(e,n,r){var o=t.indexOf||Dr;return o=o===Dr?s:o,e?o(e,n,r):o}function Wn(e){for(var t=ns(e),n=t.length;n--;)t[n][2]=rr(t[n][1]);return t}function Kn(e,t){var n=null==e?P:e[t];return Lo(n)?n:P}function Qn(e,t,n){for(var r=-1,o=n.length;++r<o;){var s=n[r],i=s.size;switch(s.type){case"drop":e+=i;break;case"dropRight":t-=i;break;case"take":t=Ei(t,e+i);break;case"takeRight":e=wi(e,t-i)}}return{start:e,end:t}}function zn(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&ti.call(e,"index")&&(n.index=e.index,n.input=e.input),n}function Yn(e){var t=e.constructor;return"function"==typeof t&&t instanceof t||(t=zs),new t}function $n(e,t,n){var r=e.constructor;switch(t){case oe:return an(e);case z:case Y:return new r(+e);case se:case ie:case ae:case ue:case ce:case le:case pe:case de:case me:var o=e.buffer;return new r(n?an(o):o,e.byteOffset,e.length);case J:case ne:return new r(e);case ee:var s=new r(e.source,Te.exec(e));s.lastIndex=e.lastIndex}return s}function Gn(e,t,n){null==e||er(t,e)||(t=dr(t),e=1==t.length?e:kt(e,Yt(t,0,-1)),t=Rr(t));var r=null==e?e:e[t];return null==r?P:r.apply(e,n)}function Xn(e){return null!=e&&nr(Hi(e))}function Jn(e,t){return e="number"==typeof e||Se.test(e)?+e:-1,t=null==t?Ti:t,e>-1&&e%1==0&&t>e}function Zn(e,t,n){if(!So(n))return!1;var r=typeof t;if("number"==r?Xn(n)&&Jn(t,n.length):"string"==r&&t in n){var o=n[t];return e===e?e===o:o!==o}return!1}function er(e,t){var n=typeof e;if("string"==n&&Pe.test(e)||"number"==n)return!0;if(Oa(e))return!1;var r=!De.test(e);return r||null!=t&&e in pr(t)}function tr(e){var n=Hn(e);if(!(n in X.prototype))return!1;var r=t[n];if(e===r)return!0;var o=Bi(r);return!!o&&e===o[0]}function nr(e){return"number"==typeof e&&e>-1&&e%1==0&&Ti>=e}function rr(e){return e===e&&!So(e)}function or(e,t){var n=e[1],r=t[1],o=n|r,s=k>o,i=r==k&&n==N||r==k&&n==S&&e[7].length<=t[8]||r==(k|S)&&n==N;if(!s&&!i)return e;r&C&&(e[2]=t[2],o|=n&C?0:O);var a=t[3];if(a){var u=e[3];e[3]=u?un(u,a,t[4]):et(a),e[4]=u?g(e[3],W):et(t[4])}return a=t[5],a&&(u=e[5],e[5]=u?cn(u,a,t[6]):et(a),e[6]=u?g(e[5],W):et(t[6])),a=t[7],a&&(e[7]=et(a)),r&k&&(e[8]=null==e[8]?t[8]:Ei(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=o,e}function sr(e,t){return e===P?t:Na(e,t,sr)}function ir(e,t){e=pr(e);for(var n=-1,r=t.length,o={};++n<r;){var s=t[n];s in e&&(o[s]=e[s])}return o}function ar(e,t){var n={};return Nt(e,function(e,r,o){t(e,r,o)&&(n[r]=e)}),n}function ur(e,t){for(var n=e.length,r=Ei(t.length,n),o=et(e);r--;){var s=t[r];e[r]=Jn(s,n)?o[s]:P}return e}function cr(e){for(var t=ts(e),n=t.length,r=n&&e.length,o=!!r&&nr(r)&&(Oa(e)||Ro(e)),s=-1,i=[];++s<n;){var a=t[s];(o&&Jn(a,r)||ti.call(e,a))&&i.push(a)}return i}function lr(e){return null==e?[]:Xn(e)?So(e)?e:zs(e):is(e)}function pr(e){return So(e)?e:zs(e)}function dr(e){if(Oa(e))return e;var t=[];return a(e).replace(Re,function(e,n,r,o){t.push(r?o.replace(Ne,"$1"):n||e)}),t}function mr(e){return e instanceof X?e.clone():new y(e.__wrapped__,e.__chain__,et(e.__actions__))}function fr(e,t,n){t=(n?Zn(e,t,n):null==t)?1:wi(yi(t)||1,1);for(var r=0,o=e?e.length:0,s=-1,i=Bs(vi(o/t));o>r;)i[++s]=Yt(e,r,r+=t);return i}function hr(e){for(var t=-1,n=e?e.length:0,r=-1,o=[];++t<n;){var s=e[t];s&&(o[++r]=s)}return o}function vr(e,t,n){var r=e?e.length:0;return r?((n?Zn(e,t,n):null==t)&&(t=1),Yt(e,0>t?0:t)):[]}function _r(e,t,n){var r=e?e.length:0;return r?((n?Zn(e,t,n):null==t)&&(t=1),t=r-(+t||0),Yt(e,0,0>t?0:t)):[]}function yr(e,t,n){return e&&e.length?tn(e,Bn(t,n,3),!0,!0):[]}function gr(e,t,n){return e&&e.length?tn(e,Bn(t,n,3),!0):[]}function br(e,t,n,r){var o=e?e.length:0;return o?(n&&"number"!=typeof n&&Zn(e,t,n)&&(n=0,r=o),Rt(e,t,n,r)):[]}function jr(e){return e?e[0]:P}function wr(e,t,n){var r=e?e.length:0;return n&&Zn(e,t,n)&&(t=!1),r?Ot(e,t):[]}function Er(e){var t=e?e.length:0;return t?Ot(e,!0):[]}function Dr(e,t,n){var r=e?e.length:0;if(!r)return-1;if("number"==typeof n)n=0>n?wi(r+n,0):n;else if(n){var o=rn(e,t);return r>o&&(t===t?t===e[o]:e[o]!==e[o])?o:-1}return s(e,t,n||0)}function Pr(e){return _r(e,1)}function Rr(e){var t=e?e.length:0;return t?e[t-1]:P}function Cr(e,t,n){var r=e?e.length:0;if(!r)return-1;var o=r;if("number"==typeof n)o=(0>n?wi(r+n,0):Ei(n||0,r-1))+1;else if(n){o=rn(e,t,!0)-1;var s=e[o];return(t===t?t===s:s!==s)?o:-1}if(t!==t)return v(e,o,!0);for(;o--;)if(e[o]===t)return o;return-1}function Ur(){var e=arguments,t=e[0];if(!t||!t.length)return t;for(var n=0,r=qn(),o=e.length;++n<o;)for(var s=0,i=e[n];(s=r(t,i,s))>-1;)mi.call(t,s,1);return t}function Or(e,t,n){var r=[];if(!e||!e.length)return r;var o=-1,s=[],i=e.length;for(t=Bn(t,n,3);++o<i;){var a=e[o];t(a,o,e)&&(r.push(a),s.push(o))}return Kt(e,s),r}function Nr(e){return vr(e,1)}function xr(e,t,n){var r=e?e.length:0;return r?(n&&"number"!=typeof n&&Zn(e,t,n)&&(t=0,n=r),Yt(e,t,n)):[]}function Tr(e,t,n){var r=e?e.length:0;return r?((n?Zn(e,t,n):null==t)&&(t=1),Yt(e,0,0>t?0:t)):[]}function Mr(e,t,n){var r=e?e.length:0;return r?((n?Zn(e,t,n):null==t)&&(t=1),t=r-(+t||0),Yt(e,0>t?0:t)):[]}function kr(e,t,n){return e&&e.length?tn(e,Bn(t,n,3),!1,!0):[]}function Sr(e,t,n){return e&&e.length?tn(e,Bn(t,n,3)):[]}function Ir(e,t,n,r){var o=e?e.length:0;if(!o)return[];null!=t&&"boolean"!=typeof t&&(r=n,n=Zn(e,t,r)?P:t,t=!1);var i=Bn();return(null!=n||i!==bt)&&(n=i(n,r,3)),t&&qn()==s?b(e,n):Zt(e,n)}function Ar(e){if(!e||!e.length)return[];var t=-1,n=0;e=at(e,function(e){return Xn(e)?(n=wi(e.length,n),!0):void 0});for(var r=Bs(n);++t<n;)r[t]=ut(e,qt(t));return r}function Lr(e,t,n){var r=e?e.length:0;if(!r)return[];var o=Ar(e);return null==t?o:(t=sn(t,n,4),ut(o,function(e){return lt(e,t,P,!0)}))}function Fr(){for(var e=-1,t=arguments.length;++e<t;){var n=arguments[e];if(Xn(n))var r=r?ct(Et(r,n),Et(n,r)):n}return r?Zt(r):[]}function Vr(e,t){var n=-1,r=e?e.length:0,o={};for(!r||t||Oa(e[0])||(t=[]);++n<r;){var s=e[n];t?o[s]=t[n]:s&&(o[s[0]]=s[1])}return o}function Br(e){var n=t(e);return n.__chain__=!0,n}function Hr(e,t,n){return t.call(n,e),e}function qr(e,t,n){return t.call(n,e)}function Wr(){return Br(this)}function Kr(){return new y(this.value(),this.__chain__)}function Qr(e){for(var t,r=this;r instanceof n;){var o=mr(r);t?s.__wrapped__=o:t=o;var s=o;r=r.__wrapped__}return s.__wrapped__=e,t}function zr(){var e=this.__wrapped__,t=function(e){return n&&n.__dir__<0?e:e.reverse()};if(e instanceof X){var n=e;return this.__actions__.length&&(n=new X(this)),n=n.reverse(),n.__actions__.push({func:qr,args:[t],thisArg:P}),new y(n,this.__chain__)}return this.thru(t)}function Yr(){return this.value()+""}function $r(){return nn(this.__wrapped__,this.__actions__)}function Gr(e,t,n){var r=Oa(e)?st:Dt;return n&&Zn(e,t,n)&&(t=P),("function"!=typeof t||n!==P)&&(t=Bn(t,n,3)),r(e,t)}function Xr(e,t,n){var r=Oa(e)?at:Ct;return t=Bn(t,n,3),r(e,t)}function Jr(e,t){return oa(e,Ft(t))}function Zr(e,t,n,r){var o=e?Hi(e):0;return nr(o)||(e=is(e),o=e.length),n="number"!=typeof n||r&&Zn(t,n,r)?0:0>n?wi(o+n,0):n||0,"string"==typeof e||!Oa(e)&&qo(e)?o>=n&&e.indexOf(t,n)>-1:!!o&&qn(e,t,n)>-1}function eo(e,t,n){var r=Oa(e)?ut:Lt;return t=Bn(t,n,3),r(e,t)}function to(e,t){return eo(e,ks(t))}function no(e,t,n){var r=Oa(e)?at:Ct;return t=Bn(t,n,3),r(e,function(e,n,r){return!t(e,n,r)})}function ro(e,t,n){if(n?Zn(e,t,n):null==t){e=lr(e);var r=e.length;return r>0?e[Qt(0,r-1)]:P}var o=-1,s=Yo(e),r=s.length,i=r-1;for(t=Ei(0>t?0:+t||0,r);++o<t;){var a=Qt(o,i),u=s[a];s[a]=s[o],s[o]=u}return s.length=t,s}function oo(e){return ro(e,Ui)}function so(e){var t=e?Hi(e):0;return nr(t)?t:Va(e).length}function io(e,t,n){var r=Oa(e)?dt:$t;return n&&Zn(e,t,n)&&(t=P),("function"!=typeof t||n!==P)&&(t=Bn(t,n,3)),r(e,t)}function ao(e,t,n){if(null==e)return[];n&&Zn(e,t,n)&&(t=P);var r=-1;t=Bn(t,n,3);var o=Lt(e,function(e,n,o){return{criteria:t(e,n,o),index:++r,value:e}});return Gt(o,l)}function uo(e,t,n,r){return null==e?[]:(r&&Zn(t,n,r)&&(n=P),Oa(t)||(t=null==t?[]:[t]),Oa(n)||(n=null==n?[]:[n]),Xt(e,t,n))}function co(e,t){return Xr(e,Ft(t))}function lo(e,t){if("function"!=typeof t){if("function"!=typeof e)throw new Gs(q);var n=e;e=t,t=n}return e=bi(e=+e)?e:0,function(){return--e<1?t.apply(this,arguments):void 0}}function po(e,t,n){return n&&Zn(e,t,n)&&(t=P),t=e&&null==t?e.length:wi(+t||0,0),An(e,k,P,P,P,P,t)}function mo(e,t){var n;if("function"!=typeof t){if("function"!=typeof e)throw new Gs(q);var r=e;e=t,t=r}return function(){return--e>0&&(n=t.apply(this,arguments)),1>=e&&(t=P),n}}function fo(e,t,n){function r(){m&&ai(m),c&&ai(c),h=0,c=m=f=P}function o(t,n){n&&ai(n),c=m=f=P,t&&(h=ha(),l=e.apply(d,u),m||c||(u=d=P))}function s(){var e=t-(ha()-p);0>=e||e>t?o(f,c):m=di(s,e)}function i(){o(_,m)}function a(){if(u=arguments,p=ha(),d=this,f=_&&(m||!y),v===!1)var n=y&&!m;else{c||y||(h=p);var r=v-(p-h),o=0>=r||r>v;o?(c&&(c=ai(c)),h=p,l=e.apply(d,u)):c||(c=di(i,r))}return o&&m?m=ai(m):m||t===v||(m=di(s,t)),n&&(o=!0,l=e.apply(d,u)),!o||m||c||(u=d=P),l}var u,c,l,p,d,m,f,h=0,v=!1,_=!0;if("function"!=typeof e)throw new Gs(q);if(t=0>t?0:+t||0,n===!0){var y=!0;_=!1}else So(n)&&(y=!!n.leading,v="maxWait"in n&&wi(+n.maxWait||0,t),_="trailing"in n?!!n.trailing:_);return a.cancel=r,a}function ho(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new Gs(q);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],s=n.cache;if(s.has(o))return s.get(o);var i=e.apply(this,r);return n.cache=s.set(o,i),i};return n.cache=new ho.Cache,n}function vo(e){if("function"!=typeof e)throw new Gs(q);return function(){return!e.apply(this,arguments)}}function _o(e){return mo(2,e)}function yo(e,t){if("function"!=typeof e)throw new Gs(q);return t=wi(t===P?e.length-1:+t||0,0),function(){for(var n=arguments,r=-1,o=wi(n.length-t,0),s=Bs(o);++r<o;)s[r]=n[t+r];switch(t){case 0:return e.call(this,s);case 1:return e.call(this,n[0],s);case 2:return e.call(this,n[0],n[1],s)}var i=Bs(t+1);for(r=-1;++r<t;)i[r]=n[r];return i[t]=s,e.apply(this,i)}}function go(e){if("function"!=typeof e)throw new Gs(q);return function(t){return e.apply(this,t)}}function bo(e,t,n){var r=!0,o=!0;if("function"!=typeof e)throw new Gs(q);return n===!1?r=!1:So(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),fo(e,t,{leading:r,maxWait:+t,trailing:o})}function jo(e,t){return t=null==t?Us:t,An(t,T,P,[e],[])}function wo(e,t,n,r){return t&&"boolean"!=typeof t&&Zn(e,t,n)?t=!1:"function"==typeof t&&(r=n,n=t,t=!1),"function"==typeof n?jt(e,t,sn(n,r,1)):jt(e,t)}function Eo(e,t,n){return"function"==typeof t?jt(e,!0,sn(t,n,1)):jt(e,!0)}function Do(e,t){return e>t}function Po(e,t){return e>=t}function Ro(e){return _(e)&&Xn(e)&&ti.call(e,"callee")&&!li.call(e,"callee")}function Co(e){return e===!0||e===!1||_(e)&&ri.call(e)==z}function Uo(e){return _(e)&&ri.call(e)==Y}function Oo(e){return!!e&&1===e.nodeType&&_(e)&&!Bo(e)}function No(e){return null==e?!0:Xn(e)&&(Oa(e)||qo(e)||Ro(e)||_(e)&&ko(e.splice))?!e.length:!Va(e).length}function xo(e,t,n,r){n="function"==typeof n?sn(n,r,3):P;var o=n?n(e,t):P;return o===P?St(e,t,n):!!o}function To(e){return _(e)&&"string"==typeof e.message&&ri.call(e)==$}function Mo(e){return"number"==typeof e&&bi(e)}function ko(e){return So(e)&&ri.call(e)==G}function So(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Io(e,t,n,r){return n="function"==typeof n?sn(n,r,3):P,At(e,Wn(t),n)}function Ao(e){return Vo(e)&&e!=+e}function Lo(e){return null==e?!1:ko(e)?si.test(ei.call(e)):_(e)&&ke.test(e)}function Fo(e){return null===e}function Vo(e){return"number"==typeof e||_(e)&&ri.call(e)==J}function Bo(e){var t;if(!_(e)||ri.call(e)!=Z||Ro(e)||!ti.call(e,"constructor")&&(t=e.constructor,"function"==typeof t&&!(t instanceof t)))return!1;var n;return Nt(e,function(e,t){n=t}),n===P||ti.call(e,n)}function Ho(e){return So(e)&&ri.call(e)==ee}function qo(e){return"string"==typeof e||_(e)&&ri.call(e)==ne}function Wo(e){return _(e)&&nr(e.length)&&!!He[ri.call(e)]}function Ko(e){return e===P}function Qo(e,t){return t>e}function zo(e,t){return t>=e}function Yo(e){var t=e?Hi(e):0;return nr(t)?t?et(e):[]:is(e)}function $o(e){return gt(e,ts(e))}function Go(e,t,n){var r=Si(e);return n&&Zn(e,t,n)&&(t=P),t?_t(r,t):r}function Xo(e){return Mt(e,ts(e))}function Jo(e,t,n){var r=null==e?P:kt(e,dr(t),t+"");return r===P?n:r}function Zo(e,t){if(null==e)return!1;var n=ti.call(e,t);if(!n&&!er(t)){if(t=dr(t),e=1==t.length?e:kt(e,Yt(t,0,-1)),null==e)return!1;t=Rr(t),n=ti.call(e,t)}return n||nr(e.length)&&Jn(t,e.length)&&(Oa(e)||Ro(e))}function es(e,t,n){n&&Zn(e,t,n)&&(t=P);for(var r=-1,o=Va(e),s=o.length,i={};++r<s;){var a=o[r],u=e[a];t?ti.call(i,u)?i[u].push(a):i[u]=[a]:i[u]=a}return i}function ts(e){if(null==e)return[];So(e)||(e=zs(e));var t=e.length;t=t&&nr(t)&&(Oa(e)||Ro(e))&&t||0;for(var n=e.constructor,r=-1,o="function"==typeof n&&n.prototype===e,s=Bs(t),i=t>0;++r<t;)s[r]=r+"";for(var a in e)i&&Jn(a,t)||"constructor"==a&&(o||!ti.call(e,a))||s.push(a);return s}function ns(e){e=pr(e);for(var t=-1,n=Va(e),r=n.length,o=Bs(r);++t<r;){var s=n[t];o[t]=[s,e[s]]}return o}function rs(e,t,n){var r=null==e?P:e[t];return r===P&&(null==e||er(t,e)||(t=dr(t),e=1==t.length?e:kt(e,Yt(t,0,-1)),r=null==e?P:e[Rr(t)]),r=r===P?n:r),ko(r)?r.call(e):r}function os(e,t,n){if(null==e)return e;var r=t+"";t=null!=e[r]||er(t,e)?[r]:dr(t);for(var o=-1,s=t.length,i=s-1,a=e;null!=a&&++o<s;){var u=t[o];So(a)&&(o==i?a[u]=n:null==a[u]&&(a[u]=Jn(t[o+1])?[]:{})),a=a[u]}return e}function ss(e,t,n,r){var o=Oa(e)||Wo(e);if(t=Bn(t,r,4),null==n)if(o||So(e)){var s=e.constructor;n=o?Oa(e)?new s:[]:Si(ko(s)?s.prototype:P)}else n={};return(o?tt:xt)(e,function(e,r,o){return t(n,e,r,o)}),n}function is(e){return en(e,Va(e))}function as(e){return en(e,ts(e))}function us(e,t,n){return t=+t||0,n===P?(n=t,t=0):n=+n||0,e>=Ei(t,n)&&e<wi(t,n)}function cs(e,t,n){n&&Zn(e,t,n)&&(t=n=P);var r=null==e,o=null==t;if(null==n&&(o&&"boolean"==typeof e?(n=e,e=1):"boolean"==typeof t&&(n=t,o=!0)),r&&o&&(t=1,o=!1),e=+e||0,o?(t=e,e=0):t=+t||0,n||e%1||t%1){var s=Ri();return Ei(e+s*(t-e+ui("1e-"+((s+"").length-1))),t)}return Qt(e,t)}function ls(e){return e=a(e),e&&e.charAt(0).toUpperCase()+e.slice(1)}function ps(e){return e=a(e),e&&e.replace(Ie,d).replace(Oe,"")}function ds(e,t,n){e=a(e),t+="";var r=e.length;return n=n===P?r:Ei(0>n?0:+n||0,r),n-=t.length,n>=0&&e.indexOf(t,n)==n}function ms(e){return e=a(e),e&&be.test(e)?e.replace(ye,m):e}function fs(e){return e=a(e),e&&Ue.test(e)?e.replace(Ce,f):e||"(?:)"}function hs(e,t,n){e=a(e),t=+t;var r=e.length;if(r>=t||!bi(t))return e;var o=(t-r)/2,s=yi(o),i=vi(o);return n=Mn("",i,n),n.slice(0,s)+e+n}function vs(e,t,n){return(n?Zn(e,t,n):null==t)?t=0:t&&(t=+t),e=bs(e),Pi(e,t||(Me.test(e)?16:10))}function _s(e,t){var n="";if(e=a(e),t=+t,1>t||!e||!bi(t))return n;do t%2&&(n+=e),t=yi(t/2),e+=e;while(t);return n}function ys(e,t,n){return e=a(e),n=null==n?0:Ei(0>n?0:+n||0,e.length),e.lastIndexOf(t,n)==n}function gs(e,n,r){var o=t.templateSettings;r&&Zn(e,n,r)&&(n=r=P),e=a(e),n=vt(_t({},r||n),o,ht);var s,i,u=vt(_t({},n.imports),o.imports,ht),c=Va(u),l=en(u,c),p=0,d=n.interpolate||Ae,m="__p += '",f=Ys((n.escape||Ae).source+"|"+d.source+"|"+(d===Ee?xe:Ae).source+"|"+(n.evaluate||Ae).source+"|$","g"),v="//# sourceURL="+("sourceURL"in n?n.sourceURL:"lodash.templateSources["+ ++Be+"]")+"\n";e.replace(f,function(t,n,r,o,a,u){return r||(r=o),m+=e.slice(p,u).replace(Le,h),n&&(s=!0,m+="' +\n__e("+n+") +\n'"),a&&(i=!0,m+="';\n"+a+";\n__p += '"),r&&(m+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),p=u+t.length,t}),m+="';\n";var _=n.variable;_||(m="with (obj) {\n"+m+"\n}\n"),m=(i?m.replace(fe,""):m).replace(he,"$1").replace(ve,"$1;"),m="function("+(_||"obj")+") {\n"+(_?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(s?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+m+"return __p\n}";var y=Xa(function(){return Ws(c,v+"return "+m).apply(P,l)});if(y.source=m,To(y))throw y;return y}function bs(e,t,n){var r=e;return(e=a(e))?(n?Zn(r,t,n):null==t)?e.slice(j(e),w(e)+1):(t+="",e.slice(u(e,t),c(e,t)+1)):e}function js(e,t,n){var r=e;return e=a(e),e?e.slice((n?Zn(r,t,n):null==t)?j(e):u(e,t+"")):e}function ws(e,t,n){var r=e;return e=a(e),e?(n?Zn(r,t,n):null==t)?e.slice(0,w(e)+1):e.slice(0,c(e,t+"")+1):e}function Es(e,t,n){n&&Zn(e,t,n)&&(t=P);var r=I,o=A;if(null!=t)if(So(t)){var s="separator"in t?t.separator:s;r="length"in t?+t.length||0:r,o="omission"in t?a(t.omission):o}else r=+t||0;if(e=a(e),r>=e.length)return e;var i=r-o.length;if(1>i)return o;var u=e.slice(0,i);if(null==s)return u+o;if(Ho(s)){if(e.slice(i).search(s)){var c,l,p=e.slice(0,i);for(s.global||(s=Ys(s.source,(Te.exec(s)||"")+"g")),s.lastIndex=0;c=s.exec(p);)l=c.index;u=u.slice(0,null==l?i:l)}}else if(e.indexOf(s,i)!=i){var d=u.lastIndexOf(s);d>-1&&(u=u.slice(0,d))}return u+o}function Ds(e){return e=a(e),e&&ge.test(e)?e.replace(_e,E):e}function Ps(e,t,n){return n&&Zn(e,t,n)&&(t=P),e=a(e),e.match(t||Fe)||[]}function Rs(e,t,n){return n&&Zn(e,t,n)&&(t=P),_(e)?Os(e):bt(e,t)}function Cs(e){return function(){return e}}function Us(e){return e}function Os(e){return Ft(jt(e,!0))}function Ns(e,t){return Vt(e,jt(t,!0))}function xs(e,t,n){if(null==n){var r=So(t),o=r?Va(t):P,s=o&&o.length?Mt(t,o):P;(s?s.length:r)||(s=!1,n=t,t=e,e=this)}s||(s=Mt(t,Va(t)));var i=!0,a=-1,u=ko(e),c=s.length;n===!1?i=!1:So(n)&&"chain"in n&&(i=n.chain);for(;++a<c;){var l=s[a],p=t[l];e[l]=p,u&&(e.prototype[l]=function(t){return function(){var n=this.__chain__;if(i||n){var r=e(this.__wrapped__),o=r.__actions__=et(this.__actions__);return o.push({func:t,args:arguments,thisArg:e}),r.__chain__=n,r}return t.apply(e,ct([this.value()],arguments))}}(p))}return e}function Ts(){return nt._=oi,this}function Ms(){}function ks(e){return er(e)?qt(e):Wt(e)}function Ss(e){return function(t){return kt(e,dr(t),t+"")}}function Is(e,t,n){n&&Zn(e,t,n)&&(t=n=P),e=+e||0,n=null==n?1:+n||0,null==t?(t=e,e=0):t=+t||0;for(var r=-1,o=wi(vi((t-e)/(n||1)),0),s=Bs(o);++r<o;)s[r]=e,e+=n;return s}function As(e,t,n){if(e=yi(e),1>e||!bi(e))return[];var r=-1,o=Bs(Ei(e,Oi));for(t=sn(t,n,1);++r<e;)Oi>r?o[r]=t(r):t(r);return o}function Ls(e){var t=++ni;return a(e)+t}function Fs(e,t){return(+e||0)+(+t||0)}function Vs(e,t,n){return n&&Zn(e,t,n)&&(t=P),t=Bn(t,n,3),1==t.length?mt(Oa(e)?e:lr(e),t):Jt(e,t)}e=e?rt.defaults(nt.Object(),e,rt.pick(nt,Ve)):nt;{var Bs=e.Array,Hs=e.Date,qs=e.Error,Ws=e.Function,Ks=e.Math,Qs=e.Number,zs=e.Object,Ys=e.RegExp,$s=e.String,Gs=e.TypeError,Xs=Bs.prototype,Js=zs.prototype,Zs=$s.prototype,ei=Ws.prototype.toString,ti=Js.hasOwnProperty,ni=0,ri=Js.toString,oi=nt._,si=Ys("^"+ei.call(ti).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ii=e.ArrayBuffer,ai=e.clearTimeout,ui=e.parseFloat,ci=Ks.pow,li=Js.propertyIsEnumerable,pi=Kn(e,"Set"),di=e.setTimeout,mi=Xs.splice,fi=e.Uint8Array,hi=Kn(e,"WeakMap"),vi=Ks.ceil,_i=Kn(zs,"create"),yi=Ks.floor,gi=Kn(Bs,"isArray"),bi=e.isFinite,ji=Kn(zs,"keys"),wi=Ks.max,Ei=Ks.min,Di=Kn(Hs,"now"),Pi=e.parseInt,Ri=Ks.random,Ci=Qs.NEGATIVE_INFINITY,Ui=Qs.POSITIVE_INFINITY,Oi=4294967295,Ni=Oi-1,xi=Oi>>>1,Ti=9007199254740991,Mi=hi&&new hi,ki={};t.support={}}t.templateSettings={escape:je,evaluate:we,interpolate:Ee,variable:"",imports:{_:t}};var Si=function(){function e(){}return function(t){if(So(t)){e.prototype=t;var n=new e;e.prototype=P}return n||{}}}(),Ii=dn(xt),Ai=dn(Tt,!0),Li=mn(),Fi=mn(!0),Vi=Mi?function(e,t){return Mi.set(e,t),e}:Us,Bi=Mi?function(e){return Mi.get(e)}:Ms,Hi=qt("length"),qi=function(){var e=0,t=0;return function(n,r){var o=ha(),s=F-(o-t);if(t=o,s>0){if(++e>=L)return n}else e=0;return Vi(n,r)}}(),Wi=yo(function(e,t){return _(e)&&Xn(e)?Et(e,Ot(t,!1,!0)):[]}),Ki=wn(),Qi=wn(!0),zi=yo(function(e){for(var t=e.length,n=t,r=Bs(p),o=qn(),i=o==s,a=[];n--;){var u=e[n]=Xn(u=e[n])?u:[];r[n]=i&&u.length>=120?hn(n&&u):null}var c=e[0],l=-1,p=c?c.length:0,d=r[0];e:for(;++l<p;)if(u=c[l],(d?Xe(d,u):o(a,u,0))<0){for(var n=t;--n;){var m=r[n];if((m?Xe(m,u):o(e[n],u,0))<0)continue e}d&&d.push(u),a.push(u)}return a}),Yi=yo(function(e,t){t=Ot(t);var n=yt(e,t);return Kt(e,t.sort(r)),n}),$i=In(),Gi=In(!0),Xi=yo(function(e){return Zt(Ot(e,!1,!0))}),Ji=yo(function(e,t){return Xn(e)?Et(e,t):[]}),Zi=yo(Ar),ea=yo(function(e){var t=e.length,n=t>2?e[t-2]:P,r=t>1?e[t-1]:P;return t>2&&"function"==typeof n?t-=2:(n=t>1&&"function"==typeof r?(--t,r):P,r=P),e.length=t,Lr(e,n,r)}),ta=yo(function(e){return e=Ot(e),this.thru(function(t){return Ze(Oa(t)?t:[pr(t)],e)})}),na=yo(function(e,t){return yt(e,Ot(t))}),ra=ln(function(e,t,n){ti.call(e,n)?++e[n]:e[n]=1}),oa=jn(Ii),sa=jn(Ai,!0),ia=Pn(tt,Ii),aa=Pn(ot,Ai),ua=ln(function(e,t,n){ti.call(e,n)?e[n].push(t):e[n]=[t]}),ca=ln(function(e,t,n){e[n]=t}),la=yo(function(e,t,n){var r=-1,o="function"==typeof t,s=er(t),i=Xn(e)?Bs(e.length):[];return Ii(e,function(e){var a=o?t:s&&null!=e?e[t]:P;i[++r]=a?a.apply(e,n):Gn(e,t,n)}),i}),pa=ln(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]}),da=xn(lt,Ii),ma=xn(pt,Ai),fa=yo(function(e,t){if(null==e)return[];var n=t[2];return n&&Zn(t[0],t[1],n)&&(t.length=1),Xt(e,Ot(t),[])}),ha=Di||function(){return(new Hs).getTime()},va=yo(function(e,t,n){var r=C;if(n.length){var o=g(n,va.placeholder);r|=T}return An(e,r,t,n,o)}),_a=yo(function(e,t){t=t.length?Ot(t):Xo(e);for(var n=-1,r=t.length;++n<r;){var o=t[n];e[o]=An(e[o],C,e)}return e}),ya=yo(function(e,t,n){var r=C|U;if(n.length){var o=g(n,ya.placeholder);r|=T}return An(t,r,e,n,o)}),ga=yn(N),ba=yn(x),ja=yo(function(e,t){return wt(e,1,t)}),wa=yo(function(e,t,n){return wt(e,t,n)}),Ea=Dn(),Da=Dn(!0),Pa=yo(function(e,t){if(t=Ot(t),"function"!=typeof e||!st(t,i))throw new Gs(q);var n=t.length;return yo(function(r){for(var o=Ei(r.length,n);o--;)r[o]=t[o](r[o]);return e.apply(this,r)})}),Ra=Nn(T),Ca=Nn(M),Ua=yo(function(e,t){return An(e,S,P,P,P,Ot(t))}),Oa=gi||function(e){return _(e)&&nr(e.length)&&ri.call(e)==Q},Na=pn(Bt),xa=pn(function(e,t,n){return n?vt(e,t,n):_t(e,t)}),Ta=gn(xa,ft),Ma=gn(Na,sr),ka=En(xt),Sa=En(Tt),Ia=Rn(Li),Aa=Rn(Fi),La=Cn(xt),Fa=Cn(Tt),Va=ji?function(e){var t=null==e?P:e.constructor;return"function"==typeof t&&t.prototype===e||"function"!=typeof e&&Xn(e)?cr(e):So(e)?ji(e):[]}:cr,Ba=Un(!0),Ha=Un(),qa=yo(function(e,t){if(null==e)return{};if("function"!=typeof t[0]){var t=ut(Ot(t),$s);return ir(e,Et(ts(e),t))}var n=sn(t[0],t[1],3);return ar(e,function(e,t,r){return!n(e,t,r)})}),Wa=yo(function(e,t){return null==e?{}:"function"==typeof t[0]?ar(e,sn(t[0],t[1],3)):ir(e,Ot(t))}),Ka=vn(function(e,t,n){return t=t.toLowerCase(),e+(n?t.charAt(0).toUpperCase()+t.slice(1):t)}),Qa=vn(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),za=On(),Ya=On(!0),$a=vn(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}),Ga=vn(function(e,t,n){return e+(n?" ":"")+(t.charAt(0).toUpperCase()+t.slice(1))}),Xa=yo(function(e,t){try{return e.apply(P,t)}catch(n){return To(n)?n:new qs(n)}}),Ja=yo(function(e,t){return function(n){return Gn(n,e,t)}}),Za=yo(function(e,t){return function(n){return Gn(e,n,t)}}),eu=Sn("ceil"),tu=Sn("floor"),nu=bn(Do,Ci),ru=bn(Qo,Ui),ou=Sn("round");return t.prototype=n.prototype,y.prototype=Si(n.prototype),y.prototype.constructor=y,X.prototype=Si(n.prototype),X.prototype.constructor=X,Ke.prototype["delete"]=Qe,Ke.prototype.get=ze,Ke.prototype.has=Ye,Ke.prototype.set=$e,Ge.prototype.push=Je,ho.Cache=Ke,t.after=lo,t.ary=po,t.assign=xa,t.at=na,t.before=mo,t.bind=va,t.bindAll=_a,t.bindKey=ya,t.callback=Rs,t.chain=Br,t.chunk=fr,t.compact=hr,t.constant=Cs,t.countBy=ra,t.create=Go,t.curry=ga,t.curryRight=ba,t.debounce=fo,t.defaults=Ta,t.defaultsDeep=Ma,t.defer=ja,t.delay=wa,t.difference=Wi,t.drop=vr,t.dropRight=_r,t.dropRightWhile=yr,t.dropWhile=gr,t.fill=br,t.filter=Xr,t.flatten=wr,t.flattenDeep=Er,t.flow=Ea,t.flowRight=Da,t.forEach=ia,t.forEachRight=aa,t.forIn=Ia,t.forInRight=Aa,t.forOwn=La,t.forOwnRight=Fa,t.functions=Xo,t.groupBy=ua,t.indexBy=ca,t.initial=Pr,t.intersection=zi,t.invert=es,t.invoke=la,t.keys=Va,t.keysIn=ts,t.map=eo,t.mapKeys=Ba,t.mapValues=Ha,t.matches=Os,t.matchesProperty=Ns,t.memoize=ho,t.merge=Na,t.method=Ja,t.methodOf=Za,t.mixin=xs,t.modArgs=Pa,t.negate=vo,t.omit=qa,t.once=_o,t.pairs=ns,t.partial=Ra,t.partialRight=Ca,t.partition=pa,t.pick=Wa,t.pluck=to,t.property=ks,t.propertyOf=Ss,t.pull=Ur,t.pullAt=Yi,t.range=Is,t.rearg=Ua,t.reject=no,t.remove=Or,t.rest=Nr,t.restParam=yo,t.set=os,t.shuffle=oo,t.slice=xr,t.sortBy=ao,t.sortByAll=fa,t.sortByOrder=uo,t.spread=go,t.take=Tr,t.takeRight=Mr,t.takeRightWhile=kr,t.takeWhile=Sr,t.tap=Hr,t.throttle=bo,t.thru=qr,t.times=As,t.toArray=Yo,t.toPlainObject=$o,t.transform=ss,t.union=Xi,t.uniq=Ir,t.unzip=Ar,t.unzipWith=Lr,t.values=is,t.valuesIn=as,t.where=co,t.without=Ji,t.wrap=jo,t.xor=Fr,t.zip=Zi,t.zipObject=Vr,t.zipWith=ea,t.backflow=Da,t.collect=eo,t.compose=Da,t.each=ia,t.eachRight=aa,t.extend=xa,t.iteratee=Rs,t.methods=Xo,t.object=Vr,t.select=Xr,t.tail=Nr,t.unique=Ir,xs(t,t),t.add=Fs,t.attempt=Xa,t.camelCase=Ka,t.capitalize=ls,t.ceil=eu,t.clone=wo,t.cloneDeep=Eo,t.deburr=ps,t.endsWith=ds,t.escape=ms,t.escapeRegExp=fs,t.every=Gr,t.find=oa,t.findIndex=Ki,t.findKey=ka,t.findLast=sa,t.findLastIndex=Qi,t.findLastKey=Sa,t.findWhere=Jr,t.first=jr,t.floor=tu,t.get=Jo,t.gt=Do,t.gte=Po,t.has=Zo,t.identity=Us,t.includes=Zr,t.indexOf=Dr,t.inRange=us,t.isArguments=Ro,t.isArray=Oa,t.isBoolean=Co,t.isDate=Uo,t.isElement=Oo,t.isEmpty=No,t.isEqual=xo,t.isError=To,t.isFinite=Mo,t.isFunction=ko,t.isMatch=Io,t.isNaN=Ao,t.isNative=Lo,t.isNull=Fo,t.isNumber=Vo,t.isObject=So,t.isPlainObject=Bo,t.isRegExp=Ho,t.isString=qo,t.isTypedArray=Wo,t.isUndefined=Ko,t.kebabCase=Qa,t.last=Rr,t.lastIndexOf=Cr,t.lt=Qo,t.lte=zo,t.max=nu,t.min=ru,t.noConflict=Ts,t.noop=Ms,t.now=ha,t.pad=hs,t.padLeft=za,t.padRight=Ya,t.parseInt=vs,t.random=cs,t.reduce=da,t.reduceRight=ma,t.repeat=_s,t.result=rs,t.round=ou,t.runInContext=D,t.size=so,t.snakeCase=$a,t.some=io,t.sortedIndex=$i,t.sortedLastIndex=Gi,t.startCase=Ga,t.startsWith=ys,t.sum=Vs,t.template=gs,t.trim=bs,t.trimLeft=js,t.trimRight=ws,t.trunc=Es,t.unescape=Ds,t.uniqueId=Ls,t.words=Ps,t.all=Gr,t.any=io,t.contains=Zr,t.eq=xo,t.detect=oa,t.foldl=da,t.foldr=ma,t.head=jr,t.include=Zr,t.inject=da,xs(t,function(){var e={};return xt(t,function(n,r){t.prototype[r]||(e[r]=n)}),e}(),!1),t.sample=ro,t.prototype.sample=function(e){return this.__chain__||null!=e?this.thru(function(t){return ro(t,e)}):ro(this.value())},t.VERSION=R,tt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){t[e].placeholder=t}),tt(["drop","take"],function(e,t){X.prototype[e]=function(n){var r=this.__filtered__;if(r&&!t)return new X(this);n=null==n?1:wi(yi(n)||0,0);var o=this.clone();return r?o.__takeCount__=Ei(o.__takeCount__,n):o.__views__.push({size:n,type:e+(o.__dir__<0?"Right":"")}),o},X.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),tt(["filter","map","takeWhile"],function(e,t){var n=t+1,r=n!=H;X.prototype[e]=function(e,t){var o=this.clone();return o.__iteratees__.push({iteratee:Bn(e,t,1),type:n}),o.__filtered__=o.__filtered__||r,o}}),tt(["first","last"],function(e,t){var n="take"+(t?"Right":"");X.prototype[e]=function(){return this[n](1).value()[0]}}),tt(["initial","rest"],function(e,t){var n="drop"+(t?"":"Right");X.prototype[e]=function(){return this.__filtered__?new X(this):this[n](1)}}),tt(["pluck","where"],function(e,t){var n=t?"filter":"map",r=t?Ft:ks;X.prototype[e]=function(e){return this[n](r(e))}}),X.prototype.compact=function(){return this.filter(Us)},X.prototype.reject=function(e,t){return e=Bn(e,t,1),this.filter(function(t){return!e(t)})},X.prototype.slice=function(e,t){e=null==e?0:+e||0;var n=this;return n.__filtered__&&(e>0||0>t)?new X(n):(0>e?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==P&&(t=+t||0,n=0>t?n.dropRight(-t):n.take(t-e)),n)},X.prototype.takeRightWhile=function(e,t){return this.reverse().takeWhile(e,t).reverse()},X.prototype.toArray=function(){return this.take(Ui)},xt(X.prototype,function(e,n){var r=/^(?:filter|map|reject)|While$/.test(n),o=/^(?:first|last)$/.test(n),s=t[o?"take"+("last"==n?"Right":""):n];s&&(t.prototype[n]=function(){var t=o?[1]:arguments,n=this.__chain__,i=this.__wrapped__,a=!!this.__actions__.length,u=i instanceof X,c=t[0],l=u||Oa(i);l&&r&&"function"==typeof c&&1!=c.length&&(u=l=!1);var p=function(e){return o&&n?s(e,1)[0]:s.apply(P,ct([e],t))},d={func:qr,args:[p],thisArg:P},m=u&&!a;if(o&&!n)return m?(i=i.clone(),i.__actions__.push(d),e.call(i)):s.call(P,this.value())[0];if(!o&&l){i=m?i:new X(this);var f=e.apply(i,t);return f.__actions__.push(d),new y(f,n)}return this.thru(p)})}),tt(["join","pop","push","replace","shift","sort","splice","split","unshift"],function(e){var n=(/^(?:replace|split)$/.test(e)?Zs:Xs)[e],r=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",o=/^(?:join|pop|replace|shift)$/.test(e);t.prototype[e]=function(){var e=arguments;return o&&!this.__chain__?n.apply(this.value(),e):this[r](function(t){return n.apply(t,e)})}}),xt(X.prototype,function(e,n){var r=t[n];if(r){var o=r.name,s=ki[o]||(ki[o]=[]);s.push({name:n,func:r})}}),ki[Tn(P,U).name]=[{name:"wrapper",func:P}],X.prototype.clone=te,X.prototype.reverse=re,X.prototype.value=We,t.prototype.chain=Wr,t.prototype.commit=Kr,t.prototype.concat=ta,t.prototype.plant=Qr,t.prototype.reverse=zr,t.prototype.toString=Yr,t.prototype.run=t.prototype.toJSON=t.prototype.valueOf=t.prototype.value=$r,t.prototype.collect=t.prototype.map,t.prototype.head=t.prototype.first,t.prototype.select=t.prototype.filter,t.prototype.tail=t.prototype.rest,t}var P,R="3.10.0",C=1,U=2,O=4,N=8,x=16,T=32,M=64,k=128,S=256,I=30,A="...",L=150,F=16,V=200,B=1,H=2,q="Expected a function",W="__lodash_placeholder__",K="[object Arguments]",Q="[object Array]",z="[object Boolean]",Y="[object Date]",$="[object Error]",G="[object Function]",X="[object Map]",J="[object Number]",Z="[object Object]",ee="[object RegExp]",te="[object Set]",ne="[object String]",re="[object WeakMap]",oe="[object ArrayBuffer]",se="[object Float32Array]",ie="[object Float64Array]",ae="[object Int8Array]",ue="[object Int16Array]",ce="[object Int32Array]",le="[object Uint8Array]",pe="[object Uint8ClampedArray]",de="[object Uint16Array]",me="[object Uint32Array]",fe=/\b__p \+= '';/g,he=/\b(__p \+=) '' \+/g,ve=/(__e\(.*?\)|\b__t\)) \+\n'';/g,_e=/&(?:amp|lt|gt|quot|#39|#96);/g,ye=/[&<>"'`]/g,ge=RegExp(_e.source),be=RegExp(ye.source),je=/<%-([\s\S]+?)%>/g,we=/<%([\s\S]+?)%>/g,Ee=/<%=([\s\S]+?)%>/g,De=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,Pe=/^\w*$/,Re=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g,Ce=/^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,Ue=RegExp(Ce.source),Oe=/[\u0300-\u036f\ufe20-\ufe23]/g,Ne=/\\(\\)?/g,xe=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Te=/\w*$/,Me=/^0[xX]/,ke=/^\[object .+?Constructor\]$/,Se=/^\d+$/,Ie=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,Ae=/($^)/,Le=/['\n\r\u2028\u2029\\]/g,Fe=function(){var e="[A-Z\\xc0-\\xd6\\xd8-\\xde]",t="[a-z\\xdf-\\xf6\\xf8-\\xff]+";return RegExp(e+"+(?="+e+t+")|"+e+"?"+t+"|"+e+"+|[0-9]+","g")}(),Ve=["Array","ArrayBuffer","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Math","Number","Object","RegExp","Set","String","_","clearTimeout","isFinite","parseFloat","parseInt","setTimeout","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap"],Be=-1,He={};

He[se]=He[ie]=He[ae]=He[ue]=He[ce]=He[le]=He[pe]=He[de]=He[me]=!0,He[K]=He[Q]=He[oe]=He[z]=He[Y]=He[$]=He[G]=He[X]=He[J]=He[Z]=He[ee]=He[te]=He[ne]=He[re]=!1;var qe={};qe[K]=qe[Q]=qe[oe]=qe[z]=qe[Y]=qe[se]=qe[ie]=qe[ae]=qe[ue]=qe[ce]=qe[J]=qe[Z]=qe[ee]=qe[ne]=qe[le]=qe[pe]=qe[de]=qe[me]=!0,qe[$]=qe[G]=qe[X]=qe[te]=qe[re]=!1;var We={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss"},Ke={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},Qe={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},ze={"function":!0,object:!0},Ye={0:"x30",1:"x31",2:"x32",3:"x33",4:"x34",5:"x35",6:"x36",7:"x37",8:"x38",9:"x39",A:"x41",B:"x42",C:"x43",D:"x44",E:"x45",F:"x46",a:"x61",b:"x62",c:"x63",d:"x64",e:"x65",f:"x66",n:"x6e",r:"x72",t:"x74",u:"x75",v:"x76",x:"x78"},$e={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ge=ze[typeof n]&&n&&!n.nodeType&&n,Xe=ze[typeof t]&&t&&!t.nodeType&&t,Je=Ge&&Xe&&"object"==typeof e&&e&&e.Object&&e,Ze=ze[typeof self]&&self&&self.Object&&self,et=ze[typeof window]&&window&&window.Object&&window,tt=Xe&&Xe.exports===Ge&&Ge,nt=Je||et!==(this&&this.window)&&et||Ze||this,rt=D();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(nt._=rt,define(function(){return rt})):Ge&&Xe?tt?(Xe.exports=rt)._=rt:Ge._=rt:nt._=rt}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Cancellation.js":[function(e,t,n){"use strict";function r(){}t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/History.js":[function(e,t,n){"use strict";var r=e("react/lib/invariant"),o=e("react/lib/ExecutionEnvironment").canUseDOM,s={length:1,back:function(){r(o,"Cannot use History.back without a DOM"),s.length-=1,window.history.back()}};t.exports=s},{"react/lib/ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","react/lib/invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Match.js":[function(e,t,n){"use strict";function r(e,t,n){var o=e.childRoutes;if(o)for(var s,u,c=0,l=o.length;l>c;++c)if(u=o[c],!u.isDefault&&!u.isNotFound&&(s=r(u,t,n)))return s.routes.unshift(e),s;var p=e.defaultRoute;if(p&&(m=i.extractParams(p.path,t)))return new a(t,m,n,[e,p]);var d=e.notFoundRoute;if(d&&(m=i.extractParams(d.path,t)))return new a(t,m,n,[e,d]);var m=i.extractParams(e.path,t);return m?new a(t,m,n,[e]):null}var o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=e("./PathUtils"),a=function(){function e(t,n,r,s){o(this,e),this.pathname=t,this.params=n,this.query=r,this.routes=s}return s(e,null,[{key:"findMatch",value:function(e,t){for(var n=i.withoutQuery(t),o=i.extractQuery(t),s=null,a=0,u=e.length;null==s&&u>a;++a)s=r(e[a],n,o);return s}}]),e}();t.exports=a},{"./PathUtils":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PathUtils.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Navigation.js":[function(e,t,n){"use strict";var r=e("./PropTypes"),o={contextTypes:{router:r.router.isRequired},makePath:function(e,t,n){return this.context.router.makePath(e,t,n)},makeHref:function(e,t,n){return this.context.router.makeHref(e,t,n)},transitionTo:function(e,t,n){this.context.router.transitionTo(e,t,n)},replaceWith:function(e,t,n){this.context.router.replaceWith(e,t,n)},goBack:function(){return this.context.router.goBack()}};t.exports=o},{"./PropTypes":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PropTypes.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PathUtils.js":[function(e,t,n){"use strict";function r(e){if(!(e in p)){var t=[],n=e.replace(a,function(e,n){return n?(t.push(n),"([^/?#]+)"):"*"===e?(t.push("splat"),"(.*?)"):"\\"+e});p[e]={matcher:new RegExp("^"+n+"$","i"),paramNames:t}}return p[e]}var o=e("react/lib/invariant"),s=e("object-assign"),i=e("qs"),a=/:([a-zA-Z_$][a-zA-Z0-9_$]*)|[*.()\[\]\\+|{}^$]/g,u=/:([a-zA-Z_$][a-zA-Z0-9_$?]*[?]?)|[*]/g,c=/\/\/\?|\/\?\/|\/\?/g,l=/\?(.*)$/,p={},d={isAbsolute:function(e){return"/"===e.charAt(0)},join:function(e,t){return e.replace(/\/*$/,"/")+t},extractParamNames:function(e){return r(e).paramNames},extractParams:function(e,t){var n=r(e),o=n.matcher,s=n.paramNames,i=t.match(o);if(!i)return null;var a={};return s.forEach(function(e,t){a[e]=i[t+1]}),a},injectParams:function(e,t){t=t||{};var n=0;return e.replace(u,function(r,s){if(s=s||"splat","?"===s.slice(-1)){if(s=s.slice(0,-1),null==t[s])return""}else o(null!=t[s],'Missing "%s" parameter for path "%s"',s,e);var i;return"splat"===s&&Array.isArray(t[s])?(i=t[s][n++],o(null!=i,'Missing splat # %s for path "%s"',n,e)):i=t[s],i}).replace(c,"/")},extractQuery:function(e){var t=e.match(l);return t&&i.parse(t[1])},withoutQuery:function(e){return e.replace(l,"")},withQuery:function(e,t){var n=d.extractQuery(e);n&&(t=t?s(n,t):n);var r=i.stringify(t,{arrayFormat:"brackets"});return r?d.withoutQuery(e)+"?"+r:d.withoutQuery(e)}};t.exports=d},{"object-assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/node_modules/object-assign/index.js",qs:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/node_modules/qs/index.js","react/lib/invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PropTypes.js":[function(e,t,n){"use strict";var r=e("react/lib/Object.assign"),o=e("react").PropTypes,s=e("./Route"),i=r({},o,{falsy:function(e,t,n){return e[t]?new Error("<"+n+'> should not have a "'+t+'" prop'):void 0},route:o.instanceOf(s),router:o.func});t.exports=i},{"./Route":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Route.js",react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js","react/lib/Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Redirect.js":[function(e,t,n){"use strict";function r(e,t,n){this.to=e,this.params=t,this.query=n}t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Route.js":[function(e,t,n){"use strict";var r,o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=e("react/lib/Object.assign"),a=e("react/lib/invariant"),u=e("react/lib/warning"),c=e("./PathUtils"),l=function(){function e(t,n,r,s,i,a,u,l){o(this,e),this.name=t,this.path=n,this.paramNames=c.extractParamNames(this.path),this.ignoreScrollBehavior=!!r,this.isDefault=!!s,this.isNotFound=!!i,this.onEnter=a,this.onLeave=u,this.handler=l}return s(e,[{key:"appendChild",value:function(t){a(t instanceof e,"route.appendChild must use a valid Route"),this.childRoutes||(this.childRoutes=[]),this.childRoutes.push(t)}},{key:"toString",value:function(){var e="<Route";return this.name&&(e+=' name="'+this.name+'"'),e+=' path="'+this.path+'">'}}],[{key:"createRoute",value:function(t,n){t=t||{},"string"==typeof t&&(t={path:t});var o=r;o?u(null==t.parentRoute||t.parentRoute===o,"You should not use parentRoute with createRoute inside another route's child callback; it is ignored"):o=t.parentRoute;var s=t.name,i=t.path||s;!i||t.isDefault||t.isNotFound?i=o?o.path:"/":c.isAbsolute(i)?o&&a(i===o.path||0===o.paramNames.length,'You cannot nest path "%s" inside "%s"; the parent requires URL parameters',i,o.path):i=o?c.join(o.path,i):"/"+i,t.isNotFound&&!/\*$/.test(i)&&(i+="*");var l=new e(s,i,t.ignoreScrollBehavior,t.isDefault,t.isNotFound,t.onEnter,t.onLeave,t.handler);if(o&&(l.isDefault?(a(null==o.defaultRoute,"%s may not have more than one default route",o),o.defaultRoute=l):l.isNotFound&&(a(null==o.notFoundRoute,"%s may not have more than one not found route",o),o.notFoundRoute=l),o.appendChild(l)),"function"==typeof n){var p=r;r=l,n.call(l,l),r=p}return l}},{key:"createDefaultRoute",value:function(t){return e.createRoute(i({},t,{isDefault:!0}))}},{key:"createNotFoundRoute",value:function(t){return e.createRoute(i({},t,{isNotFound:!0}))}},{key:"createRedirect",value:function(t){return e.createRoute(i({},t,{path:t.path||t.from||"*",onEnter:function(e,n,r){e.redirect(t.to,t.params||n,t.query||r)}}))}}]),e}();t.exports=l},{"./PathUtils":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PathUtils.js","react/lib/Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","react/lib/invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","react/lib/warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/ScrollHistory.js":[function(e,t,n){"use strict";function r(e,t){if(!t)return!0;if(e.pathname===t.pathname)return!1;var n=e.routes,r=t.routes,o=n.filter(function(e){return-1!==r.indexOf(e)});return!o.some(function(e){return e.ignoreScrollBehavior})}var o=e("react/lib/invariant"),s=e("react/lib/ExecutionEnvironment").canUseDOM,i=e("./getWindowScrollPosition"),a={statics:{recordScrollPosition:function(e){this.scrollHistory||(this.scrollHistory={}),this.scrollHistory[e]=i()},getScrollPosition:function(e){return this.scrollHistory||(this.scrollHistory={}),this.scrollHistory[e]||null}},componentWillMount:function(){o(null==this.constructor.getScrollBehavior()||s,"Cannot use scroll behavior without a DOM")},componentDidMount:function(){this._updateScroll()},componentDidUpdate:function(e,t){this._updateScroll(t)},_updateScroll:function(e){if(r(this.state,e)){var t=this.constructor.getScrollBehavior();t&&t.updateScrollPosition(this.constructor.getScrollPosition(this.state.path),this.state.action)}}};t.exports=a},{"./getWindowScrollPosition":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/getWindowScrollPosition.js","react/lib/ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","react/lib/invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/State.js":[function(e,t,n){"use strict";var r=e("./PropTypes"),o={contextTypes:{router:r.router.isRequired},getPath:function(){return this.context.router.getCurrentPath()},getPathname:function(){return this.context.router.getCurrentPathname()},getParams:function(){return this.context.router.getCurrentParams()},getQuery:function(){return this.context.router.getCurrentQuery()},getRoutes:function(){return this.context.router.getCurrentRoutes()},isActive:function(e,t,n){return this.context.router.isActive(e,t,n)}};t.exports=o},{"./PropTypes":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PropTypes.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Transition.js":[function(e,t,n){"use strict";function r(e,t){this.path=e,this.abortReason=null,this.retry=t.bind(this)}var o=e("./Cancellation"),s=e("./Redirect");r.prototype.abort=function(e){null==this.abortReason&&(this.abortReason=e||"ABORT")},r.prototype.redirect=function(e,t,n){this.abort(new s(e,t,n))},r.prototype.cancel=function(){this.abort(new o)},r.from=function(e,t,n,r){t.reduce(function(t,r,o){return function(s){if(s||e.abortReason)t(s);else if(r.onLeave)try{r.onLeave(e,n[o],t),r.onLeave.length<3&&t()}catch(i){t(i)}else t()}},r)()},r.to=function(e,t,n,r,o){t.reduceRight(function(t,o){return function(s){if(s||e.abortReason)t(s);else if(o.onEnter)try{o.onEnter(e,n,r,t),o.onEnter.length<4&&t()}catch(i){t(i)}else t()}},o)()},t.exports=r},{"./Cancellation":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Cancellation.js","./Redirect":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Redirect.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/actions/LocationActions.js":[function(e,t,n){"use strict";var r={PUSH:"push",REPLACE:"replace",POP:"pop"};t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/behaviors/ImitateBrowserBehavior.js":[function(e,t,n){"use strict";var r=e("../actions/LocationActions"),o={updateScrollPosition:function(e,t){switch(t){case r.PUSH:case r.REPLACE:window.scrollTo(0,0);break;case r.POP:e?window.scrollTo(e.x,e.y):window.scrollTo(0,0)}}};t.exports=o},{"../actions/LocationActions":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/actions/LocationActions.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/behaviors/ScrollToTopBehavior.js":[function(e,t,n){"use strict";var r={updateScrollPosition:function(){window.scrollTo(0,0)}};t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/ContextWrapper.js":[function(e,t,n){"use strict";var r=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},i=e("react"),a=function(e){function t(){r(this,t),null!=e&&e.apply(this,arguments)}return s(t,e),o(t,[{key:"render",value:function(){return this.props.children}}]),t}(i.Component);t.exports=a},{react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/DefaultRoute.js":[function(e,t,n){"use strict";var r=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},o=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},s=e("../PropTypes"),i=e("./RouteHandler"),a=e("./Route"),u=function(e){function t(){r(this,t),null!=e&&e.apply(this,arguments)}return o(t,e),t}(a);u.propTypes={name:s.string,path:s.falsy,children:s.falsy,handler:s.func.isRequired},u.defaultProps={handler:i},t.exports=u},{"../PropTypes":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PropTypes.js","./Route":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/Route.js","./RouteHandler":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/RouteHandler.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/Link.js":[function(e,t,n){"use strict";function r(e){return 0===e.button}function o(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}var s=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},u=e("react"),c=e("react/lib/Object.assign"),l=e("../PropTypes"),p=function(e){function t(){s(this,t),null!=e&&e.apply(this,arguments)}return a(t,e),i(t,[{key:"handleClick",value:function(e){var t,n=!0;this.props.onClick&&(t=this.props.onClick(e)),!o(e)&&r(e)&&((t===!1||e.defaultPrevented===!0)&&(n=!1),e.preventDefault(),n&&this.context.router.transitionTo(this.props.to,this.props.params,this.props.query))}},{key:"getHref",value:function(){return this.context.router.makeHref(this.props.to,this.props.params,this.props.query)}},{key:"getClassName",value:function(){var e=this.props.className;return this.getActiveState()&&(e+=" "+this.props.activeClassName),e}},{key:"getActiveState",value:function(){return this.context.router.isActive(this.props.to,this.props.params,this.props.query)}},{key:"render",value:function(){var e=c({},this.props,{href:this.getHref(),className:this.getClassName(),onClick:this.handleClick.bind(this)});return e.activeStyle&&this.getActiveState()&&(e.style=e.activeStyle),u.DOM.a(e,this.props.children)}}]),t}(u.Component);p.contextTypes={router:l.router.isRequired},p.propTypes={activeClassName:l.string.isRequired,to:l.oneOfType([l.string,l.route]).isRequired,params:l.object,query:l.object,activeStyle:l.object,onClick:l.func},p.defaultProps={activeClassName:"active",className:""},t.exports=p},{"../PropTypes":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PropTypes.js",react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js","react/lib/Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/NotFoundRoute.js":[function(e,t,n){"use strict";var r=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},o=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},s=e("../PropTypes"),i=e("./RouteHandler"),a=e("./Route"),u=function(e){function t(){r(this,t),null!=e&&e.apply(this,arguments)}return o(t,e),t}(a);u.propTypes={name:s.string,path:s.falsy,children:s.falsy,handler:s.func.isRequired},u.defaultProps={handler:i},t.exports=u},{"../PropTypes":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PropTypes.js","./Route":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/Route.js","./RouteHandler":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/RouteHandler.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/Redirect.js":[function(e,t,n){"use strict";var r=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},o=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},s=e("../PropTypes"),i=e("./Route"),a=function(e){function t(){r(this,t),null!=e&&e.apply(this,arguments)}return o(t,e),t}(i);a.propTypes={path:s.string,from:s.string,to:s.string,handler:s.falsy},a.defaultProps={},t.exports=a},{"../PropTypes":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PropTypes.js","./Route":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/Route.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/Route.js":[function(e,t,n){"use strict";var r=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},i=e("react"),a=e("react/lib/invariant"),u=e("../PropTypes"),c=e("./RouteHandler"),l=function(e){function t(){r(this,t),null!=e&&e.apply(this,arguments)}return s(t,e),o(t,[{key:"render",value:function(){a(!1,"%s elements are for router configuration only and should not be rendered",this.constructor.name)}}]),t}(i.Component);l.propTypes={name:u.string,path:u.string,handler:u.func,ignoreScrollBehavior:u.bool},l.defaultProps={handler:c},t.exports=l},{"../PropTypes":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PropTypes.js","./RouteHandler":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/RouteHandler.js",react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js","react/lib/invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/RouteHandler.js":[function(e,t,n){"use strict";var r=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},i=e("react"),a=e("./ContextWrapper"),u=e("react/lib/Object.assign"),c=e("../PropTypes"),l="__routeHandler__",p=function(e){function t(){r(this,t),null!=e&&e.apply(this,arguments)}return s(t,e),o(t,[{key:"getChildContext",value:function(){return{routeDepth:this.context.routeDepth+1}}},{key:"componentDidMount",value:function(){this._updateRouteComponent(this.refs[l])}},{key:"componentDidUpdate",value:function(){this._updateRouteComponent(this.refs[l])}},{key:"componentWillUnmount",value:function(){this._updateRouteComponent(null)}},{key:"_updateRouteComponent",value:function(e){this.context.router.setRouteComponentAtDepth(this.getRouteDepth(),e)}},{key:"getRouteDepth",value:function(){return this.context.routeDepth}},{key:"createChildRouteHandler",value:function(e){var t=this.context.router.getRouteAtDepth(this.getRouteDepth());if(null==t)return null;var n=u({},e||this.props,{ref:l,params:this.context.router.getCurrentParams(),query:this.context.router.getCurrentQuery()});return i.createElement(t.handler,n)}},{key:"render",value:function(){var e=this.createChildRouteHandler();return e?i.createElement(a,null,e):i.createElement("script",null)}}]),t}(i.Component);p.contextTypes={routeDepth:c.number.isRequired,router:c.router.isRequired},p.childContextTypes={routeDepth:c.number.isRequired},t.exports=p},{"../PropTypes":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PropTypes.js","./ContextWrapper":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/ContextWrapper.js",react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js","react/lib/Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/createRouter.js":[function(e,t,n){(function(n){"use strict";function r(e,t){for(var n in t)if(t.hasOwnProperty(n)&&e[n]!==t[n])return!1;return!0}function o(e,t,n,o,s,i){return e.some(function(e){if(e!==t)return!1;for(var a,u=t.paramNames,c=0,l=u.length;l>c;++c)if(a=u[c],o[a]!==n[a])return!1;return r(s,i)&&r(i,s)})}function s(e,t){for(var n,r=0,o=e.length;o>r;++r)n=e[r],n.name&&(d(null==t[n.name],'You may not have more than one route named "%s"',n.name),t[n.name]=n),n.childRoutes&&s(n.childRoutes,t)}function i(e,t){return e.some(function(e){return e.name===t})}function a(e,t){for(var n in t)if(String(e[n])!==String(t[n]))return!1;return!0}function u(e,t){for(var n in t)if(String(e[n])!==String(t[n]))return!1;return!0}function c(e){e=e||{},w(e)&&(e={routes:e});var t=[],r=e.location||T,c=e.scrollBehavior||M,h={},k={},S=null,I=null;"string"==typeof r&&(r=new g(r)),r instanceof g?p(!m||"test"===n.env.NODE_ENV,"You should not use a static location in a DOM environment because the router will not be kept in sync with the current URL"):d(m||r.needsDOM===!1,"You cannot use %s without a DOM",r),r!==_||N()||(r=y);var A=l.createClass({displayName:"Router",statics:{isRunning:!1,cancelPendingTransition:function(){S&&(S.cancel(),S=null)},clearAllRoutes:function(){A.cancelPendingTransition(),A.namedRoutes={},A.routes=[]},addRoutes:function(e){w(e)&&(e=j(e)),s(e,A.namedRoutes),A.routes.push.apply(A.routes,e)},replaceRoutes:function(e){A.clearAllRoutes(),A.addRoutes(e),A.refresh()},match:function(e){return U.findMatch(A.routes,e)},makePath:function(e,t,n){var r;if(x.isAbsolute(e))r=e;else{var o=e instanceof O?e:A.namedRoutes[e];d(o instanceof O,'Cannot find a route named "%s"',e),r=o.path}return x.withQuery(x.injectParams(r,t),n)},makeHref:function(e,t,n){var o=A.makePath(e,t,n);return r===v?"#"+o:o},transitionTo:function(e,t,n){var o=A.makePath(e,t,n);S?r.replace(o):r.push(o)},replaceWith:function(e,t,n){r.replace(A.makePath(e,t,n))},goBack:function(){return R.length>1||r===y?(r.pop(),!0):(p(!1,"goBack() was ignored because there is no router history"),!1)},handleAbort:e.onAbort||function(e){if(r instanceof g)throw new Error("Unhandled aborted transition! Reason: "+e);e instanceof C||(e instanceof P?r.replace(A.makePath(e.to,e.params,e.query)):r.pop())},handleError:e.onError||function(e){throw e},handleLocationChange:function(e){A.dispatch(e.path,e.type)},dispatch:function(e,n){A.cancelPendingTransition();var r=h.path,s=null==n;if(r!==e||s){r&&n===f.PUSH&&A.recordScrollPosition(r);var i=A.match(e);p(null!=i,'No route matches path "%s". Make sure you have <Route path="%s"> somewhere in your routes',e,e),null==i&&(i={});var a,u,c=h.routes||[],l=h.params||{},d=h.query||{},m=i.routes||[],v=i.params||{},_=i.query||{};c.length?(a=c.filter(function(e){return!o(m,e,l,v,d,_)}),u=m.filter(function(e){return!o(c,e,l,v,d,_)})):(a=[],u=m);var y=new E(e,A.replaceWith.bind(A,e));S=y;var g=t.slice(c.length-a.length);E.from(y,a,g,function(t){return t||y.abortReason?I.call(A,t,y):void E.to(y,u,v,_,function(t){I.call(A,t,y,{path:e,action:n,pathname:i.pathname,routes:m,params:v,query:_})})})}},run:function(e){d(!A.isRunning,"Router is already running"),I=function(t,n,r){t&&A.handleError(t),S===n&&(S=null,n.abortReason?A.handleAbort(n.abortReason):e.call(A,A,k=r))},r instanceof g||(r.addChangeListener&&r.addChangeListener(A.handleLocationChange),A.isRunning=!0),A.refresh()},refresh:function(){A.dispatch(r.getCurrentPath(),null)},stop:function(){A.cancelPendingTransition(),r.removeChangeListener&&r.removeChangeListener(A.handleLocationChange),A.isRunning=!1},getLocation:function(){return r},getScrollBehavior:function(){return c},getRouteAtDepth:function(e){var t=h.routes;return t&&t[e]},setRouteComponentAtDepth:function(e,n){t[e]=n},getCurrentPath:function(){return h.path},getCurrentPathname:function(){return h.pathname},getCurrentParams:function(){return h.params},getCurrentQuery:function(){return h.query},getCurrentRoutes:function(){return h.routes},isActive:function(e,t,n){return x.isAbsolute(e)?e===h.path:i(h.routes,e)&&a(h.params,t)&&(null==n||u(h.query,n))}},mixins:[b],propTypes:{children:D.falsy},childContextTypes:{routeDepth:D.number.isRequired,router:D.router.isRequired},getChildContext:function(){return{routeDepth:1,router:A}},getInitialState:function(){return h=k},componentWillReceiveProps:function(){this.setState(h=k)},componentWillUnmount:function(){A.stop()},render:function(){var e=A.getRouteAtDepth(0);return e?l.createElement(e.handler,this.props):null}});return A.clearAllRoutes(),e.routes&&A.addRoutes(e.routes),A}var l=e("react"),p=e("react/lib/warning"),d=e("react/lib/invariant"),m=e("react/lib/ExecutionEnvironment").canUseDOM,f=e("./actions/LocationActions"),h=e("./behaviors/ImitateBrowserBehavior"),v=e("./locations/HashLocation"),_=e("./locations/HistoryLocation"),y=e("./locations/RefreshLocation"),g=e("./locations/StaticLocation"),b=e("./ScrollHistory"),j=e("./createRoutesFromReactChildren"),w=e("./isReactChildren"),E=e("./Transition"),D=e("./PropTypes"),P=e("./Redirect"),R=e("./History"),C=e("./Cancellation"),U=e("./Match"),O=e("./Route"),N=e("./supportsHistory"),x=e("./PathUtils"),T=m?v:"/",M=m?h:null;t.exports=c}).call(this,e("_process"))},{"./Cancellation":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Cancellation.js","./History":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/History.js","./Match":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Match.js","./PathUtils":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PathUtils.js","./PropTypes":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/PropTypes.js","./Redirect":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Redirect.js","./Route":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Route.js","./ScrollHistory":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/ScrollHistory.js","./Transition":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Transition.js","./actions/LocationActions":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/actions/LocationActions.js","./behaviors/ImitateBrowserBehavior":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/behaviors/ImitateBrowserBehavior.js","./createRoutesFromReactChildren":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/createRoutesFromReactChildren.js","./isReactChildren":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/isReactChildren.js","./locations/HashLocation":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/HashLocation.js","./locations/HistoryLocation":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/HistoryLocation.js","./locations/RefreshLocation":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/RefreshLocation.js","./locations/StaticLocation":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/StaticLocation.js","./supportsHistory":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/supportsHistory.js",
_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js",react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js","react/lib/ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","react/lib/invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","react/lib/warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/createRoutesFromReactChildren.js":[function(e,t,n){"use strict";function r(e,t,n){e=e||"UnknownComponent";for(var r in t)if(t.hasOwnProperty(r)){var o=t[r](n,r,e);o instanceof Error&&c(!1,o.message)}}function o(e){var t=u({},e),n=t.handler;return n&&(t.onEnter=n.willTransitionTo,t.onLeave=n.willTransitionFrom),t}function s(e){if(a.isValidElement(e)){var t=e.type,n=u({},t.defaultProps,e.props);return t.propTypes&&r(t.displayName,t.propTypes,n),t===l?m.createDefaultRoute(o(n)):t===p?m.createNotFoundRoute(o(n)):t===d?m.createRedirect(o(n)):m.createRoute(o(n),function(){n.children&&i(n.children)})}}function i(e){var t=[];return a.Children.forEach(e,function(e){(e=s(e))&&t.push(e)}),t}var a=e("react"),u=e("react/lib/Object.assign"),c=e("react/lib/warning"),l=e("./components/DefaultRoute"),p=e("./components/NotFoundRoute"),d=e("./components/Redirect"),m=e("./Route");t.exports=i},{"./Route":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Route.js","./components/DefaultRoute":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/DefaultRoute.js","./components/NotFoundRoute":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/NotFoundRoute.js","./components/Redirect":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/Redirect.js",react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js","react/lib/Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","react/lib/warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/getWindowScrollPosition.js":[function(e,t,n){"use strict";function r(){return o(s,"Cannot get current scroll position without a DOM"),{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}}var o=e("react/lib/invariant"),s=e("react/lib/ExecutionEnvironment").canUseDOM;t.exports=r},{"react/lib/ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","react/lib/invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/index.js":[function(e,t,n){"use strict";n.DefaultRoute=e("./components/DefaultRoute"),n.Link=e("./components/Link"),n.NotFoundRoute=e("./components/NotFoundRoute"),n.Redirect=e("./components/Redirect"),n.Route=e("./components/Route"),n.ActiveHandler=e("./components/RouteHandler"),n.RouteHandler=n.ActiveHandler,n.HashLocation=e("./locations/HashLocation"),n.HistoryLocation=e("./locations/HistoryLocation"),n.RefreshLocation=e("./locations/RefreshLocation"),n.StaticLocation=e("./locations/StaticLocation"),n.TestLocation=e("./locations/TestLocation"),n.ImitateBrowserBehavior=e("./behaviors/ImitateBrowserBehavior"),n.ScrollToTopBehavior=e("./behaviors/ScrollToTopBehavior"),n.History=e("./History"),n.Navigation=e("./Navigation"),n.State=e("./State"),n.createRoute=e("./Route").createRoute,n.createDefaultRoute=e("./Route").createDefaultRoute,n.createNotFoundRoute=e("./Route").createNotFoundRoute,n.createRedirect=e("./Route").createRedirect,n.createRoutesFromReactChildren=e("./createRoutesFromReactChildren"),n.create=e("./createRouter"),n.run=e("./runRouter")},{"./History":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/History.js","./Navigation":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Navigation.js","./Route":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/Route.js","./State":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/State.js","./behaviors/ImitateBrowserBehavior":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/behaviors/ImitateBrowserBehavior.js","./behaviors/ScrollToTopBehavior":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/behaviors/ScrollToTopBehavior.js","./components/DefaultRoute":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/DefaultRoute.js","./components/Link":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/Link.js","./components/NotFoundRoute":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/NotFoundRoute.js","./components/Redirect":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/Redirect.js","./components/Route":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/Route.js","./components/RouteHandler":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/components/RouteHandler.js","./createRouter":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/createRouter.js","./createRoutesFromReactChildren":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/createRoutesFromReactChildren.js","./locations/HashLocation":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/HashLocation.js","./locations/HistoryLocation":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/HistoryLocation.js","./locations/RefreshLocation":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/RefreshLocation.js","./locations/StaticLocation":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/StaticLocation.js","./locations/TestLocation":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/TestLocation.js","./runRouter":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/runRouter.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/isReactChildren.js":[function(e,t,n){"use strict";function r(e){return null==e||s.isValidElement(e)}function o(e){return r(e)||Array.isArray(e)&&e.every(r)}var s=e("react");t.exports=o},{react:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/HashLocation.js":[function(e,t,n){"use strict";function r(e){e===a.PUSH&&(u.length+=1);var t={path:p.getCurrentPath(),type:e};c.forEach(function(e){e.call(p,t)})}function o(){var e=p.getCurrentPath();return"/"===e.charAt(0)?!0:(p.replace("/"+e),!1)}function s(){if(o()){var e=i;i=null,r(e||a.POP)}}var i,a=e("../actions/LocationActions"),u=e("../History"),c=[],l=!1,p={addChangeListener:function(e){c.push(e),o(),l||(window.addEventListener?window.addEventListener("hashchange",s,!1):window.attachEvent("onhashchange",s),l=!0)},removeChangeListener:function(e){c=c.filter(function(t){return t!==e}),0===c.length&&(window.removeEventListener?window.removeEventListener("hashchange",s,!1):window.removeEvent("onhashchange",s),l=!1)},push:function(e){i=a.PUSH,window.location.hash=e},replace:function(e){i=a.REPLACE,window.location.replace(window.location.pathname+window.location.search+"#"+e)},pop:function(){i=a.POP,u.back()},getCurrentPath:function(){return decodeURI(window.location.href.split("#")[1]||"")},toString:function(){return"<HashLocation>"}};t.exports=p},{"../History":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/History.js","../actions/LocationActions":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/actions/LocationActions.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/HistoryLocation.js":[function(e,t,n){"use strict";function r(e){var t={path:c.getCurrentPath(),type:e};a.forEach(function(e){e.call(c,t)})}function o(e){void 0!==e.state&&r(s.POP)}var s=e("../actions/LocationActions"),i=e("../History"),a=[],u=!1,c={addChangeListener:function(e){a.push(e),u||(window.addEventListener?window.addEventListener("popstate",o,!1):window.attachEvent("onpopstate",o),u=!0)},removeChangeListener:function(e){a=a.filter(function(t){return t!==e}),0===a.length&&(window.addEventListener?window.removeEventListener("popstate",o,!1):window.removeEvent("onpopstate",o),u=!1)},push:function(e){window.history.pushState({path:e},"",e),i.length+=1,r(s.PUSH)},replace:function(e){window.history.replaceState({path:e},"",e),r(s.REPLACE)},pop:i.back,getCurrentPath:function(){return decodeURI(window.location.pathname+window.location.search)},toString:function(){return"<HistoryLocation>"}};t.exports=c},{"../History":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/History.js","../actions/LocationActions":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/actions/LocationActions.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/RefreshLocation.js":[function(e,t,n){"use strict";var r=e("./HistoryLocation"),o=e("../History"),s={push:function(e){window.location=e},replace:function(e){window.location.replace(e)},pop:o.back,getCurrentPath:r.getCurrentPath,toString:function(){return"<RefreshLocation>"}};t.exports=s},{"../History":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/History.js","./HistoryLocation":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/HistoryLocation.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/StaticLocation.js":[function(e,t,n){"use strict";function r(){i(!1,"You cannot modify a static location")}var o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=e("react/lib/invariant"),a=function(){function e(t){o(this,e),this.path=t}return s(e,[{key:"getCurrentPath",value:function(){return this.path}},{key:"toString",value:function(){return'<StaticLocation path="'+this.path+'">'}}]),e}();a.prototype.push=r,a.prototype.replace=r,a.prototype.pop=r,t.exports=a},{"react/lib/invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/locations/TestLocation.js":[function(e,t,n){"use strict";var r=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=e("react/lib/invariant"),i=e("../actions/LocationActions"),a=e("../History"),u=function(){function e(t){r(this,e),this.history=t||[],this.listeners=[],this._updateHistoryLength()}return o(e,[{key:"needsDOM",get:function(){return!1}},{key:"_updateHistoryLength",value:function(){a.length=this.history.length}},{key:"_notifyChange",value:function(e){for(var t={path:this.getCurrentPath(),type:e},n=0,r=this.listeners.length;r>n;++n)this.listeners[n].call(this,t)}},{key:"addChangeListener",value:function(e){this.listeners.push(e)}},{key:"removeChangeListener",value:function(e){this.listeners=this.listeners.filter(function(t){return t!==e})}},{key:"push",value:function(e){this.history.push(e),this._updateHistoryLength(),this._notifyChange(i.PUSH)}},{key:"replace",value:function(e){s(this.history.length,"You cannot replace the current path with no history"),this.history[this.history.length-1]=e,this._notifyChange(i.REPLACE)}},{key:"pop",value:function(){this.history.pop(),this._updateHistoryLength(),this._notifyChange(i.POP)}},{key:"getCurrentPath",value:function(){return this.history[this.history.length-1]}},{key:"toString",value:function(){return"<TestLocation>"}}]),e}();t.exports=u},{"../History":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/History.js","../actions/LocationActions":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/actions/LocationActions.js","react/lib/invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/runRouter.js":[function(e,t,n){"use strict";function r(e,t,n){"function"==typeof t&&(n=t,t=null);var r=o({routes:e,location:t});return r.run(n),r}var o=e("./createRouter");t.exports=r},{"./createRouter":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/createRouter.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/lib/supportsHistory.js":[function(e,t,n){"use strict";function r(){var e=navigator.userAgent;return-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone")?window.history&&"pushState"in window.history:!1}t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/node_modules/object-assign/index.js":[function(e,t,n){"use strict";function r(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}t.exports=Object.assign||function(e,t){for(var n,o,s=r(e),i=1;i<arguments.length;i++){n=arguments[i],o=Object.keys(Object(n));for(var a=0;a<o.length;a++)s[o[a]]=n[o[a]]}return s}},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/node_modules/qs/index.js":[function(e,t,n){t.exports=e("./lib/")},{"./lib/":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/node_modules/qs/lib/index.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/node_modules/qs/lib/index.js":[function(e,t,n){var r=e("./stringify"),o=e("./parse");t.exports={stringify:r,parse:o}},{"./parse":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/node_modules/qs/lib/parse.js","./stringify":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/node_modules/qs/lib/stringify.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/node_modules/qs/lib/parse.js":[function(e,t,n){var r=e("./utils"),o={delimiter:"&",depth:5,arrayLimit:20,parameterLimit:1e3};o.parseValues=function(e,t){for(var n={},o=e.split(t.delimiter,t.parameterLimit===1/0?void 0:t.parameterLimit),s=0,i=o.length;i>s;++s){var a=o[s],u=-1===a.indexOf("]=")?a.indexOf("="):a.indexOf("]=")+1;if(-1===u)n[r.decode(a)]="";else{var c=r.decode(a.slice(0,u)),l=r.decode(a.slice(u+1));if(Object.prototype.hasOwnProperty(c))continue;n[c]=n.hasOwnProperty(c)?[].concat(n[c]).concat(l):l}}return n},o.parseObject=function(e,t,n){if(!e.length)return t;var r=e.shift(),s={};if("[]"===r)s=[],s=s.concat(o.parseObject(e,t,n));else{var i="["===r[0]&&"]"===r[r.length-1]?r.slice(1,r.length-1):r,a=parseInt(i,10),u=""+a;!isNaN(a)&&r!==i&&u===i&&a>=0&&a<=n.arrayLimit?(s=[],s[a]=o.parseObject(e,t,n)):s[i]=o.parseObject(e,t,n)}return s},o.parseKeys=function(e,t,n){if(e){var r=/^([^\[\]]*)/,s=/(\[[^\[\]]*\])/g,i=r.exec(e);if(!Object.prototype.hasOwnProperty(i[1])){var a=[];i[1]&&a.push(i[1]);for(var u=0;null!==(i=s.exec(e))&&u<n.depth;)++u,Object.prototype.hasOwnProperty(i[1].replace(/\[|\]/g,""))||a.push(i[1]);return i&&a.push("["+e.slice(i.index)+"]"),o.parseObject(a,t,n)}}},t.exports=function(e,t){if(""===e||null===e||"undefined"==typeof e)return{};t=t||{},t.delimiter="string"==typeof t.delimiter||r.isRegExp(t.delimiter)?t.delimiter:o.delimiter,t.depth="number"==typeof t.depth?t.depth:o.depth,t.arrayLimit="number"==typeof t.arrayLimit?t.arrayLimit:o.arrayLimit,t.parameterLimit="number"==typeof t.parameterLimit?t.parameterLimit:o.parameterLimit;for(var n="string"==typeof e?o.parseValues(e,t):e,s={},i=Object.keys(n),a=0,u=i.length;u>a;++a){var c=i[a],l=o.parseKeys(c,n[c],t);s=r.merge(s,l)}return r.compact(s)}},{"./utils":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/node_modules/qs/lib/utils.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/node_modules/qs/lib/stringify.js":[function(e,t,n){var r=e("./utils"),o={delimiter:"&",arrayPrefixGenerators:{brackets:function(e,t){return e+"[]"},indices:function(e,t){return e+"["+t+"]"},repeat:function(e,t){return e}}};o.stringify=function(e,t,n){if(r.isBuffer(e)?e=e.toString():e instanceof Date?e=e.toISOString():null===e&&(e=""),"string"==typeof e||"number"==typeof e||"boolean"==typeof e)return[encodeURIComponent(t)+"="+encodeURIComponent(e)];var s=[];if("undefined"==typeof e)return s;for(var i=Object.keys(e),a=0,u=i.length;u>a;++a){var c=i[a];s=s.concat(Array.isArray(e)?o.stringify(e[c],n(t,c),n):o.stringify(e[c],t+"["+c+"]",n))}return s},t.exports=function(e,t){t=t||{};var n="undefined"==typeof t.delimiter?o.delimiter:t.delimiter,r=[];if("object"!=typeof e||null===e)return"";var s;s=t.arrayFormat in o.arrayPrefixGenerators?t.arrayFormat:"indices"in t?t.indices?"indices":"repeat":"indices";for(var i=o.arrayPrefixGenerators[s],a=Object.keys(e),u=0,c=a.length;c>u;++u){var l=a[u];r=r.concat(o.stringify(e[l],l,i))}return r.join(n)}},{"./utils":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/node_modules/qs/lib/utils.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react-router/node_modules/qs/lib/utils.js":[function(e,t,n){n.arrayToObject=function(e){for(var t={},n=0,r=e.length;r>n;++n)"undefined"!=typeof e[n]&&(t[n]=e[n]);return t},n.merge=function(e,t){if(!t)return e;if("object"!=typeof t)return Array.isArray(e)?e.push(t):e[t]=!0,e;if("object"!=typeof e)return e=[e].concat(t);Array.isArray(e)&&!Array.isArray(t)&&(e=n.arrayToObject(e));for(var r=Object.keys(t),o=0,s=r.length;s>o;++o){var i=r[o],a=t[i];e[i]=e[i]?n.merge(e[i],a):a}return e},n.decode=function(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(t){return e}},n.compact=function(e,t){if("object"!=typeof e||null===e)return e;t=t||[];var r=t.indexOf(e);if(-1!==r)return t[r];if(t.push(e),Array.isArray(e)){for(var o=[],s=0,i=e.length;i>s;++s)"undefined"!=typeof e[s]&&o.push(e[s]);return o}var a=Object.keys(e);for(s=0,i=a.length;i>s;++s){var u=a[s];e[u]=n.compact(e[u],t)}return e},n.isRegExp=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},n.isBuffer=function(e){return null===e||"undefined"==typeof e?!1:!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))}},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/AutoFocusMixin.js":[function(e,t,n){"use strict";var r=e("./focusNode"),o={componentDidMount:function(){this.props.autoFocus&&r(this.getDOMNode())}};t.exports=o},{"./focusNode":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/focusNode.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/BeforeInputEventPlugin.js":[function(e,t,n){"use strict";function r(){var e=window.opera;return"object"==typeof e&&"function"==typeof e.version&&parseInt(e.version(),10)<=12}function o(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}function s(e){switch(e){case U.topCompositionStart:return O.compositionStart;case U.topCompositionEnd:return O.compositionEnd;case U.topCompositionUpdate:return O.compositionUpdate}}function i(e,t){return e===U.topKeyDown&&t.keyCode===j}function a(e,t){switch(e){case U.topKeyUp:return-1!==b.indexOf(t.keyCode);case U.topKeyDown:return t.keyCode!==j;case U.topKeyPress:case U.topMouseDown:case U.topBlur:return!0;default:return!1}}function u(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}function c(e,t,n,r){var o,c;if(w?o=s(e):x?a(e,r)&&(o=O.compositionEnd):i(e,r)&&(o=O.compositionStart),!o)return null;P&&(x||o!==O.compositionStart?o===O.compositionEnd&&x&&(c=x.getData()):x=v.getPooled(t));var l=_.getPooled(o,n,r);if(c)l.data=c;else{var p=u(r);null!==p&&(l.data=p)}return f.accumulateTwoPhaseDispatches(l),l}function l(e,t){switch(e){case U.topCompositionEnd:return u(t);case U.topKeyPress:var n=t.which;return n!==R?null:(N=!0,C);case U.topTextInput:var r=t.data;return r===C&&N?null:r;default:return null}}function p(e,t){if(x){if(e===U.topCompositionEnd||a(e,t)){var n=x.getData();return v.release(x),x=null,n}return null}switch(e){case U.topPaste:return null;case U.topKeyPress:return t.which&&!o(t)?String.fromCharCode(t.which):null;case U.topCompositionEnd:return P?null:t.data;default:return null}}function d(e,t,n,r){var o;if(o=D?l(e,r):p(e,r),!o)return null;var s=y.getPooled(O.beforeInput,n,r);return s.data=o,f.accumulateTwoPhaseDispatches(s),s}var m=e("./EventConstants"),f=e("./EventPropagators"),h=e("./ExecutionEnvironment"),v=e("./FallbackCompositionState"),_=e("./SyntheticCompositionEvent"),y=e("./SyntheticInputEvent"),g=e("./keyOf"),b=[9,13,27,32],j=229,w=h.canUseDOM&&"CompositionEvent"in window,E=null;h.canUseDOM&&"documentMode"in document&&(E=document.documentMode);var D=h.canUseDOM&&"TextEvent"in window&&!E&&!r(),P=h.canUseDOM&&(!w||E&&E>8&&11>=E),R=32,C=String.fromCharCode(R),U=m.topLevelTypes,O={beforeInput:{phasedRegistrationNames:{bubbled:g({onBeforeInput:null}),captured:g({onBeforeInputCapture:null})},dependencies:[U.topCompositionEnd,U.topKeyPress,U.topTextInput,U.topPaste]},compositionEnd:{phasedRegistrationNames:{bubbled:g({onCompositionEnd:null}),captured:g({onCompositionEndCapture:null})},dependencies:[U.topBlur,U.topCompositionEnd,U.topKeyDown,U.topKeyPress,U.topKeyUp,U.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:g({onCompositionStart:null}),captured:g({onCompositionStartCapture:null})},dependencies:[U.topBlur,U.topCompositionStart,U.topKeyDown,U.topKeyPress,U.topKeyUp,U.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:g({onCompositionUpdate:null}),captured:g({onCompositionUpdateCapture:null})},dependencies:[U.topBlur,U.topCompositionUpdate,U.topKeyDown,U.topKeyPress,U.topKeyUp,U.topMouseDown]}},N=!1,x=null,T={eventTypes:O,extractEvents:function(e,t,n,r){return[c(e,t,n,r),d(e,t,n,r)]}};t.exports=T},{"./EventConstants":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPropagators.js","./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","./FallbackCompositionState":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/FallbackCompositionState.js","./SyntheticCompositionEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticCompositionEvent.js","./SyntheticInputEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticInputEvent.js","./keyOf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyOf.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/CSSProperty.js":[function(e,t,n){"use strict";function r(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}var o={boxFlex:!0,boxFlexGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,strokeDashoffset:!0,strokeOpacity:!0,strokeWidth:!0},s=["Webkit","ms","Moz","O"];Object.keys(o).forEach(function(e){s.forEach(function(t){o[r(t,e)]=o[e]})});var i={background:{backgroundImage:!0,backgroundPosition:!0,backgroundRepeat:!0,backgroundColor:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0}},a={isUnitlessNumber:o,shorthandPropertyExpansions:i};t.exports=a},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/CSSPropertyOperations.js":[function(e,t,n){(function(n){"use strict";var r=e("./CSSProperty"),o=e("./ExecutionEnvironment"),s=e("./camelizeStyleName"),i=e("./dangerousStyleValue"),a=e("./hyphenateStyleName"),u=e("./memoizeStringOnly"),c=e("./warning"),l=u(function(e){return a(e)}),p="cssFloat";if(o.canUseDOM&&void 0===document.documentElement.style.cssFloat&&(p="styleFloat"),"production"!==n.env.NODE_ENV)var d=/^(?:webkit|moz|o)[A-Z]/,m=/;\s*$/,f={},h={},v=function(e){f.hasOwnProperty(e)&&f[e]||(f[e]=!0,"production"!==n.env.NODE_ENV?c(!1,"Unsupported style property %s. Did you mean %s?",e,s(e)):null)},_=function(e){f.hasOwnProperty(e)&&f[e]||(f[e]=!0,"production"!==n.env.NODE_ENV?c(!1,"Unsupported vendor-prefixed style property %s. Did you mean %s?",e,e.charAt(0).toUpperCase()+e.slice(1)):null)},y=function(e,t){h.hasOwnProperty(t)&&h[t]||(h[t]=!0,"production"!==n.env.NODE_ENV?c(!1,'Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',e,t.replace(m,"")):null)},g=function(e,t){e.indexOf("-")>-1?v(e):d.test(e)?_(e):m.test(t)&&y(e,t)};var b={createMarkupForStyles:function(e){var t="";for(var r in e)if(e.hasOwnProperty(r)){var o=e[r];"production"!==n.env.NODE_ENV&&g(r,o),null!=o&&(t+=l(r)+":",t+=i(r,o)+";")}return t||null},setValueForStyles:function(e,t){var o=e.style;for(var s in t)if(t.hasOwnProperty(s)){"production"!==n.env.NODE_ENV&&g(s,t[s]);var a=i(s,t[s]);if("float"===s&&(s=p),a)o[s]=a;else{var u=r.shorthandPropertyExpansions[s];if(u)for(var c in u)o[c]="";else o[s]=""}}}};t.exports=b}).call(this,e("_process"))},{"./CSSProperty":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/CSSProperty.js","./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","./camelizeStyleName":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/camelizeStyleName.js","./dangerousStyleValue":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/dangerousStyleValue.js","./hyphenateStyleName":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/hyphenateStyleName.js","./memoizeStringOnly":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/memoizeStringOnly.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/CallbackQueue.js":[function(e,t,n){(function(n){"use strict";function r(){this._callbacks=null,this._contexts=null}var o=e("./PooledClass"),s=e("./Object.assign"),i=e("./invariant");s(r.prototype,{enqueue:function(e,t){this._callbacks=this._callbacks||[],this._contexts=this._contexts||[],this._callbacks.push(e),this._contexts.push(t)},notifyAll:function(){var e=this._callbacks,t=this._contexts;if(e){"production"!==n.env.NODE_ENV?i(e.length===t.length,"Mismatched list of contexts in callback queue"):i(e.length===t.length),this._callbacks=null,this._contexts=null;for(var r=0,o=e.length;o>r;r++)e[r].call(t[r]);e.length=0,t.length=0}},reset:function(){this._callbacks=null,this._contexts=null},destructor:function(){this.reset()}}),o.addPoolingTo(r),t.exports=r}).call(this,e("_process"))},{"./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/PooledClass.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ChangeEventPlugin.js":[function(e,t,n){"use strict";function r(e){return"SELECT"===e.nodeName||"INPUT"===e.nodeName&&"file"===e.type}function o(e){var t=E.getPooled(U.change,N,e);b.accumulateTwoPhaseDispatches(t),w.batchedUpdates(s,t)}function s(e){g.enqueueEvents(e),g.processEventQueue()}function i(e,t){O=e,N=t,O.attachEvent("onchange",o)}function a(){O&&(O.detachEvent("onchange",o),O=null,N=null)}function u(e,t,n){return e===C.topChange?n:void 0}function c(e,t,n){e===C.topFocus?(a(),i(t,n)):e===C.topBlur&&a()}function l(e,t){O=e,N=t,x=e.value,T=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(O,"value",S),O.attachEvent("onpropertychange",d)}function p(){O&&(delete O.value,O.detachEvent("onpropertychange",d),O=null,N=null,x=null,T=null)}function d(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==x&&(x=t,o(e))}}function m(e,t,n){return e===C.topInput?n:void 0}function f(e,t,n){e===C.topFocus?(p(),l(t,n)):e===C.topBlur&&p()}function h(e,t,n){return e!==C.topSelectionChange&&e!==C.topKeyUp&&e!==C.topKeyDown||!O||O.value===x?void 0:(x=O.value,N)}function v(e){return"INPUT"===e.nodeName&&("checkbox"===e.type||"radio"===e.type)}function _(e,t,n){return e===C.topClick?n:void 0}var y=e("./EventConstants"),g=e("./EventPluginHub"),b=e("./EventPropagators"),j=e("./ExecutionEnvironment"),w=e("./ReactUpdates"),E=e("./SyntheticEvent"),D=e("./isEventSupported"),P=e("./isTextInputElement"),R=e("./keyOf"),C=y.topLevelTypes,U={change:{phasedRegistrationNames:{bubbled:R({onChange:null}),captured:R({onChangeCapture:null})},dependencies:[C.topBlur,C.topChange,C.topClick,C.topFocus,C.topInput,C.topKeyDown,C.topKeyUp,C.topSelectionChange]}},O=null,N=null,x=null,T=null,M=!1;j.canUseDOM&&(M=D("change")&&(!("documentMode"in document)||document.documentMode>8));var k=!1;j.canUseDOM&&(k=D("input")&&(!("documentMode"in document)||document.documentMode>9));var S={get:function(){return T.get.call(this)},set:function(e){x=""+e,T.set.call(this,e)}},I={eventTypes:U,extractEvents:function(e,t,n,o){var s,i;if(r(t)?M?s=u:i=c:P(t)?k?s=m:(s=h,i=f):v(t)&&(s=_),s){var a=s(e,t,n);if(a){var l=E.getPooled(U.change,a,o);return b.accumulateTwoPhaseDispatches(l),l}}i&&i(e,t,n)}};t.exports=I},{"./EventConstants":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPluginHub.js","./EventPropagators":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPropagators.js","./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","./ReactUpdates":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdates.js","./SyntheticEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticEvent.js","./isEventSupported":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/isEventSupported.js","./isTextInputElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/isTextInputElement.js","./keyOf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyOf.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ClientReactRootIndex.js":[function(e,t,n){"use strict";var r=0,o={createReactRootIndex:function(){return r++}};t.exports=o},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMChildrenOperations.js":[function(e,t,n){
(function(n){"use strict";function r(e,t,n){e.insertBefore(t,e.childNodes[n]||null)}var o=e("./Danger"),s=e("./ReactMultiChildUpdateTypes"),i=e("./setTextContent"),a=e("./invariant"),u={dangerouslyReplaceNodeWithMarkup:o.dangerouslyReplaceNodeWithMarkup,updateTextContent:i,processUpdates:function(e,t){for(var u,c=null,l=null,p=0;p<e.length;p++)if(u=e[p],u.type===s.MOVE_EXISTING||u.type===s.REMOVE_NODE){var d=u.fromIndex,m=u.parentNode.childNodes[d],f=u.parentID;"production"!==n.env.NODE_ENV?a(m,"processUpdates(): Unable to find child %s of element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",d,f):a(m),c=c||{},c[f]=c[f]||[],c[f][d]=m,l=l||[],l.push(m)}var h=o.dangerouslyRenderMarkup(t);if(l)for(var v=0;v<l.length;v++)l[v].parentNode.removeChild(l[v]);for(var _=0;_<e.length;_++)switch(u=e[_],u.type){case s.INSERT_MARKUP:r(u.parentNode,h[u.markupIndex],u.toIndex);break;case s.MOVE_EXISTING:r(u.parentNode,c[u.parentID][u.fromIndex],u.toIndex);break;case s.TEXT_CONTENT:i(u.parentNode,u.textContent);break;case s.REMOVE_NODE:}}};t.exports=u}).call(this,e("_process"))},{"./Danger":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Danger.js","./ReactMultiChildUpdateTypes":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./setTextContent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/setTextContent.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMProperty.js":[function(e,t,n){(function(n){"use strict";function r(e,t){return(e&t)===t}var o=e("./invariant"),s={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_NUMERIC_VALUE:16,HAS_POSITIVE_NUMERIC_VALUE:48,HAS_OVERLOADED_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=e.Properties||{},i=e.DOMAttributeNames||{},u=e.DOMPropertyNames||{},c=e.DOMMutationMethods||{};e.isCustomAttribute&&a._isCustomAttributeFunctions.push(e.isCustomAttribute);for(var l in t){"production"!==n.env.NODE_ENV?o(!a.isStandardName.hasOwnProperty(l),"injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.",l):o(!a.isStandardName.hasOwnProperty(l)),a.isStandardName[l]=!0;var p=l.toLowerCase();if(a.getPossibleStandardName[p]=l,i.hasOwnProperty(l)){var d=i[l];a.getPossibleStandardName[d]=l,a.getAttributeName[l]=d}else a.getAttributeName[l]=p;a.getPropertyName[l]=u.hasOwnProperty(l)?u[l]:l,a.getMutationMethod[l]=c.hasOwnProperty(l)?c[l]:null;var m=t[l];a.mustUseAttribute[l]=r(m,s.MUST_USE_ATTRIBUTE),a.mustUseProperty[l]=r(m,s.MUST_USE_PROPERTY),a.hasSideEffects[l]=r(m,s.HAS_SIDE_EFFECTS),a.hasBooleanValue[l]=r(m,s.HAS_BOOLEAN_VALUE),a.hasNumericValue[l]=r(m,s.HAS_NUMERIC_VALUE),a.hasPositiveNumericValue[l]=r(m,s.HAS_POSITIVE_NUMERIC_VALUE),a.hasOverloadedBooleanValue[l]=r(m,s.HAS_OVERLOADED_BOOLEAN_VALUE),"production"!==n.env.NODE_ENV?o(!a.mustUseAttribute[l]||!a.mustUseProperty[l],"DOMProperty: Cannot require using both attribute and property: %s",l):o(!a.mustUseAttribute[l]||!a.mustUseProperty[l]),"production"!==n.env.NODE_ENV?o(a.mustUseProperty[l]||!a.hasSideEffects[l],"DOMProperty: Properties that have side effects must use property: %s",l):o(a.mustUseProperty[l]||!a.hasSideEffects[l]),"production"!==n.env.NODE_ENV?o(!!a.hasBooleanValue[l]+!!a.hasNumericValue[l]+!!a.hasOverloadedBooleanValue[l]<=1,"DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s",l):o(!!a.hasBooleanValue[l]+!!a.hasNumericValue[l]+!!a.hasOverloadedBooleanValue[l]<=1)}}},i={},a={ID_ATTRIBUTE_NAME:"data-reactid",isStandardName:{},getPossibleStandardName:{},getAttributeName:{},getPropertyName:{},getMutationMethod:{},mustUseAttribute:{},mustUseProperty:{},hasSideEffects:{},hasBooleanValue:{},hasNumericValue:{},hasPositiveNumericValue:{},hasOverloadedBooleanValue:{},_isCustomAttributeFunctions:[],isCustomAttribute:function(e){for(var t=0;t<a._isCustomAttributeFunctions.length;t++){var n=a._isCustomAttributeFunctions[t];if(n(e))return!0}return!1},getDefaultValueForProperty:function(e,t){var n,r=i[e];return r||(i[e]=r={}),t in r||(n=document.createElement(e),r[t]=n[t]),r[t]},injection:s};t.exports=a}).call(this,e("_process"))},{"./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMPropertyOperations.js":[function(e,t,n){(function(n){"use strict";function r(e,t){return null==t||o.hasBooleanValue[e]&&!t||o.hasNumericValue[e]&&isNaN(t)||o.hasPositiveNumericValue[e]&&1>t||o.hasOverloadedBooleanValue[e]&&t===!1}var o=e("./DOMProperty"),s=e("./quoteAttributeValueForBrowser"),i=e("./warning");if("production"!==n.env.NODE_ENV)var a={children:!0,dangerouslySetInnerHTML:!0,key:!0,ref:!0},u={},c=function(e){if(!(a.hasOwnProperty(e)&&a[e]||u.hasOwnProperty(e)&&u[e])){u[e]=!0;var t=e.toLowerCase(),r=o.isCustomAttribute(t)?t:o.getPossibleStandardName.hasOwnProperty(t)?o.getPossibleStandardName[t]:null;"production"!==n.env.NODE_ENV?i(null==r,"Unknown DOM property %s. Did you mean %s?",e,r):null}};var l={createMarkupForID:function(e){return o.ID_ATTRIBUTE_NAME+"="+s(e)},createMarkupForProperty:function(e,t){if(o.isStandardName.hasOwnProperty(e)&&o.isStandardName[e]){if(r(e,t))return"";var i=o.getAttributeName[e];return o.hasBooleanValue[e]||o.hasOverloadedBooleanValue[e]&&t===!0?i:i+"="+s(t)}return o.isCustomAttribute(e)?null==t?"":e+"="+s(t):("production"!==n.env.NODE_ENV&&c(e),null)},setValueForProperty:function(e,t,s){if(o.isStandardName.hasOwnProperty(t)&&o.isStandardName[t]){var i=o.getMutationMethod[t];if(i)i(e,s);else if(r(t,s))this.deleteValueForProperty(e,t);else if(o.mustUseAttribute[t])e.setAttribute(o.getAttributeName[t],""+s);else{var a=o.getPropertyName[t];o.hasSideEffects[t]&&""+e[a]==""+s||(e[a]=s)}}else o.isCustomAttribute(t)?null==s?e.removeAttribute(t):e.setAttribute(t,""+s):"production"!==n.env.NODE_ENV&&c(t)},deleteValueForProperty:function(e,t){if(o.isStandardName.hasOwnProperty(t)&&o.isStandardName[t]){var r=o.getMutationMethod[t];if(r)r(e,void 0);else if(o.mustUseAttribute[t])e.removeAttribute(o.getAttributeName[t]);else{var s=o.getPropertyName[t],i=o.getDefaultValueForProperty(e.nodeName,s);o.hasSideEffects[t]&&""+e[s]===i||(e[s]=i)}}else o.isCustomAttribute(t)?e.removeAttribute(t):"production"!==n.env.NODE_ENV&&c(t)}};t.exports=l}).call(this,e("_process"))},{"./DOMProperty":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMProperty.js","./quoteAttributeValueForBrowser":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/quoteAttributeValueForBrowser.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Danger.js":[function(e,t,n){(function(n){"use strict";function r(e){return e.substring(1,e.indexOf(" "))}var o=e("./ExecutionEnvironment"),s=e("./createNodesFromMarkup"),i=e("./emptyFunction"),a=e("./getMarkupWrap"),u=e("./invariant"),c=/^(<[^ \/>]+)/,l="data-danger-index",p={dangerouslyRenderMarkup:function(e){"production"!==n.env.NODE_ENV?u(o.canUseDOM,"dangerouslyRenderMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering."):u(o.canUseDOM);for(var t,p={},d=0;d<e.length;d++)"production"!==n.env.NODE_ENV?u(e[d],"dangerouslyRenderMarkup(...): Missing markup."):u(e[d]),t=r(e[d]),t=a(t)?t:"*",p[t]=p[t]||[],p[t][d]=e[d];var m=[],f=0;for(t in p)if(p.hasOwnProperty(t)){var h,v=p[t];for(h in v)if(v.hasOwnProperty(h)){var _=v[h];v[h]=_.replace(c,"$1 "+l+'="'+h+'" ')}for(var y=s(v.join(""),i),g=0;g<y.length;++g){var b=y[g];b.hasAttribute&&b.hasAttribute(l)?(h=+b.getAttribute(l),b.removeAttribute(l),"production"!==n.env.NODE_ENV?u(!m.hasOwnProperty(h),"Danger: Assigning to an already-occupied result index."):u(!m.hasOwnProperty(h)),m[h]=b,f+=1):"production"!==n.env.NODE_ENV&&console.error("Danger: Discarding unexpected node:",b)}}return"production"!==n.env.NODE_ENV?u(f===m.length,"Danger: Did not assign to every index of resultList."):u(f===m.length),"production"!==n.env.NODE_ENV?u(m.length===e.length,"Danger: Expected markup to render %s nodes, but rendered %s.",e.length,m.length):u(m.length===e.length),m},dangerouslyReplaceNodeWithMarkup:function(e,t){"production"!==n.env.NODE_ENV?u(o.canUseDOM,"dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering."):u(o.canUseDOM),"production"!==n.env.NODE_ENV?u(t,"dangerouslyReplaceNodeWithMarkup(...): Missing markup."):u(t),"production"!==n.env.NODE_ENV?u("html"!==e.tagName.toLowerCase(),"dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See React.renderToString()."):u("html"!==e.tagName.toLowerCase());var r=s(t,i)[0];e.parentNode.replaceChild(r,e)}};t.exports=p}).call(this,e("_process"))},{"./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","./createNodesFromMarkup":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/createNodesFromMarkup.js","./emptyFunction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyFunction.js","./getMarkupWrap":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getMarkupWrap.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DefaultEventPluginOrder.js":[function(e,t,n){"use strict";var r=e("./keyOf"),o=[r({ResponderEventPlugin:null}),r({SimpleEventPlugin:null}),r({TapEventPlugin:null}),r({EnterLeaveEventPlugin:null}),r({ChangeEventPlugin:null}),r({SelectEventPlugin:null}),r({BeforeInputEventPlugin:null}),r({AnalyticsEventPlugin:null}),r({MobileSafariClickEventPlugin:null})];t.exports=o},{"./keyOf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyOf.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EnterLeaveEventPlugin.js":[function(e,t,n){"use strict";var r=e("./EventConstants"),o=e("./EventPropagators"),s=e("./SyntheticMouseEvent"),i=e("./ReactMount"),a=e("./keyOf"),u=r.topLevelTypes,c=i.getFirstReactDOM,l={mouseEnter:{registrationName:a({onMouseEnter:null}),dependencies:[u.topMouseOut,u.topMouseOver]},mouseLeave:{registrationName:a({onMouseLeave:null}),dependencies:[u.topMouseOut,u.topMouseOver]}},p=[null,null],d={eventTypes:l,extractEvents:function(e,t,n,r){if(e===u.topMouseOver&&(r.relatedTarget||r.fromElement))return null;if(e!==u.topMouseOut&&e!==u.topMouseOver)return null;var a;if(t.window===t)a=t;else{var d=t.ownerDocument;a=d?d.defaultView||d.parentWindow:window}var m,f;if(e===u.topMouseOut?(m=t,f=c(r.relatedTarget||r.toElement)||a):(m=a,f=t),m===f)return null;var h=m?i.getID(m):"",v=f?i.getID(f):"",_=s.getPooled(l.mouseLeave,h,r);_.type="mouseleave",_.target=m,_.relatedTarget=f;var y=s.getPooled(l.mouseEnter,v,r);return y.type="mouseenter",y.target=f,y.relatedTarget=m,o.accumulateEnterLeaveDispatches(_,y,h,v),p[0]=_,p[1]=y,p}};t.exports=d},{"./EventConstants":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPropagators.js","./ReactMount":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMount.js","./SyntheticMouseEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticMouseEvent.js","./keyOf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyOf.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventConstants.js":[function(e,t,n){"use strict";var r=e("./keyMirror"),o=r({bubbled:null,captured:null}),s=r({topBlur:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topError:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topReset:null,topScroll:null,topSelectionChange:null,topSubmit:null,topTextInput:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topWheel:null}),i={topLevelTypes:s,PropagationPhases:o};t.exports=i},{"./keyMirror":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyMirror.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventListener.js":[function(e,t,n){(function(n){var r=e("./emptyFunction"),o={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,o){return e.addEventListener?(e.addEventListener(t,o,!0),{remove:function(){e.removeEventListener(t,o,!0)}}):("production"!==n.env.NODE_ENV&&console.error("Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events."),{remove:r})},registerDefault:function(){}};t.exports=o}).call(this,e("_process"))},{"./emptyFunction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyFunction.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPluginHub.js":[function(e,t,n){(function(n){"use strict";function r(){var e=d&&d.traverseTwoPhase&&d.traverseEnterLeave;"production"!==n.env.NODE_ENV?u(e,"InstanceHandle not injected before use!"):u(e)}var o=e("./EventPluginRegistry"),s=e("./EventPluginUtils"),i=e("./accumulateInto"),a=e("./forEachAccumulated"),u=e("./invariant"),c={},l=null,p=function(e){if(e){var t=s.executeDispatch,n=o.getPluginModuleForEvent(e);n&&n.executeDispatch&&(t=n.executeDispatch),s.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e)}},d=null,m={injection:{injectMount:s.injection.injectMount,injectInstanceHandle:function(e){d=e,"production"!==n.env.NODE_ENV&&r()},getInstanceHandle:function(){return"production"!==n.env.NODE_ENV&&r(),d},injectEventPluginOrder:o.injectEventPluginOrder,injectEventPluginsByName:o.injectEventPluginsByName},eventNameDispatchConfigs:o.eventNameDispatchConfigs,registrationNameModules:o.registrationNameModules,putListener:function(e,t,r){"production"!==n.env.NODE_ENV?u(!r||"function"==typeof r,"Expected %s listener to be a function, instead got type %s",t,typeof r):u(!r||"function"==typeof r);var o=c[t]||(c[t]={});o[e]=r},getListener:function(e,t){var n=c[t];return n&&n[e]},deleteListener:function(e,t){var n=c[t];n&&delete n[e]},deleteAllListeners:function(e){for(var t in c)delete c[t][e]},extractEvents:function(e,t,n,r){for(var s,a=o.plugins,u=0,c=a.length;c>u;u++){var l=a[u];if(l){var p=l.extractEvents(e,t,n,r);p&&(s=i(s,p))}}return s},enqueueEvents:function(e){e&&(l=i(l,e))},processEventQueue:function(){var e=l;l=null,a(e,p),"production"!==n.env.NODE_ENV?u(!l,"processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."):u(!l)},__purge:function(){c={}},__getListenerBank:function(){return c}};t.exports=m}).call(this,e("_process"))},{"./EventPluginRegistry":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPluginRegistry.js","./EventPluginUtils":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPluginUtils.js","./accumulateInto":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/forEachAccumulated.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPluginRegistry.js":[function(e,t,n){(function(n){"use strict";function r(){if(a)for(var e in u){var t=u[e],r=a.indexOf(e);if("production"!==n.env.NODE_ENV?i(r>-1,"EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.",e):i(r>-1),!c.plugins[r]){"production"!==n.env.NODE_ENV?i(t.extractEvents,"EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.",e):i(t.extractEvents),c.plugins[r]=t;var s=t.eventTypes;for(var l in s)"production"!==n.env.NODE_ENV?i(o(s[l],t,l),"EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.",l,e):i(o(s[l],t,l))}}}function o(e,t,r){"production"!==n.env.NODE_ENV?i(!c.eventNameDispatchConfigs.hasOwnProperty(r),"EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.",r):i(!c.eventNameDispatchConfigs.hasOwnProperty(r)),c.eventNameDispatchConfigs[r]=e;var o=e.phasedRegistrationNames;if(o){for(var a in o)if(o.hasOwnProperty(a)){var u=o[a];s(u,t,r)}return!0}return e.registrationName?(s(e.registrationName,t,r),!0):!1}function s(e,t,r){"production"!==n.env.NODE_ENV?i(!c.registrationNameModules[e],"EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.",e):i(!c.registrationNameModules[e]),c.registrationNameModules[e]=t,c.registrationNameDependencies[e]=t.eventTypes[r].dependencies}var i=e("./invariant"),a=null,u={},c={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},injectEventPluginOrder:function(e){"production"!==n.env.NODE_ENV?i(!a,"EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."):i(!a),a=Array.prototype.slice.call(e),r()},injectEventPluginsByName:function(e){var t=!1;for(var o in e)if(e.hasOwnProperty(o)){var s=e[o];u.hasOwnProperty(o)&&u[o]===s||("production"!==n.env.NODE_ENV?i(!u[o],"EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.",o):i(!u[o]),u[o]=s,t=!0)}t&&r()},getPluginModuleForEvent:function(e){var t=e.dispatchConfig;if(t.registrationName)return c.registrationNameModules[t.registrationName]||null;for(var n in t.phasedRegistrationNames)if(t.phasedRegistrationNames.hasOwnProperty(n)){var r=c.registrationNameModules[t.phasedRegistrationNames[n]];if(r)return r}return null},_resetEventPlugins:function(){a=null;for(var e in u)u.hasOwnProperty(e)&&delete u[e];c.plugins.length=0;var t=c.eventNameDispatchConfigs;for(var n in t)t.hasOwnProperty(n)&&delete t[n];var r=c.registrationNameModules;for(var o in r)r.hasOwnProperty(o)&&delete r[o]}};t.exports=c}).call(this,e("_process"))},{"./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPluginUtils.js":[function(e,t,n){(function(n){"use strict";function r(e){return e===_.topMouseUp||e===_.topTouchEnd||e===_.topTouchCancel}function o(e){return e===_.topMouseMove||e===_.topTouchMove}function s(e){return e===_.topMouseDown||e===_.topTouchStart}function i(e,t){var r=e._dispatchListeners,o=e._dispatchIDs;if("production"!==n.env.NODE_ENV&&m(e),Array.isArray(r))for(var s=0;s<r.length&&!e.isPropagationStopped();s++)t(e,r[s],o[s]);else r&&t(e,r,o)}function a(e,t,n){e.currentTarget=v.Mount.getNode(n);var r=t(e,n);return e.currentTarget=null,r}function u(e,t){i(e,t),e._dispatchListeners=null,e._dispatchIDs=null}function c(e){var t=e._dispatchListeners,r=e._dispatchIDs;if("production"!==n.env.NODE_ENV&&m(e),Array.isArray(t)){for(var o=0;o<t.length&&!e.isPropagationStopped();o++)if(t[o](e,r[o]))return r[o]}else if(t&&t(e,r))return r;return null}function l(e){var t=c(e);return e._dispatchIDs=null,e._dispatchListeners=null,t}function p(e){"production"!==n.env.NODE_ENV&&m(e);var t=e._dispatchListeners,r=e._dispatchIDs;"production"!==n.env.NODE_ENV?h(!Array.isArray(t),"executeDirectDispatch(...): Invalid `event`."):h(!Array.isArray(t));var o=t?t(e,r):null;return e._dispatchListeners=null,e._dispatchIDs=null,o}function d(e){return!!e._dispatchListeners}var m,f=e("./EventConstants"),h=e("./invariant"),v={Mount:null,injectMount:function(e){v.Mount=e,"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?h(e&&e.getNode,"EventPluginUtils.injection.injectMount(...): Injected Mount module is missing getNode."):h(e&&e.getNode))}},_=f.topLevelTypes;"production"!==n.env.NODE_ENV&&(m=function(e){var t=e._dispatchListeners,r=e._dispatchIDs,o=Array.isArray(t),s=Array.isArray(r),i=s?r.length:r?1:0,a=o?t.length:t?1:0;"production"!==n.env.NODE_ENV?h(s===o&&i===a,"EventPluginUtils: Invalid `event`."):h(s===o&&i===a)});var y={isEndish:r,isMoveish:o,isStartish:s,executeDirectDispatch:p,executeDispatch:a,executeDispatchesInOrder:u,executeDispatchesInOrderStopAtTrue:l,hasDispatches:d,injection:v,useTouchEvents:!1};t.exports=y}).call(this,e("_process"))},{"./EventConstants":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventConstants.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPropagators.js":[function(e,t,n){(function(n){"use strict";function r(e,t,n){var r=t.dispatchConfig.phasedRegistrationNames[n];return v(e,r)}function o(e,t,o){if("production"!==n.env.NODE_ENV&&!e)throw new Error("Dispatching id must not be null");var s=t?h.bubbled:h.captured,i=r(e,o,s);i&&(o._dispatchListeners=m(o._dispatchListeners,i),o._dispatchIDs=m(o._dispatchIDs,e))}function s(e){e&&e.dispatchConfig.phasedRegistrationNames&&d.injection.getInstanceHandle().traverseTwoPhase(e.dispatchMarker,o,e)}function i(e,t,n){if(n&&n.dispatchConfig.registrationName){var r=n.dispatchConfig.registrationName,o=v(e,r);o&&(n._dispatchListeners=m(n._dispatchListeners,o),n._dispatchIDs=m(n._dispatchIDs,e))}}function a(e){e&&e.dispatchConfig.registrationName&&i(e.dispatchMarker,null,e)}function u(e){f(e,s)}function c(e,t,n,r){d.injection.getInstanceHandle().traverseEnterLeave(n,r,i,e,t)}function l(e){f(e,a)}var p=e("./EventConstants"),d=e("./EventPluginHub"),m=e("./accumulateInto"),f=e("./forEachAccumulated"),h=p.PropagationPhases,v=d.getListener,_={accumulateTwoPhaseDispatches:u,accumulateDirectDispatches:l,accumulateEnterLeaveDispatches:c};t.exports=_}).call(this,e("_process"))},{"./EventConstants":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPluginHub.js","./accumulateInto":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/forEachAccumulated.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js":[function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};t.exports=o},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/FallbackCompositionState.js":[function(e,t,n){"use strict";function r(e){this._root=e,this._startText=this.getText(),this._fallbackText=null}var o=e("./PooledClass"),s=e("./Object.assign"),i=e("./getTextContentAccessor");s(r.prototype,{getText:function(){return"value"in this._root?this._root.value:this._root[i()]},getData:function(){if(this._fallbackText)return this._fallbackText;var e,t,n=this._startText,r=n.length,o=this.getText(),s=o.length;for(e=0;r>e&&n[e]===o[e];e++);var i=r-e;for(t=1;i>=t&&n[r-t]===o[s-t];t++);var a=t>1?1-t:void 0;return this._fallbackText=o.slice(e,a),this._fallbackText}}),o.addPoolingTo(r),t.exports=r},{"./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/PooledClass.js","./getTextContentAccessor":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getTextContentAccessor.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/HTMLDOMPropertyConfig.js":[function(e,t,n){"use strict";var r,o=e("./DOMProperty"),s=e("./ExecutionEnvironment"),i=o.injection.MUST_USE_ATTRIBUTE,a=o.injection.MUST_USE_PROPERTY,u=o.injection.HAS_BOOLEAN_VALUE,c=o.injection.HAS_SIDE_EFFECTS,l=o.injection.HAS_NUMERIC_VALUE,p=o.injection.HAS_POSITIVE_NUMERIC_VALUE,d=o.injection.HAS_OVERLOADED_BOOLEAN_VALUE;if(s.canUseDOM){var m=document.implementation;r=m&&m.hasFeature&&m.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")}var f={isCustomAttribute:RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),Properties:{accept:null,acceptCharset:null,accessKey:null,action:null,allowFullScreen:i|u,allowTransparency:i,alt:null,async:u,autoComplete:null,autoPlay:u,cellPadding:null,cellSpacing:null,charSet:i,checked:a|u,classID:i,className:r?i:a,cols:i|p,colSpan:null,content:null,contentEditable:null,contextMenu:i,controls:a|u,coords:null,crossOrigin:null,data:null,dateTime:i,defer:u,dir:null,disabled:i|u,download:d,draggable:null,encType:null,form:i,formAction:i,formEncType:i,formMethod:i,formNoValidate:u,formTarget:i,frameBorder:i,headers:null,height:i,hidden:i|u,high:null,href:null,hrefLang:null,htmlFor:null,httpEquiv:null,icon:null,id:a,label:null,lang:null,list:i,loop:a|u,low:null,manifest:i,marginHeight:null,marginWidth:null,max:null,maxLength:i,media:i,mediaGroup:null,method:null,min:null,multiple:a|u,muted:a|u,name:null,noValidate:u,open:u,optimum:null,pattern:null,placeholder:null,poster:null,preload:null,radioGroup:null,readOnly:a|u,rel:null,required:u,role:i,rows:i|p,rowSpan:null,sandbox:null,scope:null,scoped:u,scrolling:null,seamless:i|u,selected:a|u,shape:null,size:i|p,sizes:i,span:p,spellCheck:null,src:null,srcDoc:a,srcSet:i,start:l,step:null,style:null,tabIndex:null,target:null,title:null,type:null,useMap:null,value:a|c,width:i,wmode:i,autoCapitalize:null,autoCorrect:null,itemProp:i,itemScope:i|u,itemType:i,itemID:i,itemRef:i,property:null,unselectable:i},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{autoCapitalize:"autocapitalize",autoComplete:"autocomplete",autoCorrect:"autocorrect",autoFocus:"autofocus",autoPlay:"autoplay",encType:"encoding",hrefLang:"hreflang",radioGroup:"radiogroup",spellCheck:"spellcheck",srcDoc:"srcdoc",srcSet:"srcset"}};t.exports=f},{"./DOMProperty":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMProperty.js","./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/LinkedValueUtils.js":[function(e,t,n){(function(n){"use strict";function r(e){"production"!==n.env.NODE_ENV?c(null==e.props.checkedLink||null==e.props.valueLink,"Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don't want to use valueLink and vice versa."):c(null==e.props.checkedLink||null==e.props.valueLink)}function o(e){r(e),"production"!==n.env.NODE_ENV?c(null==e.props.value&&null==e.props.onChange,"Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink."):c(null==e.props.value&&null==e.props.onChange)}function s(e){r(e),"production"!==n.env.NODE_ENV?c(null==e.props.checked&&null==e.props.onChange,"Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don't want to use checkedLink"):c(null==e.props.checked&&null==e.props.onChange)}function i(e){this.props.valueLink.requestChange(e.target.value)}function a(e){this.props.checkedLink.requestChange(e.target.checked)}var u=e("./ReactPropTypes"),c=e("./invariant"),l={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},p={Mixin:{propTypes:{value:function(e,t,n){return!e[t]||l[e.type]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,t,n){return!e[t]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:u.func}},getValue:function(e){return e.props.valueLink?(o(e),e.props.valueLink.value):e.props.value},getChecked:function(e){return e.props.checkedLink?(s(e),e.props.checkedLink.value):e.props.checked},getOnChange:function(e){return e.props.valueLink?(o(e),i):e.props.checkedLink?(s(e),a):e.props.onChange}};t.exports=p}).call(this,e("_process"))},{"./ReactPropTypes":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPropTypes.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/LocalEventTrapMixin.js":[function(e,t,n){(function(n){"use strict";function r(e){e.remove()}var o=e("./ReactBrowserEventEmitter"),s=e("./accumulateInto"),i=e("./forEachAccumulated"),a=e("./invariant"),u={trapBubbledEvent:function(e,t){"production"!==n.env.NODE_ENV?a(this.isMounted(),"Must be mounted to trap events"):a(this.isMounted());var r=this.getDOMNode();"production"!==n.env.NODE_ENV?a(r,"LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered."):a(r);var i=o.trapBubbledEvent(e,t,r);this._localEventListeners=s(this._localEventListeners,i)},componentWillUnmount:function(){
this._localEventListeners&&i(this._localEventListeners,r)}};t.exports=u}).call(this,e("_process"))},{"./ReactBrowserEventEmitter":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserEventEmitter.js","./accumulateInto":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/forEachAccumulated.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/MobileSafariClickEventPlugin.js":[function(e,t,n){"use strict";var r=e("./EventConstants"),o=e("./emptyFunction"),s=r.topLevelTypes,i={eventTypes:null,extractEvents:function(e,t,n,r){if(e===s.topTouchStart){var i=r.target;i&&!i.onclick&&(i.onclick=o)}}};t.exports=i},{"./EventConstants":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventConstants.js","./emptyFunction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyFunction.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js":[function(e,t,n){"use strict";function r(e,t){if(null==e)throw new TypeError("Object.assign target cannot be null or undefined");for(var n=Object(e),r=Object.prototype.hasOwnProperty,o=1;o<arguments.length;o++){var s=arguments[o];if(null!=s){var i=Object(s);for(var a in i)r.call(i,a)&&(n[a]=i[a])}}return n}t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/PooledClass.js":[function(e,t,n){(function(n){"use strict";var r=e("./invariant"),o=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},s=function(e,t){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,e,t),r}return new n(e,t)},i=function(e,t,n){var r=this;if(r.instancePool.length){var o=r.instancePool.pop();return r.call(o,e,t,n),o}return new r(e,t,n)},a=function(e,t,n,r,o){var s=this;if(s.instancePool.length){var i=s.instancePool.pop();return s.call(i,e,t,n,r,o),i}return new s(e,t,n,r,o)},u=function(e){var t=this;"production"!==n.env.NODE_ENV?r(e instanceof t,"Trying to release an instance into a pool of a different type."):r(e instanceof t),e.destructor&&e.destructor(),t.instancePool.length<t.poolSize&&t.instancePool.push(e)},c=10,l=o,p=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||l,n.poolSize||(n.poolSize=c),n.release=u,n},d={addPoolingTo:p,oneArgumentPooler:o,twoArgumentPooler:s,threeArgumentPooler:i,fiveArgumentPooler:a};t.exports=d}).call(this,e("_process"))},{"./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/React.js":[function(e,t,n){(function(n){"use strict";var r=e("./EventPluginUtils"),o=e("./ReactChildren"),s=e("./ReactComponent"),i=e("./ReactClass"),a=e("./ReactContext"),u=e("./ReactCurrentOwner"),c=e("./ReactElement"),l=e("./ReactElementValidator"),p=e("./ReactDOM"),d=e("./ReactDOMTextComponent"),m=e("./ReactDefaultInjection"),f=e("./ReactInstanceHandles"),h=e("./ReactMount"),v=e("./ReactPerf"),_=e("./ReactPropTypes"),y=e("./ReactReconciler"),g=e("./ReactServerRendering"),b=e("./Object.assign"),j=e("./findDOMNode"),w=e("./onlyChild");m.inject();var E=c.createElement,D=c.createFactory,P=c.cloneElement;"production"!==n.env.NODE_ENV&&(E=l.createElement,D=l.createFactory,P=l.cloneElement);var R=v.measure("React","render",h.render),C={Children:{map:o.map,forEach:o.forEach,count:o.count,only:w},Component:s,DOM:p,PropTypes:_,initializeTouchEvents:function(e){r.useTouchEvents=e},createClass:i.createClass,createElement:E,cloneElement:P,createFactory:D,createMixin:function(e){return e},constructAndRenderComponent:h.constructAndRenderComponent,constructAndRenderComponentByID:h.constructAndRenderComponentByID,findDOMNode:j,render:R,renderToString:g.renderToString,renderToStaticMarkup:g.renderToStaticMarkup,unmountComponentAtNode:h.unmountComponentAtNode,isValidElement:c.isValidElement,withContext:a.withContext,__spread:b};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({CurrentOwner:u,InstanceHandles:f,Mount:h,Reconciler:y,TextComponent:d}),"production"!==n.env.NODE_ENV){var U=e("./ExecutionEnvironment");if(U.canUseDOM&&window.top===window.self){navigator.userAgent.indexOf("Chrome")>-1&&"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&console.debug("Download the React DevTools for a better development experience: https://fb.me/react-devtools");for(var O=[Array.isArray,Array.prototype.every,Array.prototype.forEach,Array.prototype.indexOf,Array.prototype.map,Date.now,Function.prototype.bind,Object.keys,String.prototype.split,String.prototype.trim,Object.create,Object.freeze],N=0;N<O.length;N++)if(!O[N]){console.error("One or more ES5 shim/shams expected by React are not available: https://fb.me/react-warning-polyfills");break}}}C.version="0.13.3",t.exports=C}).call(this,e("_process"))},{"./EventPluginUtils":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPluginUtils.js","./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./ReactChildren":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactChildren.js","./ReactClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactClass.js","./ReactComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactComponent.js","./ReactContext":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactContext.js","./ReactCurrentOwner":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactCurrentOwner.js","./ReactDOM":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOM.js","./ReactDOMTextComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMTextComponent.js","./ReactDefaultInjection":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDefaultInjection.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElementValidator.js","./ReactInstanceHandles":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPerf.js","./ReactPropTypes":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPropTypes.js","./ReactReconciler":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactReconciler.js","./ReactServerRendering":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactServerRendering.js","./findDOMNode":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/findDOMNode.js","./onlyChild":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/onlyChild.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserComponentMixin.js":[function(e,t,n){"use strict";var r=e("./findDOMNode"),o={getDOMNode:function(){return r(this)}};t.exports=o},{"./findDOMNode":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/findDOMNode.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserEventEmitter.js":[function(e,t,n){"use strict";function r(e){return Object.prototype.hasOwnProperty.call(e,h)||(e[h]=m++,p[e[h]]={}),p[e[h]]}var o=e("./EventConstants"),s=e("./EventPluginHub"),i=e("./EventPluginRegistry"),a=e("./ReactEventEmitterMixin"),u=e("./ViewportMetrics"),c=e("./Object.assign"),l=e("./isEventSupported"),p={},d=!1,m=0,f={topBlur:"blur",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topWheel:"wheel"},h="_reactListenersID"+String(Math.random()).slice(2),v=c({},a,{ReactEventListener:null,injection:{injectReactEventListener:function(e){e.setHandleTopLevel(v.handleTopLevel),v.ReactEventListener=e}},setEnabled:function(e){v.ReactEventListener&&v.ReactEventListener.setEnabled(e)},isEnabled:function(){return!(!v.ReactEventListener||!v.ReactEventListener.isEnabled())},listenTo:function(e,t){for(var n=t,s=r(n),a=i.registrationNameDependencies[e],u=o.topLevelTypes,c=0,p=a.length;p>c;c++){var d=a[c];s.hasOwnProperty(d)&&s[d]||(d===u.topWheel?l("wheel")?v.ReactEventListener.trapBubbledEvent(u.topWheel,"wheel",n):l("mousewheel")?v.ReactEventListener.trapBubbledEvent(u.topWheel,"mousewheel",n):v.ReactEventListener.trapBubbledEvent(u.topWheel,"DOMMouseScroll",n):d===u.topScroll?l("scroll",!0)?v.ReactEventListener.trapCapturedEvent(u.topScroll,"scroll",n):v.ReactEventListener.trapBubbledEvent(u.topScroll,"scroll",v.ReactEventListener.WINDOW_HANDLE):d===u.topFocus||d===u.topBlur?(l("focus",!0)?(v.ReactEventListener.trapCapturedEvent(u.topFocus,"focus",n),v.ReactEventListener.trapCapturedEvent(u.topBlur,"blur",n)):l("focusin")&&(v.ReactEventListener.trapBubbledEvent(u.topFocus,"focusin",n),v.ReactEventListener.trapBubbledEvent(u.topBlur,"focusout",n)),s[u.topBlur]=!0,s[u.topFocus]=!0):f.hasOwnProperty(d)&&v.ReactEventListener.trapBubbledEvent(d,f[d],n),s[d]=!0)}},trapBubbledEvent:function(e,t,n){return v.ReactEventListener.trapBubbledEvent(e,t,n)},trapCapturedEvent:function(e,t,n){return v.ReactEventListener.trapCapturedEvent(e,t,n)},ensureScrollValueMonitoring:function(){if(!d){var e=u.refreshScrollValues;v.ReactEventListener.monitorScrollValue(e),d=!0}},eventNameDispatchConfigs:s.eventNameDispatchConfigs,registrationNameModules:s.registrationNameModules,putListener:s.putListener,getListener:s.getListener,deleteListener:s.deleteListener,deleteAllListeners:s.deleteAllListeners});t.exports=v},{"./EventConstants":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPluginHub.js","./EventPluginRegistry":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPluginRegistry.js","./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./ReactEventEmitterMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactEventEmitterMixin.js","./ViewportMetrics":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ViewportMetrics.js","./isEventSupported":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/isEventSupported.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactChildReconciler.js":[function(e,t,n){"use strict";var r=e("./ReactReconciler"),o=e("./flattenChildren"),s=e("./instantiateReactComponent"),i=e("./shouldUpdateReactComponent"),a={instantiateChildren:function(e,t,n){var r=o(e);for(var i in r)if(r.hasOwnProperty(i)){var a=r[i],u=s(a,null);r[i]=u}return r},updateChildren:function(e,t,n,a){var u=o(t);if(!u&&!e)return null;var c;for(c in u)if(u.hasOwnProperty(c)){var l=e&&e[c],p=l&&l._currentElement,d=u[c];if(i(p,d))r.receiveComponent(l,d,n,a),u[c]=l;else{l&&r.unmountComponent(l,c);var m=s(d,null);u[c]=m}}for(c in e)!e.hasOwnProperty(c)||u&&u.hasOwnProperty(c)||r.unmountComponent(e[c]);return u},unmountChildren:function(e){for(var t in e){var n=e[t];r.unmountComponent(n)}}};t.exports=a},{"./ReactReconciler":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactReconciler.js","./flattenChildren":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/flattenChildren.js","./instantiateReactComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/instantiateReactComponent.js","./shouldUpdateReactComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/shouldUpdateReactComponent.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactChildren.js":[function(e,t,n){(function(n){"use strict";function r(e,t){this.forEachFunction=e,this.forEachContext=t}function o(e,t,n,r){var o=e;o.forEachFunction.call(o.forEachContext,t,r)}function s(e,t,n){if(null==e)return e;var s=r.getPooled(t,n);m(e,o,s),r.release(s)}function i(e,t,n){this.mapResult=e,this.mapFunction=t,this.mapContext=n}function a(e,t,r,o){var s=e,i=s.mapResult,a=!i.hasOwnProperty(r);if("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?f(a,"ReactChildren.map(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",r):null),a){var u=s.mapFunction.call(s.mapContext,t,o);i[r]=u}}function u(e,t,n){if(null==e)return e;var r={},o=i.getPooled(r,t,n);return m(e,a,o),i.release(o),d.create(r)}function c(e,t,n,r){return null}function l(e,t){return m(e,c,null)}var p=e("./PooledClass"),d=e("./ReactFragment"),m=e("./traverseAllChildren"),f=e("./warning"),h=p.twoArgumentPooler,v=p.threeArgumentPooler;p.addPoolingTo(r,h),p.addPoolingTo(i,v);var _={forEach:s,map:u,count:l};t.exports=_}).call(this,e("_process"))},{"./PooledClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/PooledClass.js","./ReactFragment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactFragment.js","./traverseAllChildren":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/traverseAllChildren.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactClass.js":[function(e,t,n){(function(n){"use strict";function r(e,t,r){for(var o in t)t.hasOwnProperty(o)&&("production"!==n.env.NODE_ENV?P("function"==typeof t[o],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",e.displayName||"ReactClass",g[r],o):null)}function o(e,t){var r=O.hasOwnProperty(t)?O[t]:null;T.hasOwnProperty(t)&&("production"!==n.env.NODE_ENV?w(r===C.OVERRIDE_BASE,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",t):w(r===C.OVERRIDE_BASE)),e.hasOwnProperty(t)&&("production"!==n.env.NODE_ENV?w(r===C.DEFINE_MANY||r===C.DEFINE_MANY_MERGED,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",t):w(r===C.DEFINE_MANY||r===C.DEFINE_MANY_MERGED))}function s(e,t){if(t){"production"!==n.env.NODE_ENV?w("function"!=typeof t,"ReactClass: You're attempting to use a component class as a mixin. Instead, just use a regular object."):w("function"!=typeof t),"production"!==n.env.NODE_ENV?w(!f.isValidElement(t),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object."):w(!f.isValidElement(t));var r=e.prototype;t.hasOwnProperty(R)&&N.mixins(e,t.mixins);for(var s in t)if(t.hasOwnProperty(s)&&s!==R){var i=t[s];if(o(r,s),N.hasOwnProperty(s))N[s](e,i);else{var a=O.hasOwnProperty(s),l=r.hasOwnProperty(s),p=i&&i.__reactDontBind,d="function"==typeof i,m=d&&!a&&!l&&!p;if(m)r.__reactAutoBindMap||(r.__reactAutoBindMap={}),r.__reactAutoBindMap[s]=i,r[s]=i;else if(l){var h=O[s];"production"!==n.env.NODE_ENV?w(a&&(h===C.DEFINE_MANY_MERGED||h===C.DEFINE_MANY),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",h,s):w(a&&(h===C.DEFINE_MANY_MERGED||h===C.DEFINE_MANY)),h===C.DEFINE_MANY_MERGED?r[s]=u(r[s],i):h===C.DEFINE_MANY&&(r[s]=c(r[s],i))}else r[s]=i,"production"!==n.env.NODE_ENV&&"function"==typeof i&&t.displayName&&(r[s].displayName=t.displayName+"_"+s)}}}}function i(e,t){if(t)for(var r in t){var o=t[r];if(t.hasOwnProperty(r)){var s=r in N;"production"!==n.env.NODE_ENV?w(!s,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',r):w(!s);var i=r in e;"production"!==n.env.NODE_ENV?w(!i,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",r):w(!i),e[r]=o}}}function a(e,t){"production"!==n.env.NODE_ENV?w(e&&t&&"object"==typeof e&&"object"==typeof t,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."):w(e&&t&&"object"==typeof e&&"object"==typeof t);for(var r in t)t.hasOwnProperty(r)&&("production"!==n.env.NODE_ENV?w(void 0===e[r],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",r):w(void 0===e[r]),e[r]=t[r]);return e}function u(e,t){return function(){var n=e.apply(this,arguments),r=t.apply(this,arguments);if(null==n)return r;if(null==r)return n;var o={};return a(o,n),a(o,r),o}}function c(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function l(e,t){var r=t.bind(e);if("production"!==n.env.NODE_ENV){r.__reactBoundContext=e,r.__reactBoundMethod=t,r.__reactBoundArguments=null;var o=e.constructor.displayName,s=r.bind;r.bind=function(i){for(var a=[],u=1,c=arguments.length;c>u;u++)a.push(arguments[u]);if(i!==e&&null!==i)"production"!==n.env.NODE_ENV?P(!1,"bind(): React component methods may only be bound to the component instance. See %s",o):null;else if(!a.length)return"production"!==n.env.NODE_ENV?P(!1,"bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s",o):null,r;var l=s.apply(r,arguments);return l.__reactBoundContext=e,l.__reactBoundMethod=t,l.__reactBoundArguments=a,l}}return r}function p(e){for(var t in e.__reactAutoBindMap)if(e.__reactAutoBindMap.hasOwnProperty(t)){var n=e.__reactAutoBindMap[t];e[t]=l(e,h.guard(n,e.constructor.displayName+"."+t))}}var d=e("./ReactComponent"),m=e("./ReactCurrentOwner"),f=e("./ReactElement"),h=e("./ReactErrorUtils"),v=e("./ReactInstanceMap"),_=e("./ReactLifeCycle"),y=e("./ReactPropTypeLocations"),g=e("./ReactPropTypeLocationNames"),b=e("./ReactUpdateQueue"),j=e("./Object.assign"),w=e("./invariant"),E=e("./keyMirror"),D=e("./keyOf"),P=e("./warning"),R=D({mixins:null}),C=E({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),U=[],O={mixins:C.DEFINE_MANY,statics:C.DEFINE_MANY,propTypes:C.DEFINE_MANY,contextTypes:C.DEFINE_MANY,childContextTypes:C.DEFINE_MANY,getDefaultProps:C.DEFINE_MANY_MERGED,getInitialState:C.DEFINE_MANY_MERGED,getChildContext:C.DEFINE_MANY_MERGED,render:C.DEFINE_ONCE,componentWillMount:C.DEFINE_MANY,componentDidMount:C.DEFINE_MANY,componentWillReceiveProps:C.DEFINE_MANY,shouldComponentUpdate:C.DEFINE_ONCE,componentWillUpdate:C.DEFINE_MANY,componentDidUpdate:C.DEFINE_MANY,componentWillUnmount:C.DEFINE_MANY,updateComponent:C.OVERRIDE_BASE},N={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)s(e,t[n])},childContextTypes:function(e,t){"production"!==n.env.NODE_ENV&&r(e,t,y.childContext),e.childContextTypes=j({},e.childContextTypes,t)},contextTypes:function(e,t){"production"!==n.env.NODE_ENV&&r(e,t,y.context),e.contextTypes=j({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps=e.getDefaultProps?u(e.getDefaultProps,t):t},propTypes:function(e,t){"production"!==n.env.NODE_ENV&&r(e,t,y.prop),e.propTypes=j({},e.propTypes,t)},statics:function(e,t){i(e,t)}},x={enumerable:!1,get:function(){var e=this.displayName||this.name||"Component";return"production"!==n.env.NODE_ENV?P(!1,"%s.type is deprecated. Use %s directly to access the class.",e,e):null,Object.defineProperty(this,"type",{value:this}),this}},T={replaceState:function(e,t){b.enqueueReplaceState(this,e),t&&b.enqueueCallback(this,t)},isMounted:function(){if("production"!==n.env.NODE_ENV){var e=m.current;null!==e&&("production"!==n.env.NODE_ENV?P(e._warnedAboutRefsInRender,"%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",e.getName()||"A component"):null,e._warnedAboutRefsInRender=!0)}var t=v.get(this);return t&&t!==_.currentlyMountingInstance},setProps:function(e,t){b.enqueueSetProps(this,e),t&&b.enqueueCallback(this,t)},replaceProps:function(e,t){b.enqueueReplaceProps(this,e),t&&b.enqueueCallback(this,t)}},M=function(){};j(M.prototype,d.prototype,T);var k={createClass:function(e){var t=function(e,r){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?P(this instanceof t,"Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory"):null),this.__reactAutoBindMap&&p(this),this.props=e,this.context=r,this.state=null;var o=this.getInitialState?this.getInitialState():null;"production"!==n.env.NODE_ENV&&"undefined"==typeof o&&this.getInitialState._isMockFunction&&(o=null),"production"!==n.env.NODE_ENV?w("object"==typeof o&&!Array.isArray(o),"%s.getInitialState(): must return an object or null",t.displayName||"ReactCompositeComponent"):w("object"==typeof o&&!Array.isArray(o)),this.state=o};t.prototype=new M,t.prototype.constructor=t,U.forEach(s.bind(null,t)),s(t,e),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),"production"!==n.env.NODE_ENV&&(t.getDefaultProps&&(t.getDefaultProps.isReactClassApproved={}),t.prototype.getInitialState&&(t.prototype.getInitialState.isReactClassApproved={})),"production"!==n.env.NODE_ENV?w(t.prototype.render,"createClass(...): Class specification must implement a `render` method."):w(t.prototype.render),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?P(!t.prototype.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",e.displayName||"A component"):null);for(var r in O)t.prototype[r]||(t.prototype[r]=null);if(t.type=t,"production"!==n.env.NODE_ENV)try{Object.defineProperty(t,"type",x)}catch(o){}return t},injection:{injectMixin:function(e){U.push(e)}}};t.exports=k}).call(this,e("_process"))},{"./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./ReactComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactComponent.js","./ReactCurrentOwner":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactErrorUtils":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactErrorUtils.js","./ReactInstanceMap":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceMap.js","./ReactLifeCycle":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactLifeCycle.js","./ReactPropTypeLocationNames":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPropTypeLocations.js","./ReactUpdateQueue":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdateQueue.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./keyMirror":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyMirror.js","./keyOf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyOf.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactComponent.js":[function(e,t,n){(function(n){"use strict";function r(e,t){this.props=e,this.context=t}var o=e("./ReactUpdateQueue"),s=e("./invariant"),i=e("./warning");if(r.prototype.setState=function(e,t){"production"!==n.env.NODE_ENV?s("object"==typeof e||"function"==typeof e||null==e,"setState(...): takes an object of state variables to update or a function which returns an object of state variables."):s("object"==typeof e||"function"==typeof e||null==e),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?i(null!=e,"setState(...): You passed an undefined or null state object; instead, use forceUpdate()."):null),o.enqueueSetState(this,e),t&&o.enqueueCallback(this,t)},r.prototype.forceUpdate=function(e){o.enqueueForceUpdate(this),e&&o.enqueueCallback(this,e)},"production"!==n.env.NODE_ENV){var a={getDOMNode:["getDOMNode","Use React.findDOMNode(component) instead."],isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceProps:["replaceProps","Instead, call React.render again at the top level."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."],setProps:["setProps","Instead, call React.render again at the top level."]},u=function(e,t){try{Object.defineProperty(r.prototype,e,{get:function(){return void("production"!==n.env.NODE_ENV?i(!1,"%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1]):null)}})}catch(o){}};for(var c in a)a.hasOwnProperty(c)&&u(c,a[c])}t.exports=r}).call(this,e("_process"))},{"./ReactUpdateQueue":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdateQueue.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactComponentBrowserEnvironment.js":[function(e,t,n){"use strict";var r=e("./ReactDOMIDOperations"),o=e("./ReactMount"),s={processChildrenUpdates:r.dangerouslyProcessChildrenUpdates,replaceNodeWithMarkupByID:r.dangerouslyReplaceNodeWithMarkupByID,unmountIDFromEnvironment:function(e){o.purgeID(e)}};t.exports=s},{"./ReactDOMIDOperations":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMIDOperations.js","./ReactMount":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMount.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactComponentEnvironment.js":[function(e,t,n){(function(n){"use strict";var r=e("./invariant"),o=!1,s={unmountIDFromEnvironment:null,replaceNodeWithMarkupByID:null,processChildrenUpdates:null,injection:{injectEnvironment:function(e){"production"!==n.env.NODE_ENV?r(!o,"ReactCompositeComponent: injectEnvironment() can only be called once."):r(!o),s.unmountIDFromEnvironment=e.unmountIDFromEnvironment,s.replaceNodeWithMarkupByID=e.replaceNodeWithMarkupByID,s.processChildrenUpdates=e.processChildrenUpdates,o=!0}}};t.exports=s}).call(this,e("_process"))},{"./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactCompositeComponent.js":[function(e,t,n){(function(n){"use strict";function r(e){var t=e._currentElement._owner||null;if(t){var n=t.getName();if(n)return" Check the render method of `"+n+"`."}return""}var o=e("./ReactComponentEnvironment"),s=e("./ReactContext"),i=e("./ReactCurrentOwner"),a=e("./ReactElement"),u=e("./ReactElementValidator"),c=e("./ReactInstanceMap"),l=e("./ReactLifeCycle"),p=e("./ReactNativeComponent"),d=e("./ReactPerf"),m=e("./ReactPropTypeLocations"),f=e("./ReactPropTypeLocationNames"),h=e("./ReactReconciler"),v=e("./ReactUpdates"),_=e("./Object.assign"),y=e("./emptyObject"),g=e("./invariant"),b=e("./shouldUpdateReactComponent"),j=e("./warning"),w=1,E={construct:function(e){this._currentElement=e,this._rootNodeID=null,this._instance=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._isTopLevel=!1,this._pendingCallbacks=null},mountComponent:function(e,t,r){this._context=r,this._mountOrder=w++,this._rootNodeID=e;var o=this._processProps(this._currentElement.props),s=this._processContext(this._currentElement._context),i=p.getComponentClassForElement(this._currentElement),a=new i(o,s);"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?j(null!=a.render,"%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render` in your component or you may have accidentally tried to render an element whose type is a function that isn't a React component.",i.displayName||i.name||"Component"):null),a.props=o,a.context=s,a.refs=y,this._instance=a,c.set(a,this),"production"!==n.env.NODE_ENV&&this._warnIfContextsDiffer(this._currentElement._context,r),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?j(!a.getInitialState||a.getInitialState.isReactClassApproved,"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",this.getName()||"a component"):null,"production"!==n.env.NODE_ENV?j(!a.getDefaultProps||a.getDefaultProps.isReactClassApproved,"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",this.getName()||"a component"):null,"production"!==n.env.NODE_ENV?j(!a.propTypes,"propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",this.getName()||"a component"):null,"production"!==n.env.NODE_ENV?j(!a.contextTypes,"contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",this.getName()||"a component"):null,"production"!==n.env.NODE_ENV?j("function"!=typeof a.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",this.getName()||"A component"):null);

var u=a.state;void 0===u&&(a.state=u=null),"production"!==n.env.NODE_ENV?g("object"==typeof u&&!Array.isArray(u),"%s.state: must be set to an object or null",this.getName()||"ReactCompositeComponent"):g("object"==typeof u&&!Array.isArray(u)),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1;var d,m,f=l.currentlyMountingInstance;l.currentlyMountingInstance=this;try{a.componentWillMount&&(a.componentWillMount(),this._pendingStateQueue&&(a.state=this._processPendingState(a.props,a.context))),d=this._getValidatedChildContext(r),m=this._renderValidatedComponent(d)}finally{l.currentlyMountingInstance=f}this._renderedComponent=this._instantiateReactComponent(m,this._currentElement.type);var v=h.mountComponent(this._renderedComponent,e,t,this._mergeChildContext(r,d));return a.componentDidMount&&t.getReactMountReady().enqueue(a.componentDidMount,a),v},unmountComponent:function(){var e=this._instance;if(e.componentWillUnmount){var t=l.currentlyUnmountingInstance;l.currentlyUnmountingInstance=this;try{e.componentWillUnmount()}finally{l.currentlyUnmountingInstance=t}}h.unmountComponent(this._renderedComponent),this._renderedComponent=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=null,c.remove(e)},_setPropsInternal:function(e,t){var n=this._pendingElement||this._currentElement;this._pendingElement=a.cloneAndReplaceProps(n,_({},n.props,e)),v.enqueueUpdate(this,t)},_maskContext:function(e){var t=null;if("string"==typeof this._currentElement.type)return y;var n=this._currentElement.type.contextTypes;if(!n)return y;t={};for(var r in n)t[r]=e[r];return t},_processContext:function(e){var t=this._maskContext(e);if("production"!==n.env.NODE_ENV){var r=p.getComponentClassForElement(this._currentElement);r.contextTypes&&this._checkPropTypes(r.contextTypes,t,m.context)}return t},_getValidatedChildContext:function(e){var t=this._instance,r=t.getChildContext&&t.getChildContext();if(r){"production"!==n.env.NODE_ENV?g("object"==typeof t.constructor.childContextTypes,"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",this.getName()||"ReactCompositeComponent"):g("object"==typeof t.constructor.childContextTypes),"production"!==n.env.NODE_ENV&&this._checkPropTypes(t.constructor.childContextTypes,r,m.childContext);for(var o in r)"production"!==n.env.NODE_ENV?g(o in t.constructor.childContextTypes,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',this.getName()||"ReactCompositeComponent",o):g(o in t.constructor.childContextTypes);return r}return null},_mergeChildContext:function(e,t){return t?_({},e,t):e},_processProps:function(e){if("production"!==n.env.NODE_ENV){var t=p.getComponentClassForElement(this._currentElement);t.propTypes&&this._checkPropTypes(t.propTypes,e,m.prop)}return e},_checkPropTypes:function(e,t,o){var s=this.getName();for(var i in e)if(e.hasOwnProperty(i)){var a;try{"production"!==n.env.NODE_ENV?g("function"==typeof e[i],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",s||"React class",f[o],i):g("function"==typeof e[i]),a=e[i](t,i,s,o)}catch(u){a=u}if(a instanceof Error){var c=r(this);o===m.prop?"production"!==n.env.NODE_ENV?j(!1,"Failed Composite propType: %s%s",a.message,c):null:"production"!==n.env.NODE_ENV?j(!1,"Failed Context Types: %s%s",a.message,c):null}}},receiveComponent:function(e,t,n){var r=this._currentElement,o=this._context;this._pendingElement=null,this.updateComponent(t,r,e,o,n)},performUpdateIfNecessary:function(e){null!=this._pendingElement&&h.receiveComponent(this,this._pendingElement||this._currentElement,e,this._context),(null!==this._pendingStateQueue||this._pendingForceUpdate)&&("production"!==n.env.NODE_ENV&&u.checkAndWarnForMutatedProps(this._currentElement),this.updateComponent(e,this._currentElement,this._currentElement,this._context,this._context))},_warnIfContextsDiffer:function(e,t){e=this._maskContext(e),t=this._maskContext(t);for(var r=Object.keys(t).sort(),o=this.getName()||"ReactCompositeComponent",s=0;s<r.length;s++){var i=r[s];"production"!==n.env.NODE_ENV?j(e[i]===t[i],"owner-based and parent-based contexts differ (values: `%s` vs `%s`) for key (%s) while mounting %s (see: http://fb.me/react-context-by-parent)",e[i],t[i],i,o):null}},updateComponent:function(e,t,r,o,s){var i=this._instance,a=i.context,u=i.props;t!==r&&(a=this._processContext(r._context),u=this._processProps(r.props),"production"!==n.env.NODE_ENV&&null!=s&&this._warnIfContextsDiffer(r._context,s),i.componentWillReceiveProps&&i.componentWillReceiveProps(u,a));var c=this._processPendingState(u,a),l=this._pendingForceUpdate||!i.shouldComponentUpdate||i.shouldComponentUpdate(u,c,a);"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?j("undefined"!=typeof l,"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",this.getName()||"ReactCompositeComponent"):null),l?(this._pendingForceUpdate=!1,this._performComponentUpdate(r,u,c,a,e,s)):(this._currentElement=r,this._context=s,i.props=u,i.state=c,i.context=a)},_processPendingState:function(e,t){var n=this._instance,r=this._pendingStateQueue,o=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!r)return n.state;if(o&&1===r.length)return r[0];for(var s=_({},o?r[0]:n.state),i=o?1:0;i<r.length;i++){var a=r[i];_(s,"function"==typeof a?a.call(n,s,e,t):a)}return s},_performComponentUpdate:function(e,t,n,r,o,s){var i=this._instance,a=i.props,u=i.state,c=i.context;i.componentWillUpdate&&i.componentWillUpdate(t,n,r),this._currentElement=e,this._context=s,i.props=t,i.state=n,i.context=r,this._updateRenderedComponent(o,s),i.componentDidUpdate&&o.getReactMountReady().enqueue(i.componentDidUpdate.bind(i,a,u,c),i)},_updateRenderedComponent:function(e,t){var n=this._renderedComponent,r=n._currentElement,o=this._getValidatedChildContext(),s=this._renderValidatedComponent(o);if(b(r,s))h.receiveComponent(n,s,e,this._mergeChildContext(t,o));else{var i=this._rootNodeID,a=n._rootNodeID;h.unmountComponent(n),this._renderedComponent=this._instantiateReactComponent(s,this._currentElement.type);var u=h.mountComponent(this._renderedComponent,i,e,this._mergeChildContext(t,o));this._replaceNodeWithMarkupByID(a,u)}},_replaceNodeWithMarkupByID:function(e,t){o.replaceNodeWithMarkupByID(e,t)},_renderValidatedComponentWithoutOwnerOrContext:function(){var e=this._instance,t=e.render();return"production"!==n.env.NODE_ENV&&"undefined"==typeof t&&e.render._isMockFunction&&(t=null),t},_renderValidatedComponent:function(e){var t,r=s.current;s.current=this._mergeChildContext(this._currentElement._context,e),i.current=this;try{t=this._renderValidatedComponentWithoutOwnerOrContext()}finally{s.current=r,i.current=null}return"production"!==n.env.NODE_ENV?g(null===t||t===!1||a.isValidElement(t),"%s.render(): A valid ReactComponent must be returned. You may have returned undefined, an array or some other invalid object.",this.getName()||"ReactCompositeComponent"):g(null===t||t===!1||a.isValidElement(t)),t},attachRef:function(e,t){var n=this.getPublicInstance(),r=n.refs===y?n.refs={}:n.refs;r[e]=t.getPublicInstance()},detachRef:function(e){var t=this.getPublicInstance().refs;delete t[e]},getName:function(){var e=this._currentElement.type,t=this._instance&&this._instance.constructor;return e.displayName||t&&t.displayName||e.name||t&&t.name||null},getPublicInstance:function(){return this._instance},_instantiateReactComponent:null};d.measureMethods(E,"ReactCompositeComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent",_renderValidatedComponent:"_renderValidatedComponent"});var D={Mixin:E};t.exports=D}).call(this,e("_process"))},{"./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./ReactComponentEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactComponentEnvironment.js","./ReactContext":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactContext.js","./ReactCurrentOwner":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElementValidator.js","./ReactInstanceMap":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceMap.js","./ReactLifeCycle":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactLifeCycle.js","./ReactNativeComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactNativeComponent.js","./ReactPerf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPerf.js","./ReactPropTypeLocationNames":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPropTypeLocations.js","./ReactReconciler":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactReconciler.js","./ReactUpdates":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdates.js","./emptyObject":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyObject.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./shouldUpdateReactComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/shouldUpdateReactComponent.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactContext.js":[function(e,t,n){(function(n){"use strict";var r=e("./Object.assign"),o=e("./emptyObject"),s=e("./warning"),i=!1,a={current:o,withContext:function(e,t){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?s(i,"withContext is deprecated and will be removed in a future version. Use a wrapper component with getChildContext instead."):null,i=!0);var o,u=a.current;a.current=r({},u,e);try{o=t()}finally{a.current=u}return o}};t.exports=a}).call(this,e("_process"))},{"./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./emptyObject":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyObject.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactCurrentOwner.js":[function(e,t,n){"use strict";var r={current:null};t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOM.js":[function(e,t,n){(function(n){"use strict";function r(e){return"production"!==n.env.NODE_ENV?s.createFactory(e):o.createFactory(e)}var o=e("./ReactElement"),s=e("./ReactElementValidator"),i=e("./mapObject"),a=i({a:"a",abbr:"abbr",address:"address",area:"area",article:"article",aside:"aside",audio:"audio",b:"b",base:"base",bdi:"bdi",bdo:"bdo",big:"big",blockquote:"blockquote",body:"body",br:"br",button:"button",canvas:"canvas",caption:"caption",cite:"cite",code:"code",col:"col",colgroup:"colgroup",data:"data",datalist:"datalist",dd:"dd",del:"del",details:"details",dfn:"dfn",dialog:"dialog",div:"div",dl:"dl",dt:"dt",em:"em",embed:"embed",fieldset:"fieldset",figcaption:"figcaption",figure:"figure",footer:"footer",form:"form",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",head:"head",header:"header",hr:"hr",html:"html",i:"i",iframe:"iframe",img:"img",input:"input",ins:"ins",kbd:"kbd",keygen:"keygen",label:"label",legend:"legend",li:"li",link:"link",main:"main",map:"map",mark:"mark",menu:"menu",menuitem:"menuitem",meta:"meta",meter:"meter",nav:"nav",noscript:"noscript",object:"object",ol:"ol",optgroup:"optgroup",option:"option",output:"output",p:"p",param:"param",picture:"picture",pre:"pre",progress:"progress",q:"q",rp:"rp",rt:"rt",ruby:"ruby",s:"s",samp:"samp",script:"script",section:"section",select:"select",small:"small",source:"source",span:"span",strong:"strong",style:"style",sub:"sub",summary:"summary",sup:"sup",table:"table",tbody:"tbody",td:"td",textarea:"textarea",tfoot:"tfoot",th:"th",thead:"thead",time:"time",title:"title",tr:"tr",track:"track",u:"u",ul:"ul","var":"var",video:"video",wbr:"wbr",circle:"circle",clipPath:"clipPath",defs:"defs",ellipse:"ellipse",g:"g",line:"line",linearGradient:"linearGradient",mask:"mask",path:"path",pattern:"pattern",polygon:"polygon",polyline:"polyline",radialGradient:"radialGradient",rect:"rect",stop:"stop",svg:"svg",text:"text",tspan:"tspan"},r);t.exports=a}).call(this,e("_process"))},{"./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElementValidator.js","./mapObject":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/mapObject.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMButton.js":[function(e,t,n){"use strict";var r=e("./AutoFocusMixin"),o=e("./ReactBrowserComponentMixin"),s=e("./ReactClass"),i=e("./ReactElement"),a=e("./keyMirror"),u=i.createFactory("button"),c=a({onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0}),l=s.createClass({displayName:"ReactDOMButton",tagName:"BUTTON",mixins:[r,o],render:function(){var e={};for(var t in this.props)!this.props.hasOwnProperty(t)||this.props.disabled&&c[t]||(e[t]=this.props[t]);return u(e,this.props.children)}});t.exports=l},{"./AutoFocusMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/AutoFocusMixin.js","./ReactBrowserComponentMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./keyMirror":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyMirror.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMComponent.js":[function(e,t,n){(function(n){"use strict";function r(e){e&&(null!=e.dangerouslySetInnerHTML&&("production"!==n.env.NODE_ENV?_(null==e.children,"Can only set one of `children` or `props.dangerouslySetInnerHTML`."):_(null==e.children),"production"!==n.env.NODE_ENV?_("object"==typeof e.dangerouslySetInnerHTML&&"__html"in e.dangerouslySetInnerHTML,"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information."):_("object"==typeof e.dangerouslySetInnerHTML&&"__html"in e.dangerouslySetInnerHTML)),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?b(null==e.innerHTML,"Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."):null,"production"!==n.env.NODE_ENV?b(!e.contentEditable||null==e.children,"A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."):null),"production"!==n.env.NODE_ENV?_(null==e.style||"object"==typeof e.style,"The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."):_(null==e.style||"object"==typeof e.style))}function o(e,t,r,o){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?b("onScroll"!==t||y("scroll",!0),"This browser doesn't support the `onScroll` event"):null);var s=d.findReactContainerForID(e);if(s){var i=s.nodeType===R?s.ownerDocument:s;w(t,i)}o.getPutListenerQueue().enqueuePutListener(e,t,r)}function s(e){x.call(N,e)||("production"!==n.env.NODE_ENV?_(O.test(e),"Invalid tag: %s",e):_(O.test(e)),N[e]=!0)}function i(e){s(e),this._tag=e,this._renderedChildren=null,this._previousStyleCopy=null,this._rootNodeID=null}var a=e("./CSSPropertyOperations"),u=e("./DOMProperty"),c=e("./DOMPropertyOperations"),l=e("./ReactBrowserEventEmitter"),p=e("./ReactComponentBrowserEnvironment"),d=e("./ReactMount"),m=e("./ReactMultiChild"),f=e("./ReactPerf"),h=e("./Object.assign"),v=e("./escapeTextContentForBrowser"),_=e("./invariant"),y=e("./isEventSupported"),g=e("./keyOf"),b=e("./warning"),j=l.deleteListener,w=l.listenTo,E=l.registrationNameModules,D={string:!0,number:!0},P=g({style:null}),R=1,C=null,U={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},O=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,N={},x={}.hasOwnProperty;i.displayName="ReactDOMComponent",i.Mixin={construct:function(e){this._currentElement=e},mountComponent:function(e,t,n){this._rootNodeID=e,r(this._currentElement.props);var o=U[this._tag]?"":"</"+this._tag+">";return this._createOpenTagMarkupAndPutListeners(t)+this._createContentMarkup(t,n)+o},_createOpenTagMarkupAndPutListeners:function(e){var t=this._currentElement.props,n="<"+this._tag;for(var r in t)if(t.hasOwnProperty(r)){var s=t[r];if(null!=s)if(E.hasOwnProperty(r))o(this._rootNodeID,r,s,e);else{r===P&&(s&&(s=this._previousStyleCopy=h({},t.style)),s=a.createMarkupForStyles(s));var i=c.createMarkupForProperty(r,s);i&&(n+=" "+i)}}if(e.renderToStaticMarkup)return n+">";var u=c.createMarkupForID(this._rootNodeID);return n+" "+u+">"},_createContentMarkup:function(e,t){var n="";("listing"===this._tag||"pre"===this._tag||"textarea"===this._tag)&&(n="\n");var r=this._currentElement.props,o=r.dangerouslySetInnerHTML;if(null!=o){if(null!=o.__html)return n+o.__html}else{var s=D[typeof r.children]?r.children:null,i=null!=s?null:r.children;if(null!=s)return n+v(s);if(null!=i){var a=this.mountChildren(i,e,t);return n+a.join("")}}return n},receiveComponent:function(e,t,n){var r=this._currentElement;this._currentElement=e,this.updateComponent(t,r,e,n)},updateComponent:function(e,t,n,o){r(this._currentElement.props),this._updateDOMProperties(t.props,e),this._updateDOMChildren(t.props,e,o)},_updateDOMProperties:function(e,t){var n,r,s,i=this._currentElement.props;for(n in e)if(!i.hasOwnProperty(n)&&e.hasOwnProperty(n))if(n===P){var a=this._previousStyleCopy;for(r in a)a.hasOwnProperty(r)&&(s=s||{},s[r]="");this._previousStyleCopy=null}else E.hasOwnProperty(n)?j(this._rootNodeID,n):(u.isStandardName[n]||u.isCustomAttribute(n))&&C.deletePropertyByID(this._rootNodeID,n);for(n in i){var c=i[n],l=n===P?this._previousStyleCopy:e[n];if(i.hasOwnProperty(n)&&c!==l)if(n===P)if(c?c=this._previousStyleCopy=h({},c):this._previousStyleCopy=null,l){for(r in l)!l.hasOwnProperty(r)||c&&c.hasOwnProperty(r)||(s=s||{},s[r]="");for(r in c)c.hasOwnProperty(r)&&l[r]!==c[r]&&(s=s||{},s[r]=c[r])}else s=c;else E.hasOwnProperty(n)?o(this._rootNodeID,n,c,t):(u.isStandardName[n]||u.isCustomAttribute(n))&&C.updatePropertyByID(this._rootNodeID,n,c)}s&&C.updateStylesByID(this._rootNodeID,s)},_updateDOMChildren:function(e,t,n){var r=this._currentElement.props,o=D[typeof e.children]?e.children:null,s=D[typeof r.children]?r.children:null,i=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,a=r.dangerouslySetInnerHTML&&r.dangerouslySetInnerHTML.__html,u=null!=o?null:e.children,c=null!=s?null:r.children,l=null!=o||null!=i,p=null!=s||null!=a;null!=u&&null==c?this.updateChildren(null,t,n):l&&!p&&this.updateTextContent(""),null!=s?o!==s&&this.updateTextContent(""+s):null!=a?i!==a&&C.updateInnerHTMLByID(this._rootNodeID,a):null!=c&&this.updateChildren(c,t,n)},unmountComponent:function(){this.unmountChildren(),l.deleteAllListeners(this._rootNodeID),p.unmountIDFromEnvironment(this._rootNodeID),this._rootNodeID=null}},f.measureMethods(i,"ReactDOMComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent"}),h(i.prototype,i.Mixin,m.Mixin),i.injection={injectIDOperations:function(e){i.BackendIDOperations=C=e}},t.exports=i}).call(this,e("_process"))},{"./CSSPropertyOperations":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/CSSPropertyOperations.js","./DOMProperty":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMProperty.js","./DOMPropertyOperations":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMPropertyOperations.js","./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./ReactBrowserEventEmitter":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactComponentBrowserEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactMount":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMount.js","./ReactMultiChild":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMultiChild.js","./ReactPerf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPerf.js","./escapeTextContentForBrowser":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/escapeTextContentForBrowser.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./isEventSupported":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/isEventSupported.js","./keyOf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyOf.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMForm.js":[function(e,t,n){"use strict";var r=e("./EventConstants"),o=e("./LocalEventTrapMixin"),s=e("./ReactBrowserComponentMixin"),i=e("./ReactClass"),a=e("./ReactElement"),u=a.createFactory("form"),c=i.createClass({displayName:"ReactDOMForm",tagName:"FORM",mixins:[s,o],render:function(){return u(this.props)},componentDidMount:function(){this.trapBubbledEvent(r.topLevelTypes.topReset,"reset"),this.trapBubbledEvent(r.topLevelTypes.topSubmit,"submit")}});t.exports=c},{"./EventConstants":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventConstants.js","./LocalEventTrapMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/LocalEventTrapMixin.js","./ReactBrowserComponentMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMIDOperations.js":[function(e,t,n){(function(n){"use strict";var r=e("./CSSPropertyOperations"),o=e("./DOMChildrenOperations"),s=e("./DOMPropertyOperations"),i=e("./ReactMount"),a=e("./ReactPerf"),u=e("./invariant"),c=e("./setInnerHTML"),l={dangerouslySetInnerHTML:"`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",style:"`style` must be set using `updateStylesByID()`."},p={updatePropertyByID:function(e,t,r){var o=i.getNode(e);"production"!==n.env.NODE_ENV?u(!l.hasOwnProperty(t),"updatePropertyByID(...): %s",l[t]):u(!l.hasOwnProperty(t)),null!=r?s.setValueForProperty(o,t,r):s.deleteValueForProperty(o,t)},deletePropertyByID:function(e,t,r){var o=i.getNode(e);"production"!==n.env.NODE_ENV?u(!l.hasOwnProperty(t),"updatePropertyByID(...): %s",l[t]):u(!l.hasOwnProperty(t)),s.deleteValueForProperty(o,t,r)},updateStylesByID:function(e,t){var n=i.getNode(e);r.setValueForStyles(n,t)},updateInnerHTMLByID:function(e,t){var n=i.getNode(e);c(n,t)},updateTextContentByID:function(e,t){var n=i.getNode(e);o.updateTextContent(n,t)},dangerouslyReplaceNodeWithMarkupByID:function(e,t){var n=i.getNode(e);o.dangerouslyReplaceNodeWithMarkup(n,t)},dangerouslyProcessChildrenUpdates:function(e,t){for(var n=0;n<e.length;n++)e[n].parentNode=i.getNode(e[n].parentID);o.processUpdates(e,t)}};a.measureMethods(p,"ReactDOMIDOperations",{updatePropertyByID:"updatePropertyByID",deletePropertyByID:"deletePropertyByID",updateStylesByID:"updateStylesByID",updateInnerHTMLByID:"updateInnerHTMLByID",updateTextContentByID:"updateTextContentByID",dangerouslyReplaceNodeWithMarkupByID:"dangerouslyReplaceNodeWithMarkupByID",dangerouslyProcessChildrenUpdates:"dangerouslyProcessChildrenUpdates"}),t.exports=p}).call(this,e("_process"))},{"./CSSPropertyOperations":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/CSSPropertyOperations.js","./DOMChildrenOperations":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMChildrenOperations.js","./DOMPropertyOperations":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMPropertyOperations.js","./ReactMount":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPerf.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./setInnerHTML":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/setInnerHTML.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMIframe.js":[function(e,t,n){"use strict";var r=e("./EventConstants"),o=e("./LocalEventTrapMixin"),s=e("./ReactBrowserComponentMixin"),i=e("./ReactClass"),a=e("./ReactElement"),u=a.createFactory("iframe"),c=i.createClass({displayName:"ReactDOMIframe",tagName:"IFRAME",mixins:[s,o],render:function(){return u(this.props)},componentDidMount:function(){this.trapBubbledEvent(r.topLevelTypes.topLoad,"load")}});t.exports=c},{"./EventConstants":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventConstants.js","./LocalEventTrapMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/LocalEventTrapMixin.js","./ReactBrowserComponentMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMImg.js":[function(e,t,n){"use strict";var r=e("./EventConstants"),o=e("./LocalEventTrapMixin"),s=e("./ReactBrowserComponentMixin"),i=e("./ReactClass"),a=e("./ReactElement"),u=a.createFactory("img"),c=i.createClass({displayName:"ReactDOMImg",tagName:"IMG",mixins:[s,o],render:function(){return u(this.props)},componentDidMount:function(){this.trapBubbledEvent(r.topLevelTypes.topLoad,"load"),this.trapBubbledEvent(r.topLevelTypes.topError,"error")}});t.exports=c},{"./EventConstants":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventConstants.js","./LocalEventTrapMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/LocalEventTrapMixin.js","./ReactBrowserComponentMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMInput.js":[function(e,t,n){(function(n){"use strict";function r(){this.isMounted()&&this.forceUpdate()}var o=e("./AutoFocusMixin"),s=e("./DOMPropertyOperations"),i=e("./LinkedValueUtils"),a=e("./ReactBrowserComponentMixin"),u=e("./ReactClass"),c=e("./ReactElement"),l=e("./ReactMount"),p=e("./ReactUpdates"),d=e("./Object.assign"),m=e("./invariant"),f=c.createFactory("input"),h={},v=u.createClass({displayName:"ReactDOMInput",tagName:"INPUT",mixins:[o,i.Mixin,a],getInitialState:function(){var e=this.props.defaultValue;return{initialChecked:this.props.defaultChecked||!1,initialValue:null!=e?e:null}},render:function(){var e=d({},this.props);e.defaultChecked=null,e.defaultValue=null;var t=i.getValue(this);e.value=null!=t?t:this.state.initialValue;var n=i.getChecked(this);return e.checked=null!=n?n:this.state.initialChecked,e.onChange=this._handleChange,f(e,this.props.children)},componentDidMount:function(){var e=l.getID(this.getDOMNode());h[e]=this},componentWillUnmount:function(){var e=this.getDOMNode(),t=l.getID(e);delete h[t]},componentDidUpdate:function(e,t,n){var r=this.getDOMNode();null!=this.props.checked&&s.setValueForProperty(r,"checked",this.props.checked||!1);var o=i.getValue(this);null!=o&&s.setValueForProperty(r,"value",""+o)},_handleChange:function(e){var t,o=i.getOnChange(this);o&&(t=o.call(this,e)),p.asap(r,this);var s=this.props.name;if("radio"===this.props.type&&null!=s){for(var a=this.getDOMNode(),u=a;u.parentNode;)u=u.parentNode;for(var c=u.querySelectorAll("input[name="+JSON.stringify(""+s)+'][type="radio"]'),d=0,f=c.length;f>d;d++){var v=c[d];if(v!==a&&v.form===a.form){var _=l.getID(v);"production"!==n.env.NODE_ENV?m(_,"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."):m(_);var y=h[_];"production"!==n.env.NODE_ENV?m(y,"ReactDOMInput: Unknown radio button ID %s.",_):m(y),p.asap(r,y)}}}return t}});t.exports=v}).call(this,e("_process"))},{"./AutoFocusMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/AutoFocusMixin.js","./DOMPropertyOperations":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMPropertyOperations.js","./LinkedValueUtils":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactMount":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdates.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMOption.js":[function(e,t,n){(function(n){"use strict";var r=e("./ReactBrowserComponentMixin"),o=e("./ReactClass"),s=e("./ReactElement"),i=e("./warning"),a=s.createFactory("option"),u=o.createClass({displayName:"ReactDOMOption",tagName:"OPTION",mixins:[r],componentWillMount:function(){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?i(null==this.props.selected,"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."):null)},render:function(){return a(this.props,this.props.children)}});t.exports=u;

}).call(this,e("_process"))},{"./ReactBrowserComponentMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMSelect.js":[function(e,t,n){"use strict";function r(){if(this._pendingUpdate){this._pendingUpdate=!1;var e=a.getValue(this);null!=e&&this.isMounted()&&s(this,e)}}function o(e,t,n){if(null==e[t])return null;if(e.multiple){if(!Array.isArray(e[t]))return new Error("The `"+t+"` prop supplied to <select> must be an array if `multiple` is true.")}else if(Array.isArray(e[t]))return new Error("The `"+t+"` prop supplied to <select> must be a scalar value if `multiple` is false.")}function s(e,t){var n,r,o,s=e.getDOMNode().options;if(e.props.multiple){for(n={},r=0,o=t.length;o>r;r++)n[""+t[r]]=!0;for(r=0,o=s.length;o>r;r++){var i=n.hasOwnProperty(s[r].value);s[r].selected!==i&&(s[r].selected=i)}}else{for(n=""+t,r=0,o=s.length;o>r;r++)if(s[r].value===n)return void(s[r].selected=!0);s.length&&(s[0].selected=!0)}}var i=e("./AutoFocusMixin"),a=e("./LinkedValueUtils"),u=e("./ReactBrowserComponentMixin"),c=e("./ReactClass"),l=e("./ReactElement"),p=e("./ReactUpdates"),d=e("./Object.assign"),m=l.createFactory("select"),f=c.createClass({displayName:"ReactDOMSelect",tagName:"SELECT",mixins:[i,a.Mixin,u],propTypes:{defaultValue:o,value:o},render:function(){var e=d({},this.props);return e.onChange=this._handleChange,e.value=null,m(e,this.props.children)},componentWillMount:function(){this._pendingUpdate=!1},componentDidMount:function(){var e=a.getValue(this);null!=e?s(this,e):null!=this.props.defaultValue&&s(this,this.props.defaultValue)},componentDidUpdate:function(e){var t=a.getValue(this);null!=t?(this._pendingUpdate=!1,s(this,t)):!e.multiple!=!this.props.multiple&&(null!=this.props.defaultValue?s(this,this.props.defaultValue):s(this,this.props.multiple?[]:""))},_handleChange:function(e){var t,n=a.getOnChange(this);return n&&(t=n.call(this,e)),this._pendingUpdate=!0,p.asap(r,this),t}});t.exports=f},{"./AutoFocusMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/AutoFocusMixin.js","./LinkedValueUtils":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactUpdates":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdates.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMSelection.js":[function(e,t,n){"use strict";function r(e,t,n,r){return e===n&&t===r}function o(e){var t=document.selection,n=t.createRange(),r=n.text.length,o=n.duplicate();o.moveToElementText(e),o.setEndPoint("EndToStart",n);var s=o.text.length,i=s+r;return{start:s,end:i}}function s(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var n=t.anchorNode,o=t.anchorOffset,s=t.focusNode,i=t.focusOffset,a=t.getRangeAt(0),u=r(t.anchorNode,t.anchorOffset,t.focusNode,t.focusOffset),c=u?0:a.toString().length,l=a.cloneRange();l.selectNodeContents(e),l.setEnd(a.startContainer,a.startOffset);var p=r(l.startContainer,l.startOffset,l.endContainer,l.endOffset),d=p?0:l.toString().length,m=d+c,f=document.createRange();f.setStart(n,o),f.setEnd(s,i);var h=f.collapsed;return{start:h?m:d,end:h?d:m}}function i(e,t){var n,r,o=document.selection.createRange().duplicate();"undefined"==typeof t.end?(n=t.start,r=n):t.start>t.end?(n=t.end,r=t.start):(n=t.start,r=t.end),o.moveToElementText(e),o.moveStart("character",n),o.setEndPoint("EndToStart",o),o.moveEnd("character",r-n),o.select()}function a(e,t){if(window.getSelection){var n=window.getSelection(),r=e[l()].length,o=Math.min(t.start,r),s="undefined"==typeof t.end?o:Math.min(t.end,r);if(!n.extend&&o>s){var i=s;s=o,o=i}var a=c(e,o),u=c(e,s);if(a&&u){var p=document.createRange();p.setStart(a.node,a.offset),n.removeAllRanges(),o>s?(n.addRange(p),n.extend(u.node,u.offset)):(p.setEnd(u.node,u.offset),n.addRange(p))}}}var u=e("./ExecutionEnvironment"),c=e("./getNodeForCharacterOffset"),l=e("./getTextContentAccessor"),p=u.canUseDOM&&"selection"in document&&!("getSelection"in window),d={getOffsets:p?o:s,setOffsets:p?i:a};t.exports=d},{"./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","./getNodeForCharacterOffset":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getNodeForCharacterOffset.js","./getTextContentAccessor":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getTextContentAccessor.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMTextComponent.js":[function(e,t,n){"use strict";var r=e("./DOMPropertyOperations"),o=e("./ReactComponentBrowserEnvironment"),s=e("./ReactDOMComponent"),i=e("./Object.assign"),a=e("./escapeTextContentForBrowser"),u=function(e){};i(u.prototype,{construct:function(e){this._currentElement=e,this._stringText=""+e,this._rootNodeID=null,this._mountIndex=0},mountComponent:function(e,t,n){this._rootNodeID=e;var o=a(this._stringText);return t.renderToStaticMarkup?o:"<span "+r.createMarkupForID(e)+">"+o+"</span>"},receiveComponent:function(e,t){if(e!==this._currentElement){this._currentElement=e;var n=""+e;n!==this._stringText&&(this._stringText=n,s.BackendIDOperations.updateTextContentByID(this._rootNodeID,n))}},unmountComponent:function(){o.unmountIDFromEnvironment(this._rootNodeID)}}),t.exports=u},{"./DOMPropertyOperations":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMPropertyOperations.js","./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./ReactComponentBrowserEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactDOMComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMComponent.js","./escapeTextContentForBrowser":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/escapeTextContentForBrowser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMTextarea.js":[function(e,t,n){(function(n){"use strict";function r(){this.isMounted()&&this.forceUpdate()}var o=e("./AutoFocusMixin"),s=e("./DOMPropertyOperations"),i=e("./LinkedValueUtils"),a=e("./ReactBrowserComponentMixin"),u=e("./ReactClass"),c=e("./ReactElement"),l=e("./ReactUpdates"),p=e("./Object.assign"),d=e("./invariant"),m=e("./warning"),f=c.createFactory("textarea"),h=u.createClass({displayName:"ReactDOMTextarea",tagName:"TEXTAREA",mixins:[o,i.Mixin,a],getInitialState:function(){var e=this.props.defaultValue,t=this.props.children;null!=t&&("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?m(!1,"Use the `defaultValue` or `value` props instead of setting children on <textarea>."):null),"production"!==n.env.NODE_ENV?d(null==e,"If you supply `defaultValue` on a <textarea>, do not pass children."):d(null==e),Array.isArray(t)&&("production"!==n.env.NODE_ENV?d(t.length<=1,"<textarea> can only have at most one child."):d(t.length<=1),t=t[0]),e=""+t),null==e&&(e="");var r=i.getValue(this);return{initialValue:""+(null!=r?r:e)}},render:function(){var e=p({},this.props);return"production"!==n.env.NODE_ENV?d(null==e.dangerouslySetInnerHTML,"`dangerouslySetInnerHTML` does not make sense on <textarea>."):d(null==e.dangerouslySetInnerHTML),e.defaultValue=null,e.value=null,e.onChange=this._handleChange,f(e,this.state.initialValue)},componentDidUpdate:function(e,t,n){var r=i.getValue(this);if(null!=r){var o=this.getDOMNode();s.setValueForProperty(o,"value",""+r)}},_handleChange:function(e){var t,n=i.getOnChange(this);return n&&(t=n.call(this,e)),l.asap(r,this),t}});t.exports=h}).call(this,e("_process"))},{"./AutoFocusMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/AutoFocusMixin.js","./DOMPropertyOperations":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMPropertyOperations.js","./LinkedValueUtils":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactUpdates":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdates.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDefaultBatchingStrategy.js":[function(e,t,n){"use strict";function r(){this.reinitializeTransaction()}var o=e("./ReactUpdates"),s=e("./Transaction"),i=e("./Object.assign"),a=e("./emptyFunction"),u={initialize:a,close:function(){d.isBatchingUpdates=!1}},c={initialize:a,close:o.flushBatchedUpdates.bind(o)},l=[c,u];i(r.prototype,s.Mixin,{getTransactionWrappers:function(){return l}});var p=new r,d={isBatchingUpdates:!1,batchedUpdates:function(e,t,n,r,o){var s=d.isBatchingUpdates;d.isBatchingUpdates=!0,s?e(t,n,r,o):p.perform(e,null,t,n,r,o)}};t.exports=d},{"./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./ReactUpdates":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdates.js","./Transaction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Transaction.js","./emptyFunction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyFunction.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDefaultInjection.js":[function(e,t,n){(function(n){"use strict";function r(e){return f.createClass({tagName:e.toUpperCase(),render:function(){return new U(e,null,null,null,null,this.props)}})}function o(){if(N.EventEmitter.injectReactEventListener(O),N.EventPluginHub.injectEventPluginOrder(u),N.EventPluginHub.injectInstanceHandle(x),N.EventPluginHub.injectMount(T),N.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:I,EnterLeaveEventPlugin:c,ChangeEventPlugin:i,MobileSafariClickEventPlugin:d,SelectEventPlugin:k,BeforeInputEventPlugin:s}),N.NativeComponent.injectGenericComponentClass(_),N.NativeComponent.injectTextComponentClass(C),N.NativeComponent.injectAutoWrapper(r),N.Class.injectMixin(m),N.NativeComponent.injectComponentClasses({button:y,form:g,iframe:w,img:b,input:E,option:D,select:P,textarea:R,html:L("html"),head:L("head"),body:L("body")}),N.DOMProperty.injectDOMPropertyConfig(p),N.DOMProperty.injectDOMPropertyConfig(A),N.EmptyComponent.injectEmptyComponent("noscript"),N.Updates.injectReconcileTransaction(M),N.Updates.injectBatchingStrategy(v),N.RootIndex.injectCreateReactRootIndex(l.canUseDOM?a.createReactRootIndex:S.createReactRootIndex),N.Component.injectEnvironment(h),N.DOMComponent.injectIDOperations(j),"production"!==n.env.NODE_ENV){var t=l.canUseDOM&&window.location.href||"";if(/[?&]react_perf\b/.test(t)){var o=e("./ReactDefaultPerf");o.start()}}}var s=e("./BeforeInputEventPlugin"),i=e("./ChangeEventPlugin"),a=e("./ClientReactRootIndex"),u=e("./DefaultEventPluginOrder"),c=e("./EnterLeaveEventPlugin"),l=e("./ExecutionEnvironment"),p=e("./HTMLDOMPropertyConfig"),d=e("./MobileSafariClickEventPlugin"),m=e("./ReactBrowserComponentMixin"),f=e("./ReactClass"),h=e("./ReactComponentBrowserEnvironment"),v=e("./ReactDefaultBatchingStrategy"),_=e("./ReactDOMComponent"),y=e("./ReactDOMButton"),g=e("./ReactDOMForm"),b=e("./ReactDOMImg"),j=e("./ReactDOMIDOperations"),w=e("./ReactDOMIframe"),E=e("./ReactDOMInput"),D=e("./ReactDOMOption"),P=e("./ReactDOMSelect"),R=e("./ReactDOMTextarea"),C=e("./ReactDOMTextComponent"),U=e("./ReactElement"),O=e("./ReactEventListener"),N=e("./ReactInjection"),x=e("./ReactInstanceHandles"),T=e("./ReactMount"),M=e("./ReactReconcileTransaction"),k=e("./SelectEventPlugin"),S=e("./ServerReactRootIndex"),I=e("./SimpleEventPlugin"),A=e("./SVGDOMPropertyConfig"),L=e("./createFullPageComponent");t.exports={inject:o}}).call(this,e("_process"))},{"./BeforeInputEventPlugin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/BeforeInputEventPlugin.js","./ChangeEventPlugin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ChangeEventPlugin.js","./ClientReactRootIndex":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ClientReactRootIndex.js","./DefaultEventPluginOrder":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DefaultEventPluginOrder.js","./EnterLeaveEventPlugin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EnterLeaveEventPlugin.js","./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","./HTMLDOMPropertyConfig":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/HTMLDOMPropertyConfig.js","./MobileSafariClickEventPlugin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/MobileSafariClickEventPlugin.js","./ReactBrowserComponentMixin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactClass.js","./ReactComponentBrowserEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactDOMButton":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMButton.js","./ReactDOMComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMComponent.js","./ReactDOMForm":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMForm.js","./ReactDOMIDOperations":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMIDOperations.js","./ReactDOMIframe":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMIframe.js","./ReactDOMImg":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMImg.js","./ReactDOMInput":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMInput.js","./ReactDOMOption":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMOption.js","./ReactDOMSelect":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMSelect.js","./ReactDOMTextComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMTextComponent.js","./ReactDOMTextarea":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMTextarea.js","./ReactDefaultBatchingStrategy":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDefaultBatchingStrategy.js","./ReactDefaultPerf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDefaultPerf.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactEventListener":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactEventListener.js","./ReactInjection":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInjection.js","./ReactInstanceHandles":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMount.js","./ReactReconcileTransaction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactReconcileTransaction.js","./SVGDOMPropertyConfig":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SVGDOMPropertyConfig.js","./SelectEventPlugin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SelectEventPlugin.js","./ServerReactRootIndex":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ServerReactRootIndex.js","./SimpleEventPlugin":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SimpleEventPlugin.js","./createFullPageComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/createFullPageComponent.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDefaultPerf.js":[function(e,t,n){"use strict";function r(e){return Math.floor(100*e)/100}function o(e,t,n){e[t]=(e[t]||0)+n}var s=e("./DOMProperty"),i=e("./ReactDefaultPerfAnalysis"),a=e("./ReactMount"),u=e("./ReactPerf"),c=e("./performanceNow"),l={_allMeasurements:[],_mountStack:[0],_injected:!1,start:function(){l._injected||u.injection.injectMeasure(l.measure),l._allMeasurements.length=0,u.enableMeasure=!0},stop:function(){u.enableMeasure=!1},getLastMeasurements:function(){return l._allMeasurements},printExclusive:function(e){e=e||l._allMeasurements;var t=i.getExclusiveSummary(e);console.table(t.map(function(e){return{"Component class name":e.componentName,"Total inclusive time (ms)":r(e.inclusive),"Exclusive mount time (ms)":r(e.exclusive),"Exclusive render time (ms)":r(e.render),"Mount time per instance (ms)":r(e.exclusive/e.count),"Render time per instance (ms)":r(e.render/e.count),Instances:e.count}}))},printInclusive:function(e){e=e||l._allMeasurements;var t=i.getInclusiveSummary(e);console.table(t.map(function(e){return{"Owner > component":e.componentName,"Inclusive time (ms)":r(e.time),Instances:e.count}})),console.log("Total time:",i.getTotalTime(e).toFixed(2)+" ms")},getMeasurementsSummaryMap:function(e){var t=i.getInclusiveSummary(e,!0);return t.map(function(e){return{"Owner > component":e.componentName,"Wasted time (ms)":e.time,Instances:e.count}})},printWasted:function(e){e=e||l._allMeasurements,console.table(l.getMeasurementsSummaryMap(e)),console.log("Total time:",i.getTotalTime(e).toFixed(2)+" ms")},printDOM:function(e){e=e||l._allMeasurements;var t=i.getDOMSummary(e);console.table(t.map(function(e){var t={};return t[s.ID_ATTRIBUTE_NAME]=e.id,t.type=e.type,t.args=JSON.stringify(e.args),t})),console.log("Total time:",i.getTotalTime(e).toFixed(2)+" ms")},_recordWrite:function(e,t,n,r){var o=l._allMeasurements[l._allMeasurements.length-1].writes;o[e]=o[e]||[],o[e].push({type:t,time:n,args:r})},measure:function(e,t,n){return function(){for(var r=[],s=0,i=arguments.length;i>s;s++)r.push(arguments[s]);var u,p,d;if("_renderNewRootComponent"===t||"flushBatchedUpdates"===t)return l._allMeasurements.push({exclusive:{},inclusive:{},render:{},counts:{},writes:{},displayNames:{},totalTime:0}),d=c(),p=n.apply(this,r),l._allMeasurements[l._allMeasurements.length-1].totalTime=c()-d,p;if("_mountImageIntoNode"===t||"ReactDOMIDOperations"===e){if(d=c(),p=n.apply(this,r),u=c()-d,"_mountImageIntoNode"===t){var m=a.getID(r[1]);l._recordWrite(m,t,u,r[0])}else"dangerouslyProcessChildrenUpdates"===t?r[0].forEach(function(e){var t={};null!==e.fromIndex&&(t.fromIndex=e.fromIndex),null!==e.toIndex&&(t.toIndex=e.toIndex),null!==e.textContent&&(t.textContent=e.textContent),null!==e.markupIndex&&(t.markup=r[1][e.markupIndex]),l._recordWrite(e.parentID,e.type,u,t)}):l._recordWrite(r[0],t,u,Array.prototype.slice.call(r,1));return p}if("ReactCompositeComponent"!==e||"mountComponent"!==t&&"updateComponent"!==t&&"_renderValidatedComponent"!==t)return n.apply(this,r);if("string"==typeof this._currentElement.type)return n.apply(this,r);var f="mountComponent"===t?r[0]:this._rootNodeID,h="_renderValidatedComponent"===t,v="mountComponent"===t,_=l._mountStack,y=l._allMeasurements[l._allMeasurements.length-1];if(h?o(y.counts,f,1):v&&_.push(0),d=c(),p=n.apply(this,r),u=c()-d,h)o(y.render,f,u);else if(v){var g=_.pop();_[_.length-1]+=u,o(y.exclusive,f,u-g),o(y.inclusive,f,u)}else o(y.inclusive,f,u);return y.displayNames[f]={current:this.getName(),owner:this._currentElement._owner?this._currentElement._owner.getName():"<root>"},p}}};t.exports=l},{"./DOMProperty":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMProperty.js","./ReactDefaultPerfAnalysis":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDefaultPerfAnalysis.js","./ReactMount":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPerf.js","./performanceNow":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/performanceNow.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDefaultPerfAnalysis.js":[function(e,t,n){function r(e){for(var t=0,n=0;n<e.length;n++){var r=e[n];t+=r.totalTime}return t}function o(e){for(var t=[],n=0;n<e.length;n++){var r,o=e[n];for(r in o.writes)o.writes[r].forEach(function(e){t.push({id:r,type:l[e.type]||e.type,args:e.args})})}return t}function s(e){for(var t,n={},r=0;r<e.length;r++){var o=e[r],s=u({},o.exclusive,o.inclusive);for(var i in s)t=o.displayNames[i].current,n[t]=n[t]||{componentName:t,inclusive:0,exclusive:0,render:0,count:0},o.render[i]&&(n[t].render+=o.render[i]),o.exclusive[i]&&(n[t].exclusive+=o.exclusive[i]),o.inclusive[i]&&(n[t].inclusive+=o.inclusive[i]),o.counts[i]&&(n[t].count+=o.counts[i])}var a=[];for(t in n)n[t].exclusive>=c&&a.push(n[t]);return a.sort(function(e,t){return t.exclusive-e.exclusive}),a}function i(e,t){for(var n,r={},o=0;o<e.length;o++){var s,i=e[o],l=u({},i.exclusive,i.inclusive);t&&(s=a(i));for(var p in l)if(!t||s[p]){var d=i.displayNames[p];n=d.owner+" > "+d.current,r[n]=r[n]||{componentName:n,time:0,count:0},i.inclusive[p]&&(r[n].time+=i.inclusive[p]),i.counts[p]&&(r[n].count+=i.counts[p])}}var m=[];for(n in r)r[n].time>=c&&m.push(r[n]);return m.sort(function(e,t){return t.time-e.time}),m}function a(e){var t={},n=Object.keys(e.writes),r=u({},e.exclusive,e.inclusive);for(var o in r){for(var s=!1,i=0;i<n.length;i++)if(0===n[i].indexOf(o)){s=!0;break}!s&&e.counts[o]>0&&(t[o]=!0)}return t}var u=e("./Object.assign"),c=1.2,l={_mountImageIntoNode:"set innerHTML",INSERT_MARKUP:"set innerHTML",MOVE_EXISTING:"move",REMOVE_NODE:"remove",TEXT_CONTENT:"set textContent",updatePropertyByID:"update attribute",deletePropertyByID:"delete attribute",updateStylesByID:"update styles",updateInnerHTMLByID:"set innerHTML",dangerouslyReplaceNodeWithMarkupByID:"replace"},p={getExclusiveSummary:s,getInclusiveSummary:i,getDOMSummary:o,getTotalTime:r};t.exports=p},{"./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js":[function(e,t,n){(function(n){"use strict";function r(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:function(){return this._store?this._store[t]:null},set:function(e){"production"!==n.env.NODE_ENV?u(!1,"Don't set the %s property of the React element. Instead, specify the correct value when initially creating the element.",t):null,this._store[t]=e}})}function o(e){try{var t={props:!0};for(var n in t)r(e,n);l=!0}catch(o){}}var s=e("./ReactContext"),i=e("./ReactCurrentOwner"),a=e("./Object.assign"),u=e("./warning"),c={key:!0,ref:!0},l=!1,p=function(e,t,r,o,s,i){if(this.type=e,this.key=t,this.ref=r,this._owner=o,this._context=s,"production"!==n.env.NODE_ENV){this._store={props:i,originalProps:a({},i)};try{Object.defineProperty(this._store,"validated",{configurable:!1,enumerable:!1,writable:!0})}catch(u){}if(this._store.validated=!1,l)return void Object.freeze(this)}this.props=i};p.prototype={_isReactElement:!0},"production"!==n.env.NODE_ENV&&o(p.prototype),p.createElement=function(e,t,n){var r,o={},a=null,u=null;if(null!=t){u=void 0===t.ref?null:t.ref,a=void 0===t.key?null:""+t.key;for(r in t)t.hasOwnProperty(r)&&!c.hasOwnProperty(r)&&(o[r]=t[r])}var l=arguments.length-2;if(1===l)o.children=n;else if(l>1){for(var d=Array(l),m=0;l>m;m++)d[m]=arguments[m+2];o.children=d}if(e&&e.defaultProps){var f=e.defaultProps;for(r in f)"undefined"==typeof o[r]&&(o[r]=f[r])}return new p(e,a,u,i.current,s.current,o)},p.createFactory=function(e){var t=p.createElement.bind(null,e);return t.type=e,t},p.cloneAndReplaceProps=function(e,t){var r=new p(e.type,e.key,e.ref,e._owner,e._context,t);return"production"!==n.env.NODE_ENV&&(r._store.validated=e._store.validated),r},p.cloneElement=function(e,t,n){var r,o=a({},e.props),s=e.key,u=e.ref,l=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,l=i.current),void 0!==t.key&&(s=""+t.key);for(r in t)t.hasOwnProperty(r)&&!c.hasOwnProperty(r)&&(o[r]=t[r])}var d=arguments.length-2;if(1===d)o.children=n;else if(d>1){for(var m=Array(d),f=0;d>f;f++)m[f]=arguments[f+2];o.children=m}return new p(e.type,s,u,l,e._context,o)},p.isValidElement=function(e){var t=!(!e||!e._isReactElement);return t},t.exports=p}).call(this,e("_process"))},{"./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./ReactContext":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactContext.js","./ReactCurrentOwner":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactCurrentOwner.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElementValidator.js":[function(e,t,n){(function(n){"use strict";function r(){if(g.current){var e=g.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}function o(e){var t=e&&e.getPublicInstance();if(!t)return void 0;var n=t.constructor;return n?n.displayName||n.name||void 0:void 0}function s(){var e=g.current;return e&&o(e)||void 0}function i(e,t){e._store.validated||null!=e.key||(e._store.validated=!0,u('Each child in an array or iterator should have a unique "key" prop.',e,t))}function a(e,t,n){R.test(e)&&u("Child objects should have non-numeric keys so ordering is preserved.",t,n)}function u(e,t,r){var i=s(),a="string"==typeof r?r:r.displayName||r.name,u=i||a,c=D[e]||(D[e]={});if(!c.hasOwnProperty(u)){c[u]=!0;var l=i?" Check the render method of "+i+".":a?" Check the React.render call using <"+a+">.":"",p="";if(t&&t._owner&&t._owner!==g.current){var d=o(t._owner);p=" It was passed a child from "+d+"."}"production"!==n.env.NODE_ENV?E(!1,e+"%s%s See https://fb.me/react-warning-keys for more information.",l,p):null}}function c(e,t){if(Array.isArray(e))for(var n=0;n<e.length;n++){var r=e[n];h.isValidElement(r)&&i(r,t)}else if(h.isValidElement(e))e._store.validated=!0;else if(e){var o=j(e);if(o){if(o!==e.entries)for(var s,u=o.call(e);!(s=u.next()).done;)h.isValidElement(s.value)&&i(s.value,t)}else if("object"==typeof e){var c=v.extractIfFragment(e);for(var l in c)c.hasOwnProperty(l)&&a(l,c[l],t)}}}function l(e,t,o,s){for(var i in t)if(t.hasOwnProperty(i)){var a;try{"production"!==n.env.NODE_ENV?w("function"==typeof t[i],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",e||"React class",y[s],i):w("function"==typeof t[i]),a=t[i](o,i,e,s)}catch(u){a=u}if(a instanceof Error&&!(a.message in P)){P[a.message]=!0;var c=r(this);"production"!==n.env.NODE_ENV?E(!1,"Failed propType: %s%s",a.message,c):null}}}function p(e,t){var r=t.type,o="string"==typeof r?r:r.displayName,s=t._owner?t._owner.getPublicInstance().constructor.displayName:null,i=e+"|"+o+"|"+s;if(!C.hasOwnProperty(i)){C[i]=!0;var a="";o&&(a=" <"+o+" />");var u="";s&&(u=" The element was created by "+s+"."),"production"!==n.env.NODE_ENV?E(!1,"Don't set .props.%s of the React component%s. Instead, specify the correct value when initially creating the element or use React.cloneElement to make a new element with updated props.%s",e,a,u):null}}function d(e,t){return e!==e?t!==t:0===e&&0===t?1/e===1/t:e===t}function m(e){if(e._store){var t=e._store.originalProps,n=e.props;for(var r in n)n.hasOwnProperty(r)&&(t.hasOwnProperty(r)&&d(t[r],n[r])||(p(r,e),t[r]=n[r]))}}function f(e){if(null!=e.type){var t=b.getComponentClassForElement(e),r=t.displayName||t.name;t.propTypes&&l(r,t.propTypes,e.props,_.prop),"function"==typeof t.getDefaultProps&&("production"!==n.env.NODE_ENV?E(t.getDefaultProps.isReactClassApproved,"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead."):null)}}var h=e("./ReactElement"),v=e("./ReactFragment"),_=e("./ReactPropTypeLocations"),y=e("./ReactPropTypeLocationNames"),g=e("./ReactCurrentOwner"),b=e("./ReactNativeComponent"),j=e("./getIteratorFn"),w=e("./invariant"),E=e("./warning"),D={},P={},R=/^\d+$/,C={},U={checkAndWarnForMutatedProps:m,createElement:function(e,t,r){"production"!==n.env.NODE_ENV?E(null!=e,"React.createElement: type should not be null or undefined. It should be a string (for DOM elements) or a ReactClass (for composite components)."):null;var o=h.createElement.apply(this,arguments);if(null==o)return o;for(var s=2;s<arguments.length;s++)c(arguments[s],e);return f(o),o},createFactory:function(e){var t=U.createElement.bind(null,e);if(t.type=e,"production"!==n.env.NODE_ENV)try{Object.defineProperty(t,"type",{enumerable:!1,get:function(){return"production"!==n.env.NODE_ENV?E(!1,"Factory.type is deprecated. Access the class directly before passing it to createFactory."):null,Object.defineProperty(this,"type",{value:e}),e}})}catch(r){}return t},cloneElement:function(e,t,n){for(var r=h.cloneElement.apply(this,arguments),o=2;o<arguments.length;o++)c(arguments[o],r.type);return f(r),r}};t.exports=U}).call(this,e("_process"))},{"./ReactCurrentOwner":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactFragment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactFragment.js","./ReactNativeComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactNativeComponent.js","./ReactPropTypeLocationNames":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPropTypeLocations.js","./getIteratorFn":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getIteratorFn.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactEmptyComponent.js":[function(e,t,n){(function(n){"use strict";function r(e){l[e]=!0}function o(e){delete l[e]}function s(e){return!!l[e]}var i,a=e("./ReactElement"),u=e("./ReactInstanceMap"),c=e("./invariant"),l={},p={injectEmptyComponent:function(e){
i=a.createFactory(e)}},d=function(){};d.prototype.componentDidMount=function(){var e=u.get(this);e&&r(e._rootNodeID)},d.prototype.componentWillUnmount=function(){var e=u.get(this);e&&o(e._rootNodeID)},d.prototype.render=function(){return"production"!==n.env.NODE_ENV?c(i,"Trying to return null from a render, but no null placeholder component was injected."):c(i),i()};var m=a.createElement(d),f={emptyElement:m,injection:p,isNullComponentID:s};t.exports=f}).call(this,e("_process"))},{"./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactInstanceMap":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceMap.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactErrorUtils.js":[function(e,t,n){"use strict";var r={guard:function(e,t){return e}};t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactEventEmitterMixin.js":[function(e,t,n){"use strict";function r(e){o.enqueueEvents(e),o.processEventQueue()}var o=e("./EventPluginHub"),s={handleTopLevel:function(e,t,n,s){var i=o.extractEvents(e,t,n,s);r(i)}};t.exports=s},{"./EventPluginHub":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPluginHub.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactEventListener.js":[function(e,t,n){"use strict";function r(e){var t=p.getID(e),n=l.getReactRootIDFromNodeID(t),r=p.findReactContainerForID(n),o=p.getFirstReactDOM(r);return o}function o(e,t){this.topLevelType=e,this.nativeEvent=t,this.ancestors=[]}function s(e){for(var t=p.getFirstReactDOM(f(e.nativeEvent))||window,n=t;n;)e.ancestors.push(n),n=r(n);for(var o=0,s=e.ancestors.length;s>o;o++){t=e.ancestors[o];var i=p.getID(t)||"";v._handleTopLevel(e.topLevelType,t,i,e.nativeEvent)}}function i(e){var t=h(window);e(t)}var a=e("./EventListener"),u=e("./ExecutionEnvironment"),c=e("./PooledClass"),l=e("./ReactInstanceHandles"),p=e("./ReactMount"),d=e("./ReactUpdates"),m=e("./Object.assign"),f=e("./getEventTarget"),h=e("./getUnboundedScrollPosition");m(o.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),c.addPoolingTo(o,c.twoArgumentPooler);var v={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:u.canUseDOM?window:null,setHandleTopLevel:function(e){v._handleTopLevel=e},setEnabled:function(e){v._enabled=!!e},isEnabled:function(){return v._enabled},trapBubbledEvent:function(e,t,n){var r=n;return r?a.listen(r,t,v.dispatchEvent.bind(null,e)):null},trapCapturedEvent:function(e,t,n){var r=n;return r?a.capture(r,t,v.dispatchEvent.bind(null,e)):null},monitorScrollValue:function(e){var t=i.bind(null,e);a.listen(window,"scroll",t)},dispatchEvent:function(e,t){if(v._enabled){var n=o.getPooled(e,t);try{d.batchedUpdates(s,n)}finally{o.release(n)}}}};t.exports=v},{"./EventListener":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventListener.js","./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/PooledClass.js","./ReactInstanceHandles":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdates.js","./getEventTarget":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventTarget.js","./getUnboundedScrollPosition":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getUnboundedScrollPosition.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactFragment.js":[function(e,t,n){(function(n){"use strict";var r=e("./ReactElement"),o=e("./warning");if("production"!==n.env.NODE_ENV){var s="_reactFragment",i="_reactDidWarn",a=!1;try{var u=function(){return 1};Object.defineProperty({},s,{enumerable:!1,value:!0}),Object.defineProperty({},"key",{enumerable:!0,get:u}),a=!0}catch(c){}var l=function(e,t){Object.defineProperty(e,t,{enumerable:!0,get:function(){return"production"!==n.env.NODE_ENV?o(this[i],"A ReactFragment is an opaque type. Accessing any of its properties is deprecated. Pass it to one of the React.Children helpers."):null,this[i]=!0,this[s][t]},set:function(e){"production"!==n.env.NODE_ENV?o(this[i],"A ReactFragment is an immutable opaque type. Mutating its properties is deprecated."):null,this[i]=!0,this[s][t]=e}})},p={},d=function(e){var t="";for(var n in e)t+=n+":"+typeof e[n]+",";var r=!!p[t];return p[t]=!0,r}}var m={create:function(e){if("production"!==n.env.NODE_ENV){if("object"!=typeof e||!e||Array.isArray(e))return"production"!==n.env.NODE_ENV?o(!1,"React.addons.createFragment only accepts a single object.",e):null,e;if(r.isValidElement(e))return"production"!==n.env.NODE_ENV?o(!1,"React.addons.createFragment does not accept a ReactElement without a wrapper object."):null,e;if(a){var t={};Object.defineProperty(t,s,{enumerable:!1,value:e}),Object.defineProperty(t,i,{writable:!0,enumerable:!1,value:!1});for(var u in e)l(t,u);return Object.preventExtensions(t),t}}return e},extract:function(e){return"production"!==n.env.NODE_ENV&&a?e[s]?e[s]:("production"!==n.env.NODE_ENV?o(d(e),"Any use of a keyed object should be wrapped in React.addons.createFragment(object) before being passed as a child."):null,e):e},extractIfFragment:function(e){if("production"!==n.env.NODE_ENV&&a){if(e[s])return e[s];for(var t in e)if(e.hasOwnProperty(t)&&r.isValidElement(e[t]))return m.extract(e)}return e}};t.exports=m}).call(this,e("_process"))},{"./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInjection.js":[function(e,t,n){"use strict";var r=e("./DOMProperty"),o=e("./EventPluginHub"),s=e("./ReactComponentEnvironment"),i=e("./ReactClass"),a=e("./ReactEmptyComponent"),u=e("./ReactBrowserEventEmitter"),c=e("./ReactNativeComponent"),l=e("./ReactDOMComponent"),p=e("./ReactPerf"),d=e("./ReactRootIndex"),m=e("./ReactUpdates"),f={Component:s.injection,Class:i.injection,DOMComponent:l.injection,DOMProperty:r.injection,EmptyComponent:a.injection,EventPluginHub:o.injection,EventEmitter:u.injection,NativeComponent:c.injection,Perf:p.injection,RootIndex:d.injection,Updates:m.injection};t.exports=f},{"./DOMProperty":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMProperty.js","./EventPluginHub":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPluginHub.js","./ReactBrowserEventEmitter":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactClass.js","./ReactComponentEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactComponentEnvironment.js","./ReactDOMComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMComponent.js","./ReactEmptyComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactEmptyComponent.js","./ReactNativeComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactNativeComponent.js","./ReactPerf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPerf.js","./ReactRootIndex":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactRootIndex.js","./ReactUpdates":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdates.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInputSelection.js":[function(e,t,n){"use strict";function r(e){return s(document.documentElement,e)}var o=e("./ReactDOMSelection"),s=e("./containsNode"),i=e("./focusNode"),a=e("./getActiveElement"),u={hasSelectionCapabilities:function(e){return e&&("INPUT"===e.nodeName&&"text"===e.type||"TEXTAREA"===e.nodeName||"true"===e.contentEditable)},getSelectionInformation:function(){var e=a();return{focusedElem:e,selectionRange:u.hasSelectionCapabilities(e)?u.getSelection(e):null}},restoreSelection:function(e){var t=a(),n=e.focusedElem,o=e.selectionRange;t!==n&&r(n)&&(u.hasSelectionCapabilities(n)&&u.setSelection(n,o),i(n))},getSelection:function(e){var t;if("selectionStart"in e)t={start:e.selectionStart,end:e.selectionEnd};else if(document.selection&&"INPUT"===e.nodeName){var n=document.selection.createRange();n.parentElement()===e&&(t={start:-n.moveStart("character",-e.value.length),end:-n.moveEnd("character",-e.value.length)})}else t=o.getOffsets(e);return t||{start:0,end:0}},setSelection:function(e,t){var n=t.start,r=t.end;if("undefined"==typeof r&&(r=n),"selectionStart"in e)e.selectionStart=n,e.selectionEnd=Math.min(r,e.value.length);else if(document.selection&&"INPUT"===e.nodeName){var s=e.createTextRange();s.collapse(!0),s.moveStart("character",n),s.moveEnd("character",r-n),s.select()}else o.setOffsets(e,t)}};t.exports=u},{"./ReactDOMSelection":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactDOMSelection.js","./containsNode":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/containsNode.js","./focusNode":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/focusNode.js","./getActiveElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getActiveElement.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceHandles.js":[function(e,t,n){(function(n){"use strict";function r(e){return m+e.toString(36)}function o(e,t){return e.charAt(t)===m||t===e.length}function s(e){return""===e||e.charAt(0)===m&&e.charAt(e.length-1)!==m}function i(e,t){return 0===t.indexOf(e)&&o(t,e.length)}function a(e){return e?e.substr(0,e.lastIndexOf(m)):""}function u(e,t){if("production"!==n.env.NODE_ENV?d(s(e)&&s(t),"getNextDescendantID(%s, %s): Received an invalid React DOM ID.",e,t):d(s(e)&&s(t)),"production"!==n.env.NODE_ENV?d(i(e,t),"getNextDescendantID(...): React has made an invalid assumption about the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.",e,t):d(i(e,t)),e===t)return e;var r,a=e.length+f;for(r=a;r<t.length&&!o(t,r);r++);return t.substr(0,r)}function c(e,t){var r=Math.min(e.length,t.length);if(0===r)return"";for(var i=0,a=0;r>=a;a++)if(o(e,a)&&o(t,a))i=a;else if(e.charAt(a)!==t.charAt(a))break;var u=e.substr(0,i);return"production"!==n.env.NODE_ENV?d(s(u),"getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s",e,t,u):d(s(u)),u}function l(e,t,r,o,s,c){e=e||"",t=t||"","production"!==n.env.NODE_ENV?d(e!==t,"traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.",e):d(e!==t);var l=i(t,e);"production"!==n.env.NODE_ENV?d(l||i(e,t),"traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do not have a parent path.",e,t):d(l||i(e,t));for(var p=0,m=l?a:u,f=e;;f=m(f,t)){var v;if(s&&f===e||c&&f===t||(v=r(f,l,o)),v===!1||f===t)break;"production"!==n.env.NODE_ENV?d(p++<h,"traverseParentPath(%s, %s, ...): Detected an infinite loop while traversing the React DOM ID tree. This may be due to malformed IDs: %s",e,t):d(p++<h)}}var p=e("./ReactRootIndex"),d=e("./invariant"),m=".",f=m.length,h=100,v={createReactRootID:function(){return r(p.createReactRootIndex())},createReactID:function(e,t){return e+t},getReactRootIDFromNodeID:function(e){if(e&&e.charAt(0)===m&&e.length>1){var t=e.indexOf(m,1);return t>-1?e.substr(0,t):e}return null},traverseEnterLeave:function(e,t,n,r,o){var s=c(e,t);s!==e&&l(e,s,n,r,!1,!0),s!==t&&l(s,t,n,o,!0,!1)},traverseTwoPhase:function(e,t,n){e&&(l("",e,t,n,!0,!1),l(e,"",t,n,!1,!0))},traverseAncestors:function(e,t,n){l("",e,t,n,!0,!1)},_getFirstCommonAncestorID:c,_getNextDescendantID:u,isAncestorIDOf:i,SEPARATOR:m};t.exports=v}).call(this,e("_process"))},{"./ReactRootIndex":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactRootIndex.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceMap.js":[function(e,t,n){"use strict";var r={remove:function(e){e._reactInternalInstance=void 0},get:function(e){return e._reactInternalInstance},has:function(e){return void 0!==e._reactInternalInstance},set:function(e,t){e._reactInternalInstance=t}};t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactLifeCycle.js":[function(e,t,n){"use strict";var r={currentlyMountingInstance:null,currentlyUnmountingInstance:null};t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMarkupChecksum.js":[function(e,t,n){"use strict";var r=e("./adler32"),o={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var t=r(e);return e.replace(">"," "+o.CHECKSUM_ATTR_NAME+'="'+t+'">')},canReuseMarkup:function(e,t){var n=t.getAttribute(o.CHECKSUM_ATTR_NAME);n=n&&parseInt(n,10);var s=r(e);return s===n}};t.exports=o},{"./adler32":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/adler32.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMount.js":[function(e,t,n){(function(n){"use strict";function r(e,t){for(var n=Math.min(e.length,t.length),r=0;n>r;r++)if(e.charAt(r)!==t.charAt(r))return r;return e.length===t.length?-1:n}function o(e){var t=x(e);return t&&z.getID(t)}function s(e){var t=i(e);if(t)if(F.hasOwnProperty(t)){var r=F[t];r!==e&&("production"!==n.env.NODE_ENV?M(!l(r,t),"ReactMount: Two valid but unequal nodes with the same `%s`: %s",L,t):M(!l(r,t)),F[t]=e)}else F[t]=e;return t}function i(e){return e&&e.getAttribute&&e.getAttribute(L)||""}function a(e,t){var n=i(e);n!==t&&delete F[n],e.setAttribute(L,t),F[t]=e}function u(e){return F.hasOwnProperty(e)&&l(F[e],e)||(F[e]=z.findReactNodeByID(e)),F[e]}function c(e){var t=E.get(e)._rootNodeID;return j.isNullComponentID(t)?null:(F.hasOwnProperty(t)&&l(F[t],t)||(F[t]=z.findReactNodeByID(t)),F[t])}function l(e,t){if(e){"production"!==n.env.NODE_ENV?M(i(e)===t,"ReactMount: Unexpected modification of `%s`",L):M(i(e)===t);var r=z.findReactContainerForID(t);if(r&&N(r,e))return!0}return!1}function p(e){delete F[e]}function d(e){var t=F[e];return t&&l(t,e)?void(Q=t):!1}function m(e){Q=null,w.traverseAncestors(e,d);var t=Q;return Q=null,t}function f(e,t,n,r,o){var s=R.mountComponent(e,t,r,O);e._isTopLevel=!0,z._mountImageIntoNode(s,n,o)}function h(e,t,n,r){var o=U.ReactReconcileTransaction.getPooled();o.perform(f,null,e,t,n,o,r),U.ReactReconcileTransaction.release(o)}var v=e("./DOMProperty"),_=e("./ReactBrowserEventEmitter"),y=e("./ReactCurrentOwner"),g=e("./ReactElement"),b=e("./ReactElementValidator"),j=e("./ReactEmptyComponent"),w=e("./ReactInstanceHandles"),E=e("./ReactInstanceMap"),D=e("./ReactMarkupChecksum"),P=e("./ReactPerf"),R=e("./ReactReconciler"),C=e("./ReactUpdateQueue"),U=e("./ReactUpdates"),O=e("./emptyObject"),N=e("./containsNode"),x=e("./getReactRootElementInContainer"),T=e("./instantiateReactComponent"),M=e("./invariant"),k=e("./setInnerHTML"),S=e("./shouldUpdateReactComponent"),I=e("./warning"),A=w.SEPARATOR,L=v.ID_ATTRIBUTE_NAME,F={},V=1,B=9,H={},q={};if("production"!==n.env.NODE_ENV)var W={};var K=[],Q=null,z={_instancesByReactRootID:H,scrollMonitor:function(e,t){t()},_updateRootComponent:function(e,t,r,s){return"production"!==n.env.NODE_ENV&&b.checkAndWarnForMutatedProps(t),z.scrollMonitor(r,function(){C.enqueueElementInternal(e,t),s&&C.enqueueCallbackInternal(e,s)}),"production"!==n.env.NODE_ENV&&(W[o(r)]=x(r)),e},_registerComponent:function(e,t){"production"!==n.env.NODE_ENV?M(t&&(t.nodeType===V||t.nodeType===B),"_registerComponent(...): Target container is not a DOM element."):M(t&&(t.nodeType===V||t.nodeType===B)),_.ensureScrollValueMonitoring();var r=z.registerContainer(t);return H[r]=e,r},_renderNewRootComponent:function(e,t,r){"production"!==n.env.NODE_ENV?I(null==y.current,"_renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null;var o=T(e,null),s=z._registerComponent(o,t);return U.batchedUpdates(h,o,s,t,r),"production"!==n.env.NODE_ENV&&(W[s]=x(t)),o},render:function(e,t,r){"production"!==n.env.NODE_ENV?M(g.isValidElement(e),"React.render(): Invalid component element.%s","string"==typeof e?" Instead of passing an element string, make sure to instantiate it by passing it to React.createElement.":"function"==typeof e?" Instead of passing a component class, make sure to instantiate it by passing it to React.createElement.":null!=e&&void 0!==e.props?" This may be caused by unintentionally loading two independent copies of React.":""):M(g.isValidElement(e));var s=H[o(t)];if(s){var i=s._currentElement;if(S(i,e))return z._updateRootComponent(s,e,t,r).getPublicInstance();z.unmountComponentAtNode(t)}var a=x(t),u=a&&z.isRenderedByReact(a);if("production"!==n.env.NODE_ENV&&(!u||a.nextSibling))for(var c=a;c;){if(z.isRenderedByReact(c)){"production"!==n.env.NODE_ENV?I(!1,"render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup."):null;break}c=c.nextSibling}var l=u&&!s,p=z._renderNewRootComponent(e,t,l).getPublicInstance();return r&&r.call(p),p},constructAndRenderComponent:function(e,t,n){var r=g.createElement(e,t);return z.render(r,n)},constructAndRenderComponentByID:function(e,t,r){var o=document.getElementById(r);return"production"!==n.env.NODE_ENV?M(o,'Tried to get element with id of "%s" but it is not present on the page.',r):M(o),z.constructAndRenderComponent(e,t,o)},registerContainer:function(e){var t=o(e);return t&&(t=w.getReactRootIDFromNodeID(t)),t||(t=w.createReactRootID()),q[t]=e,t},unmountComponentAtNode:function(e){"production"!==n.env.NODE_ENV?I(null==y.current,"unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null,"production"!==n.env.NODE_ENV?M(e&&(e.nodeType===V||e.nodeType===B),"unmountComponentAtNode(...): Target container is not a DOM element."):M(e&&(e.nodeType===V||e.nodeType===B));var t=o(e),r=H[t];return r?(z.unmountComponentFromNode(r,e),delete H[t],delete q[t],"production"!==n.env.NODE_ENV&&delete W[t],!0):!1},unmountComponentFromNode:function(e,t){for(R.unmountComponent(e),t.nodeType===B&&(t=t.documentElement);t.lastChild;)t.removeChild(t.lastChild)},findReactContainerForID:function(e){var t=w.getReactRootIDFromNodeID(e),r=q[t];if("production"!==n.env.NODE_ENV){var o=W[t];if(o&&o.parentNode!==r){"production"!==n.env.NODE_ENV?M(i(o)===t,"ReactMount: Root element ID differed from reactRootID."):M(i(o)===t);var s=r.firstChild;s&&t===i(s)?W[t]=s:"production"!==n.env.NODE_ENV?I(!1,"ReactMount: Root element has been removed from its original container. New container:",o.parentNode):null}}return r},findReactNodeByID:function(e){var t=z.findReactContainerForID(e);return z.findComponentRoot(t,e)},isRenderedByReact:function(e){if(1!==e.nodeType)return!1;var t=z.getID(e);return t?t.charAt(0)===A:!1},getFirstReactDOM:function(e){for(var t=e;t&&t.parentNode!==t;){if(z.isRenderedByReact(t))return t;t=t.parentNode}return null},findComponentRoot:function(e,t){var r=K,o=0,s=m(t)||e;for(r[0]=s.firstChild,r.length=1;o<r.length;){for(var i,a=r[o++];a;){var u=z.getID(a);u?t===u?i=a:w.isAncestorIDOf(u,t)&&(r.length=o=0,r.push(a.firstChild)):r.push(a.firstChild),a=a.nextSibling}if(i)return r.length=0,i}r.length=0,"production"!==n.env.NODE_ENV?M(!1,"findComponentRoot(..., %s): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",t,z.getID(e)):M(!1)},_mountImageIntoNode:function(e,t,o){if("production"!==n.env.NODE_ENV?M(t&&(t.nodeType===V||t.nodeType===B),"mountComponentIntoNode(...): Target container is not valid."):M(t&&(t.nodeType===V||t.nodeType===B)),o){var s=x(t);if(D.canReuseMarkup(e,s))return;var i=s.getAttribute(D.CHECKSUM_ATTR_NAME);s.removeAttribute(D.CHECKSUM_ATTR_NAME);var a=s.outerHTML;s.setAttribute(D.CHECKSUM_ATTR_NAME,i);var u=r(e,a),c=" (client) "+e.substring(u-20,u+20)+"\n (server) "+a.substring(u-20,u+20);"production"!==n.env.NODE_ENV?M(t.nodeType!==B,"You're trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s",c):M(t.nodeType!==B),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?I(!1,"React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n%s",c):null)}"production"!==n.env.NODE_ENV?M(t.nodeType!==B,"You're trying to render a component to the document but you didn't use server rendering. We can't do this without using server rendering due to cross-browser quirks. See React.renderToString() for server rendering."):M(t.nodeType!==B),k(t,e)},getReactRootID:o,getID:s,setID:a,getNode:u,getNodeFromInstance:c,purgeID:p};P.measureMethods(z,"ReactMount",{_renderNewRootComponent:"_renderNewRootComponent",_mountImageIntoNode:"_mountImageIntoNode"}),t.exports=z}).call(this,e("_process"))},{"./DOMProperty":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMProperty.js","./ReactBrowserEventEmitter":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactCurrentOwner":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElementValidator.js","./ReactEmptyComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactEmptyComponent.js","./ReactInstanceHandles":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceHandles.js","./ReactInstanceMap":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceMap.js","./ReactMarkupChecksum":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMarkupChecksum.js","./ReactPerf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPerf.js","./ReactReconciler":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactReconciler.js","./ReactUpdateQueue":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdateQueue.js","./ReactUpdates":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdates.js","./containsNode":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/containsNode.js","./emptyObject":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyObject.js","./getReactRootElementInContainer":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getReactRootElementInContainer.js","./instantiateReactComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/instantiateReactComponent.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./setInnerHTML":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/setInnerHTML.js","./shouldUpdateReactComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/shouldUpdateReactComponent.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMultiChild.js":[function(e,t,n){"use strict";function r(e,t,n){f.push({parentID:e,parentNode:null,type:l.INSERT_MARKUP,markupIndex:h.push(t)-1,textContent:null,fromIndex:null,toIndex:n})}function o(e,t,n){f.push({parentID:e,parentNode:null,type:l.MOVE_EXISTING,markupIndex:null,textContent:null,fromIndex:t,toIndex:n})}function s(e,t){f.push({parentID:e,parentNode:null,type:l.REMOVE_NODE,markupIndex:null,textContent:null,fromIndex:t,toIndex:null})}function i(e,t){f.push({parentID:e,parentNode:null,type:l.TEXT_CONTENT,markupIndex:null,textContent:t,fromIndex:null,toIndex:null})}function a(){f.length&&(c.processChildrenUpdates(f,h),u())}function u(){f.length=0,h.length=0}var c=e("./ReactComponentEnvironment"),l=e("./ReactMultiChildUpdateTypes"),p=e("./ReactReconciler"),d=e("./ReactChildReconciler"),m=0,f=[],h=[],v={Mixin:{mountChildren:function(e,t,n){var r=d.instantiateChildren(e,t,n);this._renderedChildren=r;var o=[],s=0;for(var i in r)if(r.hasOwnProperty(i)){var a=r[i],u=this._rootNodeID+i,c=p.mountComponent(a,u,t,n);a._mountIndex=s,o.push(c),s++}return o},updateTextContent:function(e){m++;var t=!0;try{var n=this._renderedChildren;d.unmountChildren(n);for(var r in n)n.hasOwnProperty(r)&&this._unmountChildByName(n[r],r);this.setTextContent(e),t=!1}finally{m--,m||(t?u():a())}},updateChildren:function(e,t,n){m++;var r=!0;try{this._updateChildren(e,t,n),r=!1}finally{m--,m||(r?u():a())}},_updateChildren:function(e,t,n){var r=this._renderedChildren,o=d.updateChildren(r,e,t,n);if(this._renderedChildren=o,o||r){var s,i=0,a=0;for(s in o)if(o.hasOwnProperty(s)){var u=r&&r[s],c=o[s];u===c?(this.moveChild(u,a,i),i=Math.max(u._mountIndex,i),u._mountIndex=a):(u&&(i=Math.max(u._mountIndex,i),this._unmountChildByName(u,s)),this._mountChildByNameAtIndex(c,s,a,t,n)),a++}for(s in r)!r.hasOwnProperty(s)||o&&o.hasOwnProperty(s)||this._unmountChildByName(r[s],s)}},unmountChildren:function(){var e=this._renderedChildren;d.unmountChildren(e),this._renderedChildren=null},moveChild:function(e,t,n){e._mountIndex<n&&o(this._rootNodeID,e._mountIndex,t)},createChild:function(e,t){r(this._rootNodeID,t,e._mountIndex)},removeChild:function(e){s(this._rootNodeID,e._mountIndex)},setTextContent:function(e){i(this._rootNodeID,e)},_mountChildByNameAtIndex:function(e,t,n,r,o){var s=this._rootNodeID+t,i=p.mountComponent(e,s,r,o);e._mountIndex=n,this.createChild(e,i)},_unmountChildByName:function(e,t){this.removeChild(e),e._mountIndex=null}}};t.exports=v},{"./ReactChildReconciler":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactChildReconciler.js","./ReactComponentEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactComponentEnvironment.js","./ReactMultiChildUpdateTypes":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./ReactReconciler":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactReconciler.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMultiChildUpdateTypes.js":[function(e,t,n){"use strict";var r=e("./keyMirror"),o=r({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,TEXT_CONTENT:null});t.exports=o},{"./keyMirror":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyMirror.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactNativeComponent.js":[function(e,t,n){(function(n){"use strict";function r(e){if("function"==typeof e.type)return e.type;var t=e.type,n=p[t];return null==n&&(p[t]=n=c(t)),n}function o(e){return"production"!==n.env.NODE_ENV?u(l,"There is no registered component for the tag %s",e.type):u(l),new l(e.type,e.props)}function s(e){return new d(e)}function i(e){return e instanceof d}var a=e("./Object.assign"),u=e("./invariant"),c=null,l=null,p={},d=null,m={injectGenericComponentClass:function(e){l=e},injectTextComponentClass:function(e){d=e},injectComponentClasses:function(e){a(p,e)},injectAutoWrapper:function(e){c=e}},f={getComponentClassForElement:r,createInternalComponent:o,createInstanceForText:s,isTextComponent:i,injection:m};t.exports=f}).call(this,e("_process"))},{"./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactOwner.js":[function(e,t,n){(function(n){"use strict";var r=e("./invariant"),o={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(e,t,s){"production"!==n.env.NODE_ENV?r(o.isValidOwner(s),"addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):r(o.isValidOwner(s)),s.attachRef(t,e)},removeComponentAsRefFrom:function(e,t,s){"production"!==n.env.NODE_ENV?r(o.isValidOwner(s),"removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This usually means that you're trying to remove a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):r(o.isValidOwner(s)),s.getPublicInstance().refs[t]===e.getPublicInstance()&&s.detachRef(t)}};t.exports=o}).call(this,e("_process"))},{"./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPerf.js":[function(e,t,n){(function(e){"use strict";function n(e,t,n){return n}var r={enableMeasure:!1,storedMeasure:n,measureMethods:function(t,n,o){if("production"!==e.env.NODE_ENV)for(var s in o)o.hasOwnProperty(s)&&(t[s]=r.measure(n,o[s],t[s]))},measure:function(t,n,o){if("production"!==e.env.NODE_ENV){var s=null,i=function(){return r.enableMeasure?(s||(s=r.storedMeasure(t,n,o)),s.apply(this,arguments)):o.apply(this,arguments)};return i.displayName=t+"_"+n,i}return o},injection:{injectMeasure:function(e){r.storedMeasure=e}}};t.exports=r}).call(this,e("_process"))},{_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"
}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPropTypeLocationNames.js":[function(e,t,n){(function(e){"use strict";var n={};"production"!==e.env.NODE_ENV&&(n={prop:"prop",context:"context",childContext:"child context"}),t.exports=n}).call(this,e("_process"))},{_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPropTypeLocations.js":[function(e,t,n){"use strict";var r=e("./keyMirror"),o=r({prop:null,context:null,childContext:null});t.exports=o},{"./keyMirror":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyMirror.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPropTypes.js":[function(e,t,n){"use strict";function r(e){function t(t,n,r,o,s){if(o=o||j,null==n[r]){var i=g[s];return t?new Error("Required "+i+" `"+r+"` was not specified in "+("`"+o+"`.")):null}return e(n,r,o,s)}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function o(e){function t(t,n,r,o){var s=t[n],i=h(s);if(i!==e){var a=g[o],u=v(s);return new Error("Invalid "+a+" `"+n+"` of type `"+u+"` "+("supplied to `"+r+"`, expected `"+e+"`."))}return null}return r(t)}function s(){return r(b.thatReturns(null))}function i(e){function t(t,n,r,o){var s=t[n];if(!Array.isArray(s)){var i=g[o],a=h(s);return new Error("Invalid "+i+" `"+n+"` of type "+("`"+a+"` supplied to `"+r+"`, expected an array."))}for(var u=0;u<s.length;u++){var c=e(s,u,r,o);if(c instanceof Error)return c}return null}return r(t)}function a(){function e(e,t,n,r){if(!_.isValidElement(e[t])){var o=g[r];return new Error("Invalid "+o+" `"+t+"` supplied to "+("`"+n+"`, expected a ReactElement."))}return null}return r(e)}function u(e){function t(t,n,r,o){if(!(t[n]instanceof e)){var s=g[o],i=e.name||j;return new Error("Invalid "+s+" `"+n+"` supplied to "+("`"+r+"`, expected instance of `"+i+"`."))}return null}return r(t)}function c(e){function t(t,n,r,o){for(var s=t[n],i=0;i<e.length;i++)if(s===e[i])return null;var a=g[o],u=JSON.stringify(e);return new Error("Invalid "+a+" `"+n+"` of value `"+s+"` "+("supplied to `"+r+"`, expected one of "+u+"."))}return r(t)}function l(e){function t(t,n,r,o){var s=t[n],i=h(s);if("object"!==i){var a=g[o];return new Error("Invalid "+a+" `"+n+"` of type "+("`"+i+"` supplied to `"+r+"`, expected an object."))}for(var u in s)if(s.hasOwnProperty(u)){var c=e(s,u,r,o);if(c instanceof Error)return c}return null}return r(t)}function p(e){function t(t,n,r,o){for(var s=0;s<e.length;s++){var i=e[s];if(null==i(t,n,r,o))return null}var a=g[o];return new Error("Invalid "+a+" `"+n+"` supplied to "+("`"+r+"`."))}return r(t)}function d(){function e(e,t,n,r){if(!f(e[t])){var o=g[r];return new Error("Invalid "+o+" `"+t+"` supplied to "+("`"+n+"`, expected a ReactNode."))}return null}return r(e)}function m(e){function t(t,n,r,o){var s=t[n],i=h(s);if("object"!==i){var a=g[o];return new Error("Invalid "+a+" `"+n+"` of type `"+i+"` "+("supplied to `"+r+"`, expected `object`."))}for(var u in e){var c=e[u];if(c){var l=c(s,u,r,o);if(l)return l}}return null}return r(t)}function f(e){switch(typeof e){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(f);if(null===e||_.isValidElement(e))return!0;e=y.extractIfFragment(e);for(var t in e)if(!f(e[t]))return!1;return!0;default:return!1}}function h(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":t}function v(e){var t=h(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}var _=e("./ReactElement"),y=e("./ReactFragment"),g=e("./ReactPropTypeLocationNames"),b=e("./emptyFunction"),j="<<anonymous>>",w=a(),E=d(),D={array:o("array"),bool:o("boolean"),func:o("function"),number:o("number"),object:o("object"),string:o("string"),any:s(),arrayOf:i,element:w,instanceOf:u,node:E,objectOf:l,oneOf:c,oneOfType:p,shape:m};t.exports=D},{"./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactFragment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactFragment.js","./ReactPropTypeLocationNames":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPropTypeLocationNames.js","./emptyFunction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyFunction.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPutListenerQueue.js":[function(e,t,n){"use strict";function r(){this.listenersToPut=[]}var o=e("./PooledClass"),s=e("./ReactBrowserEventEmitter"),i=e("./Object.assign");i(r.prototype,{enqueuePutListener:function(e,t,n){this.listenersToPut.push({rootNodeID:e,propKey:t,propValue:n})},putListeners:function(){for(var e=0;e<this.listenersToPut.length;e++){var t=this.listenersToPut[e];s.putListener(t.rootNodeID,t.propKey,t.propValue)}},reset:function(){this.listenersToPut.length=0},destructor:function(){this.reset()}}),o.addPoolingTo(r),t.exports=r},{"./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/PooledClass.js","./ReactBrowserEventEmitter":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserEventEmitter.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactReconcileTransaction.js":[function(e,t,n){"use strict";function r(){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=o.getPooled(null),this.putListenerQueue=u.getPooled()}var o=e("./CallbackQueue"),s=e("./PooledClass"),i=e("./ReactBrowserEventEmitter"),a=e("./ReactInputSelection"),u=e("./ReactPutListenerQueue"),c=e("./Transaction"),l=e("./Object.assign"),p={initialize:a.getSelectionInformation,close:a.restoreSelection},d={initialize:function(){var e=i.isEnabled();return i.setEnabled(!1),e},close:function(e){i.setEnabled(e)}},m={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},f={initialize:function(){this.putListenerQueue.reset()},close:function(){this.putListenerQueue.putListeners()}},h=[f,p,d,m],v={getTransactionWrappers:function(){return h},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){o.release(this.reactMountReady),this.reactMountReady=null,u.release(this.putListenerQueue),this.putListenerQueue=null}};l(r.prototype,c.Mixin,v),s.addPoolingTo(r),t.exports=r},{"./CallbackQueue":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/PooledClass.js","./ReactBrowserEventEmitter":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactInputSelection":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInputSelection.js","./ReactPutListenerQueue":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPutListenerQueue.js","./Transaction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Transaction.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactReconciler.js":[function(e,t,n){(function(n){"use strict";function r(){o.attachRefs(this,this._currentElement)}var o=e("./ReactRef"),s=e("./ReactElementValidator"),i={mountComponent:function(e,t,o,i){var a=e.mountComponent(t,o,i);return"production"!==n.env.NODE_ENV&&s.checkAndWarnForMutatedProps(e._currentElement),o.getReactMountReady().enqueue(r,e),a},unmountComponent:function(e){o.detachRefs(e,e._currentElement),e.unmountComponent()},receiveComponent:function(e,t,i,a){var u=e._currentElement;if(t!==u||null==t._owner){"production"!==n.env.NODE_ENV&&s.checkAndWarnForMutatedProps(t);var c=o.shouldUpdateRefs(u,t);c&&o.detachRefs(e,u),e.receiveComponent(t,i,a),c&&i.getReactMountReady().enqueue(r,e)}},performUpdateIfNecessary:function(e,t){e.performUpdateIfNecessary(t)}};t.exports=i}).call(this,e("_process"))},{"./ReactElementValidator":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElementValidator.js","./ReactRef":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactRef.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactRef.js":[function(e,t,n){"use strict";function r(e,t,n){"function"==typeof e?e(t.getPublicInstance()):s.addComponentAsRefTo(t,e,n)}function o(e,t,n){"function"==typeof e?e(null):s.removeComponentAsRefFrom(t,e,n)}var s=e("./ReactOwner"),i={};i.attachRefs=function(e,t){var n=t.ref;null!=n&&r(n,e,t._owner)},i.shouldUpdateRefs=function(e,t){return t._owner!==e._owner||t.ref!==e.ref},i.detachRefs=function(e,t){var n=t.ref;null!=n&&o(n,e,t._owner)},t.exports=i},{"./ReactOwner":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactOwner.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactRootIndex.js":[function(e,t,n){"use strict";var r={injectCreateReactRootIndex:function(e){o.createReactRootIndex=e}},o={createReactRootIndex:null,injection:r};t.exports=o},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactServerRendering.js":[function(e,t,n){(function(n){"use strict";function r(e){"production"!==n.env.NODE_ENV?p(s.isValidElement(e),"renderToString(): You must pass a valid ReactElement."):p(s.isValidElement(e));var t;try{var r=i.createReactRootID();return t=u.getPooled(!1),t.perform(function(){var n=l(e,null),o=n.mountComponent(r,t,c);return a.addChecksumToMarkup(o)},null)}finally{u.release(t)}}function o(e){"production"!==n.env.NODE_ENV?p(s.isValidElement(e),"renderToStaticMarkup(): You must pass a valid ReactElement."):p(s.isValidElement(e));var t;try{var r=i.createReactRootID();return t=u.getPooled(!0),t.perform(function(){var n=l(e,null);return n.mountComponent(r,t,c)},null)}finally{u.release(t)}}var s=e("./ReactElement"),i=e("./ReactInstanceHandles"),a=e("./ReactMarkupChecksum"),u=e("./ReactServerRenderingTransaction"),c=e("./emptyObject"),l=e("./instantiateReactComponent"),p=e("./invariant");t.exports={renderToString:r,renderToStaticMarkup:o}}).call(this,e("_process"))},{"./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceHandles.js","./ReactMarkupChecksum":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMarkupChecksum.js","./ReactServerRenderingTransaction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactServerRenderingTransaction.js","./emptyObject":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyObject.js","./instantiateReactComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/instantiateReactComponent.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactServerRenderingTransaction.js":[function(e,t,n){"use strict";function r(e){this.reinitializeTransaction(),this.renderToStaticMarkup=e,this.reactMountReady=s.getPooled(null),this.putListenerQueue=i.getPooled()}var o=e("./PooledClass"),s=e("./CallbackQueue"),i=e("./ReactPutListenerQueue"),a=e("./Transaction"),u=e("./Object.assign"),c=e("./emptyFunction"),l={initialize:function(){this.reactMountReady.reset()},close:c},p={initialize:function(){this.putListenerQueue.reset()},close:c},d=[p,l],m={getTransactionWrappers:function(){return d},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){s.release(this.reactMountReady),this.reactMountReady=null,i.release(this.putListenerQueue),this.putListenerQueue=null}};u(r.prototype,a.Mixin,m),o.addPoolingTo(r),t.exports=r},{"./CallbackQueue":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/PooledClass.js","./ReactPutListenerQueue":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPutListenerQueue.js","./Transaction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Transaction.js","./emptyFunction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyFunction.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdateQueue.js":[function(e,t,n){(function(n){"use strict";function r(e){e!==s.currentlyMountingInstance&&c.enqueueUpdate(e)}function o(e,t){"production"!==n.env.NODE_ENV?p(null==i.current,"%s(...): Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.",t):p(null==i.current);var r=u.get(e);return r?r===s.currentlyUnmountingInstance?null:r:("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?d(!t,"%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op.",t,t):null),null)}var s=e("./ReactLifeCycle"),i=e("./ReactCurrentOwner"),a=e("./ReactElement"),u=e("./ReactInstanceMap"),c=e("./ReactUpdates"),l=e("./Object.assign"),p=e("./invariant"),d=e("./warning"),m={enqueueCallback:function(e,t){"production"!==n.env.NODE_ENV?p("function"==typeof t,"enqueueCallback(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable."):p("function"==typeof t);var i=o(e);return i&&i!==s.currentlyMountingInstance?(i._pendingCallbacks?i._pendingCallbacks.push(t):i._pendingCallbacks=[t],void r(i)):null},enqueueCallbackInternal:function(e,t){"production"!==n.env.NODE_ENV?p("function"==typeof t,"enqueueCallback(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable."):p("function"==typeof t),e._pendingCallbacks?e._pendingCallbacks.push(t):e._pendingCallbacks=[t],r(e)},enqueueForceUpdate:function(e){var t=o(e,"forceUpdate");t&&(t._pendingForceUpdate=!0,r(t))},enqueueReplaceState:function(e,t){var n=o(e,"replaceState");n&&(n._pendingStateQueue=[t],n._pendingReplaceState=!0,r(n))},enqueueSetState:function(e,t){var n=o(e,"setState");if(n){var s=n._pendingStateQueue||(n._pendingStateQueue=[]);s.push(t),r(n)}},enqueueSetProps:function(e,t){var s=o(e,"setProps");if(s){"production"!==n.env.NODE_ENV?p(s._isTopLevel,"setProps(...): You called `setProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created."):p(s._isTopLevel);var i=s._pendingElement||s._currentElement,u=l({},i.props,t);s._pendingElement=a.cloneAndReplaceProps(i,u),r(s)}},enqueueReplaceProps:function(e,t){var s=o(e,"replaceProps");if(s){"production"!==n.env.NODE_ENV?p(s._isTopLevel,"replaceProps(...): You called `replaceProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created."):p(s._isTopLevel);var i=s._pendingElement||s._currentElement;s._pendingElement=a.cloneAndReplaceProps(i,t),r(s)}},enqueueElementInternal:function(e,t){e._pendingElement=t,r(e)}};t.exports=m}).call(this,e("_process"))},{"./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./ReactCurrentOwner":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactInstanceMap":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceMap.js","./ReactLifeCycle":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactLifeCycle.js","./ReactUpdates":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdates.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactUpdates.js":[function(e,t,n){(function(n){"use strict";function r(){"production"!==n.env.NODE_ENV?_(U.ReactReconcileTransaction&&w,"ReactUpdates: must inject a reconcile transaction class and batching strategy"):_(U.ReactReconcileTransaction&&w)}function o(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=l.getPooled(),this.reconcileTransaction=U.ReactReconcileTransaction.getPooled()}function s(e,t,n,o,s){r(),w.batchedUpdates(e,t,n,o,s)}function i(e,t){return e._mountOrder-t._mountOrder}function a(e){var t=e.dirtyComponentsLength;"production"!==n.env.NODE_ENV?_(t===g.length,"Expected flush transaction's stored dirty-components length (%s) to match dirty-components array length (%s).",t,g.length):_(t===g.length),g.sort(i);for(var r=0;t>r;r++){var o=g[r],s=o._pendingCallbacks;if(o._pendingCallbacks=null,f.performUpdateIfNecessary(o,e.reconcileTransaction),s)for(var a=0;a<s.length;a++)e.callbackQueue.enqueue(s[a],o.getPublicInstance())}}function u(e){return r(),"production"!==n.env.NODE_ENV?y(null==d.current,"enqueueUpdate(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null,w.isBatchingUpdates?void g.push(e):void w.batchedUpdates(u,e)}function c(e,t){"production"!==n.env.NODE_ENV?_(w.isBatchingUpdates,"ReactUpdates.asap: Can't enqueue an asap callback in a context whereupdates are not being batched."):_(w.isBatchingUpdates),b.enqueue(e,t),j=!0}var l=e("./CallbackQueue"),p=e("./PooledClass"),d=e("./ReactCurrentOwner"),m=e("./ReactPerf"),f=e("./ReactReconciler"),h=e("./Transaction"),v=e("./Object.assign"),_=e("./invariant"),y=e("./warning"),g=[],b=l.getPooled(),j=!1,w=null,E={initialize:function(){this.dirtyComponentsLength=g.length},close:function(){this.dirtyComponentsLength!==g.length?(g.splice(0,this.dirtyComponentsLength),R()):g.length=0}},D={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},P=[E,D];v(o.prototype,h.Mixin,{getTransactionWrappers:function(){return P},destructor:function(){this.dirtyComponentsLength=null,l.release(this.callbackQueue),this.callbackQueue=null,U.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(e,t,n){return h.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,e,t,n)}}),p.addPoolingTo(o);var R=function(){for(;g.length||j;){if(g.length){var e=o.getPooled();e.perform(a,null,e),o.release(e)}if(j){j=!1;var t=b;b=l.getPooled(),t.notifyAll(),l.release(t)}}};R=m.measure("ReactUpdates","flushBatchedUpdates",R);var C={injectReconcileTransaction:function(e){"production"!==n.env.NODE_ENV?_(e,"ReactUpdates: must provide a reconcile transaction class"):_(e),U.ReactReconcileTransaction=e},injectBatchingStrategy:function(e){"production"!==n.env.NODE_ENV?_(e,"ReactUpdates: must provide a batching strategy"):_(e),"production"!==n.env.NODE_ENV?_("function"==typeof e.batchedUpdates,"ReactUpdates: must provide a batchedUpdates() function"):_("function"==typeof e.batchedUpdates),"production"!==n.env.NODE_ENV?_("boolean"==typeof e.isBatchingUpdates,"ReactUpdates: must provide an isBatchingUpdates boolean attribute"):_("boolean"==typeof e.isBatchingUpdates),w=e}},U={ReactReconcileTransaction:null,batchedUpdates:s,enqueueUpdate:u,flushBatchedUpdates:R,injection:C,asap:c};t.exports=U}).call(this,e("_process"))},{"./CallbackQueue":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/PooledClass.js","./ReactCurrentOwner":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactCurrentOwner.js","./ReactPerf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactPerf.js","./ReactReconciler":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactReconciler.js","./Transaction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Transaction.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SVGDOMPropertyConfig.js":[function(e,t,n){"use strict";var r=e("./DOMProperty"),o=r.injection.MUST_USE_ATTRIBUTE,s={Properties:{clipPath:o,cx:o,cy:o,d:o,dx:o,dy:o,fill:o,fillOpacity:o,fontFamily:o,fontSize:o,fx:o,fy:o,gradientTransform:o,gradientUnits:o,markerEnd:o,markerMid:o,markerStart:o,offset:o,opacity:o,patternContentUnits:o,patternUnits:o,points:o,preserveAspectRatio:o,r:o,rx:o,ry:o,spreadMethod:o,stopColor:o,stopOpacity:o,stroke:o,strokeDasharray:o,strokeLinecap:o,strokeOpacity:o,strokeWidth:o,textAnchor:o,transform:o,version:o,viewBox:o,x1:o,x2:o,x:o,y1:o,y2:o,y:o},DOMAttributeNames:{clipPath:"clip-path",fillOpacity:"fill-opacity",fontFamily:"font-family",fontSize:"font-size",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",patternContentUnits:"patternContentUnits",patternUnits:"patternUnits",preserveAspectRatio:"preserveAspectRatio",spreadMethod:"spreadMethod",stopColor:"stop-color",stopOpacity:"stop-opacity",strokeDasharray:"stroke-dasharray",strokeLinecap:"stroke-linecap",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",textAnchor:"text-anchor",viewBox:"viewBox"}};t.exports=s},{"./DOMProperty":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/DOMProperty.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SelectEventPlugin.js":[function(e,t,n){"use strict";function r(e){if("selectionStart"in e&&a.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var t=window.getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}function o(e){if(y||null==h||h!==c())return null;var t=r(h);if(!_||!d(_,t)){_=t;var n=u.getPooled(f.select,v,e);return n.type="select",n.target=h,i.accumulateTwoPhaseDispatches(n),n}}var s=e("./EventConstants"),i=e("./EventPropagators"),a=e("./ReactInputSelection"),u=e("./SyntheticEvent"),c=e("./getActiveElement"),l=e("./isTextInputElement"),p=e("./keyOf"),d=e("./shallowEqual"),m=s.topLevelTypes,f={select:{phasedRegistrationNames:{bubbled:p({onSelect:null}),captured:p({onSelectCapture:null})},dependencies:[m.topBlur,m.topContextMenu,m.topFocus,m.topKeyDown,m.topMouseDown,m.topMouseUp,m.topSelectionChange]}},h=null,v=null,_=null,y=!1,g={eventTypes:f,extractEvents:function(e,t,n,r){switch(e){case m.topFocus:(l(t)||"true"===t.contentEditable)&&(h=t,v=n,_=null);break;case m.topBlur:h=null,v=null,_=null;break;case m.topMouseDown:y=!0;break;case m.topContextMenu:case m.topMouseUp:return y=!1,o(r);case m.topSelectionChange:case m.topKeyDown:case m.topKeyUp:return o(r)}}};t.exports=g},{"./EventConstants":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPropagators.js","./ReactInputSelection":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInputSelection.js","./SyntheticEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticEvent.js","./getActiveElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getActiveElement.js","./isTextInputElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/isTextInputElement.js","./keyOf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyOf.js","./shallowEqual":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/shallowEqual.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ServerReactRootIndex.js":[function(e,t,n){"use strict";var r=Math.pow(2,53),o={createReactRootIndex:function(){return Math.ceil(Math.random()*r)}};t.exports=o},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SimpleEventPlugin.js":[function(e,t,n){(function(n){"use strict";var r=e("./EventConstants"),o=e("./EventPluginUtils"),s=e("./EventPropagators"),i=e("./SyntheticClipboardEvent"),a=e("./SyntheticEvent"),u=e("./SyntheticFocusEvent"),c=e("./SyntheticKeyboardEvent"),l=e("./SyntheticMouseEvent"),p=e("./SyntheticDragEvent"),d=e("./SyntheticTouchEvent"),m=e("./SyntheticUIEvent"),f=e("./SyntheticWheelEvent"),h=e("./getEventCharCode"),v=e("./invariant"),_=e("./keyOf"),y=e("./warning"),g=r.topLevelTypes,b={blur:{phasedRegistrationNames:{bubbled:_({onBlur:!0}),captured:_({onBlurCapture:!0})}},click:{phasedRegistrationNames:{bubbled:_({onClick:!0}),captured:_({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:_({onContextMenu:!0}),captured:_({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:_({onCopy:!0}),captured:_({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:_({onCut:!0}),captured:_({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:_({onDoubleClick:!0}),captured:_({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:_({onDrag:!0}),captured:_({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:_({onDragEnd:!0}),captured:_({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:_({onDragEnter:!0}),captured:_({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:_({onDragExit:!0}),captured:_({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:_({onDragLeave:!0}),captured:_({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:_({onDragOver:!0}),captured:_({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:_({onDragStart:!0}),captured:_({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:_({onDrop:!0}),captured:_({onDropCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:_({onFocus:!0}),captured:_({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:_({onInput:!0}),captured:_({onInputCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:_({onKeyDown:!0}),captured:_({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:_({onKeyPress:!0}),captured:_({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:_({onKeyUp:!0}),captured:_({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:_({onLoad:!0}),captured:_({onLoadCapture:!0})}},error:{phasedRegistrationNames:{bubbled:_({onError:!0}),captured:_({onErrorCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:_({onMouseDown:!0}),captured:_({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:_({onMouseMove:!0}),captured:_({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:_({onMouseOut:!0}),captured:_({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:_({onMouseOver:!0}),captured:_({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:_({onMouseUp:!0}),captured:_({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:_({onPaste:!0}),captured:_({onPasteCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:_({onReset:!0}),captured:_({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:_({onScroll:!0}),captured:_({onScrollCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:_({onSubmit:!0}),captured:_({onSubmitCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:_({onTouchCancel:!0}),captured:_({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:_({onTouchEnd:!0}),captured:_({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:_({onTouchMove:!0}),captured:_({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:_({onTouchStart:!0}),captured:_({onTouchStartCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:_({onWheel:!0}),captured:_({onWheelCapture:!0})}}},j={topBlur:b.blur,topClick:b.click,topContextMenu:b.contextMenu,topCopy:b.copy,topCut:b.cut,topDoubleClick:b.doubleClick,topDrag:b.drag,topDragEnd:b.dragEnd,topDragEnter:b.dragEnter,topDragExit:b.dragExit,topDragLeave:b.dragLeave,topDragOver:b.dragOver,topDragStart:b.dragStart,topDrop:b.drop,topError:b.error,topFocus:b.focus,topInput:b.input,topKeyDown:b.keyDown,topKeyPress:b.keyPress,topKeyUp:b.keyUp,topLoad:b.load,topMouseDown:b.mouseDown,topMouseMove:b.mouseMove,topMouseOut:b.mouseOut,topMouseOver:b.mouseOver,topMouseUp:b.mouseUp,topPaste:b.paste,topReset:b.reset,topScroll:b.scroll,topSubmit:b.submit,topTouchCancel:b.touchCancel,topTouchEnd:b.touchEnd,topTouchMove:b.touchMove,topTouchStart:b.touchStart,topWheel:b.wheel};for(var w in j)j[w].dependencies=[w];var E={eventTypes:b,executeDispatch:function(e,t,r){var s=o.executeDispatch(e,t,r);"production"!==n.env.NODE_ENV?y("boolean"!=typeof s,"Returning `false` from an event handler is deprecated and will be ignored in a future release. Instead, manually call e.stopPropagation() or e.preventDefault(), as appropriate."):null,s===!1&&(e.stopPropagation(),e.preventDefault())},extractEvents:function(e,t,r,o){var _=j[e];if(!_)return null;var y;switch(e){case g.topInput:case g.topLoad:case g.topError:case g.topReset:case g.topSubmit:y=a;break;case g.topKeyPress:if(0===h(o))return null;case g.topKeyDown:case g.topKeyUp:y=c;break;case g.topBlur:case g.topFocus:y=u;break;case g.topClick:if(2===o.button)return null;case g.topContextMenu:case g.topDoubleClick:case g.topMouseDown:case g.topMouseMove:case g.topMouseOut:case g.topMouseOver:case g.topMouseUp:y=l;break;case g.topDrag:case g.topDragEnd:case g.topDragEnter:case g.topDragExit:case g.topDragLeave:case g.topDragOver:case g.topDragStart:case g.topDrop:y=p;break;case g.topTouchCancel:case g.topTouchEnd:case g.topTouchMove:case g.topTouchStart:y=d;break;case g.topScroll:y=m;break;case g.topWheel:y=f;break;case g.topCopy:case g.topCut:case g.topPaste:y=i}"production"!==n.env.NODE_ENV?v(y,"SimpleEventPlugin: Unhandled event type, `%s`.",e):v(y);var b=y.getPooled(_,r,o);return s.accumulateTwoPhaseDispatches(b),b}};t.exports=E}).call(this,e("_process"))},{"./EventConstants":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventConstants.js","./EventPluginUtils":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPluginUtils.js","./EventPropagators":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/EventPropagators.js",
"./SyntheticClipboardEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticClipboardEvent.js","./SyntheticDragEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticDragEvent.js","./SyntheticEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticEvent.js","./SyntheticFocusEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticFocusEvent.js","./SyntheticKeyboardEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticKeyboardEvent.js","./SyntheticMouseEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticMouseEvent.js","./SyntheticTouchEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticTouchEvent.js","./SyntheticUIEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticUIEvent.js","./SyntheticWheelEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticWheelEvent.js","./getEventCharCode":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventCharCode.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./keyOf":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyOf.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticClipboardEvent.js":[function(e,t,n){"use strict";function r(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticEvent"),s={clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}};o.augmentClass(r,s),t.exports=r},{"./SyntheticEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticEvent.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticCompositionEvent.js":[function(e,t,n){"use strict";function r(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticEvent"),s={data:null};o.augmentClass(r,s),t.exports=r},{"./SyntheticEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticEvent.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticDragEvent.js":[function(e,t,n){"use strict";function r(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticMouseEvent"),s={dataTransfer:null};o.augmentClass(r,s),t.exports=r},{"./SyntheticMouseEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticMouseEvent.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticEvent.js":[function(e,t,n){"use strict";function r(e,t,n){this.dispatchConfig=e,this.dispatchMarker=t,this.nativeEvent=n;var r=this.constructor.Interface;for(var o in r)if(r.hasOwnProperty(o)){var s=r[o];this[o]=s?s(n):n[o]}var a=null!=n.defaultPrevented?n.defaultPrevented:n.returnValue===!1;this.isDefaultPrevented=a?i.thatReturnsTrue:i.thatReturnsFalse,this.isPropagationStopped=i.thatReturnsFalse}var o=e("./PooledClass"),s=e("./Object.assign"),i=e("./emptyFunction"),a=e("./getEventTarget"),u={type:null,target:a,currentTarget:i.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};s(r.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e.preventDefault?e.preventDefault():e.returnValue=!1,this.isDefaultPrevented=i.thatReturnsTrue},stopPropagation:function(){var e=this.nativeEvent;e.stopPropagation?e.stopPropagation():e.cancelBubble=!0,this.isPropagationStopped=i.thatReturnsTrue},persist:function(){this.isPersistent=i.thatReturnsTrue},isPersistent:i.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var t in e)this[t]=null;this.dispatchConfig=null,this.dispatchMarker=null,this.nativeEvent=null}}),r.Interface=u,r.augmentClass=function(e,t){var n=this,r=Object.create(n.prototype);s(r,e.prototype),e.prototype=r,e.prototype.constructor=e,e.Interface=s({},n.Interface,t),e.augmentClass=n.augmentClass,o.addPoolingTo(e,o.threeArgumentPooler)},o.addPoolingTo(r,o.threeArgumentPooler),t.exports=r},{"./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/PooledClass.js","./emptyFunction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyFunction.js","./getEventTarget":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventTarget.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticFocusEvent.js":[function(e,t,n){"use strict";function r(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticUIEvent"),s={relatedTarget:null};o.augmentClass(r,s),t.exports=r},{"./SyntheticUIEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticUIEvent.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticInputEvent.js":[function(e,t,n){"use strict";function r(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticEvent"),s={data:null};o.augmentClass(r,s),t.exports=r},{"./SyntheticEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticEvent.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticKeyboardEvent.js":[function(e,t,n){"use strict";function r(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticUIEvent"),s=e("./getEventCharCode"),i=e("./getEventKey"),a=e("./getEventModifierState"),u={key:i,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:a,charCode:function(e){return"keypress"===e.type?s(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?s(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}};o.augmentClass(r,u),t.exports=r},{"./SyntheticUIEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticUIEvent.js","./getEventCharCode":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventCharCode.js","./getEventKey":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventKey.js","./getEventModifierState":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventModifierState.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticMouseEvent.js":[function(e,t,n){"use strict";function r(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticUIEvent"),s=e("./ViewportMetrics"),i=e("./getEventModifierState"),a={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:i,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+s.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+s.currentScrollTop}};o.augmentClass(r,a),t.exports=r},{"./SyntheticUIEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticUIEvent.js","./ViewportMetrics":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ViewportMetrics.js","./getEventModifierState":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventModifierState.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticTouchEvent.js":[function(e,t,n){"use strict";function r(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticUIEvent"),s=e("./getEventModifierState"),i={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:s};o.augmentClass(r,i),t.exports=r},{"./SyntheticUIEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticUIEvent.js","./getEventModifierState":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventModifierState.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticUIEvent.js":[function(e,t,n){"use strict";function r(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticEvent"),s=e("./getEventTarget"),i={view:function(e){if(e.view)return e.view;var t=s(e);if(null!=t&&t.window===t)return t;var n=t.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(e){return e.detail||0}};o.augmentClass(r,i),t.exports=r},{"./SyntheticEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticEvent.js","./getEventTarget":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventTarget.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticWheelEvent.js":[function(e,t,n){"use strict";function r(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticMouseEvent"),s={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};o.augmentClass(r,s),t.exports=r},{"./SyntheticMouseEvent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/SyntheticMouseEvent.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Transaction.js":[function(e,t,n){(function(n){"use strict";var r=e("./invariant"),o={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(e,t,o,s,i,a,u,c){"production"!==n.env.NODE_ENV?r(!this.isInTransaction(),"Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction."):r(!this.isInTransaction());var l,p;try{this._isInTransaction=!0,l=!0,this.initializeAll(0),p=e.call(t,o,s,i,a,u,c),l=!1}finally{try{if(l)try{this.closeAll(0)}catch(d){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return p},initializeAll:function(e){for(var t=this.transactionWrappers,n=e;n<t.length;n++){var r=t[n];try{this.wrapperInitData[n]=s.OBSERVED_ERROR,this.wrapperInitData[n]=r.initialize?r.initialize.call(this):null}finally{if(this.wrapperInitData[n]===s.OBSERVED_ERROR)try{this.initializeAll(n+1)}catch(o){}}}},closeAll:function(e){"production"!==n.env.NODE_ENV?r(this.isInTransaction(),"Transaction.closeAll(): Cannot close transaction when none are open."):r(this.isInTransaction());for(var t=this.transactionWrappers,o=e;o<t.length;o++){var i,a=t[o],u=this.wrapperInitData[o];try{i=!0,u!==s.OBSERVED_ERROR&&a.close&&a.close.call(this,u),i=!1}finally{if(i)try{this.closeAll(o+1)}catch(c){}}}this.wrapperInitData.length=0}},s={Mixin:o,OBSERVED_ERROR:{}};t.exports=s}).call(this,e("_process"))},{"./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ViewportMetrics.js":[function(e,t,n){"use strict";var r={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(e){r.currentScrollLeft=e.x,r.currentScrollTop=e.y}};t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/accumulateInto.js":[function(e,t,n){(function(n){"use strict";function r(e,t){if("production"!==n.env.NODE_ENV?o(null!=t,"accumulateInto(...): Accumulated items must not be null or undefined."):o(null!=t),null==e)return t;var r=Array.isArray(e),s=Array.isArray(t);return r&&s?(e.push.apply(e,t),e):r?(e.push(t),e):s?[e].concat(t):[e,t]}var o=e("./invariant");t.exports=r}).call(this,e("_process"))},{"./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/adler32.js":[function(e,t,n){"use strict";function r(e){for(var t=1,n=0,r=0;r<e.length;r++)t=(t+e.charCodeAt(r))%o,n=(n+t)%o;return t|n<<16}var o=65521;t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/camelize.js":[function(e,t,n){function r(e){return e.replace(o,function(e,t){return t.toUpperCase()})}var o=/-(.)/g;t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/camelizeStyleName.js":[function(e,t,n){"use strict";function r(e){return o(e.replace(s,"ms-"))}var o=e("./camelize"),s=/^-ms-/;t.exports=r},{"./camelize":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/camelize.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/containsNode.js":[function(e,t,n){function r(e,t){return e&&t?e===t?!0:o(e)?!1:o(t)?r(e,t.parentNode):e.contains?e.contains(t):e.compareDocumentPosition?!!(16&e.compareDocumentPosition(t)):!1:!1}var o=e("./isTextNode");t.exports=r},{"./isTextNode":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/isTextNode.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/createArrayFromMixed.js":[function(e,t,n){function r(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"length"in e&&!("setInterval"in e)&&"number"!=typeof e.nodeType&&(Array.isArray(e)||"callee"in e||"item"in e)}function o(e){return r(e)?Array.isArray(e)?e.slice():s(e):[e]}var s=e("./toArray");t.exports=o},{"./toArray":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/toArray.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/createFullPageComponent.js":[function(e,t,n){(function(n){"use strict";function r(e){var t=s.createFactory(e),r=o.createClass({tagName:e.toUpperCase(),displayName:"ReactFullPageComponent"+e,componentWillUnmount:function(){"production"!==n.env.NODE_ENV?i(!1,"%s tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.",this.constructor.displayName):i(!1)},render:function(){return t(this.props)}});return r}var o=e("./ReactClass"),s=e("./ReactElement"),i=e("./invariant");t.exports=r}).call(this,e("_process"))},{"./ReactClass":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/createNodesFromMarkup.js":[function(e,t,n){(function(n){function r(e){var t=e.match(l);return t&&t[1].toLowerCase()}function o(e,t){var o=c;"production"!==n.env.NODE_ENV?u(!!c,"createNodesFromMarkup dummy not initialized"):u(!!c);var s=r(e),l=s&&a(s);if(l){o.innerHTML=l[1]+e+l[2];for(var p=l[0];p--;)o=o.lastChild}else o.innerHTML=e;var d=o.getElementsByTagName("script");d.length&&("production"!==n.env.NODE_ENV?u(t,"createNodesFromMarkup(...): Unexpected <script> element rendered."):u(t),i(d).forEach(t));for(var m=i(o.childNodes);o.lastChild;)o.removeChild(o.lastChild);return m}var s=e("./ExecutionEnvironment"),i=e("./createArrayFromMixed"),a=e("./getMarkupWrap"),u=e("./invariant"),c=s.canUseDOM?document.createElement("div"):null,l=/^\s*<(\w+)/;t.exports=o}).call(this,e("_process"))},{"./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","./createArrayFromMixed":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/createArrayFromMixed.js","./getMarkupWrap":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getMarkupWrap.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/dangerousStyleValue.js":[function(e,t,n){"use strict";function r(e,t){var n=null==t||"boolean"==typeof t||""===t;if(n)return"";var r=isNaN(t);return r||0===t||s.hasOwnProperty(e)&&s[e]?""+t:("string"==typeof t&&(t=t.trim()),t+"px")}var o=e("./CSSProperty"),s=o.isUnitlessNumber;t.exports=r},{"./CSSProperty":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/CSSProperty.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyFunction.js":[function(e,t,n){function r(e){return function(){return e}}function o(){}o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},t.exports=o},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyObject.js":[function(e,t,n){(function(e){"use strict";var n={};"production"!==e.env.NODE_ENV&&Object.freeze(n),t.exports=n}).call(this,e("_process"))},{_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/escapeTextContentForBrowser.js":[function(e,t,n){"use strict";function r(e){return s[e]}function o(e){return(""+e).replace(i,r)}var s={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},i=/[&><"']/g;t.exports=o},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/findDOMNode.js":[function(e,t,n){(function(n){"use strict";function r(e){if("production"!==n.env.NODE_ENV){var t=o.current;null!==t&&("production"!==n.env.NODE_ENV?c(t._warnedAboutRefsInRender,"%s is accessing getDOMNode or findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",t.getName()||"A component"):null,t._warnedAboutRefsInRender=!0)}return null==e?null:u(e)?e:s.has(e)?i.getNodeFromInstance(e):("production"!==n.env.NODE_ENV?a(null==e.render||"function"!=typeof e.render,"Component (with keys: %s) contains `render` method but is not mounted in the DOM",Object.keys(e)):a(null==e.render||"function"!=typeof e.render),void("production"!==n.env.NODE_ENV?a(!1,"Element appears to be neither ReactComponent nor DOMNode (keys: %s)",Object.keys(e)):a(!1)))}var o=e("./ReactCurrentOwner"),s=e("./ReactInstanceMap"),i=e("./ReactMount"),a=e("./invariant"),u=e("./isNode"),c=e("./warning");t.exports=r}).call(this,e("_process"))},{"./ReactCurrentOwner":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactCurrentOwner.js","./ReactInstanceMap":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceMap.js","./ReactMount":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactMount.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./isNode":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/isNode.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/flattenChildren.js":[function(e,t,n){(function(n){"use strict";function r(e,t,r){var o=e,s=!o.hasOwnProperty(r);"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?i(s,"flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",r):null),s&&null!=t&&(o[r]=t)}function o(e){if(null==e)return e;var t={};return s(e,r,t),t}var s=e("./traverseAllChildren"),i=e("./warning");t.exports=o}).call(this,e("_process"))},{"./traverseAllChildren":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/traverseAllChildren.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/focusNode.js":[function(e,t,n){"use strict";function r(e){try{e.focus()}catch(t){}}t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/forEachAccumulated.js":[function(e,t,n){"use strict";var r=function(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)};t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getActiveElement.js":[function(e,t,n){function r(){try{return document.activeElement||document.body}catch(e){return document.body}}t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventCharCode.js":[function(e,t,n){"use strict";function r(e){var t,n=e.keyCode;return"charCode"in e?(t=e.charCode,0===t&&13===n&&(t=13)):t=n,t>=32||13===t?t:0}t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventKey.js":[function(e,t,n){"use strict";function r(e){if(e.key){var t=s[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var n=o(e);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?i[e.keyCode]||"Unidentified":""}var o=e("./getEventCharCode"),s={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},i={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};t.exports=r},{"./getEventCharCode":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventCharCode.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventModifierState.js":[function(e,t,n){"use strict";function r(e){var t=this,n=t.nativeEvent;if(n.getModifierState)return n.getModifierState(e);var r=s[e];return r?!!n[r]:!1}function o(e){return r}var s={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};t.exports=o},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getEventTarget.js":[function(e,t,n){"use strict";function r(e){var t=e.target||e.srcElement||window;return 3===t.nodeType?t.parentNode:t}t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getIteratorFn.js":[function(e,t,n){"use strict";function r(e){var t=e&&(o&&e[o]||e[s]);return"function"==typeof t?t:void 0}var o="function"==typeof Symbol&&Symbol.iterator,s="@@iterator";t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getMarkupWrap.js":[function(e,t,n){(function(n){function r(e){return"production"!==n.env.NODE_ENV?s(!!i,"Markup wrapping node not initialized"):s(!!i),d.hasOwnProperty(e)||(e="*"),a.hasOwnProperty(e)||(i.innerHTML="*"===e?"<link />":"<"+e+"></"+e+">",a[e]=!i.firstChild),a[e]?d[e]:null}var o=e("./ExecutionEnvironment"),s=e("./invariant"),i=o.canUseDOM?document.createElement("div"):null,a={circle:!0,clipPath:!0,defs:!0,ellipse:!0,g:!0,line:!0,linearGradient:!0,path:!0,polygon:!0,polyline:!0,radialGradient:!0,rect:!0,stop:!0,text:!0},u=[1,'<select multiple="true">',"</select>"],c=[1,"<table>","</table>"],l=[3,"<table><tbody><tr>","</tr></tbody></table>"],p=[1,"<svg>","</svg>"],d={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:u,option:u,caption:c,colgroup:c,tbody:c,tfoot:c,thead:c,td:l,th:l,circle:p,clipPath:p,defs:p,ellipse:p,g:p,line:p,linearGradient:p,path:p,polygon:p,polyline:p,radialGradient:p,rect:p,stop:p,text:p};t.exports=r}).call(this,e("_process"))},{"./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getNodeForCharacterOffset.js":[function(e,t,n){"use strict";function r(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function o(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function s(e,t){for(var n=r(e),s=0,i=0;n;){if(3===n.nodeType){if(i=s+n.textContent.length,t>=s&&i>=t)return{node:n,offset:t-s};s=i}n=r(o(n))}}t.exports=s},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getReactRootElementInContainer.js":[function(e,t,n){"use strict";function r(e){return e?e.nodeType===o?e.documentElement:e.firstChild:null}var o=9;t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getTextContentAccessor.js":[function(e,t,n){"use strict";function r(){return!s&&o.canUseDOM&&(s="textContent"in document.documentElement?"textContent":"innerText"),s}var o=e("./ExecutionEnvironment"),s=null;t.exports=r},{"./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getUnboundedScrollPosition.js":[function(e,t,n){"use strict";function r(e){return e===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:e.scrollLeft,y:e.scrollTop}}t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/hyphenate.js":[function(e,t,n){function r(e){return e.replace(o,"-$1").toLowerCase()}var o=/([A-Z])/g;t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/hyphenateStyleName.js":[function(e,t,n){"use strict";function r(e){return o(e).replace(s,"-ms-")}var o=e("./hyphenate"),s=/^ms-/;t.exports=r},{"./hyphenate":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/hyphenate.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/instantiateReactComponent.js":[function(e,t,n){(function(n){"use strict";function r(e){return"function"==typeof e&&"undefined"!=typeof e.prototype&&"function"==typeof e.prototype.mountComponent&&"function"==typeof e.prototype.receiveComponent}function o(e,t){var o;if((null===e||e===!1)&&(e=i.emptyElement),"object"==typeof e){var s=e;"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?l(s&&("function"==typeof s.type||"string"==typeof s.type),"Only functions or strings can be mounted as React components."):null),o=t===s.type&&"string"==typeof s.type?a.createInternalComponent(s):r(s.type)?new s.type(s):new p}else"string"==typeof e||"number"==typeof e?o=a.createInstanceForText(e):"production"!==n.env.NODE_ENV?c(!1,"Encountered invalid React node of type %s",typeof e):c(!1);return"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?l("function"==typeof o.construct&&"function"==typeof o.mountComponent&&"function"==typeof o.receiveComponent&&"function"==typeof o.unmountComponent,"Only React Components can be mounted."):null),o.construct(e),o._mountIndex=0,o._mountImage=null,"production"!==n.env.NODE_ENV&&(o._isOwnerNecessary=!1,o._warnedAboutRefsInRender=!1),"production"!==n.env.NODE_ENV&&Object.preventExtensions&&Object.preventExtensions(o),o}var s=e("./ReactCompositeComponent"),i=e("./ReactEmptyComponent"),a=e("./ReactNativeComponent"),u=e("./Object.assign"),c=e("./invariant"),l=e("./warning"),p=function(){};u(p.prototype,s.Mixin,{_instantiateReactComponent:o}),t.exports=o}).call(this,e("_process"))},{"./Object.assign":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/Object.assign.js","./ReactCompositeComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactCompositeComponent.js","./ReactEmptyComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactEmptyComponent.js","./ReactNativeComponent":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactNativeComponent.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js":[function(e,t,n){(function(e){"use strict";var n=function(t,n,r,o,s,i,a,u){if("production"!==e.env.NODE_ENV&&void 0===n)throw new Error("invariant requires an error message argument");if(!t){var c;if(void 0===n)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[r,o,s,i,a,u],p=0;c=new Error("Invariant Violation: "+n.replace(/%s/g,function(){return l[p++]}))}throw c.framesToPop=1,c}};t.exports=n}).call(this,e("_process"))},{_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/isEventSupported.js":[function(e,t,n){"use strict";function r(e,t){if(!s.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,r=n in document;if(!r){var i=document.createElement("div");i.setAttribute(n,"return;"),r="function"==typeof i[n]}return!r&&o&&"wheel"===e&&(r=document.implementation.hasFeature("Events.wheel","3.0")),r}var o,s=e("./ExecutionEnvironment");s.canUseDOM&&(o=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),t.exports=r},{"./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/isNode.js":[function(e,t,n){function r(e){return!(!e||!("function"==typeof Node?e instanceof Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/isTextInputElement.js":[function(e,t,n){"use strict";function r(e){return e&&("INPUT"===e.nodeName&&o[e.type]||"TEXTAREA"===e.nodeName)}var o={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/isTextNode.js":[function(e,t,n){function r(e){return o(e)&&3==e.nodeType}var o=e("./isNode");t.exports=r},{"./isNode":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/isNode.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyMirror.js":[function(e,t,n){(function(n){"use strict";var r=e("./invariant"),o=function(e){var t,o={};"production"!==n.env.NODE_ENV?r(e instanceof Object&&!Array.isArray(e),"keyMirror(...): Argument must be an object."):r(e instanceof Object&&!Array.isArray(e));for(t in e)e.hasOwnProperty(t)&&(o[t]=t);return o};t.exports=o;

}).call(this,e("_process"))},{"./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/keyOf.js":[function(e,t,n){var r=function(e){var t;for(t in e)if(e.hasOwnProperty(t))return t;return null};t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/mapObject.js":[function(e,t,n){"use strict";function r(e,t,n){if(!e)return null;var r={};for(var s in e)o.call(e,s)&&(r[s]=t.call(n,e[s],s,e));return r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/memoizeStringOnly.js":[function(e,t,n){"use strict";function r(e){var t={};return function(n){return t.hasOwnProperty(n)||(t[n]=e.call(this,n)),t[n]}}t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/onlyChild.js":[function(e,t,n){(function(n){"use strict";function r(e){return"production"!==n.env.NODE_ENV?s(o.isValidElement(e),"onlyChild must be passed a children with exactly one child."):s(o.isValidElement(e)),e}var o=e("./ReactElement"),s=e("./invariant");t.exports=r}).call(this,e("_process"))},{"./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/performance.js":[function(e,t,n){"use strict";var r,o=e("./ExecutionEnvironment");o.canUseDOM&&(r=window.performance||window.msPerformance||window.webkitPerformance),t.exports=r||{}},{"./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/performanceNow.js":[function(e,t,n){var r=e("./performance");r&&r.now||(r=Date);var o=r.now.bind(r);t.exports=o},{"./performance":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/performance.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/quoteAttributeValueForBrowser.js":[function(e,t,n){"use strict";function r(e){return'"'+o(e)+'"'}var o=e("./escapeTextContentForBrowser");t.exports=r},{"./escapeTextContentForBrowser":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/escapeTextContentForBrowser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/setInnerHTML.js":[function(e,t,n){"use strict";var r=e("./ExecutionEnvironment"),o=/^[ \r\n\t\f]/,s=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,i=function(e,t){e.innerHTML=t};if("undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction&&(i=function(e,t){MSApp.execUnsafeLocalFunction(function(){e.innerHTML=t})}),r.canUseDOM){var a=document.createElement("div");a.innerHTML=" ",""===a.innerHTML&&(i=function(e,t){if(e.parentNode&&e.parentNode.replaceChild(e,e),o.test(t)||"<"===t[0]&&s.test(t)){e.innerHTML="\ufeff"+t;var n=e.firstChild;1===n.data.length?e.removeChild(n):n.deleteData(0,1)}else e.innerHTML=t})}t.exports=i},{"./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/setTextContent.js":[function(e,t,n){"use strict";var r=e("./ExecutionEnvironment"),o=e("./escapeTextContentForBrowser"),s=e("./setInnerHTML"),i=function(e,t){e.textContent=t};r.canUseDOM&&("textContent"in document.documentElement||(i=function(e,t){s(e,o(t))})),t.exports=i},{"./ExecutionEnvironment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ExecutionEnvironment.js","./escapeTextContentForBrowser":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/escapeTextContentForBrowser.js","./setInnerHTML":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/setInnerHTML.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/shallowEqual.js":[function(e,t,n){"use strict";function r(e,t){if(e===t)return!0;var n;for(n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||e[n]!==t[n]))return!1;for(n in t)if(t.hasOwnProperty(n)&&!e.hasOwnProperty(n))return!1;return!0}t.exports=r},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/shouldUpdateReactComponent.js":[function(e,t,n){(function(n){"use strict";function r(e,t){if(null!=e&&null!=t){var r=typeof e,s=typeof t;if("string"===r||"number"===r)return"string"===s||"number"===s;if("object"===s&&e.type===t.type&&e.key===t.key){var i=e._owner===t._owner,a=null,u=null,c=null;return"production"!==n.env.NODE_ENV&&(i||(null!=e._owner&&null!=e._owner.getPublicInstance()&&null!=e._owner.getPublicInstance().constructor&&(a=e._owner.getPublicInstance().constructor.displayName),null!=t._owner&&null!=t._owner.getPublicInstance()&&null!=t._owner.getPublicInstance().constructor&&(u=t._owner.getPublicInstance().constructor.displayName),null!=t.type&&null!=t.type.displayName&&(c=t.type.displayName),null!=t.type&&"string"==typeof t.type&&(c=t.type),("string"!=typeof t.type||"input"===t.type||"textarea"===t.type)&&(null!=e._owner&&e._owner._isOwnerNecessary===!1||null!=t._owner&&t._owner._isOwnerNecessary===!1)&&(null!=e._owner&&(e._owner._isOwnerNecessary=!0),null!=t._owner&&(t._owner._isOwnerNecessary=!0),"production"!==n.env.NODE_ENV?o(!1,"<%s /> is being rendered by both %s and %s using the same key (%s) in the same place. Currently, this means that they don't preserve state. This behavior should be very rare so we're considering deprecating it. Please contact the React team and explain your use case so that we can take that into consideration.",c||"Unknown Component",a||"[Unknown]",u||"[Unknown]",e.key):null))),i}}return!1}var o=e("./warning");t.exports=r}).call(this,e("_process"))},{"./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/toArray.js":[function(e,t,n){(function(n){function r(e){var t=e.length;if("production"!==n.env.NODE_ENV?o(!Array.isArray(e)&&("object"==typeof e||"function"==typeof e),"toArray: Array-like object expected"):o(!Array.isArray(e)&&("object"==typeof e||"function"==typeof e)),"production"!==n.env.NODE_ENV?o("number"==typeof t,"toArray: Object needs a length property"):o("number"==typeof t),"production"!==n.env.NODE_ENV?o(0===t||t-1 in e,"toArray: Object should have keys for indices"):o(0===t||t-1 in e),e.hasOwnProperty)try{return Array.prototype.slice.call(e)}catch(r){}for(var s=Array(t),i=0;t>i;i++)s[i]=e[i];return s}var o=e("./invariant");t.exports=r}).call(this,e("_process"))},{"./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/traverseAllChildren.js":[function(e,t,n){(function(n){"use strict";function r(e){return _[e]}function o(e,t){return e&&null!=e.key?i(e.key):t.toString(36)}function s(e){return(""+e).replace(y,r)}function i(e){return"$"+s(e)}function a(e,t,r,s,u){var p=typeof e;if(("undefined"===p||"boolean"===p)&&(e=null),null===e||"string"===p||"number"===p||c.isValidElement(e))return s(u,e,""===t?h+o(e,0):t,r),1;var _,y,b,j=0;if(Array.isArray(e))for(var w=0;w<e.length;w++)_=e[w],y=(""!==t?t+v:h)+o(_,w),b=r+j,j+=a(_,y,b,s,u);else{var E=d(e);if(E){var D,P=E.call(e);if(E!==e.entries)for(var R=0;!(D=P.next()).done;)_=D.value,y=(""!==t?t+v:h)+o(_,R++),b=r+j,j+=a(_,y,b,s,u);else for("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?f(g,"Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead."):null,g=!0);!(D=P.next()).done;){var C=D.value;C&&(_=C[1],y=(""!==t?t+v:h)+i(C[0])+v+o(_,0),b=r+j,j+=a(_,y,b,s,u))}}else if("object"===p){"production"!==n.env.NODE_ENV?m(1!==e.nodeType,"traverseAllChildren(...): Encountered an invalid child; DOM elements are not valid children of React components."):m(1!==e.nodeType);var U=l.extract(e);for(var O in U)U.hasOwnProperty(O)&&(_=U[O],y=(""!==t?t+v:h)+i(O)+v+o(_,0),b=r+j,j+=a(_,y,b,s,u))}}return j}function u(e,t,n){return null==e?0:a(e,"",0,t,n)}var c=e("./ReactElement"),l=e("./ReactFragment"),p=e("./ReactInstanceHandles"),d=e("./getIteratorFn"),m=e("./invariant"),f=e("./warning"),h=p.SEPARATOR,v=":",_={"=":"=0",".":"=1",":":"=2"},y=/[=.:]/g,g=!1;t.exports=u}).call(this,e("_process"))},{"./ReactElement":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactElement.js","./ReactFragment":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactFragment.js","./ReactInstanceHandles":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/ReactInstanceHandles.js","./getIteratorFn":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/getIteratorFn.js","./invariant":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/invariant.js","./warning":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/warning.js":[function(e,t,n){(function(n){"use strict";var r=e("./emptyFunction"),o=r;"production"!==n.env.NODE_ENV&&(o=function(e,t){for(var n=[],r=2,o=arguments.length;o>r;r++)n.push(arguments[r]);if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(t.length<10||/^[s\W]*$/.test(t))throw new Error("The warning format should be able to uniquely identify this warning. Please, use a more descriptive format than: "+t);if(0!==t.indexOf("Failed Composite propType: ")&&!e){var s=0,i="Warning: "+t.replace(/%s/g,function(){return n[s++]});console.warn(i);try{throw new Error(i)}catch(a){}}}),t.exports=o}).call(this,e("_process"))},{"./emptyFunction":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/emptyFunction.js",_process:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/browserify/node_modules/process/browser.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/react.js":[function(e,t,n){t.exports=e("./lib/React")},{"./lib/React":"/Users/Dane/Projects/meetup/twitter-stream/node_modules/react/lib/React.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/superagent/lib/client.js":[function(e,t,n){function r(){}function o(e){var t={}.toString.call(e);switch(t){case"[object File]":case"[object Blob]":case"[object FormData]":return!0;default:return!1}}function s(e){return e===Object(e)}function i(e){if(!s(e))return e;var t=[];for(var n in e)null!=e[n]&&t.push(encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t.join("&")}function a(e){for(var t,n,r={},o=e.split("&"),s=0,i=o.length;i>s;++s)n=o[s],t=n.split("="),r[decodeURIComponent(t[0])]=decodeURIComponent(t[1]);return r}function u(e){var t,n,r,o,s=e.split(/\r?\n/),i={};s.pop();for(var a=0,u=s.length;u>a;++a)n=s[a],t=n.indexOf(":"),r=n.slice(0,t).toLowerCase(),o=_(n.slice(t+1)),i[r]=o;return i}function c(e){return e.split(/ *; */).shift()}function l(e){return h(e.split(/ *; */),function(e,t){var n=t.split(/ *= */),r=n.shift(),o=n.shift();return r&&o&&(e[r]=o),e},{})}function p(e,t){t=t||{},this.req=e,this.xhr=this.req.xhr,this.text="HEAD"!=this.req.method&&(""===this.xhr.responseType||"text"===this.xhr.responseType)||"undefined"==typeof this.xhr.responseType?this.xhr.responseText:null,this.statusText=this.req.xhr.statusText,this.setStatusProperties(this.xhr.status),this.header=this.headers=u(this.xhr.getAllResponseHeaders()),this.header["content-type"]=this.xhr.getResponseHeader("content-type"),this.setHeaderProperties(this.header),this.body="HEAD"!=this.req.method?this.parseBody(this.text?this.text:this.xhr.response):null}function d(e,t){var n=this;f.call(this),this._query=this._query||[],this.method=e,this.url=t,this.header={},this._header={},this.on("end",function(){var e=null,t=null;try{t=new p(n)}catch(r){return e=new Error("Parser is unable to parse the response"),e.parse=!0,e.original=r,n.callback(e)}if(n.emit("response",t),e)return n.callback(e,t);if(t.status>=200&&t.status<300)return n.callback(e,t);var o=new Error(t.statusText||"Unsuccessful HTTP response");o.original=e,o.response=t,o.status=t.status,n.callback(e||o,t)})}function m(e,t){return"function"==typeof t?new d("GET",e).end(t):1==arguments.length?new d("GET",e):new d(e,t)}var f=e("emitter"),h=e("reduce"),v="undefined"==typeof window?this||self:window;m.getXHR=function(){if(!(!v.XMLHttpRequest||v.location&&"file:"==v.location.protocol&&v.ActiveXObject))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(e){}try{return new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(e){}try{return new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(e){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(e){}return!1};var _="".trim?function(e){return e.trim()}:function(e){return e.replace(/(^\s*|\s*$)/g,"")};m.serializeObject=i,m.parseString=a,m.types={html:"text/html",json:"application/json",xml:"application/xml",urlencoded:"application/x-www-form-urlencoded",form:"application/x-www-form-urlencoded","form-data":"application/x-www-form-urlencoded"},m.serialize={"application/x-www-form-urlencoded":i,"application/json":JSON.stringify},m.parse={"application/x-www-form-urlencoded":a,"application/json":JSON.parse},p.prototype.get=function(e){return this.header[e.toLowerCase()]},p.prototype.setHeaderProperties=function(e){var t=this.header["content-type"]||"";this.type=c(t);var n=l(t);for(var r in n)this[r]=n[r]},p.prototype.parseBody=function(e){var t=m.parse[this.type];return t&&e&&(e.length||e instanceof Object)?t(e):null},p.prototype.setStatusProperties=function(e){1223===e&&(e=204);var t=e/100|0;this.status=e,this.statusType=t,this.info=1==t,this.ok=2==t,this.clientError=4==t,this.serverError=5==t,this.error=4==t||5==t?this.toError():!1,this.accepted=202==e,this.noContent=204==e,this.badRequest=400==e,this.unauthorized=401==e,this.notAcceptable=406==e,this.notFound=404==e,this.forbidden=403==e},p.prototype.toError=function(){var e=this.req,t=e.method,n=e.url,r="cannot "+t+" "+n+" ("+this.status+")",o=new Error(r);return o.status=this.status,o.method=t,o.url=n,o},m.Response=p,f(d.prototype),d.prototype.use=function(e){return e(this),this},d.prototype.timeout=function(e){return this._timeout=e,this},d.prototype.clearTimeout=function(){return this._timeout=0,clearTimeout(this._timer),this},d.prototype.abort=function(){return this.aborted?void 0:(this.aborted=!0,this.xhr.abort(),this.clearTimeout(),this.emit("abort"),this)},d.prototype.set=function(e,t){if(s(e)){for(var n in e)this.set(n,e[n]);return this}return this._header[e.toLowerCase()]=t,this.header[e]=t,this},d.prototype.unset=function(e){return delete this._header[e.toLowerCase()],delete this.header[e],this},d.prototype.getHeader=function(e){return this._header[e.toLowerCase()]},d.prototype.type=function(e){return this.set("Content-Type",m.types[e]||e),this},d.prototype.accept=function(e){return this.set("Accept",m.types[e]||e),this},d.prototype.auth=function(e,t){var n=btoa(e+":"+t);return this.set("Authorization","Basic "+n),this},d.prototype.query=function(e){return"string"!=typeof e&&(e=i(e)),e&&this._query.push(e),this},d.prototype.field=function(e,t){return this._formData||(this._formData=new v.FormData),this._formData.append(e,t),this},d.prototype.attach=function(e,t,n){return this._formData||(this._formData=new v.FormData),this._formData.append(e,t,n),this},d.prototype.send=function(e){var t=s(e),n=this.getHeader("Content-Type");if(t&&s(this._data))for(var r in e)this._data[r]=e[r];else"string"==typeof e?(n||this.type("form"),n=this.getHeader("Content-Type"),this._data="application/x-www-form-urlencoded"==n?this._data?this._data+"&"+e:e:(this._data||"")+e):this._data=e;return!t||o(e)?this:(n||this.type("json"),this)},d.prototype.callback=function(e,t){var n=this._callback;this.clearTimeout(),n(e,t)},d.prototype.crossDomainError=function(){var e=new Error("Origin is not allowed by Access-Control-Allow-Origin");e.crossDomain=!0,this.callback(e)},d.prototype.timeoutError=function(){var e=this._timeout,t=new Error("timeout of "+e+"ms exceeded");t.timeout=e,this.callback(t)},d.prototype.withCredentials=function(){return this._withCredentials=!0,this},d.prototype.end=function(e){var t=this,n=this.xhr=m.getXHR(),s=this._query.join("&"),i=this._timeout,a=this._formData||this._data;this._callback=e||r,n.onreadystatechange=function(){if(4==n.readyState){var e;try{e=n.status}catch(r){e=0}if(0==e){if(t.timedout)return t.timeoutError();if(t.aborted)return;return t.crossDomainError()}t.emit("end")}};var u=function(e){e.total>0&&(e.percent=e.loaded/e.total*100),t.emit("progress",e)};this.hasListeners("progress")&&(n.onprogress=u);try{n.upload&&this.hasListeners("progress")&&(n.upload.onprogress=u)}catch(c){}if(i&&!this._timer&&(this._timer=setTimeout(function(){t.timedout=!0,t.abort()},i)),s&&(s=m.serializeObject(s),this.url+=~this.url.indexOf("?")?"&"+s:"?"+s),n.open(this.method,this.url,!0),this._withCredentials&&(n.withCredentials=!0),"GET"!=this.method&&"HEAD"!=this.method&&"string"!=typeof a&&!o(a)){var l=m.serialize[this.getHeader("Content-Type")];l&&(a=l(a))}for(var p in this.header)null!=this.header[p]&&n.setRequestHeader(p,this.header[p]);return this.emit("request",this),n.send(a),this},m.Request=d,m.get=function(e,t,n){var r=m("GET",e);return"function"==typeof t&&(n=t,t=null),t&&r.query(t),n&&r.end(n),r},m.head=function(e,t,n){var r=m("HEAD",e);return"function"==typeof t&&(n=t,t=null),t&&r.send(t),n&&r.end(n),r},m.del=function(e,t){var n=m("DELETE",e);return t&&n.end(t),n},m.patch=function(e,t,n){var r=m("PATCH",e);return"function"==typeof t&&(n=t,t=null),t&&r.send(t),n&&r.end(n),r},m.post=function(e,t,n){var r=m("POST",e);return"function"==typeof t&&(n=t,t=null),t&&r.send(t),n&&r.end(n),r},m.put=function(e,t,n){var r=m("PUT",e);return"function"==typeof t&&(n=t,t=null),t&&r.send(t),n&&r.end(n),r},t.exports=m},{emitter:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/superagent/node_modules/component-emitter/index.js",reduce:"/Users/Dane/Projects/meetup/twitter-stream/node_modules/superagent/node_modules/reduce-component/index.js"}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/superagent/node_modules/component-emitter/index.js":[function(e,t,n){function r(e){return e?o(e):void 0}function o(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks[e]=this._callbacks[e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){r.off(e,n),t.apply(this,arguments)}var r=this;return this._callbacks=this._callbacks||{},n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n=this._callbacks[e];if(!n)return this;if(1==arguments.length)return delete this._callbacks[e],this;for(var r,o=0;o<n.length;o++)if(r=n[o],r===t||r.fn===t){n.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks[e];if(n){n=n.slice(0);for(var r=0,o=n.length;o>r;++r)n[r].apply(this,t)}return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks[e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},{}],"/Users/Dane/Projects/meetup/twitter-stream/node_modules/superagent/node_modules/reduce-component/index.js":[function(e,t,n){t.exports=function(e,t,n){for(var r=0,o=e.length,s=3==arguments.length?n:e[r++];o>r;)s=t.call(null,s,e[r],++r,e);return s}},{}]},{},["./app/index.js"]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJlIiwidCIsIm4iLCJyIiwicyIsIm8iLCJ1IiwiYSIsInJlcXVpcmUiLCJpIiwiZiIsIkVycm9yIiwiY29kZSIsImwiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsIi4vYXBwL2luZGV4LmpzIiwibW9kdWxlIiwiUmVhY3QiLCJSb3V0ZXIiLCJyb3V0ZXMiLCJydW4iLCJIYXNoTG9jYXRpb24iLCJSb290IiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsImRvY3VtZW50IiwiYm9keSIsIi4vcm91dGVzIiwicmVhY3QiLCJyZWFjdC1yb3V0ZXIiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vYXBwL2NvbXBvbmVudHMvQXBwLnJlYWN0LmpzIiwiSGVhZGVyIiwiUm91dGVIYW5kbGVyIiwiQXBwIiwiY3JlYXRlQ2xhc3MiLCJkaXNwbGF5TmFtZSIsImlkIiwiLi9IZWFkZXIucmVhY3QiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vYXBwL2NvbXBvbmVudHMvRm9vdGVyLnJlYWN0LmpzIiwiRm9vdGVyIiwiY2xhc3NOYW1lIiwiaHJlZiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9hcHAvY29tcG9uZW50cy9IZWFkZXIucmVhY3QuanMiLCJMaW5rIiwiXyIsImhhc2hJbnB1dFN1Ym1pdCIsImV2ZW50IiwiY2xvbmVEZWVwIiwia2V5Q29kZSIsImhhc2hMaW5rIiwiZ2V0RWxlbWVudEJ5SWQiLCJjbGljayIsImhhc2hJbnB1dENoYW5nZSIsInRhZyIsImVuY29kZVVSSUNvbXBvbmVudCIsInRhcmdldCIsInZhbHVlIiwidGhpcyIsInNldFN0YXRlIiwiZ2V0SW5pdGlhbFN0YXRlIiwic3RhdGUiLCJ0byIsInR5cGUiLCJvbkNoYW5nZSIsIm9uS2V5RG93biIsInBsYWNlaG9sZGVyIiwibG9kYXNoIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL2FwcC9jb21wb25lbnRzL2ZlZWQvRmVlZC5yZWFjdC5qcyIsIlR3ZWV0IiwiRmVlZCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJ0d2VldHMiLCJwcm9wcyIsInR3ZWV0Tm9kZXMiLCJtYXAiLCJ0d2VldCIsImtleSIsIi4vVHdlZXQucmVhY3QiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vYXBwL2NvbXBvbmVudHMvZmVlZC9Ud2VldC5yZWFjdC5qcyIsImxpbmsiLCJ1c2VyIiwic2NyZWVuX25hbWUiLCJzcmMiLCJwcm9maWxlX2ltYWdlX3VybCIsImFsdCIsIm5hbWUiLCJ0ZXh0IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL2FwcC9jb21wb25lbnRzL3BhZ2VzL0hhc2gucmVhY3QuanMiLCJyZXF1ZXN0IiwiUHJvbWlzZSIsIkhhc2giLCJnZXRUd2VldHMiLCJyZXNvbHZlIiwicmVqZWN0IiwiZ2V0IiwiZW5kIiwiZXJyIiwicmVzIiwicGFyYW1zIiwidGl0bGUiLCJzZWxmIiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJjb21wb25lbnREaWRNb3VudCIsIi4uL0Zvb3Rlci5yZWFjdCIsIi4uL2ZlZWQvRmVlZC5yZWFjdCIsImJsdWViaXJkIiwic3VwZXJhZ2VudCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9hcHAvY29tcG9uZW50cy9wYWdlcy9TdHJlYW0ucmVhY3QuanMiLCJTdHJlYW0iLCJjb3VudCIsInNvY2tldCIsImlvIiwiY29ubmVjdCIsIm9uIiwidW5zaGlmdCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9hcHAvcm91dGVzLmpzIiwiUm91dGUiLCJoYW5kbGVyIiwicGF0aCIsIi4vY29tcG9uZW50cy9BcHAucmVhY3QiLCIuL2NvbXBvbmVudHMvcGFnZXMvSGFzaC5yZWFjdCIsIi4vY29tcG9uZW50cy9wYWdlcy9TdHJlYW0ucmVhY3QiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2JsdWViaXJkL2pzL2Jyb3dzZXIvYmx1ZWJpcmQuanMiLCJwcm9jZXNzIiwiZ2xvYmFsIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiX2RlcmVxXyIsMSwiYW55IiwicHJvbWlzZXMiLCJyZXQiLCJTb21lUHJvbWlzZUFycmF5IiwicHJvbWlzZSIsInNldEhvd01hbnkiLCJzZXRVbndyYXAiLCJpbml0IiwiX1NvbWVQcm9taXNlQXJyYXkiLCJwcm90b3R5cGUiLDIsIkFzeW5jIiwiX2lzVGlja1VzZWQiLCJfbGF0ZVF1ZXVlIiwiUXVldWUiLCJfbm9ybWFsUXVldWUiLCJfdHJhbXBvbGluZUVuYWJsZWQiLCJkcmFpblF1ZXVlcyIsIl9kcmFpblF1ZXVlcyIsIl9zY2hlZHVsZSIsInNjaGVkdWxlIiwiaXNTdGF0aWMiLCJBc3luY0ludm9rZUxhdGVyIiwiZm4iLCJyZWNlaXZlciIsImFyZyIsInB1c2giLCJfcXVldWVUaWNrIiwiQXN5bmNJbnZva2UiLCJBc3luY1NldHRsZVByb21pc2VzIiwiX3B1c2hPbmUiLCJmaXJzdExpbmVFcnJvciIsInV0aWwiLCJkaXNhYmxlVHJhbXBvbGluZUlmTmVjZXNzYXJ5IiwiaGFzRGV2VG9vbHMiLCJlbmFibGVUcmFtcG9saW5lIiwic2V0VGltZW91dCIsImhhdmVJdGVtc1F1ZXVlZCIsInRocm93TGF0ZXIiLCJhcmd1bWVudHMiLCJpbnZva2VMYXRlciIsImludm9rZSIsInNldHRsZVByb21pc2VzIiwiX3NldHRsZVByb21pc2VzIiwiaW52b2tlRmlyc3QiLCJfZHJhaW5RdWV1ZSIsInF1ZXVlIiwic2hpZnQiLCJfcmVzZXQiLCIuL3F1ZXVlLmpzIiwiLi9zY2hlZHVsZS5qcyIsIi4vdXRpbC5qcyIsMywiSU5URVJOQUwiLCJ0cnlDb252ZXJ0VG9Qcm9taXNlIiwicmVqZWN0VGhpcyIsIl9yZWplY3QiLCJ0YXJnZXRSZWplY3RlZCIsImNvbnRleHQiLCJwcm9taXNlUmVqZWN0aW9uUXVldWVkIiwiYmluZGluZ1Byb21pc2UiLCJfdGhlbiIsImJpbmRpbmdSZXNvbHZlZCIsInRoaXNBcmciLCJfc2V0Qm91bmRUbyIsIl9pc1BlbmRpbmciLCJfcmVzb2x2ZUNhbGxiYWNrIiwiYmluZGluZ1JlamVjdGVkIiwiYmluZCIsIm1heWJlUHJvbWlzZSIsIl9wcm9wYWdhdGVGcm9tIiwiX3RhcmdldCIsIl9wcm9ncmVzcyIsIm9iaiIsInVuZGVmaW5lZCIsIl9iaXRGaWVsZCIsIl9ib3VuZFRvIiwiX2lzQm91bmQiLDQsIm5vQ29uZmxpY3QiLCJvbGQiLCIuL3Byb21pc2UuanMiLDUsImNyIiwiT2JqZWN0IiwiY3JlYXRlIiwiY2FsbGVyQ2FjaGUiLCJnZXR0ZXJDYWNoZSIsImVuc3VyZU1ldGhvZCIsIm1ldGhvZE5hbWUiLCJtZXNzYWdlIiwiY2xhc3NTdHJpbmciLCJ0b1N0cmluZyIsIlR5cGVFcnJvciIsImNhbGxlciIsInBvcCIsImFwcGx5IiwibmFtZWRHZXR0ZXIiLCJpbmRleGVkR2V0dGVyIiwiaW5kZXgiLCJNYXRoIiwibWF4IiwiZ2V0R2V0dGVyIiwiY2FuRXZhbHVhdGUiLCJpc0lkZW50aWZpZXIiLCIkX2xlbiIsImFyZ3MiLCJBcnJheSIsIiRfaSIsInByb3BlcnR5TmFtZSIsImdldHRlciIsImlzSW5kZXgiLCJtYXliZUdldHRlciIsNiwiZXJyb3JzIiwiYXN5bmMiLCJDYW5jZWxsYXRpb25FcnJvciIsIl9jYW5jZWwiLCJyZWFzb24iLCJpc0NhbmNlbGxhYmxlIiwicGFyZW50IiwicHJvbWlzZVRvUmVqZWN0IiwiX2NhbmNlbGxhdGlvblBhcmVudCIsIl91bnNldENhbmNlbGxhYmxlIiwiX3JlamVjdENhbGxiYWNrIiwiY2FuY2VsIiwiY2FuY2VsbGFibGUiLCJfY2FuY2VsbGFibGUiLCJfc2V0Q2FuY2VsbGFibGUiLCJ1bmNhbmNlbGxhYmxlIiwiZm9yayIsImRpZEZ1bGZpbGwiLCJkaWRSZWplY3QiLCJkaWRQcm9ncmVzcyIsIi4vYXN5bmMuanMiLCIuL2Vycm9ycy5qcyIsNywiQ2FwdHVyZWRUcmFjZSIsIl9wYXJlbnQiLCJfbGVuZ3RoIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJ1bmN5Y2xlIiwicmVjb25zdHJ1Y3RTdGFjayIsInN0YWNrcyIsImpvaW4iLCJyZW1vdmVEdXBsaWNhdGVPckVtcHR5SnVtcHMiLCJzcGxpY2UiLCJyZW1vdmVDb21tb25Sb290cyIsImN1cnJlbnQiLCJwcmV2IiwiY3VycmVudExhc3RJbmRleCIsImN1cnJlbnRMYXN0TGluZSIsImNvbW1vblJvb3RNZWV0UG9pbnQiLCJqIiwibGluZSIsImNsZWFuU3RhY2siLCJzdGFjayIsImlzVHJhY2VMaW5lIiwic3RhY2tGcmFtZVBhdHRlcm4iLCJ0ZXN0IiwiaXNJbnRlcm5hbEZyYW1lIiwic2hvdWxkSWdub3JlIiwiaW5kZW50U3RhY2tGcmFtZXMiLCJjaGFyQXQiLCJzdGFja0ZyYW1lc0FzQXJyYXkiLCJlcnJvciIsInJlcGxhY2UiLCJzcGxpdCIsInNsaWNlIiwiZm9ybWF0Tm9uRXJyb3IiLCJzdHIiLCJydXNlbGVzc1RvU3RyaW5nIiwibmV3U3RyIiwiSlNPTiIsInN0cmluZ2lmeSIsInNuaXAiLCJtYXhDaGFycyIsInN1YnN0ciIsInBhcnNlTGluZUluZm8iLCJtYXRjaGVzIiwibWF0Y2giLCJwYXJzZUxpbmVJbmZvUmVnZXgiLCJmaWxlTmFtZSIsInBhcnNlSW50Iiwid2FybiIsImJsdWViaXJkRnJhbWVQYXR0ZXJuIiwiZm9ybWF0U3RhY2siLCJpbmhlcml0cyIsIm5vZGVzIiwic3RhY2tUb0luZGV4Iiwibm9kZSIsImN1cnJlbnRTdGFjayIsImN5Y2xlRWRnZU5vZGUiLCJjdXJyZW50Q2hpbGRMZW5ndGgiLCJoYXNQYXJlbnQiLCJhdHRhY2hFeHRyYVRyYWNlIiwiX19zdGFja0NsZWFuZWRfXyIsInBhcnNlZCIsInBhcnNlU3RhY2tBbmRNZXNzYWdlIiwidHJhY2UiLCJub3RFbnVtZXJhYmxlUHJvcCIsImZvcm1hdEFuZExvZ0Vycm9yIiwiU3RyaW5nIiwidW5oYW5kbGVkUmVqZWN0aW9uIiwiaXNTdXBwb3J0ZWQiLCJmaXJlUmVqZWN0aW9uRXZlbnQiLCJsb2NhbEhhbmRsZXIiLCJsb2NhbEV2ZW50RmlyZWQiLCJnbG9iYWxFdmVudEZpcmVkIiwiZmlyZUdsb2JhbEV2ZW50IiwiZG9tRXZlbnRGaXJlZCIsImZpcmVEb21FdmVudCIsInRvTG93ZXJDYXNlIiwic2V0Qm91bmRzIiwibGFzdExpbmVFcnJvciIsImZpcnN0RmlsZU5hbWUiLCJsYXN0RmlsZU5hbWUiLCJmaXJzdFN0YWNrTGluZXMiLCJsYXN0U3RhY2tMaW5lcyIsImZpcnN0SW5kZXgiLCJsYXN0SW5kZXgiLCJyZXN1bHQiLCJpbmZvIiwidjhzdGFja0ZyYW1lUGF0dGVybiIsInY4c3RhY2tGb3JtYXR0ZXIiLCJzdGFja1RyYWNlTGltaXQiLCJpZ25vcmVVbnRpbCIsImluZGV4T2YiLCJoYXNTdGFja0FmdGVyVGhyb3ciLCJpc05vZGUiLCJlbWl0IiwiY3VzdG9tRXZlbnRXb3JrcyIsImFueUV2ZW50V29ya3MiLCJldiIsIkN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZGV0YWlsIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0b1dpbmRvd01ldGhvZE5hbWVNYXAiLCJtZXRob2QiLCJzdGRlcnIiLCJpc1RUWSIsIndyaXRlIiw4LCJORVhUX0ZJTFRFUiIsIkNhdGNoRmlsdGVyIiwiaW5zdGFuY2VzIiwiY2FsbGJhY2siLCJfaW5zdGFuY2VzIiwiX2NhbGxiYWNrIiwiX3Byb21pc2UiLCJzYWZlUHJlZGljYXRlIiwicHJlZGljYXRlIiwic2FmZU9iamVjdCIsInJldGZpbHRlciIsInRyeUNhdGNoIiwiZXJyb3JPYmoiLCJzYWZlS2V5cyIsImtleXMiLCJkb0ZpbHRlciIsImNiIiwiYm91bmRUbyIsImxlbiIsIml0ZW0iLCJpdGVtSXNFcnJvclR5cGUiLCJzaG91bGRIYW5kbGUiLCIuL2VzNS5qcyIsOSwiaXNEZWJ1Z2dpbmciLCJDb250ZXh0IiwiX3RyYWNlIiwicGVla0NvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiY29udGV4dFN0YWNrIiwiX3B1c2hDb250ZXh0IiwiX3BvcENvbnRleHQiLCJfcGVla0NvbnRleHQiLDEwLCJ1bmhhbmRsZWRSZWplY3Rpb25IYW5kbGVkIiwicG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb24iLCJnZXREb21haW4iLCJfZ2V0RG9tYWluIiwiV2FybmluZyIsImNhbkF0dGFjaFRyYWNlIiwiZGVidWdnaW5nIiwiZW52IiwiX2lnbm9yZVJlamVjdGlvbnMiLCJfdW5zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZCIsIl9lbnN1cmVQb3NzaWJsZVJlamVjdGlvbkhhbmRsZWQiLCJfc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQiLCJfbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uIiwiX25vdGlmeVVuaGFuZGxlZFJlamVjdGlvbklzSGFuZGxlZCIsIl9pc1JlamVjdGlvblVuaGFuZGxlZCIsIl9nZXRDYXJyaWVkU3RhY2tUcmFjZSIsIl9zZXR0bGVkVmFsdWUiLCJfc2V0VW5oYW5kbGVkUmVqZWN0aW9uSXNOb3RpZmllZCIsIl91bnNldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQiLCJfaXNVbmhhbmRsZWRSZWplY3Rpb25Ob3RpZmllZCIsIl9zZXRDYXJyaWVkU3RhY2tUcmFjZSIsImNhcHR1cmVkVHJhY2UiLCJfZnVsZmlsbG1lbnRIYW5kbGVyMCIsIl9pc0NhcnJ5aW5nU3RhY2tUcmFjZSIsIl9jYXB0dXJlU3RhY2tUcmFjZSIsIl9hdHRhY2hFeHRyYVRyYWNlIiwiaWdub3JlU2VsZiIsIl93YXJuIiwid2FybmluZyIsImN0eCIsIm9uUG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb24iLCJkb21haW4iLCJvblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZWQiLCJsb25nU3RhY2tUcmFjZXMiLCJoYXNMb25nU3RhY2tUcmFjZXMiLDExLCJpc1ByaW1pdGl2ZSIsInJldHVybmVyIiwidGhyb3dlciIsInJldHVyblVuZGVmaW5lZCIsInRocm93VW5kZWZpbmVkIiwid3JhcHBlciIsImFjdGlvbiIsInRoZW5SZXR1cm4iLCJ0aGVuVGhyb3ciLDEyLCJQcm9taXNlUmVkdWNlIiwicmVkdWNlIiwiZWFjaCIsMTMsInN1YkVycm9yIiwibmFtZVByb3BlcnR5IiwiZGVmYXVsdE1lc3NhZ2UiLCJTdWJFcnJvciIsImNvbnN0cnVjdG9yIiwiT3BlcmF0aW9uYWxFcnJvciIsImNhdXNlIiwiX1R5cGVFcnJvciIsIl9SYW5nZUVycm9yIiwiZXM1IiwiT2JqZWN0ZnJlZXplIiwiZnJlZXplIiwiVGltZW91dEVycm9yIiwiQWdncmVnYXRlRXJyb3IiLCJSYW5nZUVycm9yIiwibWV0aG9kcyIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJlbnVtZXJhYmxlIiwibGV2ZWwiLCJpbmRlbnQiLCJsaW5lcyIsImVycm9yVHlwZXMiLCJSZWplY3Rpb25FcnJvciIsMTQsImlzRVM1IiwiZ2V0RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldFByb3RvdHlwZU9mIiwiaXNBcnJheSIsInByb3BlcnR5SXNXcml0YWJsZSIsInByb3AiLCJkZXNjcmlwdG9yIiwic2V0IiwiaGFzIiwiaGFzT3duUHJvcGVydHkiLCJwcm90byIsIk9iamVjdEtleXMiLCJPYmplY3RHZXREZXNjcmlwdG9yIiwiT2JqZWN0RGVmaW5lUHJvcGVydHkiLCJkZXNjIiwiT2JqZWN0RnJlZXplIiwiT2JqZWN0R2V0UHJvdG90eXBlT2YiLCJBcnJheUlzQXJyYXkiLDE1LCJQcm9taXNlTWFwIiwiZmlsdGVyIiwib3B0aW9ucyIsMTYsInJldHVyblRoaXMiLCJ0aHJvd1RoaXMiLCJyZXR1cm4kIiwidGhyb3ckIiwicHJvbWlzZWRGaW5hbGx5IiwicmVhc29uT3JWYWx1ZSIsImlzRnVsZmlsbGVkIiwiZmluYWxseUhhbmRsZXIiLCJpc1JlamVjdGVkIiwidGFwSGFuZGxlciIsIl9wYXNzVGhyb3VnaEhhbmRsZXIiLCJpc0ZpbmFsbHkiLCJwcm9taXNlQW5kSGFuZGxlciIsImxhc3RseSIsInRhcCIsMTcsImFwaVJlamVjdGlvbiIsInByb21pc2VGcm9tWWllbGRIYW5kbGVyIiwieWllbGRIYW5kbGVycyIsInRyYWNlUGFyZW50IiwiUHJvbWlzZVNwYXduIiwiZ2VuZXJhdG9yRnVuY3Rpb24iLCJ5aWVsZEhhbmRsZXIiLCJfc3RhY2siLCJfZ2VuZXJhdG9yRnVuY3Rpb24iLCJfcmVjZWl2ZXIiLCJfZ2VuZXJhdG9yIiwiX3lpZWxkSGFuZGxlcnMiLCJjb25jYXQiLCJfcnVuIiwiX25leHQiLCJfY29udGludWUiLCJkb25lIiwiX3Rocm93IiwibmV4dCIsImNvcm91dGluZSIsIlByb21pc2VTcGF3biQiLCJnZW5lcmF0b3IiLCJzcGF3biIsImFkZFlpZWxkSGFuZGxlciIsMTgsIlByb21pc2VBcnJheSIsImxhc3QiLCJzcHJlYWQiLDE5LCJNYXBwaW5nUHJvbWlzZUFycmF5IiwibGltaXQiLCJfZmlsdGVyIiwiY29uc3RydWN0b3IkIiwiX3ByZXNlcnZlZFZhbHVlcyIsIl9saW1pdCIsIl9pbkZsaWdodCIsIl9xdWV1ZSIsIkVNUFRZX0FSUkFZIiwiX2luaXQkIiwiY29uY3VycmVuY3kiLCJpc0Zpbml0ZSIsIlBFTkRJTkciLCJfaW5pdCIsIl9wcm9taXNlRnVsZmlsbGVkIiwidmFsdWVzIiwiX3ZhbHVlcyIsInByZXNlcnZlZFZhbHVlcyIsIl9pc1Jlc29sdmVkIiwiX3Byb3h5UHJvbWlzZUFycmF5IiwiX2lzRnVsZmlsbGVkIiwiX3JlYXNvbiIsIl92YWx1ZSIsInRvdGFsUmVzb2x2ZWQiLCJfdG90YWxSZXNvbHZlZCIsIl9yZXNvbHZlIiwiYm9vbGVhbnMiLDIwLCJfcmVzb2x2ZUZyb21TeW5jVmFsdWUiLCJhdHRlbXB0IiwyMSwic3ByZWFkQWRhcHRlciIsInZhbCIsIm5vZGViYWNrIiwic3VjY2Vzc0FkYXB0ZXIiLCJlcnJvckFkYXB0ZXIiLCJuZXdSZWFzb24iLCJhc0NhbGxiYWNrIiwibm9kZWlmeSIsImFkYXB0ZXIiLDIyLCJwcm9ncmVzc2VkIiwicHJvZ3Jlc3NWYWx1ZSIsIl9pc0ZvbGxvd2luZ09yRnVsZmlsbGVkT3JSZWplY3RlZCIsIl9wcm9ncmVzc1VuY2hlY2tlZCIsIl9wcm9ncmVzc0hhbmRsZXJBdCIsIl9wcm9ncmVzc0hhbmRsZXIwIiwiX2RvUHJvZ3Jlc3NXaXRoIiwicHJvZ3Jlc3Npb24iLCJwcm9ncmVzcyIsIl9wcm9taXNlQXQiLCJfcmVjZWl2ZXJBdCIsIl9wcm9taXNlUHJvZ3Jlc3NlZCIsMjMsInJlc29sdmVyIiwiX3JlamVjdGlvbkhhbmRsZXIwIiwiX3Byb21pc2UwIiwiX3JlY2VpdmVyMCIsIl9yZXNvbHZlRnJvbVJlc29sdmVyIiwiZmlsbFR5cGVzIiwicCIsIm1ha2VTZWxmUmVzb2x1dGlvbkVycm9yIiwicmVmbGVjdCIsIlByb21pc2VJbnNwZWN0aW9uIiwibXNnIiwiQVBQTFkiLCJQcm9taXNlUmVzb2x2ZXIiLCJub2RlYmFja0ZvclByb21pc2UiLCJfbm9kZWJhY2tGb3JQcm9taXNlIiwiY2F1Z2h0IiwiY2F0Y2hJbnN0YW5jZXMiLCJjYXRjaEZpbHRlciIsIl9zZXRJc0ZpbmFsIiwiYWxsIiwiaXNSZXNvbHZlZCIsInRvSlNPTiIsImZ1bGZpbGxtZW50VmFsdWUiLCJyZWplY3Rpb25SZWFzb24iLCJvcmlnaW5hdGVzRnJvbVJlamVjdGlvbiIsImlzIiwiZnJvbU5vZGUiLCJkZWZlciIsInBlbmRpbmciLCJjYXN0IiwiX2Z1bGZpbGxVbmNoZWNrZWQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInNldFNjaGVkdWxlciIsImludGVybmFsRGF0YSIsImhhdmVJbnRlcm5hbERhdGEiLCJfc2V0SXNNaWdyYXRlZCIsImNhbGxiYWNrSW5kZXgiLCJfYWRkQ2FsbGJhY2tzIiwiX2lzU2V0dGxlUHJvbWlzZXNRdWV1ZWQiLCJfc2V0dGxlUHJvbWlzZUF0UG9zdFJlc29sdXRpb24iLCJfc2V0dGxlUHJvbWlzZUF0IiwiX2lzRm9sbG93aW5nIiwiX3NldExlbmd0aCIsIl9zZXRGdWxmaWxsZWQiLCJfc2V0UmVqZWN0ZWQiLCJfc2V0Rm9sbG93aW5nIiwiX2lzRmluYWwiLCJfdW5zZXRJc01pZ3JhdGVkIiwiX2lzTWlncmF0ZWQiLCJfZnVsZmlsbG1lbnRIYW5kbGVyQXQiLCJfcmVqZWN0aW9uSGFuZGxlckF0IiwiX21pZ3JhdGVDYWxsYmFja3MiLCJmb2xsb3dlciIsImZ1bGZpbGwiLCJiYXNlIiwiX3NldFByb3h5SGFuZGxlcnMiLCJwcm9taXNlU2xvdFZhbHVlIiwicHJvbWlzZUFycmF5Iiwic2hvdWxkQmluZCIsIl9mdWxmaWxsIiwicHJvcGFnYXRpb25GbGFncyIsIl9zZXRGb2xsb3dlZSIsIl9yZWplY3RVbmNoZWNrZWQiLCJzeW5jaHJvbm91cyIsInNob3VsZE5vdE1hcmtPcmlnaW5hdGluZ0Zyb21SZWplY3Rpb24iLCJtYXJrQXNPcmlnaW5hdGluZ0Zyb21SZWplY3Rpb24iLCJlbnN1cmVFcnJvck9iamVjdCIsImhhc1N0YWNrIiwiX3NldHRsZVByb21pc2VGcm9tSGFuZGxlciIsIl9pc1JlamVjdGVkIiwieCIsIl9mb2xsb3dlZSIsIl9jbGVhblZhbHVlcyIsImZsYWdzIiwiY2FycmllZFN0YWNrVHJhY2UiLCJpc1Byb21pc2UiLCJfY2xlYXJDYWxsYmFja0RhdGFBdEluZGV4IiwiX3Byb21pc2VSZWplY3RlZCIsIl9zZXRTZXR0bGVQcm9taXNlc1F1ZXVlZCIsIl91bnNldFNldHRsZVByb21pc2VzUXVldWVkIiwiX3F1ZXVlU2V0dGxlUHJvbWlzZXMiLCJfcmVqZWN0VW5jaGVja2VkQ2hlY2tFcnJvciIsInRvRmFzdFByb3BlcnRpZXMiLCJiIiwiYyIsIi4vYW55LmpzIiwiLi9iaW5kLmpzIiwiLi9jYWxsX2dldC5qcyIsIi4vY2FuY2VsLmpzIiwiLi9jYXB0dXJlZF90cmFjZS5qcyIsIi4vY2F0Y2hfZmlsdGVyLmpzIiwiLi9jb250ZXh0LmpzIiwiLi9kZWJ1Z2dhYmlsaXR5LmpzIiwiLi9kaXJlY3RfcmVzb2x2ZS5qcyIsIi4vZWFjaC5qcyIsIi4vZmlsdGVyLmpzIiwiLi9maW5hbGx5LmpzIiwiLi9nZW5lcmF0b3JzLmpzIiwiLi9qb2luLmpzIiwiLi9tYXAuanMiLCIuL21ldGhvZC5qcyIsIi4vbm9kZWlmeS5qcyIsIi4vcHJvZ3Jlc3MuanMiLCIuL3Byb21pc2VfYXJyYXkuanMiLCIuL3Byb21pc2VfcmVzb2x2ZXIuanMiLCIuL3Byb21pc2lmeS5qcyIsIi4vcHJvcHMuanMiLCIuL3JhY2UuanMiLCIuL3JlZHVjZS5qcyIsIi4vc2V0dGxlLmpzIiwiLi9zb21lLmpzIiwiLi9zeW5jaHJvbm91c19pbnNwZWN0aW9uLmpzIiwiLi90aGVuYWJsZXMuanMiLCIuL3RpbWVycy5qcyIsIi4vdXNpbmcuanMiLDI0LCJ0b1Jlc29sdXRpb25WYWx1ZSIsInJlc29sdmVWYWx1ZUlmRW1wdHkiLCJfX2hhcmRSZWplY3RfXyIsIl9yZXNvbHZlRW1wdHlBcnJheSIsImdldEFjdHVhbExlbmd0aCIsInNob3VsZENvcHlWYWx1ZXMiLDI1LCJpc1VudHlwZWRFcnJvciIsIndyYXBBc09wZXJhdGlvbmFsRXJyb3IiLCJyRXJyb3JLZXkiLCJ3cmFwcGVkIiwibWF5YmVXcmFwQXNFcnJvciIsImhhdmVHZXR0ZXJzIiwidGltZW91dCIsMjYsInByb3BzRmlsdGVyIiwibm9Db3B5UHJvcHNQYXR0ZXJuIiwiaXNQcm9taXNpZmllZCIsIl9faXNQcm9taXNpZmllZF9fIiwiaGFzUHJvbWlzaWZpZWQiLCJzdWZmaXgiLCJnZXREYXRhUHJvcGVydHlPckRlZmF1bHQiLCJkZWZhdWx0UHJvbWlzaWZpZWQiLCJjaGVja1ZhbGlkIiwic3VmZml4UmVnZXhwIiwia2V5V2l0aG91dEFzeW5jU3VmZml4IiwicHJvbWlzaWZpYWJsZU1ldGhvZHMiLCJpbmhlcml0ZWREYXRhS2V5cyIsInBhc3Nlc0RlZmF1bHRGaWx0ZXIiLCJkZWZhdWx0RmlsdGVyIiwibWFrZU5vZGVQcm9taXNpZmllZENsb3N1cmUiLCJwcm9taXNpZmllZCIsIlRISVMiLCJkZWZhdWx0VGhpcyIsIndpdGhBcHBlbmRlZCIsInByb21pc2lmeUFsbCIsInByb21pc2lmaWVyIiwiUmVnRXhwIiwiZXNjYXBlSWRlbnRSZWdleCIsInByb21pc2lmaWVkS2V5IiwibWFrZU5vZGVQcm9taXNpZmllZCIsInByb21pc2lmeSIsIm1ha2VOb2RlUHJvbWlzaWZpZWRFdmFsIiwiZGVmYXVsdFN1ZmZpeCIsIm5vQ29weVByb3BzIiwiY29weURlc2NyaXB0b3JzIiwiaXNDbGFzcyIsIi4vZXJyb3JzIiwyNywiUHJvcGVydGllc1Byb21pc2VBcnJheSIsImNhc3RWYWx1ZSIsImlzT2JqZWN0Iiwia2V5T2Zmc2V0IiwyOCwiYXJyYXlNb3ZlIiwic3JjSW5kZXgiLCJkc3QiLCJkc3RJbmRleCIsImNhcGFjaXR5IiwiX2NhcGFjaXR5IiwiX2Zyb250IiwiX3dpbGxCZU92ZXJDYXBhY2l0eSIsInNpemUiLCJfY2hlY2tDYXBhY2l0eSIsIl91bnNoaWZ0T25lIiwiZnJvbnQiLCJ3cmFwTWFzayIsIl9yZXNpemVUbyIsIm9sZENhcGFjaXR5IiwibW92ZUl0ZW1zQ291bnQiLDI5LCJyYWNlIiwicmFjZUxhdGVyIiwiYXJyYXkiLDMwLCJSZWR1Y3Rpb25Qcm9taXNlQXJyYXkiLCJhY2N1bSIsIl9lYWNoIiwiX3plcm90aElzQWNjdW0iLCJfZ290QWNjdW0iLCJfcmVkdWNpbmdJbmRleCIsIl92YWx1ZXNQaGFzZSIsIl9hY2N1bSIsImluaXRpYWxWYWx1ZSIsInZhbHVlc1BoYXNlSW5kZXgiLCJpc0VhY2giLCJnb3RBY2N1bSIsInZhbHVlc1BoYXNlIiwzMSwibm9Bc3luY1NjaGVkdWxlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJHbG9iYWxTZXRJbW1lZGlhdGUiLCJzZXRJbW1lZGlhdGUiLCJQcm9jZXNzTmV4dFRpY2siLCJuZXh0VGljayIsImlzUmVjZW50Tm9kZSIsIm5hdmlnYXRvciIsInN0YW5kYWxvbmUiLCJkaXYiLCJvYnNlcnZlciIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiLi91dGlsIiwzMiwiU2V0dGxlZFByb21pc2VBcnJheSIsIl9wcm9taXNlUmVzb2x2ZWQiLCJpbnNwZWN0aW9uIiwic2V0dGxlIiwzMywiX2hvd01hbnkiLCJfdW53cmFwIiwiX2luaXRpYWxpemVkIiwic29tZSIsImhvd01hbnkiLCJpc0FycmF5UmVzb2x2ZWQiLCJfY2FuUG9zc2libHlGdWxmaWxsIiwiX2dldFJhbmdlRXJyb3IiLCJfYWRkRnVsZmlsbGVkIiwiX2Z1bGZpbGxlZCIsIl9hZGRSZWplY3RlZCIsIl9yZWplY3RlZCIsMzQsImlzUGVuZGluZyIsMzUsImlzQW55Qmx1ZWJpcmRQcm9taXNlIiwiZ2V0VGhlbiIsImRvVGhlbmFibGUiLCJoYXNQcm9wIiwicmVzb2x2ZUZyb21UaGVuYWJsZSIsInJlamVjdEZyb21UaGVuYWJsZSIsInByb2dyZXNzRnJvbVRoZW5hYmxlIiwzNiwic3VjY2Vzc0NsZWFyIiwiaGFuZGxlIiwiTnVtYmVyIiwiY2xlYXJUaW1lb3V0IiwiZmFpbHVyZUNsZWFyIiwiYWZ0ZXJUaW1lb3V0IiwiYWZ0ZXJWYWx1ZSIsImRlbGF5IiwibXMiLDM3LCJpbnNwZWN0aW9uTWFwcGVyIiwiaW5zcGVjdGlvbnMiLCJjYXN0UHJlc2VydmluZ0Rpc3Bvc2FibGUiLCJ0aGVuYWJsZSIsIl9pc0Rpc3Bvc2FibGUiLCJfZ2V0RGlzcG9zZXIiLCJfc2V0RGlzcG9zYWJsZSIsImRpc3Bvc2UiLCJyZXNvdXJjZXMiLCJpdGVyYXRvciIsInRyeURpc3Bvc2UiLCJkaXNwb3NlclN1Y2Nlc3MiLCJkaXNwb3NlckZhaWwiLCJEaXNwb3NlciIsImRhdGEiLCJfZGF0YSIsIl9jb250ZXh0IiwiRnVuY3Rpb25EaXNwb3NlciIsIm1heWJlVW53cmFwRGlzcG9zZXIiLCJpc0Rpc3Bvc2VyIiwicmVzb3VyY2UiLCJkb0Rpc3Bvc2UiLCJfdW5zZXREaXNwb3NhYmxlIiwiZCIsInVzaW5nIiwiZGlzcG9zZXIiLCJ2YWxzIiwiX2Rpc3Bvc2VyIiwzOCwidHJ5Q2F0Y2hlciIsInRyeUNhdGNoVGFyZ2V0IiwibWF5YmVFcnJvciIsInNhZmVUb1N0cmluZyIsImFwcGVuZGVlIiwiZGVmYXVsdFZhbHVlIiwiaGFzTWV0aG9kcyIsImhhc01ldGhvZHNPdGhlclRoYW5Db25zdHJ1Y3RvciIsImhhc1RoaXNBc3NpZ25tZW50QW5kU3RhdGljTWV0aG9kcyIsInRoaXNBc3NpZ25tZW50UGF0dGVybiIsInJpZGVudCIsImZpbGxlZFJhbmdlIiwicHJlZml4IiwiaWdub3JlIiwiZnJvbSIsIkNoaWxkIiwiUGFyZW50IiwiVCIsImV4Y2x1ZGVkUHJvdG90eXBlcyIsIkZ1bmN0aW9uIiwiaXNFeGNsdWRlZFByb3RvIiwiZ2V0S2V5cyIsInZpc2l0ZWRLZXlzIiwiZW51bWVyYXRpb24iLCJjaHJvbWUiLCJsb2FkVGltZXMiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJQIiwiX3Byb2Nlc3MiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsImNsZWFuVXBOZXh0VGljayIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImRyYWluUXVldWUiLCJJdGVtIiwiZnVuIiwibm9vcCIsImJyb3dzZXIiLCJhcmd2IiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvbG9kYXNoL2luZGV4LmpzIiwiYmFzZUNvbXBhcmVBc2NlbmRpbmciLCJvdGhlciIsInZhbElzTnVsbCIsInZhbElzVW5kZWYiLCJ2YWxJc1JlZmxleGl2ZSIsIm90aElzTnVsbCIsIm90aElzVW5kZWYiLCJvdGhJc1JlZmxleGl2ZSIsImJhc2VGaW5kSW5kZXgiLCJmcm9tUmlnaHQiLCJiYXNlSW5kZXhPZiIsImZyb21JbmRleCIsImluZGV4T2ZOYU4iLCJiYXNlSXNGdW5jdGlvbiIsImJhc2VUb1N0cmluZyIsImNoYXJzTGVmdEluZGV4Iiwic3RyaW5nIiwiY2hhcnMiLCJjaGFyc1JpZ2h0SW5kZXgiLCJjb21wYXJlQXNjZW5kaW5nIiwib2JqZWN0IiwiY3JpdGVyaWEiLCJjb21wYXJlTXVsdGlwbGUiLCJvcmRlcnMiLCJvYmpDcml0ZXJpYSIsIm90aENyaXRlcmlhIiwib3JkZXJzTGVuZ3RoIiwib3JkZXIiLCJkZWJ1cnJMZXR0ZXIiLCJsZXR0ZXIiLCJkZWJ1cnJlZExldHRlcnMiLCJlc2NhcGVIdG1sQ2hhciIsImNociIsImh0bWxFc2NhcGVzIiwiZXNjYXBlUmVnRXhwQ2hhciIsImxlYWRpbmdDaGFyIiwid2hpdGVzcGFjZUNoYXIiLCJyZWdleHBFc2NhcGVzIiwic3RyaW5nRXNjYXBlcyIsImVzY2FwZVN0cmluZ0NoYXIiLCJpc09iamVjdExpa2UiLCJpc1NwYWNlIiwiY2hhckNvZGUiLCJyZXBsYWNlSG9sZGVycyIsInJlc0luZGV4IiwiUExBQ0VIT0xERVIiLCJzb3J0ZWRVbmlxIiwiaXRlcmF0ZWUiLCJzZWVuIiwiY29tcHV0ZWQiLCJ0cmltbWVkTGVmdEluZGV4IiwiY2hhckNvZGVBdCIsInRyaW1tZWRSaWdodEluZGV4IiwidW5lc2NhcGVIdG1sQ2hhciIsImh0bWxVbmVzY2FwZXMiLCJydW5JbkNvbnRleHQiLCJMYXp5V3JhcHBlciIsIkxvZGFzaFdyYXBwZXIiLCJ3cmFwcGVyQ2xvbmUiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJhY3Rpb25zIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIlBPU0lUSVZFX0lORklOSVRZIiwiX192aWV3c19fIiwibGF6eUNsb25lIiwiYXJyYXlDb3B5IiwibGF6eVJldmVyc2UiLCJjbG9uZSIsImxhenlWYWx1ZSIsImlzQXJyIiwiaXNSaWdodCIsImFyckxlbmd0aCIsInZpZXciLCJnZXRWaWV3Iiwic3RhcnQiLCJpdGVyYXRlZXMiLCJpdGVyTGVuZ3RoIiwidGFrZUNvdW50IiwibmF0aXZlTWluIiwiTEFSR0VfQVJSQVlfU0laRSIsImJhc2VXcmFwcGVyVmFsdWUiLCJyZXZlcnNlIiwib3V0ZXIiLCJpdGVySW5kZXgiLCJMQVpZX01BUF9GTEFHIiwiTEFaWV9GSUxURVJfRkxBRyIsIk1hcENhY2hlIiwiX19kYXRhX18iLCJtYXBEZWxldGUiLCJtYXBHZXQiLCJtYXBIYXMiLCJtYXBTZXQiLCJTZXRDYWNoZSIsImhhc2giLCJuYXRpdmVDcmVhdGUiLCJTZXQiLCJjYWNoZUluZGV4T2YiLCJjYWNoZSIsImNhY2hlUHVzaCIsImFkZCIsImFycmF5Q29uY2F0Iiwib3RoSW5kZXgiLCJvdGhMZW5ndGgiLCJzb3VyY2UiLCJhcnJheUVhY2giLCJhcnJheUVhY2hSaWdodCIsImFycmF5RXZlcnkiLCJhcnJheUV4dHJlbXVtIiwiY29tcGFyYXRvciIsImV4VmFsdWUiLCJhcnJheUZpbHRlciIsImFycmF5TWFwIiwiYXJyYXlQdXNoIiwib2Zmc2V0IiwiYXJyYXlSZWR1Y2UiLCJhY2N1bXVsYXRvciIsImluaXRGcm9tQXJyYXkiLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb21lIiwiYXJyYXlTdW0iLCJhc3NpZ25EZWZhdWx0cyIsIm9iamVjdFZhbHVlIiwic291cmNlVmFsdWUiLCJhc3NpZ25Pd25EZWZhdWx0cyIsImFzc2lnbldpdGgiLCJjdXN0b21pemVyIiwiYmFzZUFzc2lnbiIsImJhc2VDb3B5IiwiYmFzZUF0IiwiY29sbGVjdGlvbiIsImlzTmlsIiwiaXNBcnJheUxpa2UiLCJwcm9wc0xlbmd0aCIsImJhc2VDYWxsYmFjayIsImZ1bmMiLCJhcmdDb3VudCIsImJpbmRDYWxsYmFjayIsImlkZW50aXR5IiwiYmFzZU1hdGNoZXMiLCJwcm9wZXJ0eSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlQ2xvbmUiLCJpc0RlZXAiLCJzdGFja0EiLCJzdGFja0IiLCJpbml0Q2xvbmVBcnJheSIsIm9ialRvU3RyaW5nIiwiaXNGdW5jIiwiZnVuY1RhZyIsIm9iamVjdFRhZyIsImFyZ3NUYWciLCJjbG9uZWFibGVUYWdzIiwiaW5pdENsb25lQnlUYWciLCJpbml0Q2xvbmVPYmplY3QiLCJiYXNlRm9yT3duIiwic3ViVmFsdWUiLCJiYXNlRGVsYXkiLCJ3YWl0IiwiRlVOQ19FUlJPUl9URVhUIiwiYmFzZURpZmZlcmVuY2UiLCJnZXRJbmRleE9mIiwiaXNDb21tb24iLCJjcmVhdGVDYWNoZSIsInZhbHVlc0xlbmd0aCIsInZhbHVlc0luZGV4IiwiYmFzZUV2ZXJ5IiwiYmFzZUVhY2giLCJiYXNlRXh0cmVtdW0iLCJiYXNlRmlsbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmluZCIsImVhY2hGdW5jIiwicmV0S2V5IiwiYmFzZUZsYXR0ZW4iLCJpc1N0cmljdCIsImlzQXJndW1lbnRzIiwiYmFzZUZvckluIiwiYmFzZUZvciIsImtleXNJbiIsImJhc2VGb3JPd25SaWdodCIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJpc0Z1bmN0aW9uIiwiYmFzZUdldCIsInBhdGhLZXkiLCJ0b09iamVjdCIsImJhc2VJc0VxdWFsIiwiaXNMb29zZSIsImJhc2VJc0VxdWFsRGVlcCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJhcnJheVRhZyIsIm90aFRhZyIsImlzVHlwZWRBcnJheSIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJlcXVhbEJ5VGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwiZXF1YWxBcnJheXMiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsIm9ialZhbHVlIiwic3JjVmFsdWUiLCJiYXNlTWFwIiwiZ2V0TWF0Y2hEYXRhIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJ0b1BhdGgiLCJiYXNlU2xpY2UiLCJiYXNlTWVyZ2UiLCJpc1NyY0FyciIsImJhc2VNZXJnZURlZXAiLCJtZXJnZUZ1bmMiLCJpc1BsYWluT2JqZWN0IiwidG9QbGFpbk9iamVjdCIsImJhc2VQcm9wZXJ0eSIsImJhc2VQcm9wZXJ0eURlZXAiLCJiYXNlUHVsbEF0IiwiaW5kZXhlcyIsInByZXZpb3VzIiwiYmFzZVJhbmRvbSIsIm1pbiIsIm5hdGl2ZUZsb29yIiwibmF0aXZlUmFuZG9tIiwiYmFzZVJlZHVjZSIsImluaXRGcm9tQ29sbGVjdGlvbiIsImJhc2VTb21lIiwiYmFzZVNvcnRCeSIsImNvbXBhcmVyIiwic29ydCIsImJhc2VTb3J0QnlPcmRlciIsImdldENhbGxiYWNrIiwiYmFzZVN1bSIsImJhc2VVbmlxIiwiaXNMYXJnZSIsInNlZW5JbmRleCIsImJhc2VWYWx1ZXMiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiaW5hcnlJbmRleCIsInJldEhpZ2hlc3QiLCJsb3ciLCJoaWdoIiwiSEFMRl9NQVhfQVJSQVlfTEVOR1RIIiwibWlkIiwiYmluYXJ5SW5kZXhCeSIsInZhbElzTmFOIiwiaXNEZWYiLCJpc1JlZmxleGl2ZSIsInNldExvdyIsIk1BWF9BUlJBWV9JTkRFWCIsImJ1ZmZlckNsb25lIiwiYnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJieXRlTGVuZ3RoIiwiVWludDhBcnJheSIsImNvbXBvc2VBcmdzIiwicGFydGlhbHMiLCJob2xkZXJzIiwiaG9sZGVyc0xlbmd0aCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJuYXRpdmVNYXgiLCJsZWZ0SW5kZXgiLCJsZWZ0TGVuZ3RoIiwiY29tcG9zZUFyZ3NSaWdodCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJyaWdodExlbmd0aCIsImNyZWF0ZUFnZ3JlZ2F0b3IiLCJzZXR0ZXIiLCJpbml0aWFsaXplciIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJyZXN0UGFyYW0iLCJzb3VyY2VzIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsImNyZWF0ZUJhc2VFYWNoIiwiZ2V0TGVuZ3RoIiwiaXNMZW5ndGgiLCJpdGVyYWJsZSIsImNyZWF0ZUJhc2VGb3IiLCJrZXlzRnVuYyIsImNyZWF0ZUJpbmRXcmFwcGVyIiwicm9vdCIsIkN0b3IiLCJjcmVhdGVDdG9yV3JhcHBlciIsImNyZWF0ZUNvbXBvdW5kZXIiLCJ3b3JkcyIsImRlYnVyciIsInRoaXNCaW5kaW5nIiwiYmFzZUNyZWF0ZSIsImNyZWF0ZUN1cnJ5IiwiZmxhZyIsImN1cnJ5RnVuYyIsImFyaXR5IiwiY3JlYXRlV3JhcHBlciIsImNyZWF0ZURlZmF1bHRzIiwiY3JlYXRlRXh0cmVtdW0iLCJ0b0l0ZXJhYmxlIiwiY3JlYXRlRmluZCIsImNyZWF0ZUZpbmRJbmRleCIsImNyZWF0ZUZpbmRLZXkiLCJvYmplY3RGdW5jIiwiY3JlYXRlRmxvdyIsImZ1bmNzIiwidGhydSIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsIkFSWV9GTEFHIiwiQ1VSUllfRkxBRyIsIlBBUlRJQUxfRkxBRyIsIlJFQVJHX0ZMQUciLCJwbGFudCIsImNyZWF0ZUZvckVhY2giLCJhcnJheUZ1bmMiLCJjcmVhdGVGb3JJbiIsImNyZWF0ZUZvck93biIsImNyZWF0ZU9iamVjdE1hcHBlciIsImlzTWFwS2V5cyIsIm1hcHBlZCIsImNyZWF0ZVBhZERpciIsImNyZWF0ZVBhZGRpbmciLCJjcmVhdGVQYXJ0aWFsIiwicGFydGlhbEZ1bmMiLCJjcmVhdGVSZWR1Y2UiLCJjcmVhdGVIeWJyaWRXcmFwcGVyIiwiYml0bWFzayIsInBhcnRpYWxzUmlnaHQiLCJob2xkZXJzUmlnaHQiLCJhcmdQb3MiLCJhcnkiLCJpc0N1cnJ5IiwiaXNDdXJyeVJpZ2h0IiwiYXJnc0hvbGRlcnMiLCJuZXdBcmdQb3MiLCJuZXdBcml0eSIsIm5ld3NIb2xkZXJzIiwibmV3SG9sZGVyc1JpZ2h0IiwibmV3UGFydGlhbHMiLCJuZXdQYXJ0aWFsc1JpZ2h0IiwiUEFSVElBTF9SSUdIVF9GTEFHIiwiaXNDdXJyeUJvdW5kIiwiQklORF9GTEFHIiwiQklORF9LRVlfRkxBRyIsIm5ld0RhdGEiLCJzZXREYXRhIiwiaXNCaW5kIiwiaXNCaW5kS2V5IiwicmVvcmRlciIsImlzQXJ5IiwiQ1VSUllfQk9VTkRfRkxBRyIsIkNVUlJZX1JJR0hUX0ZMQUciLCJzdHJMZW5ndGgiLCJuYXRpdmVJc0Zpbml0ZSIsInBhZExlbmd0aCIsInJlcGVhdCIsIm5hdGl2ZUNlaWwiLCJjcmVhdGVQYXJ0aWFsV3JhcHBlciIsImNyZWF0ZVJvdW5kIiwibnVtYmVyIiwicHJlY2lzaW9uIiwicG93IiwiY3JlYXRlU29ydGVkSW5kZXgiLCJtZXJnZURhdGEiLCJiYXNlU2V0RGF0YSIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwibnVtYmVyVGFnIiwicmVnZXhwVGFnIiwic3RyaW5nVGFnIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJvdGhQcm9wcyIsInNraXBDdG9yIiwib2JqQ3RvciIsIm90aEN0b3IiLCJyZWFsTmFtZXMiLCJvdGhlckZ1bmMiLCJwYWlycyIsImdldE5hdGl2ZSIsImlzTmF0aXZlIiwidHJhbnNmb3JtcyIsImlucHV0IiwiYXJyYXlCdWZmZXJUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJieXRlT2Zmc2V0IiwicmVGbGFncyIsImV4ZWMiLCJpbnZva2VQYXRoIiwicmVJc1VpbnQiLCJNQVhfU0FGRV9JTlRFR0VSIiwicmVJc1BsYWluUHJvcCIsInJlSXNEZWVwUHJvcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGVmYXVsdHMiLCJtZXJnZSIsInBpY2tCeUFycmF5IiwicGlja0J5Q2FsbGJhY2siLCJvbGRBcnJheSIsInNoaW1LZXlzIiwiYWxsb3dJbmRleGVzIiwicmVQcm9wTmFtZSIsInF1b3RlIiwicmVFc2NhcGVDaGFyIiwiY2h1bmsiLCJjb21wYWN0IiwiZHJvcCIsImRyb3BSaWdodCIsImRyb3BSaWdodFdoaWxlIiwiZHJvcFdoaWxlIiwiZmlsbCIsImZpcnN0IiwiZmxhdHRlbiIsImZsYXR0ZW5EZWVwIiwiaW5pdGlhbCIsImxhc3RJbmRleE9mIiwicHVsbCIsInJlbW92ZSIsInJlc3QiLCJ0YWtlIiwidGFrZVJpZ2h0IiwidGFrZVJpZ2h0V2hpbGUiLCJ0YWtlV2hpbGUiLCJ1bmlxIiwiaXNTb3J0ZWQiLCJ1bnppcCIsImdyb3VwIiwidW56aXBXaXRoIiwieG9yIiwiemlwT2JqZWN0IiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJDaGFpbiIsIndyYXBwZXJDb21taXQiLCJ3cmFwcGVyUGxhbnQiLCJ3cmFwcGVyUmV2ZXJzZSIsIndyYXBwZXJUb1N0cmluZyIsIndyYXBwZXJWYWx1ZSIsImV2ZXJ5IiwiZmluZFdoZXJlIiwiZmluZCIsImluY2x1ZGVzIiwiaXNTdHJpbmciLCJwbHVjayIsInNhbXBsZSIsInRvQXJyYXkiLCJyYW5kIiwic2h1ZmZsZSIsInNvcnRCeSIsInNvcnRCeU9yZGVyIiwid2hlcmUiLCJhZnRlciIsInRlbXAiLCJiZWZvcmUiLCJkZWJvdW5jZSIsInRpbWVvdXRJZCIsIm1heFRpbWVvdXRJZCIsImxhc3RDYWxsZWQiLCJ0cmFpbGluZ0NhbGwiLCJjb21wbGV0ZSIsImlzQ2FsbGVkIiwibm93IiwiZGVsYXllZCIsInJlbWFpbmluZyIsInN0YW1wIiwibWF4RGVsYXllZCIsInRyYWlsaW5nIiwiZGVib3VuY2VkIiwibGVhZGluZyIsIm1heFdhaXQiLCJsZWFkaW5nQ2FsbCIsIm1lbW9pemUiLCJtZW1vaXplZCIsIkNhY2hlIiwibmVnYXRlIiwib3RoZXJBcmdzIiwidGhyb3R0bGUiLCJ3cmFwIiwiZ3QiLCJndGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImlzQm9vbGVhbiIsImlzRGF0ZSIsImlzRWxlbWVudCIsIm5vZGVUeXBlIiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0Vycm9yIiwiaXNNYXRjaCIsImlzTmFOIiwiaXNOdW1iZXIiLCJyZUlzTmF0aXZlIiwiZm5Ub1N0cmluZyIsInJlSXNIb3N0Q3RvciIsImlzTnVsbCIsImlzUmVnRXhwIiwidHlwZWRBcnJheVRhZ3MiLCJpc1VuZGVmaW5lZCIsImx0IiwibHRlIiwicHJvcGVydGllcyIsImZ1bmN0aW9ucyIsImludmVydCIsIm11bHRpVmFsdWUiLCJpc1Byb3RvIiwic2tpcEluZGV4ZXMiLCJuZXN0ZWQiLCJ0cmFuc2Zvcm0iLCJ2YWx1ZXNJbiIsImluUmFuZ2UiLCJyYW5kb20iLCJmbG9hdGluZyIsIm5vTWluIiwibm9NYXgiLCJwYXJzZUZsb2F0IiwiY2FwaXRhbGl6ZSIsInRvVXBwZXJDYXNlIiwicmVMYXRpbjEiLCJyZUNvbWJvTWFyayIsImVuZHNXaXRoIiwicG9zaXRpb24iLCJlc2NhcGUiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJyZVVuZXNjYXBlZEh0bWwiLCJlc2NhcGVSZWdFeHAiLCJyZUhhc1JlZ0V4cENoYXJzIiwicmVSZWdFeHBDaGFycyIsInBhZCIsInJhZGl4IiwidHJpbSIsIm5hdGl2ZVBhcnNlSW50IiwicmVIYXNIZXhQcmVmaXgiLCJzdGFydHNXaXRoIiwidGVtcGxhdGUiLCJvdGhlck9wdGlvbnMiLCJzZXR0aW5ncyIsInRlbXBsYXRlU2V0dGluZ3MiLCJpc0VzY2FwaW5nIiwiaXNFdmFsdWF0aW5nIiwiaW1wb3J0cyIsImltcG9ydHNLZXlzIiwiaW1wb3J0c1ZhbHVlcyIsImludGVycG9sYXRlIiwicmVOb01hdGNoIiwicmVEZWxpbWl0ZXJzIiwicmVJbnRlcnBvbGF0ZSIsInJlRXNUZW1wbGF0ZSIsImV2YWx1YXRlIiwic291cmNlVVJMIiwidGVtcGxhdGVDb3VudGVyIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsInJlVW5lc2NhcGVkU3RyaW5nIiwidmFyaWFibGUiLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJ0cmltTGVmdCIsInRyaW1SaWdodCIsInRydW5jIiwiREVGQVVMVF9UUlVOQ19MRU5HVEgiLCJvbWlzc2lvbiIsIkRFRkFVTFRfVFJVTkNfT01JU1NJT04iLCJzZXBhcmF0b3IiLCJzZWFyY2giLCJuZXdFbmQiLCJzdWJzdHJpbmciLCJ1bmVzY2FwZSIsInJlSGFzRXNjYXBlZEh0bWwiLCJyZUVzY2FwZWRIdG1sIiwicGF0dGVybiIsInJlV29yZHMiLCJjb25zdGFudCIsIm1hdGNoZXNQcm9wZXJ0eSIsIm1peGluIiwiaXNPYmoiLCJtZXRob2ROYW1lcyIsIm9sZERhc2giLCJwcm9wZXJ0eU9mIiwicmFuZ2UiLCJzdGVwIiwidGltZXMiLCJNQVhfQVJSQVlfTEVOR1RIIiwidW5pcXVlSWQiLCJpZENvdW50ZXIiLCJhdWdlbmQiLCJhZGRlbmQiLCJzdW0iLCJkZWZhdWx0cyIsInBpY2siLCJjb250ZXh0UHJvcHMiLCJEYXRlIiwiYXJyYXlQcm90byIsIm9iamVjdFByb3RvIiwic3RyaW5nUHJvdG8iLCJXZWFrTWFwIiwiY2VpbCIsImZsb29yIiwibmF0aXZlSXNBcnJheSIsIm5hdGl2ZUtleXMiLCJuYXRpdmVOb3ciLCJORUdBVElWRV9JTkZJTklUWSIsIm1ldGFNYXAiLCJzdXBwb3J0IiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwiYmFzZUVhY2hSaWdodCIsIkhPVF9TUEFOIiwiSE9UX0NPVU5UIiwiZGlmZmVyZW5jZSIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJpbnRlcnNlY3Rpb24iLCJhcnJheXMiLCJjYWNoZXMiLCJwdWxsQXQiLCJzb3J0ZWRJbmRleCIsInNvcnRlZExhc3RJbmRleCIsInVuaW9uIiwid2l0aG91dCIsInppcCIsInppcFdpdGgiLCJ3cmFwcGVyQ29uY2F0IiwiYXQiLCJjb3VudEJ5IiwiZmluZExhc3QiLCJmb3JFYWNoIiwiZm9yRWFjaFJpZ2h0IiwiZ3JvdXBCeSIsImluZGV4QnkiLCJpc1Byb3AiLCJwYXJ0aXRpb24iLCJyZWR1Y2VSaWdodCIsInNvcnRCeUFsbCIsImdldFRpbWUiLCJiaW5kQWxsIiwiYmluZEtleSIsImN1cnJ5IiwiY3VycnlSaWdodCIsImZsb3ciLCJmbG93UmlnaHQiLCJtb2RBcmdzIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiYXNzaWduIiwiZGVmYXVsdHNEZWVwIiwiZmluZEtleSIsImZpbmRMYXN0S2V5IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwib21pdCIsImNhbWVsQ2FzZSIsIndvcmQiLCJrZWJhYkNhc2UiLCJwYWRMZWZ0IiwicGFkUmlnaHQiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJtZXRob2RPZiIsInJvdW5kIiwiYmFja2Zsb3ciLCJjb2xsZWN0IiwiY29tcG9zZSIsImVhY2hSaWdodCIsImV4dGVuZCIsInNlbGVjdCIsInRhaWwiLCJ1bmlxdWUiLCJjb250YWlucyIsImVxIiwiZGV0ZWN0IiwiZm9sZGwiLCJmb2xkciIsImhlYWQiLCJpbmNsdWRlIiwiaW5qZWN0IiwiVkVSU0lPTiIsImZpbHRlcmVkIiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwib3BlcmF0aW9uTmFtZSIsImNyZWF0ZUNhbGxiYWNrIiwiY2hlY2tJdGVyYXRlZSIsInJldFVud3JhcHBlZCIsImxvZGFzaEZ1bmMiLCJpc0h5YnJpZCIsImlzTGF6eSIsInVzZUxhenkiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImNvbW1pdCIsInZhbHVlT2YiLCJtYXBUYWciLCJzZXRUYWciLCJ3ZWFrTWFwVGFnIiwidXBwZXIiLCJsb3dlciIsIsOAIiwiw4EiLCLDgiIsIsODIiwiw4QiLCLDhSIsIsOgIiwiw6EiLCLDoiIsIsOjIiwiw6QiLCLDpSIsIsOHIiwiw6ciLCLDkCIsIsOwIiwiw4giLCLDiSIsIsOKIiwiw4siLCLDqCIsIsOpIiwiw6oiLCLDqyIsIsOMIiwiw40iLCLDjiIsIsOPIiwiw6wiLCLDrSIsIsOuIiwiw68iLCLDkSIsIsOxIiwiw5IiLCLDkyIsIsOUIiwiw5UiLCLDliIsIsOYIiwiw7IiLCLDsyIsIsO0Iiwiw7UiLCLDtiIsIsO4Iiwiw5kiLCLDmiIsIsObIiwiw5wiLCLDuSIsIsO6Iiwiw7siLCLDvCIsIsOdIiwiw70iLCLDvyIsIsOGIiwiw6YiLCLDniIsIsO+Iiwiw58iLCImIiwiPCIsIj4iLCJcIiIsIiciLCJgIiwiJmFtcDsiLCImbHQ7IiwiJmd0OyIsIiZxdW90OyIsIiYjMzk7IiwiJiM5NjsiLCJvYmplY3RUeXBlcyIsImZ1bmN0aW9uIiwiMCIsIkEiLCJCIiwiQyIsIkQiLCJFIiwiRiIsInYiLCJcXCIsIlxuIiwiXHIiLCLigKgiLCLigKkiLCJmcmVlRXhwb3J0cyIsImZyZWVNb2R1bGUiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJmcmVlV2luZG93IiwibW9kdWxlRXhwb3J0cyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9DYW5jZWxsYXRpb24uanMiLCJDYW5jZWxsYXRpb24iLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvSGlzdG9yeS5qcyIsImludmFyaWFudCIsImNhblVzZURPTSIsIkhpc3RvcnkiLCJiYWNrIiwiaGlzdG9yeSIsInJlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCIsInJlYWN0L2xpYi9pbnZhcmlhbnQiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvTWF0Y2guanMiLCJkZWVwU2VhcmNoIiwicm91dGUiLCJwYXRobmFtZSIsInF1ZXJ5IiwiY2hpbGRSb3V0ZXMiLCJjaGlsZFJvdXRlIiwiaXNEZWZhdWx0IiwiaXNOb3RGb3VuZCIsImRlZmF1bHRSb3V0ZSIsIlBhdGhVdGlscyIsImV4dHJhY3RQYXJhbXMiLCJNYXRjaCIsIm5vdEZvdW5kUm91dGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIndpdGhvdXRRdWVyeSIsImV4dHJhY3RRdWVyeSIsIi4vUGF0aFV0aWxzIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL05hdmlnYXRpb24uanMiLCJQcm9wVHlwZXMiLCJOYXZpZ2F0aW9uIiwiY29udGV4dFR5cGVzIiwicm91dGVyIiwiaXNSZXF1aXJlZCIsIm1ha2VQYXRoIiwibWFrZUhyZWYiLCJ0cmFuc2l0aW9uVG8iLCJyZXBsYWNlV2l0aCIsImdvQmFjayIsIi4vUHJvcFR5cGVzIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1BhdGhVdGlscy5qcyIsImNvbXBpbGVQYXR0ZXJuIiwiX2NvbXBpbGVkUGF0dGVybnMiLCJwYXJhbU5hbWVzIiwicGFyYW1Db21waWxlTWF0Y2hlciIsInBhcmFtTmFtZSIsIm1hdGNoZXIiLCJxcyIsInBhcmFtSW5qZWN0TWF0Y2hlciIsInBhcmFtSW5qZWN0VHJhaWxpbmdTbGFzaE1hdGNoZXIiLCJxdWVyeU1hdGNoZXIiLCJpc0Fic29sdXRlIiwiZXh0cmFjdFBhcmFtTmFtZXMiLCJfY29tcGlsZVBhdHRlcm4iLCJpbmplY3RQYXJhbXMiLCJzcGxhdEluZGV4Iiwic2VnbWVudCIsInBhcnNlIiwid2l0aFF1ZXJ5IiwiZXhpc3RpbmdRdWVyeSIsInF1ZXJ5U3RyaW5nIiwiYXJyYXlGb3JtYXQiLCJvYmplY3QtYXNzaWduIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1Byb3BUeXBlcy5qcyIsIlJlYWN0UHJvcFR5cGVzIiwiZmFsc3kiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJpbnN0YW5jZU9mIiwiLi9Sb3V0ZSIsInJlYWN0L2xpYi9PYmplY3QuYXNzaWduIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1JlZGlyZWN0LmpzIiwiUmVkaXJlY3QiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvUm91dGUuanMiLCJfY3VycmVudFJvdXRlIiwiaWdub3JlU2Nyb2xsQmVoYXZpb3IiLCJvbkVudGVyIiwib25MZWF2ZSIsInBhcmVudFJvdXRlIiwiYXBwZW5kQ2hpbGQiLCJjdXJyZW50Um91dGUiLCJjcmVhdGVSb3V0ZSIsInRyYW5zaXRpb24iLCJyZWRpcmVjdCIsInJlYWN0L2xpYi93YXJuaW5nIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1Njcm9sbEhpc3RvcnkuanMiLCJzaG91bGRVcGRhdGVTY3JvbGwiLCJwcmV2U3RhdGUiLCJwcmV2Um91dGVzIiwic2hhcmVkQW5jZXN0b3JSb3V0ZXMiLCJnZXRXaW5kb3dTY3JvbGxQb3NpdGlvbiIsIlNjcm9sbEhpc3RvcnkiLCJzdGF0aWNzIiwicmVjb3JkU2Nyb2xsUG9zaXRpb24iLCJzY3JvbGxIaXN0b3J5IiwiZ2V0U2Nyb2xsUG9zaXRpb24iLCJjb21wb25lbnRXaWxsTW91bnQiLCJnZXRTY3JvbGxCZWhhdmlvciIsIl91cGRhdGVTY3JvbGwiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJzY3JvbGxCZWhhdmlvciIsInVwZGF0ZVNjcm9sbFBvc2l0aW9uIiwiLi9nZXRXaW5kb3dTY3JvbGxQb3NpdGlvbiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9TdGF0ZS5qcyIsIlN0YXRlIiwiZ2V0UGF0aCIsImdldEN1cnJlbnRQYXRoIiwiZ2V0UGF0aG5hbWUiLCJnZXRDdXJyZW50UGF0aG5hbWUiLCJnZXRQYXJhbXMiLCJnZXRDdXJyZW50UGFyYW1zIiwiZ2V0UXVlcnkiLCJnZXRDdXJyZW50UXVlcnkiLCJnZXRSb3V0ZXMiLCJnZXRDdXJyZW50Um91dGVzIiwiaXNBY3RpdmUiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvVHJhbnNpdGlvbi5qcyIsIlRyYW5zaXRpb24iLCJyZXRyeSIsImFib3J0UmVhc29uIiwiYWJvcnQiLCJjb21wb25lbnRzIiwiLi9DYW5jZWxsYXRpb24iLCIuL1JlZGlyZWN0IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2FjdGlvbnMvTG9jYXRpb25BY3Rpb25zLmpzIiwiTG9jYXRpb25BY3Rpb25zIiwiUFVTSCIsIlJFUExBQ0UiLCJQT1AiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvYmVoYXZpb3JzL0ltaXRhdGVCcm93c2VyQmVoYXZpb3IuanMiLCJJbWl0YXRlQnJvd3NlckJlaGF2aW9yIiwiYWN0aW9uVHlwZSIsInNjcm9sbFRvIiwieSIsIi4uL2FjdGlvbnMvTG9jYXRpb25BY3Rpb25zIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2JlaGF2aW9ycy9TY3JvbGxUb1RvcEJlaGF2aW9yLmpzIiwiU2Nyb2xsVG9Ub3BCZWhhdmlvciIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9jb21wb25lbnRzL0NvbnRleHRXcmFwcGVyLmpzIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX19wcm90b19fIiwiQ29udGV4dFdyYXBwZXIiLCJfUmVhY3QkQ29tcG9uZW50IiwiY2hpbGRyZW4iLCJDb21wb25lbnQiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9EZWZhdWx0Um91dGUuanMiLCJEZWZhdWx0Um91dGUiLCJfUm91dGUiLCJwcm9wVHlwZXMiLCJkZWZhdWx0UHJvcHMiLCIuLi9Qcm9wVHlwZXMiLCIuL1JvdXRlSGFuZGxlciIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9jb21wb25lbnRzL0xpbmsuanMiLCJpc0xlZnRDbGlja0V2ZW50IiwiYnV0dG9uIiwiaXNNb2RpZmllZEV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImNsaWNrUmVzdWx0IiwiYWxsb3dUcmFuc2l0aW9uIiwib25DbGljayIsImRlZmF1bHRQcmV2ZW50ZWQiLCJwcmV2ZW50RGVmYXVsdCIsImdldEFjdGl2ZVN0YXRlIiwiYWN0aXZlQ2xhc3NOYW1lIiwiZ2V0SHJlZiIsImdldENsYXNzTmFtZSIsImhhbmRsZUNsaWNrIiwiYWN0aXZlU3R5bGUiLCJzdHlsZSIsIkRPTSIsIm9uZU9mVHlwZSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9jb21wb25lbnRzL05vdEZvdW5kUm91dGUuanMiLCJOb3RGb3VuZFJvdXRlIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2NvbXBvbmVudHMvUmVkaXJlY3QuanMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9Sb3V0ZS5qcyIsImJvb2wiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9Sb3V0ZUhhbmRsZXIuanMiLCJSRUZfTkFNRSIsInJvdXRlRGVwdGgiLCJfdXBkYXRlUm91dGVDb21wb25lbnQiLCJyZWZzIiwiY29tcG9uZW50Iiwic2V0Um91dGVDb21wb25lbnRBdERlcHRoIiwiZ2V0Um91dGVEZXB0aCIsImdldFJvdXRlQXREZXB0aCIsImNoaWxkUHJvcHMiLCJyZWYiLCJjcmVhdGVDaGlsZFJvdXRlSGFuZGxlciIsImNoaWxkQ29udGV4dFR5cGVzIiwiLi9Db250ZXh0V3JhcHBlciIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9jcmVhdGVSb3V0ZXIuanMiLCJoYXNQcm9wZXJ0aWVzIiwiaGFzTWF0Y2giLCJwcmV2UGFyYW1zIiwibmV4dFBhcmFtcyIsInByZXZRdWVyeSIsIm5leHRRdWVyeSIsImFkZFJvdXRlc1RvTmFtZWRSb3V0ZXMiLCJuYW1lZFJvdXRlcyIsInJvdXRlSXNBY3RpdmUiLCJhY3RpdmVSb3V0ZXMiLCJyb3V0ZU5hbWUiLCJwYXJhbXNBcmVBY3RpdmUiLCJhY3RpdmVQYXJhbXMiLCJxdWVyeUlzQWN0aXZlIiwiYWN0aXZlUXVlcnkiLCJjcmVhdGVSb3V0ZXIiLCJpc1JlYWN0Q2hpbGRyZW4iLCJtb3VudGVkQ29tcG9uZW50cyIsImxvY2F0aW9uIiwiREVGQVVMVF9MT0NBVElPTiIsIkRFRkFVTFRfU0NST0xMX0JFSEFWSU9SIiwibmV4dFN0YXRlIiwicGVuZGluZ1RyYW5zaXRpb24iLCJkaXNwYXRjaEhhbmRsZXIiLCJTdGF0aWNMb2NhdGlvbiIsIk5PREVfRU5WIiwibmVlZHNET00iLCJIaXN0b3J5TG9jYXRpb24iLCJzdXBwb3J0c0hpc3RvcnkiLCJSZWZyZXNoTG9jYXRpb24iLCJpc1J1bm5pbmciLCJjYW5jZWxQZW5kaW5nVHJhbnNpdGlvbiIsImNsZWFyQWxsUm91dGVzIiwiYWRkUm91dGVzIiwiY3JlYXRlUm91dGVzRnJvbVJlYWN0Q2hpbGRyZW4iLCJyZXBsYWNlUm91dGVzIiwicmVmcmVzaCIsImZpbmRNYXRjaCIsImhhbmRsZUFib3J0Iiwib25BYm9ydCIsImhhbmRsZUVycm9yIiwib25FcnJvciIsImhhbmRsZUxvY2F0aW9uQ2hhbmdlIiwiY2hhbmdlIiwiZGlzcGF0Y2giLCJwcmV2UGF0aCIsImlzUmVmcmVzaGluZyIsImZyb21Sb3V0ZXMiLCJ0b1JvdXRlcyIsIm5leHRSb3V0ZXMiLCJmcm9tQ29tcG9uZW50cyIsIm5ld1N0YXRlIiwiYWRkQ2hhbmdlTGlzdGVuZXIiLCJzdG9wIiwicmVtb3ZlQ2hhbmdlTGlzdGVuZXIiLCJnZXRMb2NhdGlvbiIsIm1peGlucyIsImdldENoaWxkQ29udGV4dCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiLi9IaXN0b3J5IiwiLi9NYXRjaCIsIi4vU2Nyb2xsSGlzdG9yeSIsIi4vVHJhbnNpdGlvbiIsIi4vYWN0aW9ucy9Mb2NhdGlvbkFjdGlvbnMiLCIuL2JlaGF2aW9ycy9JbWl0YXRlQnJvd3NlckJlaGF2aW9yIiwiLi9jcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbiIsIi4vaXNSZWFjdENoaWxkcmVuIiwiLi9sb2NhdGlvbnMvSGFzaExvY2F0aW9uIiwiLi9sb2NhdGlvbnMvSGlzdG9yeUxvY2F0aW9uIiwiLi9sb2NhdGlvbnMvUmVmcmVzaExvY2F0aW9uIiwiLi9sb2NhdGlvbnMvU3RhdGljTG9jYXRpb24iLCIuL3N1cHBvcnRzSGlzdG9yeSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9jcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbi5qcyIsImNoZWNrUHJvcFR5cGVzIiwiY3JlYXRlUm91dGVPcHRpb25zIiwid2lsbFRyYW5zaXRpb25UbyIsIndpbGxUcmFuc2l0aW9uRnJvbSIsImNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudCIsImVsZW1lbnQiLCJpc1ZhbGlkRWxlbWVudCIsImNyZWF0ZURlZmF1bHRSb3V0ZSIsImNyZWF0ZU5vdEZvdW5kUm91dGUiLCJjcmVhdGVSZWRpcmVjdCIsIkNoaWxkcmVuIiwiY2hpbGQiLCIuL2NvbXBvbmVudHMvRGVmYXVsdFJvdXRlIiwiLi9jb21wb25lbnRzL05vdEZvdW5kUm91dGUiLCIuL2NvbXBvbmVudHMvUmVkaXJlY3QiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvZ2V0V2luZG93U2Nyb2xsUG9zaXRpb24uanMiLCJwYWdlWE9mZnNldCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbExlZnQiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9pbmRleC5qcyIsIkFjdGl2ZUhhbmRsZXIiLCJUZXN0TG9jYXRpb24iLCIuL05hdmlnYXRpb24iLCIuL1N0YXRlIiwiLi9iZWhhdmlvcnMvU2Nyb2xsVG9Ub3BCZWhhdmlvciIsIi4vY29tcG9uZW50cy9MaW5rIiwiLi9jb21wb25lbnRzL1JvdXRlIiwiLi9jb21wb25lbnRzL1JvdXRlSGFuZGxlciIsIi4vY3JlYXRlUm91dGVyIiwiLi9sb2NhdGlvbnMvVGVzdExvY2F0aW9uIiwiLi9ydW5Sb3V0ZXIiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvaXNSZWFjdENoaWxkcmVuLmpzIiwiaXNWYWxpZENoaWxkIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2xvY2F0aW9ucy9IYXNoTG9jYXRpb24uanMiLCJub3RpZnlDaGFuZ2UiLCJfbGlzdGVuZXJzIiwibGlzdGVuZXIiLCJlbnN1cmVTbGFzaCIsIm9uSGFzaENoYW5nZSIsImN1ckFjdGlvblR5cGUiLCJfYWN0aW9uVHlwZSIsIl9pc0xpc3RlbmluZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudCIsImRlY29kZVVSSSIsIi4uL0hpc3RvcnkiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvbG9jYXRpb25zL0hpc3RvcnlMb2NhdGlvbi5qcyIsIm9uUG9wU3RhdGUiLCJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvbG9jYXRpb25zL1JlZnJlc2hMb2NhdGlvbi5qcyIsIi4vSGlzdG9yeUxvY2F0aW9uIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2xvY2F0aW9ucy9TdGF0aWNMb2NhdGlvbi5qcyIsInRocm93Q2Fubm90TW9kaWZ5IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2xvY2F0aW9ucy9UZXN0TG9jYXRpb24uanMiLCJsaXN0ZW5lcnMiLCJfdXBkYXRlSGlzdG9yeUxlbmd0aCIsIl9ub3RpZnlDaGFuZ2UiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvcnVuUm91dGVyLmpzIiwicnVuUm91dGVyIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL3N1cHBvcnRzSGlzdG9yeS5qcyIsInVhIiwidXNlckFnZW50IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJUb09iamVjdCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9xcy9pbmRleC5qcyIsIi4vbGliLyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9xcy9saWIvaW5kZXguanMiLCJTdHJpbmdpZnkiLCJQYXJzZSIsIi4vcGFyc2UiLCIuL3N0cmluZ2lmeSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9xcy9saWIvcGFyc2UuanMiLCJVdGlscyIsImludGVybmFscyIsImRlbGltaXRlciIsImRlcHRoIiwiYXJyYXlMaW1pdCIsInBhcmFtZXRlckxpbWl0IiwicGFyc2VWYWx1ZXMiLCJwYXJ0cyIsIkluZmluaXR5IiwiaWwiLCJwYXJ0IiwicG9zIiwiZGVjb2RlIiwicGFyc2VPYmplY3QiLCJjbGVhblJvb3QiLCJpbmRleFN0cmluZyIsInBhcnNlS2V5cyIsInRlbXBPYmoiLCJuZXdPYmoiLCIuL3V0aWxzIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3FzL2xpYi9zdHJpbmdpZnkuanMiLCJhcnJheVByZWZpeEdlbmVyYXRvcnMiLCJicmFja2V0cyIsImluZGljZXMiLCJnZW5lcmF0ZUFycmF5UHJlZml4IiwiaXNCdWZmZXIiLCJ0b0lTT1N0cmluZyIsIm9iaktleXMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcXMvbGliL3V0aWxzLmpzIiwiYXJyYXlUb09iamVjdCIsImsiLCJrbCIsImRlY29kZVVSSUNvbXBvbmVudCIsImxvb2t1cCIsImNvbXBhY3RlZCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0F1dG9Gb2N1c01peGluLmpzIiwiZm9jdXNOb2RlIiwiQXV0b0ZvY3VzTWl4aW4iLCJhdXRvRm9jdXMiLCJnZXRET01Ob2RlIiwiLi9mb2N1c05vZGUiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9CZWZvcmVJbnB1dEV2ZW50UGx1Z2luLmpzIiwiaXNQcmVzdG8iLCJvcGVyYSIsImlzS2V5cHJlc3NDb21tYW5kIiwibmF0aXZlRXZlbnQiLCJnZXRDb21wb3NpdGlvbkV2ZW50VHlwZSIsInRvcExldmVsVHlwZSIsInRvcExldmVsVHlwZXMiLCJ0b3BDb21wb3NpdGlvblN0YXJ0IiwiZXZlbnRUeXBlcyIsImNvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25VcGRhdGUiLCJjb21wb3NpdGlvblVwZGF0ZSIsImlzRmFsbGJhY2tDb21wb3NpdGlvblN0YXJ0IiwidG9wS2V5RG93biIsIlNUQVJUX0tFWUNPREUiLCJpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQiLCJ0b3BLZXlVcCIsIkVORF9LRVlDT0RFUyIsInRvcEtleVByZXNzIiwidG9wTW91c2VEb3duIiwidG9wQmx1ciIsImdldERhdGFGcm9tQ3VzdG9tRXZlbnQiLCJleHRyYWN0Q29tcG9zaXRpb25FdmVudCIsInRvcExldmVsVGFyZ2V0IiwidG9wTGV2ZWxUYXJnZXRJRCIsImV2ZW50VHlwZSIsImZhbGxiYWNrRGF0YSIsImNhblVzZUNvbXBvc2l0aW9uRXZlbnQiLCJjdXJyZW50Q29tcG9zaXRpb24iLCJ1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSIsIkZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZSIsImdldFBvb2xlZCIsIlN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQiLCJjdXN0b21EYXRhIiwiRXZlbnRQcm9wYWdhdG9ycyIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMiLCJnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzIiwid2hpY2giLCJTUEFDRUJBUl9DT0RFIiwiaGFzU3BhY2VLZXlwcmVzcyIsIlNQQUNFQkFSX0NIQVIiLCJ0b3BUZXh0SW5wdXQiLCJnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMiLCJyZWxlYXNlIiwidG9wUGFzdGUiLCJmcm9tQ2hhckNvZGUiLCJleHRyYWN0QmVmb3JlSW5wdXRFdmVudCIsImNhblVzZVRleHRJbnB1dEV2ZW50IiwiU3ludGhldGljSW5wdXRFdmVudCIsImJlZm9yZUlucHV0IiwiRXZlbnRDb25zdGFudHMiLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImtleU9mIiwiZG9jdW1lbnRNb2RlIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJidWJibGVkIiwib25CZWZvcmVJbnB1dCIsImNhcHR1cmVkIiwib25CZWZvcmVJbnB1dENhcHR1cmUiLCJkZXBlbmRlbmNpZXMiLCJvbkNvbXBvc2l0aW9uRW5kIiwib25Db21wb3NpdGlvbkVuZENhcHR1cmUiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlIiwib25Db21wb3NpdGlvblVwZGF0ZSIsIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImV4dHJhY3RFdmVudHMiLCIuL0V2ZW50Q29uc3RhbnRzIiwiLi9FdmVudFByb3BhZ2F0b3JzIiwiLi9FeGVjdXRpb25FbnZpcm9ubWVudCIsIi4vRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlIiwiLi9TeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50IiwiLi9TeW50aGV0aWNJbnB1dEV2ZW50IiwiLi9rZXlPZiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0NTU1Byb3BlcnR5LmpzIiwicHJlZml4S2V5IiwiaXNVbml0bGVzc051bWJlciIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJjb2x1bW5Db3VudCIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInByZWZpeGVzIiwic2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zIiwiYmFja2dyb3VuZCIsImJhY2tncm91bmRJbWFnZSIsImJhY2tncm91bmRQb3NpdGlvbiIsImJhY2tncm91bmRSZXBlYXQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXIiLCJib3JkZXJXaWR0aCIsImJvcmRlclN0eWxlIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJCb3R0b20iLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckJvdHRvbVN0eWxlIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyTGVmdFN0eWxlIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyUmlnaHRTdHlsZSIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJUb3AiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclRvcFN0eWxlIiwiYm9yZGVyVG9wQ29sb3IiLCJmb250IiwiZm9udFN0eWxlIiwiZm9udFZhcmlhbnQiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJDU1NQcm9wZXJ0eSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0NTU1Byb3BlcnR5T3BlcmF0aW9ucy5qcyIsImNhbWVsaXplU3R5bGVOYW1lIiwiZGFuZ2Vyb3VzU3R5bGVWYWx1ZSIsImh5cGhlbmF0ZVN0eWxlTmFtZSIsIm1lbW9pemVTdHJpbmdPbmx5IiwicHJvY2Vzc1N0eWxlTmFtZSIsInN0eWxlTmFtZSIsInN0eWxlRmxvYXRBY2Nlc3NvciIsImNzc0Zsb2F0IiwiYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuIiwiYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuIiwid2FybmVkU3R5bGVOYW1lcyIsIndhcm5lZFN0eWxlVmFsdWVzIiwid2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUiLCJ3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUiLCJ3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24iLCJ3YXJuVmFsaWRTdHlsZSIsIkNTU1Byb3BlcnR5T3BlcmF0aW9ucyIsImNyZWF0ZU1hcmt1cEZvclN0eWxlcyIsInN0eWxlcyIsInNlcmlhbGl6ZWQiLCJzdHlsZVZhbHVlIiwic2V0VmFsdWVGb3JTdHlsZXMiLCJleHBhbnNpb24iLCJpbmRpdmlkdWFsU3R5bGVOYW1lIiwiLi9DU1NQcm9wZXJ0eSIsIi4vY2FtZWxpemVTdHlsZU5hbWUiLCIuL2Rhbmdlcm91c1N0eWxlVmFsdWUiLCIuL2h5cGhlbmF0ZVN0eWxlTmFtZSIsIi4vbWVtb2l6ZVN0cmluZ09ubHkiLCIuL3dhcm5pbmciLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DYWxsYmFja1F1ZXVlLmpzIiwiQ2FsbGJhY2tRdWV1ZSIsIl9jYWxsYmFja3MiLCJfY29udGV4dHMiLCJQb29sZWRDbGFzcyIsImVucXVldWUiLCJub3RpZnlBbGwiLCJjYWxsYmFja3MiLCJjb250ZXh0cyIsInJlc2V0IiwiZGVzdHJ1Y3RvciIsImFkZFBvb2xpbmdUbyIsIi4vT2JqZWN0LmFzc2lnbiIsIi4vUG9vbGVkQ2xhc3MiLCIuL2ludmFyaWFudCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0NoYW5nZUV2ZW50UGx1Z2luLmpzIiwic2hvdWxkVXNlQ2hhbmdlRXZlbnQiLCJlbGVtIiwibm9kZU5hbWUiLCJtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50IiwiU3ludGhldGljRXZlbnQiLCJhY3RpdmVFbGVtZW50SUQiLCJSZWFjdFVwZGF0ZXMiLCJiYXRjaGVkVXBkYXRlcyIsInJ1bkV2ZW50SW5CYXRjaCIsIkV2ZW50UGx1Z2luSHViIiwiZW5xdWV1ZUV2ZW50cyIsInByb2Nlc3NFdmVudFF1ZXVlIiwic3RhcnRXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4IiwidGFyZ2V0SUQiLCJhY3RpdmVFbGVtZW50Iiwic3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgiLCJkZXRhY2hFdmVudCIsImdldFRhcmdldElERm9yQ2hhbmdlRXZlbnQiLCJ0b3BDaGFuZ2UiLCJoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFOCIsInRvcEZvY3VzIiwic3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlIiwiYWN0aXZlRWxlbWVudFZhbHVlIiwiYWN0aXZlRWxlbWVudFZhbHVlUHJvcCIsIm5ld1ZhbHVlUHJvcCIsImhhbmRsZVByb3BlcnR5Q2hhbmdlIiwic3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UiLCJzcmNFbGVtZW50IiwiZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50IiwidG9wSW5wdXQiLCJoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUUiLCJnZXRUYXJnZXRJREZvcklucHV0RXZlbnRJRSIsInRvcFNlbGVjdGlvbkNoYW5nZSIsInNob3VsZFVzZUNsaWNrRXZlbnQiLCJnZXRUYXJnZXRJREZvckNsaWNrRXZlbnQiLCJ0b3BDbGljayIsImlzRXZlbnRTdXBwb3J0ZWQiLCJpc1RleHRJbnB1dEVsZW1lbnQiLCJvbkNoYW5nZUNhcHR1cmUiLCJkb2VzQ2hhbmdlRXZlbnRCdWJibGUiLCJpc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJDaGFuZ2VFdmVudFBsdWdpbiIsImdldFRhcmdldElERnVuYyIsImhhbmRsZUV2ZW50RnVuYyIsIi4vRXZlbnRQbHVnaW5IdWIiLCIuL1JlYWN0VXBkYXRlcyIsIi4vU3ludGhldGljRXZlbnQiLCIuL2lzRXZlbnRTdXBwb3J0ZWQiLCIuL2lzVGV4dElucHV0RWxlbWVudCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0NsaWVudFJlYWN0Um9vdEluZGV4LmpzIiwibmV4dFJlYWN0Um9vdEluZGV4IiwiQ2xpZW50UmVhY3RSb290SW5kZXgiLCJjcmVhdGVSZWFjdFJvb3RJbmRleCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0RPTUNoaWxkcmVuT3BlcmF0aW9ucy5qcyIsImluc2VydENoaWxkQXQiLCJwYXJlbnROb2RlIiwiY2hpbGROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiY2hpbGROb2RlcyIsIkRhbmdlciIsIlJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzIiwic2V0VGV4dENvbnRlbnQiLCJET01DaGlsZHJlbk9wZXJhdGlvbnMiLCJkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCIsInVwZGF0ZVRleHRDb250ZW50IiwicHJvY2Vzc1VwZGF0ZXMiLCJ1cGRhdGVzIiwibWFya3VwTGlzdCIsInVwZGF0ZSIsImluaXRpYWxDaGlsZHJlbiIsInVwZGF0ZWRDaGlsZHJlbiIsIk1PVkVfRVhJU1RJTkciLCJSRU1PVkVfTk9ERSIsInVwZGF0ZWRJbmRleCIsInVwZGF0ZWRDaGlsZCIsInBhcmVudElEIiwicmVuZGVyZWRNYXJrdXAiLCJkYW5nZXJvdXNseVJlbmRlck1hcmt1cCIsInJlbW92ZUNoaWxkIiwiSU5TRVJUX01BUktVUCIsIm1hcmt1cEluZGV4IiwidG9JbmRleCIsIlRFWFRfQ09OVEVOVCIsInRleHRDb250ZW50IiwiLi9EYW5nZXIiLCIuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzIiwiLi9zZXRUZXh0Q29udGVudCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0RPTVByb3BlcnR5LmpzIiwiY2hlY2tNYXNrIiwiRE9NUHJvcGVydHlJbmplY3Rpb24iLCJNVVNUX1VTRV9BVFRSSUJVVEUiLCJNVVNUX1VTRV9QUk9QRVJUWSIsIkhBU19TSURFX0VGRkVDVFMiLCJIQVNfQk9PTEVBTl9WQUxVRSIsIkhBU19OVU1FUklDX1ZBTFVFIiwiSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUiLCJIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFIiwiaW5qZWN0RE9NUHJvcGVydHlDb25maWciLCJkb21Qcm9wZXJ0eUNvbmZpZyIsIlByb3BlcnRpZXMiLCJET01BdHRyaWJ1dGVOYW1lcyIsIkRPTVByb3BlcnR5TmFtZXMiLCJET01NdXRhdGlvbk1ldGhvZHMiLCJpc0N1c3RvbUF0dHJpYnV0ZSIsIkRPTVByb3BlcnR5IiwiX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zIiwiaXNTdGFuZGFyZE5hbWUiLCJsb3dlckNhc2VkIiwiZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUiLCJhdHRyaWJ1dGVOYW1lIiwiZ2V0QXR0cmlidXRlTmFtZSIsImdldFByb3BlcnR5TmFtZSIsImdldE11dGF0aW9uTWV0aG9kIiwicHJvcENvbmZpZyIsIm11c3RVc2VBdHRyaWJ1dGUiLCJtdXN0VXNlUHJvcGVydHkiLCJoYXNTaWRlRWZmZWN0cyIsImhhc0Jvb2xlYW5WYWx1ZSIsImhhc051bWVyaWNWYWx1ZSIsImhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlIiwiaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSIsImRlZmF1bHRWYWx1ZUNhY2hlIiwiSURfQVRUUklCVVRFX05BTUUiLCJpc0N1c3RvbUF0dHJpYnV0ZUZuIiwiZ2V0RGVmYXVsdFZhbHVlRm9yUHJvcGVydHkiLCJ0ZXN0RWxlbWVudCIsIm5vZGVEZWZhdWx0cyIsImluamVjdGlvbiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0RPTVByb3BlcnR5T3BlcmF0aW9ucy5qcyIsInNob3VsZElnbm9yZVZhbHVlIiwicXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIiLCJyZWFjdFByb3BzIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJ3YXJuZWRQcm9wZXJ0aWVzIiwid2FyblVua25vd25Qcm9wZXJ0eSIsImxvd2VyQ2FzZWROYW1lIiwic3RhbmRhcmROYW1lIiwiRE9NUHJvcGVydHlPcGVyYXRpb25zIiwiY3JlYXRlTWFya3VwRm9ySUQiLCJjcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eSIsInNldFZhbHVlRm9yUHJvcGVydHkiLCJtdXRhdGlvbk1ldGhvZCIsImRlbGV0ZVZhbHVlRm9yUHJvcGVydHkiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCIuL0RPTVByb3BlcnR5IiwiLi9xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlciIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0Rhbmdlci5qcyIsImdldE5vZGVOYW1lIiwibWFya3VwIiwiY3JlYXRlTm9kZXNGcm9tTWFya3VwIiwiZW1wdHlGdW5jdGlvbiIsImdldE1hcmt1cFdyYXAiLCJPUEVOX1RBR19OQU1FX0VYUCIsIlJFU1VMVF9JTkRFWF9BVFRSIiwibWFya3VwQnlOb2RlTmFtZSIsInJlc3VsdExpc3QiLCJyZXN1bHRMaXN0QXNzaWdubWVudENvdW50IiwicmVzdWx0SW5kZXgiLCJtYXJrdXBMaXN0QnlOb2RlTmFtZSIsInJlbmRlck5vZGVzIiwicmVuZGVyTm9kZSIsImhhc0F0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsIm9sZENoaWxkIiwidGFnTmFtZSIsIm5ld0NoaWxkIiwicmVwbGFjZUNoaWxkIiwiLi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXAiLCIuL2VtcHR5RnVuY3Rpb24iLCIuL2dldE1hcmt1cFdyYXAiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlci5qcyIsIkRlZmF1bHRFdmVudFBsdWdpbk9yZGVyIiwiUmVzcG9uZGVyRXZlbnRQbHVnaW4iLCJTaW1wbGVFdmVudFBsdWdpbiIsIlRhcEV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJBbmFseXRpY3NFdmVudFBsdWdpbiIsIk1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW4iLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FbnRlckxlYXZlRXZlbnRQbHVnaW4uanMiLCJTeW50aGV0aWNNb3VzZUV2ZW50IiwiUmVhY3RNb3VudCIsImdldEZpcnN0UmVhY3RET00iLCJtb3VzZUVudGVyIiwicmVnaXN0cmF0aW9uTmFtZSIsIm9uTW91c2VFbnRlciIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwibW91c2VMZWF2ZSIsIm9uTW91c2VMZWF2ZSIsImV4dHJhY3RlZEV2ZW50cyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsIndpbiIsImRvYyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsInRvRWxlbWVudCIsImZyb21JRCIsImdldElEIiwidG9JRCIsImxlYXZlIiwiZW50ZXIiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCIuL1JlYWN0TW91bnQiLCIuL1N5bnRoZXRpY01vdXNlRXZlbnQiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudENvbnN0YW50cy5qcyIsImtleU1pcnJvciIsIlByb3BhZ2F0aW9uUGhhc2VzIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRXJyb3IiLCJ0b3BMb2FkIiwidG9wTW91c2VNb3ZlIiwidG9wTW91c2VVcCIsInRvcFJlc2V0IiwidG9wU2Nyb2xsIiwidG9wU3VibWl0IiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BXaGVlbCIsIi4va2V5TWlycm9yIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRMaXN0ZW5lci5qcyIsIkV2ZW50TGlzdGVuZXIiLCJsaXN0ZW4iLCJjYXB0dXJlIiwicmVnaXN0ZXJEZWZhdWx0IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQbHVnaW5IdWIuanMiLCJ2YWxpZGF0ZUluc3RhbmNlSGFuZGxlIiwidmFsaWQiLCJJbnN0YW5jZUhhbmRsZSIsInRyYXZlcnNlVHdvUGhhc2UiLCJ0cmF2ZXJzZUVudGVyTGVhdmUiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQbHVnaW5VdGlscyIsImFjY3VtdWxhdGVJbnRvIiwiZm9yRWFjaEFjY3VtdWxhdGVkIiwibGlzdGVuZXJCYW5rIiwiZXZlbnRRdWV1ZSIsImV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZSIsImV4ZWN1dGVEaXNwYXRjaCIsIlBsdWdpbk1vZHVsZSIsImdldFBsdWdpbk1vZHVsZUZvckV2ZW50IiwiZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyIiwiaXNQZXJzaXN0ZW50IiwiaW5qZWN0TW91bnQiLCJpbmplY3RJbnN0YW5jZUhhbmRsZSIsIkluamVjdGVkSW5zdGFuY2VIYW5kbGUiLCJnZXRJbnN0YW5jZUhhbmRsZSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInB1dExpc3RlbmVyIiwiYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUiLCJnZXRMaXN0ZW5lciIsImRlbGV0ZUxpc3RlbmVyIiwiZGVsZXRlQWxsTGlzdGVuZXJzIiwiZXZlbnRzIiwicGx1Z2lucyIsInBvc3NpYmxlUGx1Z2luIiwicHJvY2Vzc2luZ0V2ZW50UXVldWUiLCJfX3B1cmdlIiwiX19nZXRMaXN0ZW5lckJhbmsiLCIuL0V2ZW50UGx1Z2luUmVnaXN0cnkiLCIuL0V2ZW50UGx1Z2luVXRpbHMiLCIuL2FjY3VtdWxhdGVJbnRvIiwiLi9mb3JFYWNoQWNjdW11bGF0ZWQiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFBsdWdpblJlZ2lzdHJ5LmpzIiwicmVjb21wdXRlUGx1Z2luT3JkZXJpbmciLCJFdmVudFBsdWdpbk9yZGVyIiwicGx1Z2luTmFtZSIsIm5hbWVzVG9QbHVnaW5zIiwicGx1Z2luSW5kZXgiLCJwdWJsaXNoZWRFdmVudHMiLCJldmVudE5hbWUiLCJwdWJsaXNoRXZlbnRGb3JQbHVnaW4iLCJkaXNwYXRjaENvbmZpZyIsInBoYXNlTmFtZSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUiLCJwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZSIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RlZE5hbWVzVG9QbHVnaW5zIiwiaXNPcmRlcmluZ0RpcnR5IiwicGhhc2UiLCJfcmVzZXRFdmVudFBsdWdpbnMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFBsdWdpblV0aWxzLmpzIiwiaXNFbmRpc2giLCJpc01vdmVpc2giLCJpc1N0YXJ0aXNoIiwiZm9yRWFjaEV2ZW50RGlzcGF0Y2giLCJkaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaExpc3RlbmVycyIsImRpc3BhdGNoSURzIiwiX2Rpc3BhdGNoSURzIiwidmFsaWRhdGVFdmVudERpc3BhdGNoZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImRvbUlEIiwiY3VycmVudFRhcmdldCIsIk1vdW50IiwiZ2V0Tm9kZSIsInJldHVyblZhbHVlIiwiZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwiLCJleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlIiwiZXhlY3V0ZURpcmVjdERpc3BhdGNoIiwiZGlzcGF0Y2hMaXN0ZW5lciIsImRpc3BhdGNoSUQiLCJoYXNEaXNwYXRjaGVzIiwiSW5qZWN0ZWRNb3VudCIsImxpc3RlbmVyc0lzQXJyIiwiaWRzSXNBcnIiLCJJRHNMZW4iLCJsaXN0ZW5lcnNMZW4iLCJ1c2VUb3VjaEV2ZW50cyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50UHJvcGFnYXRvcnMuanMiLCJsaXN0ZW5lckF0UGhhc2UiLCJwcm9wYWdhdGlvblBoYXNlIiwiYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyIsInVwd2FyZHMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlIiwiZGlzcGF0Y2hNYXJrZXIiLCJhY2N1bXVsYXRlRGlzcGF0Y2hlcyIsImlnbm9yZWREaXJlY3Rpb24iLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSIsImFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9GYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUuanMiLCJfcm9vdCIsIl9zdGFydFRleHQiLCJnZXRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsImdldFRleHRDb250ZW50QWNjZXNzb3IiLCJzdGFydFZhbHVlIiwic3RhcnRMZW5ndGgiLCJlbmRWYWx1ZSIsImVuZExlbmd0aCIsIm1pbkVuZCIsInNsaWNlVGFpbCIsIi4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0hUTUxET01Qcm9wZXJ0eUNvbmZpZy5qcyIsImhhc1NWRyIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsIkhUTUxET01Qcm9wZXJ0eUNvbmZpZyIsImFjY2VwdCIsImFjY2VwdENoYXJzZXQiLCJhY2Nlc3NLZXkiLCJhbGxvd0Z1bGxTY3JlZW4iLCJhbGxvd1RyYW5zcGFyZW5jeSIsImF1dG9Db21wbGV0ZSIsImF1dG9QbGF5IiwiY2VsbFBhZGRpbmciLCJjZWxsU3BhY2luZyIsImNoYXJTZXQiLCJjaGVja2VkIiwiY2xhc3NJRCIsImNvbHMiLCJjb2xTcGFuIiwiY29udGVudCIsImNvbnRlbnRFZGl0YWJsZSIsImNvbnRleHRNZW51IiwiY29udHJvbHMiLCJjb29yZHMiLCJjcm9zc09yaWdpbiIsImRhdGVUaW1lIiwiZGlzYWJsZWQiLCJkb3dubG9hZCIsImRyYWdnYWJsZSIsImVuY1R5cGUiLCJmb3JtIiwiZm9ybUFjdGlvbiIsImZvcm1FbmNUeXBlIiwiZm9ybU1ldGhvZCIsImZvcm1Ob1ZhbGlkYXRlIiwiZm9ybVRhcmdldCIsImZyYW1lQm9yZGVyIiwiaGVhZGVycyIsImhlaWdodCIsImhpZGRlbiIsImhyZWZMYW5nIiwiaHRtbEZvciIsImh0dHBFcXVpdiIsImljb24iLCJsYWJlbCIsImxhbmciLCJsaXN0IiwibG9vcCIsIm1hbmlmZXN0IiwibWFyZ2luSGVpZ2h0IiwibWFyZ2luV2lkdGgiLCJtYXhMZW5ndGgiLCJtZWRpYSIsIm1lZGlhR3JvdXAiLCJtdWx0aXBsZSIsIm11dGVkIiwibm9WYWxpZGF0ZSIsIm9wZW4iLCJvcHRpbXVtIiwicG9zdGVyIiwicHJlbG9hZCIsInJhZGlvR3JvdXAiLCJyZWFkT25seSIsInJlbCIsInJlcXVpcmVkIiwicm9sZSIsInJvd3MiLCJyb3dTcGFuIiwic2FuZGJveCIsInNjb3BlIiwic2NvcGVkIiwic2Nyb2xsaW5nIiwic2VhbWxlc3MiLCJzZWxlY3RlZCIsInNoYXBlIiwic2l6ZXMiLCJzcGFuIiwic3BlbGxDaGVjayIsInNyY0RvYyIsInNyY1NldCIsInRhYkluZGV4IiwidXNlTWFwIiwid2lkdGgiLCJ3bW9kZSIsImF1dG9DYXBpdGFsaXplIiwiYXV0b0NvcnJlY3QiLCJpdGVtUHJvcCIsIml0ZW1TY29wZSIsIml0ZW1UeXBlIiwiaXRlbUlEIiwiaXRlbVJlZiIsInVuc2VsZWN0YWJsZSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0xpbmtlZFZhbHVlVXRpbHMuanMiLCJfYXNzZXJ0U2luZ2xlTGluayIsImNoZWNrZWRMaW5rIiwidmFsdWVMaW5rIiwiX2Fzc2VydFZhbHVlTGluayIsIl9hc3NlcnRDaGVja2VkTGluayIsIl9oYW5kbGVMaW5rZWRWYWx1ZUNoYW5nZSIsInJlcXVlc3RDaGFuZ2UiLCJfaGFuZGxlTGlua2VkQ2hlY2tDaGFuZ2UiLCJoYXNSZWFkT25seVZhbHVlIiwiY2hlY2tib3giLCJpbWFnZSIsInJhZGlvIiwic3VibWl0IiwiTGlua2VkVmFsdWVVdGlscyIsIk1peGluIiwiZ2V0VmFsdWUiLCJnZXRDaGVja2VkIiwiZ2V0T25DaGFuZ2UiLCIuL1JlYWN0UHJvcFR5cGVzIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvTG9jYWxFdmVudFRyYXBNaXhpbi5qcyIsIlJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciIsIkxvY2FsRXZlbnRUcmFwTWl4aW4iLCJ0cmFwQnViYmxlZEV2ZW50IiwiaGFuZGxlckJhc2VOYW1lIiwiaXNNb3VudGVkIiwiX2xvY2FsRXZlbnRMaXN0ZW5lcnMiLCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlciIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL01vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW4uanMiLCJvbmNsaWNrIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qcyIsIm5leHRJbmRleCIsIm5leHRTb3VyY2UiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9Qb29sZWRDbGFzcy5qcyIsIm9uZUFyZ3VtZW50UG9vbGVyIiwiY29weUZpZWxkc0Zyb20iLCJLbGFzcyIsImluc3RhbmNlUG9vbCIsInR3b0FyZ3VtZW50UG9vbGVyIiwiYTEiLCJhMiIsInRocmVlQXJndW1lbnRQb29sZXIiLCJhMyIsImZpdmVBcmd1bWVudFBvb2xlciIsImE0IiwiYTUiLCJzdGFuZGFyZFJlbGVhc2VyIiwicG9vbFNpemUiLCJERUZBVUxUX1BPT0xfU0laRSIsIkRFRkFVTFRfUE9PTEVSIiwiQ29weUNvbnN0cnVjdG9yIiwicG9vbGVyIiwiTmV3S2xhc3MiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdC5qcyIsIlJlYWN0Q2hpbGRyZW4iLCJSZWFjdENvbXBvbmVudCIsIlJlYWN0Q2xhc3MiLCJSZWFjdENvbnRleHQiLCJSZWFjdEN1cnJlbnRPd25lciIsIlJlYWN0RWxlbWVudCIsIlJlYWN0RWxlbWVudFZhbGlkYXRvciIsIlJlYWN0RE9NIiwiUmVhY3RET01UZXh0Q29tcG9uZW50IiwiUmVhY3REZWZhdWx0SW5qZWN0aW9uIiwiUmVhY3RJbnN0YW5jZUhhbmRsZXMiLCJSZWFjdFBlcmYiLCJSZWFjdFJlY29uY2lsZXIiLCJSZWFjdFNlcnZlclJlbmRlcmluZyIsImZpbmRET01Ob2RlIiwib25seUNoaWxkIiwiY3JlYXRlRmFjdG9yeSIsImNsb25lRWxlbWVudCIsIm1lYXN1cmUiLCJvbmx5IiwiaW5pdGlhbGl6ZVRvdWNoRXZlbnRzIiwic2hvdWxkVXNlVG91Y2giLCJjcmVhdGVNaXhpbiIsImNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudCIsImNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudEJ5SUQiLCJyZW5kZXJUb1N0cmluZyIsInJlbmRlclRvU3RhdGljTWFya3VwIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsIndpdGhDb250ZXh0IiwiX19zcHJlYWQiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJDdXJyZW50T3duZXIiLCJJbnN0YW5jZUhhbmRsZXMiLCJSZWNvbmNpbGVyIiwiVGV4dENvbXBvbmVudCIsInRvcCIsImRlYnVnIiwiZXhwZWN0ZWRGZWF0dXJlcyIsIi4vUmVhY3RDaGlsZHJlbiIsIi4vUmVhY3RDbGFzcyIsIi4vUmVhY3RDb21wb25lbnQiLCIuL1JlYWN0Q29udGV4dCIsIi4vUmVhY3RDdXJyZW50T3duZXIiLCIuL1JlYWN0RE9NIiwiLi9SZWFjdERPTVRleHRDb21wb25lbnQiLCIuL1JlYWN0RGVmYXVsdEluamVjdGlvbiIsIi4vUmVhY3RFbGVtZW50IiwiLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3IiLCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzIiwiLi9SZWFjdFBlcmYiLCIuL1JlYWN0UmVjb25jaWxlciIsIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmciLCIuL2ZpbmRET01Ob2RlIiwiLi9vbmx5Q2hpbGQiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbi5qcyIsIlJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmpzIiwiZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQiLCJtb3VudEF0IiwidG9wTGlzdGVuZXJzSURLZXkiLCJyZWFjdFRvcExpc3RlbmVyc0NvdW50ZXIiLCJhbHJlYWR5TGlzdGVuaW5nVG8iLCJSZWFjdEV2ZW50RW1pdHRlck1peGluIiwiVmlld3BvcnRNZXRyaWNzIiwiaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUiLCJ0b3BFdmVudE1hcHBpbmciLCJSZWFjdEV2ZW50TGlzdGVuZXIiLCJpbmplY3RSZWFjdEV2ZW50TGlzdGVuZXIiLCJzZXRIYW5kbGVUb3BMZXZlbCIsImhhbmRsZVRvcExldmVsIiwic2V0RW5hYmxlZCIsImVuYWJsZWQiLCJpc0VuYWJsZWQiLCJsaXN0ZW5UbyIsImNvbnRlbnREb2N1bWVudEhhbmRsZSIsImlzTGlzdGVuaW5nIiwiZGVwZW5kZW5jeSIsInRyYXBDYXB0dXJlZEV2ZW50IiwiV0lORE9XX0hBTkRMRSIsImVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZyIsInJlZnJlc2hTY3JvbGxWYWx1ZXMiLCJtb25pdG9yU2Nyb2xsVmFsdWUiLCIuL1JlYWN0RXZlbnRFbWl0dGVyTWl4aW4iLCIuL1ZpZXdwb3J0TWV0cmljcyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q2hpbGRSZWNvbmNpbGVyLmpzIiwiZmxhdHRlbkNoaWxkcmVuIiwiaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCIsInNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50IiwiUmVhY3RDaGlsZFJlY29uY2lsZXIiLCJpbnN0YW50aWF0ZUNoaWxkcmVuIiwibmVzdGVkQ2hpbGROb2RlcyIsInRyYW5zYWN0aW9uIiwiY2hpbGRJbnN0YW5jZSIsInVwZGF0ZUNoaWxkcmVuIiwicHJldkNoaWxkcmVuIiwibmV4dE5lc3RlZENoaWxkTm9kZXMiLCJuZXh0Q2hpbGRyZW4iLCJwcmV2Q2hpbGQiLCJwcmV2RWxlbWVudCIsIl9jdXJyZW50RWxlbWVudCIsIm5leHRFbGVtZW50IiwicmVjZWl2ZUNvbXBvbmVudCIsInVubW91bnRDb21wb25lbnQiLCJuZXh0Q2hpbGRJbnN0YW5jZSIsInVubW91bnRDaGlsZHJlbiIsInJlbmRlcmVkQ2hpbGRyZW4iLCJyZW5kZXJlZENoaWxkIiwiLi9mbGF0dGVuQ2hpbGRyZW4iLCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQiLCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDaGlsZHJlbi5qcyIsIkZvckVhY2hCb29rS2VlcGluZyIsImZvckVhY2hGdW5jdGlvbiIsImZvckVhY2hDb250ZXh0IiwiZm9yRWFjaFNpbmdsZUNoaWxkIiwidHJhdmVyc2VDb250ZXh0IiwiZm9yRWFjaEJvb2tLZWVwaW5nIiwiZm9yRWFjaENoaWxkcmVuIiwiZm9yRWFjaEZ1bmMiLCJ0cmF2ZXJzZUFsbENoaWxkcmVuIiwiTWFwQm9va0tlZXBpbmciLCJtYXBSZXN1bHQiLCJtYXBGdW5jdGlvbiIsIm1hcENvbnRleHQiLCJtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0IiwibWFwQm9va0tlZXBpbmciLCJrZXlVbmlxdWUiLCJtYXBwZWRDaGlsZCIsIm1hcENoaWxkcmVuIiwiUmVhY3RGcmFnbWVudCIsImZvckVhY2hTaW5nbGVDaGlsZER1bW15IiwiY291bnRDaGlsZHJlbiIsIi4vUmVhY3RGcmFnbWVudCIsIi4vdHJhdmVyc2VBbGxDaGlsZHJlbiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q2xhc3MuanMiLCJ2YWxpZGF0ZVR5cGVEZWYiLCJ0eXBlRGVmIiwiUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMiLCJ2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlIiwic3BlY1BvbGljeSIsIlJlYWN0Q2xhc3NJbnRlcmZhY2UiLCJSZWFjdENsYXNzTWl4aW4iLCJTcGVjUG9saWN5IiwiT1ZFUlJJREVfQkFTRSIsIkRFRklORV9NQU5ZIiwiREVGSU5FX01BTllfTUVSR0VEIiwibWl4U3BlY0ludG9Db21wb25lbnQiLCJzcGVjIiwiTUlYSU5TX0tFWSIsIlJFU0VSVkVEX1NQRUNfS0VZUyIsImlzUmVhY3RDbGFzc01ldGhvZCIsImlzQWxyZWFkeURlZmluZWQiLCJtYXJrZWREb250QmluZCIsIl9fcmVhY3REb250QmluZCIsInNob3VsZEF1dG9CaW5kIiwiX19yZWFjdEF1dG9CaW5kTWFwIiwiY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24iLCJjcmVhdGVDaGFpbmVkRnVuY3Rpb24iLCJtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudCIsImlzUmVzZXJ2ZWQiLCJpc0luaGVyaXRlZCIsIm1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMiLCJvbmUiLCJ0d28iLCJiaW5kQXV0b0JpbmRNZXRob2QiLCJib3VuZE1ldGhvZCIsIl9fcmVhY3RCb3VuZENvbnRleHQiLCJfX3JlYWN0Qm91bmRNZXRob2QiLCJfX3JlYWN0Qm91bmRBcmd1bWVudHMiLCJfYmluZCIsIm5ld1RoaXMiLCIkX18wIiwiJF9fMSIsInJlYm91bmRNZXRob2QiLCJiaW5kQXV0b0JpbmRNZXRob2RzIiwiYXV0b0JpbmRLZXkiLCJSZWFjdEVycm9yVXRpbHMiLCJSZWFjdEluc3RhbmNlTWFwIiwiUmVhY3RMaWZlQ3ljbGUiLCJSZWFjdFByb3BUeXBlTG9jYXRpb25zIiwiUmVhY3RVcGRhdGVRdWV1ZSIsIkRFRklORV9PTkNFIiwiaW5qZWN0ZWRNaXhpbnMiLCJnZXREZWZhdWx0UHJvcHMiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwidXBkYXRlQ29tcG9uZW50IiwiY2hpbGRDb250ZXh0IiwidHlwZURlcHJlY2F0aW9uRGVzY3JpcHRvciIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlQ2FsbGJhY2siLCJvd25lciIsIl93YXJuZWRBYm91dFJlZnNJblJlbmRlciIsImdldE5hbWUiLCJpbnRlcm5hbEluc3RhbmNlIiwiY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZSIsInNldFByb3BzIiwicGFydGlhbFByb3BzIiwiZW5xdWV1ZVNldFByb3BzIiwicmVwbGFjZVByb3BzIiwibmV3UHJvcHMiLCJlbnF1ZXVlUmVwbGFjZVByb3BzIiwiUmVhY3RDbGFzc0NvbXBvbmVudCIsImluaXRpYWxTdGF0ZSIsIl9pc01vY2tGdW5jdGlvbiIsImlzUmVhY3RDbGFzc0FwcHJvdmVkIiwiY29tcG9uZW50U2hvdWxkVXBkYXRlIiwiaW5qZWN0TWl4aW4iLCIuL1JlYWN0RXJyb3JVdGlscyIsIi4vUmVhY3RJbnN0YW5jZU1hcCIsIi4vUmVhY3RMaWZlQ3ljbGUiLCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzIiwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zIiwiLi9SZWFjdFVwZGF0ZVF1ZXVlIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb25lbnQuanMiLCJwYXJ0aWFsU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsImRlcHJlY2F0ZWRBUElzIiwiZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nIiwiZm5OYW1lIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQuanMiLCJSZWFjdERPTUlET3BlcmF0aW9ucyIsIlJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50IiwicHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyIsImRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyIsInJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQiLCJkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQiLCJ1bm1vdW50SURGcm9tRW52aXJvbm1lbnQiLCJyb290Tm9kZUlEIiwicHVyZ2VJRCIsIi4vUmVhY3RET01JRE9wZXJhdGlvbnMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50LmpzIiwiaW5qZWN0ZWQiLCJSZWFjdENvbXBvbmVudEVudmlyb25tZW50IiwiaW5qZWN0RW52aXJvbm1lbnQiLCJlbnZpcm9ubWVudCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmpzIiwiZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtIiwiX293bmVyIiwiUmVhY3ROYXRpdmVDb21wb25lbnQiLCJlbXB0eU9iamVjdCIsIm5leHRNb3VudElEIiwiUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbiIsImNvbnN0cnVjdCIsIl9yb290Tm9kZUlEIiwiX2luc3RhbmNlIiwiX3BlbmRpbmdFbGVtZW50IiwiX3BlbmRpbmdTdGF0ZVF1ZXVlIiwiX3BlbmRpbmdSZXBsYWNlU3RhdGUiLCJfcGVuZGluZ0ZvcmNlVXBkYXRlIiwiX3JlbmRlcmVkQ29tcG9uZW50IiwiX21vdW50T3JkZXIiLCJfaXNUb3BMZXZlbCIsIl9wZW5kaW5nQ2FsbGJhY2tzIiwibW91bnRDb21wb25lbnQiLCJyb290SUQiLCJwdWJsaWNQcm9wcyIsIl9wcm9jZXNzUHJvcHMiLCJwdWJsaWNDb250ZXh0IiwiX3Byb2Nlc3NDb250ZXh0IiwiZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50IiwiaW5zdCIsIl93YXJuSWZDb250ZXh0c0RpZmZlciIsInJlbmRlcmVkRWxlbWVudCIsInByZXZpb3VzbHlNb3VudGluZyIsIl9wcm9jZXNzUGVuZGluZ1N0YXRlIiwiX2dldFZhbGlkYXRlZENoaWxkQ29udGV4dCIsIl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQiLCJfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCIsIl9tZXJnZUNoaWxkQ29udGV4dCIsImdldFJlYWN0TW91bnRSZWFkeSIsInByZXZpb3VzbHlVbm1vdW50aW5nIiwiY3VycmVudGx5VW5tb3VudGluZ0luc3RhbmNlIiwiX3NldFByb3BzSW50ZXJuYWwiLCJjbG9uZUFuZFJlcGxhY2VQcm9wcyIsImVucXVldWVVcGRhdGUiLCJfbWFza0NvbnRleHQiLCJtYXNrZWRDb250ZXh0IiwiY29udGV4dE5hbWUiLCJfY2hlY2tQcm9wVHlwZXMiLCJjdXJyZW50Q29udGV4dCIsImV4IiwiYWRkZW5kdW0iLCJuZXh0Q29udGV4dCIsInByZXZDb250ZXh0IiwicGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5IiwiY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFByb3BzIiwib3duZXJCYXNlZENvbnRleHQiLCJwYXJlbnRCYXNlZENvbnRleHQiLCJwYXJlbnRLZXlzIiwicHJldlBhcmVudEVsZW1lbnQiLCJuZXh0UGFyZW50RWxlbWVudCIsInByZXZVbm1hc2tlZENvbnRleHQiLCJuZXh0VW5tYXNrZWRDb250ZXh0Iiwic2hvdWxkVXBkYXRlIiwiX3BlcmZvcm1Db21wb25lbnRVcGRhdGUiLCJ1bm1hc2tlZENvbnRleHQiLCJfdXBkYXRlUmVuZGVyZWRDb21wb25lbnQiLCJwcmV2Q29tcG9uZW50SW5zdGFuY2UiLCJwcmV2UmVuZGVyZWRFbGVtZW50IiwibmV4dFJlbmRlcmVkRWxlbWVudCIsInRoaXNJRCIsInByZXZDb21wb25lbnRJRCIsIm5leHRNYXJrdXAiLCJfcmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCIsIl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQiLCJyZW5kZXJlZENvbXBvbmVudCIsInByZXZpb3VzQ29udGV4dCIsImF0dGFjaFJlZiIsImdldFB1YmxpY0luc3RhbmNlIiwiZGV0YWNoUmVmIiwibWVhc3VyZU1ldGhvZHMiLCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCIsIi4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCIsIi4vUmVhY3ROYXRpdmVDb21wb25lbnQiLCIuL2VtcHR5T2JqZWN0IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb250ZXh0LmpzIiwiZGlkV2FybiIsIm5ld0NvbnRleHQiLCJzY29wZWRDYWxsYmFjayIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyLmpzIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET00uanMiLCJjcmVhdGVET01GYWN0b3J5IiwibWFwT2JqZWN0IiwiYWJiciIsImFkZHJlc3MiLCJhcmVhIiwiYXJ0aWNsZSIsImFzaWRlIiwiYXVkaW8iLCJiZGkiLCJiZG8iLCJiaWciLCJibG9ja3F1b3RlIiwiYnIiLCJjYW52YXMiLCJjYXB0aW9uIiwiY2l0ZSIsImNvbCIsImNvbGdyb3VwIiwiZGF0YWxpc3QiLCJkZCIsImRlbCIsImRldGFpbHMiLCJkZm4iLCJkaWFsb2ciLCJkbCIsImR0IiwiZW0iLCJlbWJlZCIsImZpZWxkc2V0IiwiZmlnY2FwdGlvbiIsImZpZ3VyZSIsImZvb3RlciIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImhlYWRlciIsImhyIiwiaHRtbCIsImlmcmFtZSIsImltZyIsImlucyIsImtiZCIsImtleWdlbiIsImxlZ2VuZCIsImxpIiwibWFpbiIsIm1hcmsiLCJtZW51IiwibWVudWl0ZW0iLCJtZXRhIiwibWV0ZXIiLCJuYXYiLCJub3NjcmlwdCIsIm9sIiwib3B0Z3JvdXAiLCJvcHRpb24iLCJvdXRwdXQiLCJwYXJhbSIsInBpY3R1cmUiLCJwcmUiLCJxIiwicnAiLCJydCIsInJ1YnkiLCJzYW1wIiwic2NyaXB0Iiwic2VjdGlvbiIsInNtYWxsIiwic3Ryb25nIiwic3ViIiwic3VtbWFyeSIsInN1cCIsInRhYmxlIiwidGJvZHkiLCJ0ZCIsInRleHRhcmVhIiwidGZvb3QiLCJ0aCIsInRoZWFkIiwidGltZSIsInRyIiwidHJhY2siLCJ1bCIsInZhciIsInZpZGVvIiwid2JyIiwiY2lyY2xlIiwiY2xpcFBhdGgiLCJkZWZzIiwiZWxsaXBzZSIsImciLCJsaW5lYXJHcmFkaWVudCIsIm1hc2siLCJwb2x5Z29uIiwicG9seWxpbmUiLCJyYWRpYWxHcmFkaWVudCIsInJlY3QiLCJzdmciLCJ0c3BhbiIsIi4vbWFwT2JqZWN0IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01CdXR0b24uanMiLCJtb3VzZUxpc3RlbmVyTmFtZXMiLCJvbkRvdWJsZUNsaWNrIiwib25Nb3VzZURvd24iLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VVcCIsIm9uQ2xpY2tDYXB0dXJlIiwib25Eb3VibGVDbGlja0NhcHR1cmUiLCJvbk1vdXNlRG93bkNhcHR1cmUiLCJvbk1vdXNlTW92ZUNhcHR1cmUiLCJvbk1vdXNlVXBDYXB0dXJlIiwiUmVhY3RET01CdXR0b24iLCIuL0F1dG9Gb2N1c01peGluIiwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NQ29tcG9uZW50LmpzIiwiYXNzZXJ0VmFsaWRQcm9wcyIsImlubmVySFRNTCIsImNvbnRhaW5lciIsImZpbmRSZWFjdENvbnRhaW5lckZvcklEIiwiRUxFTUVOVF9OT0RFX1RZUEUiLCJnZXRQdXRMaXN0ZW5lclF1ZXVlIiwiZW5xdWV1ZVB1dExpc3RlbmVyIiwidmFsaWRhdGVEYW5nZXJvdXNUYWciLCJ2YWxpZGF0ZWRUYWdDYWNoZSIsIlZBTElEX1RBR19SRUdFWCIsIlJlYWN0RE9NQ29tcG9uZW50IiwiX3RhZyIsIl9yZW5kZXJlZENoaWxkcmVuIiwiX3ByZXZpb3VzU3R5bGVDb3B5IiwiUmVhY3RNdWx0aUNoaWxkIiwiZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyIiwiQ09OVEVOVF9UWVBFUyIsIlNUWUxFIiwiQmFja2VuZElET3BlcmF0aW9ucyIsIm9taXR0ZWRDbG9zZVRhZ3MiLCJjbG9zZVRhZyIsIl9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzIiwiX2NyZWF0ZUNvbnRlbnRNYXJrdXAiLCJwcm9wS2V5IiwicHJvcFZhbHVlIiwibWFya3VwRm9ySUQiLCJfX2h0bWwiLCJjb250ZW50VG9Vc2UiLCJjaGlsZHJlblRvVXNlIiwibW91bnRJbWFnZXMiLCJtb3VudENoaWxkcmVuIiwiX3VwZGF0ZURPTVByb3BlcnRpZXMiLCJfdXBkYXRlRE9NQ2hpbGRyZW4iLCJsYXN0UHJvcHMiLCJzdHlsZVVwZGF0ZXMiLCJsYXN0U3R5bGUiLCJkZWxldGVQcm9wZXJ0eUJ5SUQiLCJuZXh0UHJvcCIsImxhc3RQcm9wIiwidXBkYXRlUHJvcGVydHlCeUlEIiwidXBkYXRlU3R5bGVzQnlJRCIsImxhc3RDb250ZW50IiwibmV4dENvbnRlbnQiLCJsYXN0SHRtbCIsIm5leHRIdG1sIiwibGFzdENoaWxkcmVuIiwibGFzdEhhc0NvbnRlbnRPckh0bWwiLCJuZXh0SGFzQ29udGVudE9ySHRtbCIsInVwZGF0ZUlubmVySFRNTEJ5SUQiLCJpbmplY3RJRE9wZXJhdGlvbnMiLCJJRE9wZXJhdGlvbnMiLCIuL0NTU1Byb3BlcnR5T3BlcmF0aW9ucyIsIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zIiwiLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCIsIi4vUmVhY3RNdWx0aUNoaWxkIiwiLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTUZvcm0uanMiLCJSZWFjdERPTUZvcm0iLCIuL0xvY2FsRXZlbnRUcmFwTWl4aW4iLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTUlET3BlcmF0aW9ucy5qcyIsInNldElubmVySFRNTCIsIklOVkFMSURfUFJPUEVSVFlfRVJST1JTIiwidXBkYXRlVGV4dENvbnRlbnRCeUlEIiwiLi9ET01DaGlsZHJlbk9wZXJhdGlvbnMiLCIuL3NldElubmVySFRNTCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NSWZyYW1lLmpzIiwiUmVhY3RET01JZnJhbWUiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTUltZy5qcyIsIlJlYWN0RE9NSW1nIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01JbnB1dC5qcyIsImZvcmNlVXBkYXRlSWZNb3VudGVkIiwiaW5zdGFuY2VzQnlSZWFjdElEIiwiUmVhY3RET01JbnB1dCIsImluaXRpYWxDaGVja2VkIiwiZGVmYXVsdENoZWNrZWQiLCJfaGFuZGxlQ2hhbmdlIiwicm9vdE5vZGUiLCJhc2FwIiwicXVlcnlSb290IiwicXVlcnlTZWxlY3RvckFsbCIsImdyb3VwTGVuIiwib3RoZXJOb2RlIiwib3RoZXJJRCIsIm90aGVySW5zdGFuY2UiLCIuL0xpbmtlZFZhbHVlVXRpbHMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTU9wdGlvbi5qcyIsIlJlYWN0RE9NT3B0aW9uIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01TZWxlY3QuanMiLCJ1cGRhdGVPcHRpb25zSWZQZW5kaW5nVXBkYXRlQW5kTW91bnRlZCIsIl9wZW5kaW5nVXBkYXRlIiwidXBkYXRlT3B0aW9ucyIsInNlbGVjdFZhbHVlVHlwZSIsInNlbGVjdGVkVmFsdWUiLCJSZWFjdERPTVNlbGVjdCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NU2VsZWN0aW9uLmpzIiwiaXNDb2xsYXBzZWQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNPZmZzZXQiLCJnZXRJRU9mZnNldHMiLCJzZWxlY3Rpb24iLCJzZWxlY3RlZFJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJzZWxlY3RlZExlbmd0aCIsImZyb21TdGFydCIsImR1cGxpY2F0ZSIsIm1vdmVUb0VsZW1lbnRUZXh0Iiwic2V0RW5kUG9pbnQiLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsImdldE1vZGVybk9mZnNldHMiLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiY3VycmVudFJhbmdlIiwiZ2V0UmFuZ2VBdCIsImlzU2VsZWN0aW9uQ29sbGFwc2VkIiwicmFuZ2VMZW5ndGgiLCJ0ZW1wUmFuZ2UiLCJjbG9uZVJhbmdlIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwic2V0RW5kIiwic3RhcnRDb250YWluZXIiLCJpc1RlbXBSYW5nZUNvbGxhcHNlZCIsImVuZENvbnRhaW5lciIsImRldGVjdGlvblJhbmdlIiwic2V0U3RhcnQiLCJpc0JhY2t3YXJkIiwiY29sbGFwc2VkIiwic2V0SUVPZmZzZXRzIiwib2Zmc2V0cyIsIm1vdmVTdGFydCIsIm1vdmVFbmQiLCJzZXRNb2Rlcm5PZmZzZXRzIiwic3RhcnRNYXJrZXIiLCJnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0IiwiZW5kTWFya2VyIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJ1c2VJRU9mZnNldHMiLCJSZWFjdERPTVNlbGVjdGlvbiIsImdldE9mZnNldHMiLCJzZXRPZmZzZXRzIiwiLi9nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01UZXh0Q29tcG9uZW50LmpzIiwiX3N0cmluZ1RleHQiLCJfbW91bnRJbmRleCIsImVzY2FwZWRUZXh0IiwibmV4dFRleHQiLCJuZXh0U3RyaW5nVGV4dCIsIi4vUmVhY3RET01Db21wb25lbnQiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTVRleHRhcmVhLmpzIiwiUmVhY3RET01UZXh0YXJlYSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuanMiLCJSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24iLCJyZWluaXRpYWxpemVUcmFuc2FjdGlvbiIsIlRyYW5zYWN0aW9uIiwiUkVTRVRfQkFUQ0hFRF9VUERBVEVTIiwiaW5pdGlhbGl6ZSIsImNsb3NlIiwiUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSIsImlzQmF0Y2hpbmdVcGRhdGVzIiwiRkxVU0hfQkFUQ0hFRF9VUERBVEVTIiwiZmx1c2hCYXRjaGVkVXBkYXRlcyIsIlRSQU5TQUNUSU9OX1dSQVBQRVJTIiwiZ2V0VHJhbnNhY3Rpb25XcmFwcGVycyIsImFscmVhZHlCYXRjaGluZ1VwZGF0ZXMiLCJwZXJmb3JtIiwiLi9UcmFuc2FjdGlvbiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RGVmYXVsdEluamVjdGlvbi5qcyIsImF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcyIsIlJlYWN0SW5qZWN0aW9uIiwiRXZlbnRFbWl0dGVyIiwiTmF0aXZlQ29tcG9uZW50IiwiaW5qZWN0R2VuZXJpY0NvbXBvbmVudENsYXNzIiwiaW5qZWN0VGV4dENvbXBvbmVudENsYXNzIiwiaW5qZWN0QXV0b1dyYXBwZXIiLCJDbGFzcyIsImluamVjdENvbXBvbmVudENsYXNzZXMiLCJjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCIsIlNWR0RPTVByb3BlcnR5Q29uZmlnIiwiRW1wdHlDb21wb25lbnQiLCJpbmplY3RFbXB0eUNvbXBvbmVudCIsIlVwZGF0ZXMiLCJpbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiIsIlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24iLCJpbmplY3RCYXRjaGluZ1N0cmF0ZWd5IiwiUm9vdEluZGV4IiwiaW5qZWN0Q3JlYXRlUmVhY3RSb290SW5kZXgiLCJTZXJ2ZXJSZWFjdFJvb3RJbmRleCIsIkRPTUNvbXBvbmVudCIsInVybCIsIlJlYWN0RGVmYXVsdFBlcmYiLCIuL0JlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCIuL0NoYW5nZUV2ZW50UGx1Z2luIiwiLi9DbGllbnRSZWFjdFJvb3RJbmRleCIsIi4vRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIiLCIuL0VudGVyTGVhdmVFdmVudFBsdWdpbiIsIi4vSFRNTERPTVByb3BlcnR5Q29uZmlnIiwiLi9Nb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luIiwiLi9SZWFjdERPTUJ1dHRvbiIsIi4vUmVhY3RET01Gb3JtIiwiLi9SZWFjdERPTUlmcmFtZSIsIi4vUmVhY3RET01JbWciLCIuL1JlYWN0RE9NSW5wdXQiLCIuL1JlYWN0RE9NT3B0aW9uIiwiLi9SZWFjdERPTVNlbGVjdCIsIi4vUmVhY3RET01UZXh0YXJlYSIsIi4vUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSIsIi4vUmVhY3REZWZhdWx0UGVyZiIsIi4vUmVhY3RFdmVudExpc3RlbmVyIiwiLi9SZWFjdEluamVjdGlvbiIsIi4vUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiIsIi4vU1ZHRE9NUHJvcGVydHlDb25maWciLCIuL1NlbGVjdEV2ZW50UGx1Z2luIiwiLi9TZXJ2ZXJSZWFjdFJvb3RJbmRleCIsIi4vU2ltcGxlRXZlbnRQbHVnaW4iLCIuL2NyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3REZWZhdWx0UGVyZi5qcyIsInJvdW5kRmxvYXQiLCJhZGRWYWx1ZSIsIlJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcyIsInBlcmZvcm1hbmNlTm93IiwiX2FsbE1lYXN1cmVtZW50cyIsIl9tb3VudFN0YWNrIiwiX2luamVjdGVkIiwiaW5qZWN0TWVhc3VyZSIsImVuYWJsZU1lYXN1cmUiLCJnZXRMYXN0TWVhc3VyZW1lbnRzIiwicHJpbnRFeGNsdXNpdmUiLCJtZWFzdXJlbWVudHMiLCJnZXRFeGNsdXNpdmVTdW1tYXJ5IiwiQ29tcG9uZW50IGNsYXNzIG5hbWUiLCJUb3RhbCBpbmNsdXNpdmUgdGltZSAobXMpIiwiaW5jbHVzaXZlIiwiRXhjbHVzaXZlIG1vdW50IHRpbWUgKG1zKSIsImV4Y2x1c2l2ZSIsIkV4Y2x1c2l2ZSByZW5kZXIgdGltZSAobXMpIiwiTW91bnQgdGltZSBwZXIgaW5zdGFuY2UgKG1zKSIsIlJlbmRlciB0aW1lIHBlciBpbnN0YW5jZSAobXMpIiwiSW5zdGFuY2VzIiwicHJpbnRJbmNsdXNpdmUiLCJnZXRJbmNsdXNpdmVTdW1tYXJ5IiwiT3duZXIgPiBjb21wb25lbnQiLCJJbmNsdXNpdmUgdGltZSAobXMpIiwiZ2V0VG90YWxUaW1lIiwidG9GaXhlZCIsImdldE1lYXN1cmVtZW50c1N1bW1hcnlNYXAiLCJXYXN0ZWQgdGltZSAobXMpIiwicHJpbnRXYXN0ZWQiLCJwcmludERPTSIsImdldERPTVN1bW1hcnkiLCJfcmVjb3JkV3JpdGUiLCJ0b3RhbFRpbWUiLCJ3cml0ZXMiLCJtb2R1bGVOYW1lIiwicnYiLCJjb3VudHMiLCJkaXNwbGF5TmFtZXMiLCJtb3VudElEIiwid3JpdGVBcmdzIiwiaXNSZW5kZXIiLCJpc01vdW50IiwibW91bnRTdGFjayIsImVudHJ5Iiwic3ViTW91bnRUaW1lIiwiLi9SZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMiLCIuL3BlcmZvcm1hbmNlTm93IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmpzIiwibWVhc3VyZW1lbnQiLCJpdGVtcyIsIkRPTV9PUEVSQVRJT05fVFlQRVMiLCJjYW5kaWRhdGVzIiwiYWxsSURzIiwiYXJyIiwiRE9OVF9DQVJFX1RIUkVTSE9MRCIsIm9ubHlDbGVhbiIsImluY2x1c2l2ZUtleSIsImNsZWFuQ29tcG9uZW50cyIsImdldFVuY2hhbmdlZENvbXBvbmVudHMiLCJkaXJ0eUxlYWZJRHMiLCJpc0RpcnR5IiwiX21vdW50SW1hZ2VJbnRvTm9kZSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qcyIsImRlZmluZVdhcm5pbmdQcm9wZXJ0eSIsIl9zdG9yZSIsImRlZmluZU11dGF0aW9uTWVtYnJhbmUiLCJwc2V1ZG9Gcm96ZW5Qcm9wZXJ0aWVzIiwidXNlTXV0YXRpb25NZW1icmFuZSIsIlJFU0VSVkVEX1BST1BTIiwib3JpZ2luYWxQcm9wcyIsInZhbGlkYXRlZCIsIl9pc1JlYWN0RWxlbWVudCIsImNvbmZpZyIsImNoaWxkcmVuTGVuZ3RoIiwiY2hpbGRBcnJheSIsImZhY3RvcnkiLCJvbGRFbGVtZW50IiwibmV3RWxlbWVudCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudFZhbGlkYXRvci5qcyIsInB1YmxpY0luc3RhbmNlIiwiZ2V0Q3VycmVudE93bmVyRGlzcGxheU5hbWUiLCJ2YWxpZGF0ZUV4cGxpY2l0S2V5IiwicGFyZW50VHlwZSIsIndhcm5BbmRNb25pdG9yRm9yS2V5VXNlIiwidmFsaWRhdGVQcm9wZXJ0eUtleSIsIk5VTUVSSUNfUFJPUEVSVFlfUkVHRVgiLCJvd25lck5hbWUiLCJwYXJlbnROYW1lIiwidXNlTmFtZSIsIm1lbW9pemVyIiwib3duZXJIYXNLZXlVc2VXYXJuaW5nIiwicGFyZW50T3JPd25lckFkZGVuZHVtIiwiY2hpbGRPd25lckFkZGVuZHVtIiwiY2hpbGRPd25lck5hbWUiLCJ2YWxpZGF0ZUNoaWxkS2V5cyIsIml0ZXJhdG9yRm4iLCJnZXRJdGVyYXRvckZuIiwiZW50cmllcyIsImZyYWdtZW50IiwiZXh0cmFjdElmRnJhZ21lbnQiLCJsb2dnZWRUeXBlRmFpbHVyZXMiLCJ3YXJuRm9yUHJvcHNNdXRhdGlvbiIsImVsZW1lbnROYW1lIiwid2FybmluZ0tleSIsIndhcm5lZFByb3BzTXV0YXRpb25zIiwiZWxlbWVudEluZm8iLCJvd25lckluZm8iLCJ2YWxpZGF0ZVByb3BUeXBlcyIsImNvbXBvbmVudENsYXNzIiwidmFsaWRhdGVkRmFjdG9yeSIsIi4vZ2V0SXRlcmF0b3JGbiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RW1wdHlDb21wb25lbnQuanMiLCJyZWdpc3Rlck51bGxDb21wb25lbnRJRCIsIm51bGxDb21wb25lbnRJRHNSZWdpc3RyeSIsImRlcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQiLCJpc051bGxDb21wb25lbnRJRCIsIlJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb24iLCJlbXB0eUNvbXBvbmVudCIsIlJlYWN0RW1wdHlDb21wb25lbnRUeXBlIiwiZW1wdHlFbGVtZW50IiwiUmVhY3RFbXB0eUNvbXBvbmVudCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RXJyb3JVdGlscy5qcyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RXZlbnRFbWl0dGVyTWl4aW4uanMiLCJydW5FdmVudFF1ZXVlSW5CYXRjaCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RXZlbnRMaXN0ZW5lci5qcyIsImZpbmRQYXJlbnQiLCJub2RlSUQiLCJnZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQiLCJUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmciLCJhbmNlc3RvcnMiLCJoYW5kbGVUb3BMZXZlbEltcGwiLCJib29rS2VlcGluZyIsImdldEV2ZW50VGFyZ2V0IiwiYW5jZXN0b3IiLCJfaGFuZGxlVG9wTGV2ZWwiLCJzY3JvbGxWYWx1ZU1vbml0b3IiLCJzY3JvbGxQb3NpdGlvbiIsImdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uIiwiX2VuYWJsZWQiLCIuL0V2ZW50TGlzdGVuZXIiLCIuL2dldEV2ZW50VGFyZ2V0IiwiLi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RnJhZ21lbnQuanMiLCJmcmFnbWVudEtleSIsImRpZFdhcm5LZXkiLCJjYW5XYXJuRm9yUmVhY3RGcmFnbWVudCIsImR1bW15IiwicHJveHlQcm9wZXJ0eUFjY2Vzc1dpdGhXYXJuaW5nIiwiaXNzdWVkV2FybmluZ3MiLCJkaWRXYXJuRm9yRnJhZ21lbnQiLCJmcmFnbWVudENhY2hlS2V5IiwiYWxyZWFkeVdhcm5lZE9uY2UiLCJwcm94eSIsInByZXZlbnRFeHRlbnNpb25zIiwiZXh0cmFjdCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5qZWN0aW9uLmpzIiwiUmVhY3RSb290SW5kZXgiLCJQZXJmIiwiLi9SZWFjdEVtcHR5Q29tcG9uZW50IiwiLi9SZWFjdFJvb3RJbmRleCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5wdXRTZWxlY3Rpb24uanMiLCJpc0luRG9jdW1lbnQiLCJjb250YWluc05vZGUiLCJnZXRBY3RpdmVFbGVtZW50IiwiUmVhY3RJbnB1dFNlbGVjdGlvbiIsImhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyIsImdldFNlbGVjdGlvbkluZm9ybWF0aW9uIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsInJlc3RvcmVTZWxlY3Rpb24iLCJwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uIiwiY3VyRm9jdXNlZEVsZW0iLCJwcmlvckZvY3VzZWRFbGVtIiwicHJpb3JTZWxlY3Rpb25SYW5nZSIsInNldFNlbGVjdGlvbiIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwicGFyZW50RWxlbWVudCIsImNyZWF0ZVRleHRSYW5nZSIsImNvbGxhcHNlIiwiLi9SZWFjdERPTVNlbGVjdGlvbiIsIi4vY29udGFpbnNOb2RlIiwiLi9nZXRBY3RpdmVFbGVtZW50IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJbnN0YW5jZUhhbmRsZXMuanMiLCJnZXRSZWFjdFJvb3RJRFN0cmluZyIsIlNFUEFSQVRPUiIsImlzQm91bmRhcnkiLCJpc1ZhbGlkSUQiLCJpc0FuY2VzdG9ySURPZiIsImFuY2VzdG9ySUQiLCJkZXNjZW5kYW50SUQiLCJnZXRQYXJlbnRJRCIsImdldE5leHREZXNjZW5kYW50SUQiLCJkZXN0aW5hdGlvbklEIiwiU0VQQVJBVE9SX0xFTkdUSCIsImdldEZpcnN0Q29tbW9uQW5jZXN0b3JJRCIsIm9uZUlEIiwidHdvSUQiLCJtaW5MZW5ndGgiLCJsYXN0Q29tbW9uTWFya2VySW5kZXgiLCJsb25nZXN0Q29tbW9uSUQiLCJ0cmF2ZXJzZVBhcmVudFBhdGgiLCJza2lwRmlyc3QiLCJza2lwTGFzdCIsInRyYXZlcnNlVXAiLCJ0cmF2ZXJzZSIsIk1BWF9UUkVFX0RFUFRIIiwiY3JlYXRlUmVhY3RSb290SUQiLCJjcmVhdGVSZWFjdElEIiwibGVhdmVJRCIsImVudGVySUQiLCJ1cEFyZyIsImRvd25BcmciLCJ0cmF2ZXJzZUFuY2VzdG9ycyIsIl9nZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQiLCJfZ2V0TmV4dERlc2NlbmRhbnRJRCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5zdGFuY2VNYXAuanMiLCJfcmVhY3RJbnRlcm5hbEluc3RhbmNlIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RMaWZlQ3ljbGUuanMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE1hcmt1cENoZWNrc3VtLmpzIiwiYWRsZXIzMiIsIlJlYWN0TWFya3VwQ2hlY2tzdW0iLCJDSEVDS1NVTV9BVFRSX05BTUUiLCJhZGRDaGVja3N1bVRvTWFya3VwIiwiY2hlY2tzdW0iLCJjYW5SZXVzZU1hcmt1cCIsImV4aXN0aW5nQ2hlY2tzdW0iLCJtYXJrdXBDaGVja3N1bSIsIi4vYWRsZXIzMiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TW91bnQuanMiLCJmaXJzdERpZmZlcmVuY2VJbmRleCIsInN0cmluZzEiLCJzdHJpbmcyIiwibWluTGVuIiwiZ2V0UmVhY3RSb290SUQiLCJyb290RWxlbWVudCIsImdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lciIsImludGVybmFsR2V0SUQiLCJub2RlQ2FjaGUiLCJjYWNoZWQiLCJpc1ZhbGlkIiwiQVRUUl9OQU1FIiwic2V0SUQiLCJvbGRJRCIsImZpbmRSZWFjdE5vZGVCeUlEIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3JJbXBsIiwiZGVlcGVzdE5vZGVTb0ZhciIsImZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3IiLCJmb3VuZE5vZGUiLCJtb3VudENvbXBvbmVudEludG9Ob2RlIiwiY29tcG9uZW50SW5zdGFuY2UiLCJzaG91bGRSZXVzZU1hcmt1cCIsImJhdGNoZWRNb3VudENvbXBvbmVudEludG9Ob2RlIiwiRE9DX05PREVfVFlQRSIsImluc3RhbmNlc0J5UmVhY3RSb290SUQiLCJjb250YWluZXJzQnlSZWFjdFJvb3RJRCIsInJvb3RFbGVtZW50c0J5UmVhY3RSb290SUQiLCJmaW5kQ29tcG9uZW50Um9vdFJldXNhYmxlQXJyYXkiLCJfaW5zdGFuY2VzQnlSZWFjdFJvb3RJRCIsInNjcm9sbE1vbml0b3IiLCJyZW5kZXJDYWxsYmFjayIsIl91cGRhdGVSb290Q29tcG9uZW50IiwicHJldkNvbXBvbmVudCIsImVucXVldWVFbGVtZW50SW50ZXJuYWwiLCJlbnF1ZXVlQ2FsbGJhY2tJbnRlcm5hbCIsIl9yZWdpc3RlckNvbXBvbmVudCIsIm5leHRDb21wb25lbnQiLCJyZWFjdFJvb3RJRCIsInJlZ2lzdGVyQ29udGFpbmVyIiwiX3JlbmRlck5ld1Jvb3RDb21wb25lbnQiLCJyZWFjdFJvb3RFbGVtZW50IiwiY29udGFpbmVySGFzUmVhY3RNYXJrdXAiLCJpc1JlbmRlcmVkQnlSZWFjdCIsIm5leHRTaWJsaW5nIiwicm9vdEVsZW1lbnRTaWJsaW5nIiwiZG9tTm9kZSIsInVubW91bnRDb21wb25lbnRGcm9tTm9kZSIsImxhc3RDaGlsZCIsImNvbnRhaW5lckNoaWxkIiwiZmlyc3RDaGlsZCIsInJlYWN0Um9vdCIsImZpbmRDb21wb25lbnRSb290IiwiYW5jZXN0b3JOb2RlIiwiZmlyc3RDaGlsZHJlbiIsImNoaWxkSW5kZXgiLCJkZWVwZXN0QW5jZXN0b3IiLCJ0YXJnZXRDaGlsZCIsImNoaWxkSUQiLCJyb290TWFya3VwIiwib3V0ZXJIVE1MIiwiZGlmZkluZGV4IiwiLi9SZWFjdE1hcmt1cENoZWNrc3VtIiwiLi9nZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE11bHRpQ2hpbGQuanMiLCJlbnF1ZXVlTWFya3VwIiwidXBkYXRlUXVldWUiLCJtYXJrdXBRdWV1ZSIsImVucXVldWVNb3ZlIiwiZW5xdWV1ZVJlbW92ZSIsImVucXVldWVUZXh0Q29udGVudCIsInByb2Nlc3NRdWV1ZSIsImNsZWFyUXVldWUiLCJ1cGRhdGVEZXB0aCIsIm5lc3RlZENoaWxkcmVuIiwibW91bnRJbWFnZSIsImVycm9yVGhyb3duIiwiX3VubW91bnRDaGlsZEJ5TmFtZSIsIm5leHROZXN0ZWRDaGlsZHJlbiIsIl91cGRhdGVDaGlsZHJlbiIsIm5leHRDaGlsZCIsIm1vdmVDaGlsZCIsIl9tb3VudENoaWxkQnlOYW1lQXRJbmRleCIsImNyZWF0ZUNoaWxkIiwiLi9SZWFjdENoaWxkUmVjb25jaWxlciIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLmpzIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3ROYXRpdmVDb21wb25lbnQuanMiLCJ0YWdUb0NvbXBvbmVudENsYXNzIiwiY3JlYXRlSW50ZXJuYWxDb21wb25lbnQiLCJnZW5lcmljQ29tcG9uZW50Q2xhc3MiLCJjcmVhdGVJbnN0YW5jZUZvclRleHQiLCJ0ZXh0Q29tcG9uZW50Q2xhc3MiLCJpc1RleHRDb21wb25lbnQiLCJSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvbiIsImNvbXBvbmVudENsYXNzZXMiLCJ3cmFwcGVyRmFjdG9yeSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0T3duZXIuanMiLCJSZWFjdE93bmVyIiwiaXNWYWxpZE93bmVyIiwiYWRkQ29tcG9uZW50QXNSZWZUbyIsInJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UGVyZi5qcyIsIl9ub01lYXN1cmUiLCJvYmpOYW1lIiwic3RvcmVkTWVhc3VyZSIsIm9iamVjdE5hbWUiLCJtZWFzdXJlZEZ1bmMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcy5qcyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnMuanMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlcy5qcyIsImNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyIiwidmFsaWRhdGUiLCJjaGVja1R5cGUiLCJBTk9OWU1PVVMiLCJsb2NhdGlvbk5hbWUiLCJjaGFpbmVkQ2hlY2tUeXBlIiwiY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIiLCJleHBlY3RlZFR5cGUiLCJwcm9wVHlwZSIsImdldFByb3BUeXBlIiwicHJlY2lzZVR5cGUiLCJnZXRQcmVjaXNlVHlwZSIsImNyZWF0ZUFueVR5cGVDaGVja2VyIiwidGhhdFJldHVybnMiLCJjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIiLCJ0eXBlQ2hlY2tlciIsImNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlciIsImNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIiLCJleHBlY3RlZENsYXNzIiwiZXhwZWN0ZWRDbGFzc05hbWUiLCJjcmVhdGVFbnVtVHlwZUNoZWNrZXIiLCJleHBlY3RlZFZhbHVlcyIsInZhbHVlc1N0cmluZyIsImNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIiLCJjcmVhdGVVbmlvblR5cGVDaGVja2VyIiwiYXJyYXlPZlR5cGVDaGVja2VycyIsImNoZWNrZXIiLCJjcmVhdGVOb2RlQ2hlY2tlciIsImNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIiLCJzaGFwZVR5cGVzIiwiZWxlbWVudFR5cGVDaGVja2VyIiwibm9kZVR5cGVDaGVja2VyIiwiYXJyYXlPZiIsIm9iamVjdE9mIiwib25lT2YiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFB1dExpc3RlbmVyUXVldWUuanMiLCJSZWFjdFB1dExpc3RlbmVyUXVldWUiLCJsaXN0ZW5lcnNUb1B1dCIsInB1dExpc3RlbmVycyIsImxpc3RlbmVyVG9QdXQiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmpzIiwicmVhY3RNb3VudFJlYWR5IiwicHV0TGlzdGVuZXJRdWV1ZSIsIlNFTEVDVElPTl9SRVNUT1JBVElPTiIsIkVWRU5UX1NVUFBSRVNTSU9OIiwiY3VycmVudGx5RW5hYmxlZCIsInByZXZpb3VzbHlFbmFibGVkIiwiT05fRE9NX1JFQURZX1FVRVVFSU5HIiwiUFVUX0xJU1RFTkVSX1FVRVVFSU5HIiwiLi9DYWxsYmFja1F1ZXVlIiwiLi9SZWFjdElucHV0U2VsZWN0aW9uIiwiLi9SZWFjdFB1dExpc3RlbmVyUXVldWUiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFJlY29uY2lsZXIuanMiLCJhdHRhY2hSZWZzIiwiUmVhY3RSZWYiLCJkZXRhY2hSZWZzIiwicmVmc0NoYW5nZWQiLCJzaG91bGRVcGRhdGVSZWZzIiwiLi9SZWFjdFJlZiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UmVmLmpzIiwiLi9SZWFjdE93bmVyIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSb290SW5kZXguanMiLCJSZWFjdFJvb3RJbmRleEluamVjdGlvbiIsIl9jcmVhdGVSZWFjdFJvb3RJbmRleCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0U2VydmVyUmVuZGVyaW5nLmpzIiwiUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbiIsIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24uanMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFVwZGF0ZVF1ZXVlLmpzIiwiZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlIiwiY2FsbGVyTmFtZSIsImNvbXBsZXRlU3RhdGUiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFVwZGF0ZXMuanMiLCJlbnN1cmVJbmplY3RlZCIsImJhdGNoaW5nU3RyYXRlZ3kiLCJSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uIiwiZGlydHlDb21wb25lbnRzTGVuZ3RoIiwiY2FsbGJhY2tRdWV1ZSIsInJlY29uY2lsZVRyYW5zYWN0aW9uIiwibW91bnRPcmRlckNvbXBhcmF0b3IiLCJjMSIsImMyIiwicnVuQmF0Y2hlZFVwZGF0ZXMiLCJkaXJ0eUNvbXBvbmVudHMiLCJhc2FwQ2FsbGJhY2tRdWV1ZSIsImFzYXBFbnF1ZXVlZCIsIk5FU1RFRF9VUERBVEVTIiwiVVBEQVRFX1FVRVVFSU5HIiwiUmVhY3RVcGRhdGVzSW5qZWN0aW9uIiwiUmVjb25jaWxlVHJhbnNhY3Rpb24iLCJfYmF0Y2hpbmdTdHJhdGVneSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1NWR0RPTVByb3BlcnR5Q29uZmlnLmpzIiwiY3giLCJjeSIsImR4IiwiZHkiLCJmeCIsImZ5IiwiZ3JhZGllbnRUcmFuc2Zvcm0iLCJncmFkaWVudFVuaXRzIiwibWFya2VyRW5kIiwibWFya2VyTWlkIiwibWFya2VyU3RhcnQiLCJwYXR0ZXJuQ29udGVudFVuaXRzIiwicGF0dGVyblVuaXRzIiwicG9pbnRzIiwicHJlc2VydmVBc3BlY3RSYXRpbyIsInJ4IiwicnkiLCJzcHJlYWRNZXRob2QiLCJzdG9wQ29sb3IiLCJzdG9wT3BhY2l0eSIsInN0cm9rZSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZUxpbmVjYXAiLCJ0ZXh0QW5jaG9yIiwidmlld0JveCIsIngxIiwieDIiLCJ5MSIsInkyIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU2VsZWN0RXZlbnRQbHVnaW4uanMiLCJib3VuZGluZ1RvcCIsImxlZnQiLCJib3VuZGluZ0xlZnQiLCJjb25zdHJ1Y3RTZWxlY3RFdmVudCIsIm1vdXNlRG93biIsImN1cnJlbnRTZWxlY3Rpb24iLCJsYXN0U2VsZWN0aW9uIiwic2hhbGxvd0VxdWFsIiwic3ludGhldGljRXZlbnQiLCJvblNlbGVjdCIsIm9uU2VsZWN0Q2FwdHVyZSIsIi4vc2hhbGxvd0VxdWFsIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU2VydmVyUmVhY3RSb290SW5kZXguanMiLCJHTE9CQUxfTU9VTlRfUE9JTlRfTUFYIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU2ltcGxlRXZlbnRQbHVnaW4uanMiLCJTeW50aGV0aWNDbGlwYm9hcmRFdmVudCIsIlN5bnRoZXRpY0ZvY3VzRXZlbnQiLCJTeW50aGV0aWNLZXlib2FyZEV2ZW50IiwiU3ludGhldGljRHJhZ0V2ZW50IiwiU3ludGhldGljVG91Y2hFdmVudCIsIlN5bnRoZXRpY1VJRXZlbnQiLCJTeW50aGV0aWNXaGVlbEV2ZW50IiwiZ2V0RXZlbnRDaGFyQ29kZSIsImJsdXIiLCJvbkJsdXIiLCJvbkJsdXJDYXB0dXJlIiwib25Db250ZXh0TWVudSIsIm9uQ29udGV4dE1lbnVDYXB0dXJlIiwiY29weSIsIm9uQ29weSIsIm9uQ29weUNhcHR1cmUiLCJjdXQiLCJvbkN1dCIsIm9uQ3V0Q2FwdHVyZSIsImRvdWJsZUNsaWNrIiwiZHJhZyIsIm9uRHJhZyIsIm9uRHJhZ0NhcHR1cmUiLCJkcmFnRW5kIiwib25EcmFnRW5kIiwib25EcmFnRW5kQ2FwdHVyZSIsImRyYWdFbnRlciIsIm9uRHJhZ0VudGVyIiwib25EcmFnRW50ZXJDYXB0dXJlIiwiZHJhZ0V4aXQiLCJvbkRyYWdFeGl0Iiwib25EcmFnRXhpdENhcHR1cmUiLCJkcmFnTGVhdmUiLCJvbkRyYWdMZWF2ZSIsIm9uRHJhZ0xlYXZlQ2FwdHVyZSIsImRyYWdPdmVyIiwib25EcmFnT3ZlciIsIm9uRHJhZ092ZXJDYXB0dXJlIiwiZHJhZ1N0YXJ0Iiwib25EcmFnU3RhcnQiLCJvbkRyYWdTdGFydENhcHR1cmUiLCJvbkRyb3AiLCJvbkRyb3BDYXB0dXJlIiwiZm9jdXMiLCJvbkZvY3VzIiwib25Gb2N1c0NhcHR1cmUiLCJvbklucHV0Iiwib25JbnB1dENhcHR1cmUiLCJrZXlEb3duIiwib25LZXlEb3duQ2FwdHVyZSIsImtleVByZXNzIiwib25LZXlQcmVzcyIsIm9uS2V5UHJlc3NDYXB0dXJlIiwia2V5VXAiLCJvbktleVVwIiwib25LZXlVcENhcHR1cmUiLCJsb2FkIiwib25Mb2FkIiwib25Mb2FkQ2FwdHVyZSIsIm9uRXJyb3JDYXB0dXJlIiwibW91c2VNb3ZlIiwibW91c2VPdXQiLCJvbk1vdXNlT3V0Iiwib25Nb3VzZU91dENhcHR1cmUiLCJtb3VzZU92ZXIiLCJvbk1vdXNlT3ZlciIsIm9uTW91c2VPdmVyQ2FwdHVyZSIsIm1vdXNlVXAiLCJwYXN0ZSIsIm9uUGFzdGUiLCJvblBhc3RlQ2FwdHVyZSIsIm9uUmVzZXQiLCJvblJlc2V0Q2FwdHVyZSIsInNjcm9sbCIsIm9uU2Nyb2xsIiwib25TY3JvbGxDYXB0dXJlIiwib25TdWJtaXQiLCJvblN1Ym1pdENhcHR1cmUiLCJ0b3VjaENhbmNlbCIsIm9uVG91Y2hDYW5jZWwiLCJvblRvdWNoQ2FuY2VsQ2FwdHVyZSIsInRvdWNoRW5kIiwib25Ub3VjaEVuZCIsIm9uVG91Y2hFbmRDYXB0dXJlIiwidG91Y2hNb3ZlIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoTW92ZUNhcHR1cmUiLCJ0b3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0Q2FwdHVyZSIsIndoZWVsIiwib25XaGVlbCIsIm9uV2hlZWxDYXB0dXJlIiwidG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnIiwic3RvcFByb3BhZ2F0aW9uIiwiRXZlbnRDb25zdHJ1Y3RvciIsIi4vU3ludGhldGljQ2xpcGJvYXJkRXZlbnQiLCIuL1N5bnRoZXRpY0RyYWdFdmVudCIsIi4vU3ludGhldGljRm9jdXNFdmVudCIsIi4vU3ludGhldGljS2V5Ym9hcmRFdmVudCIsIi4vU3ludGhldGljVG91Y2hFdmVudCIsIi4vU3ludGhldGljVUlFdmVudCIsIi4vU3ludGhldGljV2hlZWxFdmVudCIsIi4vZ2V0RXZlbnRDaGFyQ29kZSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0NsaXBib2FyZEV2ZW50LmpzIiwiQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UiLCJjbGlwYm9hcmREYXRhIiwiYXVnbWVudENsYXNzIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5qcyIsIkNvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNEcmFnRXZlbnQuanMiLCJEcmFnRXZlbnRJbnRlcmZhY2UiLCJkYXRhVHJhbnNmZXIiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNFdmVudC5qcyIsIkludGVyZmFjZSIsIm5vcm1hbGl6ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zRmFsc2UiLCJFdmVudEludGVyZmFjZSIsInRoYXRSZXR1cm5zTnVsbCIsImV2ZW50UGhhc2UiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiU3VwZXIiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNGb2N1c0V2ZW50LmpzIiwiRm9jdXNFdmVudEludGVyZmFjZSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0lucHV0RXZlbnQuanMiLCJJbnB1dEV2ZW50SW50ZXJmYWNlIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljS2V5Ym9hcmRFdmVudC5qcyIsImdldEV2ZW50S2V5IiwiZ2V0RXZlbnRNb2RpZmllclN0YXRlIiwiS2V5Ym9hcmRFdmVudEludGVyZmFjZSIsImxvY2FsZSIsImdldE1vZGlmaWVyU3RhdGUiLCIuL2dldEV2ZW50S2V5IiwiLi9nZXRFdmVudE1vZGlmaWVyU3RhdGUiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNNb3VzZUV2ZW50LmpzIiwiTW91c2VFdmVudEludGVyZmFjZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJidXR0b25zIiwicGFnZVgiLCJjdXJyZW50U2Nyb2xsTGVmdCIsInBhZ2VZIiwiY3VycmVudFNjcm9sbFRvcCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY1RvdWNoRXZlbnQuanMiLCJUb3VjaEV2ZW50SW50ZXJmYWNlIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY1VJRXZlbnQuanMiLCJVSUV2ZW50SW50ZXJmYWNlIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljV2hlZWxFdmVudC5qcyIsIldoZWVsRXZlbnRJbnRlcmZhY2UiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1RyYW5zYWN0aW9uLmpzIiwidHJhbnNhY3Rpb25XcmFwcGVycyIsIndyYXBwZXJJbml0RGF0YSIsIl9pc0luVHJhbnNhY3Rpb24iLCJpc0luVHJhbnNhY3Rpb24iLCJpbml0aWFsaXplQWxsIiwiY2xvc2VBbGwiLCJzdGFydEluZGV4IiwiT0JTRVJWRURfRVJST1IiLCJpbml0RGF0YSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1ZpZXdwb3J0TWV0cmljcy5qcyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2FjY3VtdWxhdGVJbnRvLmpzIiwiY3VycmVudElzQXJyYXkiLCJuZXh0SXNBcnJheSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2FkbGVyMzIuanMiLCJNT0QiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jYW1lbGl6ZS5qcyIsImNhbWVsaXplIiwiX2h5cGhlblBhdHRlcm4iLCJjaGFyYWN0ZXIiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jYW1lbGl6ZVN0eWxlTmFtZS5qcyIsIm1zUGF0dGVybiIsIi4vY2FtZWxpemUiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jb250YWluc05vZGUuanMiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJpc1RleHROb2RlIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCIuL2lzVGV4dE5vZGUiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jcmVhdGVBcnJheUZyb21NaXhlZC5qcyIsImhhc0FycmF5TmF0dXJlIiwiY3JlYXRlQXJyYXlGcm9tTWl4ZWQiLCIuL3RvQXJyYXkiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jcmVhdGVGdWxsUGFnZUNvbXBvbmVudC5qcyIsImVsZW1lbnRGYWN0b3J5IiwiRnVsbFBhZ2VDb21wb25lbnQiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXAuanMiLCJub2RlTmFtZU1hdGNoIiwibm9kZU5hbWVQYXR0ZXJuIiwiaGFuZGxlU2NyaXB0IiwiZHVtbXlOb2RlIiwid3JhcERlcHRoIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiLi9jcmVhdGVBcnJheUZyb21NaXhlZCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2Rhbmdlcm91c1N0eWxlVmFsdWUuanMiLCJpc05vbk51bWVyaWMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZW1wdHlPYmplY3QuanMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIuanMiLCJlc2NhcGVyIiwiRVNDQVBFX0xPT0tVUCIsIkVTQ0FQRV9SRUdFWCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZpbmRET01Ob2RlLmpzIiwiY29tcG9uZW50T3JFbGVtZW50IiwiLi9pc05vZGUiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9mbGF0dGVuQ2hpbGRyZW4uanMiLCJmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZvY3VzTm9kZS5qcyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZvckVhY2hBY2N1bXVsYXRlZC5qcyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRFdmVudENoYXJDb2RlLmpzIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRLZXkuanMiLCJub3JtYWxpemVLZXkiLCJ0cmFuc2xhdGVUb0tleSIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLDM5LDQwLDQ1LDQ2LDExMiwxMTMsMTE0LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTIzLDE0NCwxNDUsMjI0LCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRFdmVudE1vZGlmaWVyU3RhdGUuanMiLCJtb2RpZmllclN0YXRlR2V0dGVyIiwia2V5QXJnIiwia2V5UHJvcCIsIm1vZGlmaWVyS2V5VG9Qcm9wIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEV2ZW50VGFyZ2V0LmpzIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0SXRlcmF0b3JGbi5qcyIsIm1heWJlSXRlcmFibGUiLCJJVEVSQVRPUl9TWU1CT0wiLCJGQVVYX0lURVJBVE9SX1NZTUJPTCIsIlN5bWJvbCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldE1hcmt1cFdyYXAuanMiLCJtYXJrdXBXcmFwIiwic2hvdWxkV3JhcCIsInNlbGVjdFdyYXAiLCJ0YWJsZVdyYXAiLCJ0cldyYXAiLCJzdmdXcmFwIiwiKiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQuanMiLCJnZXRMZWFmTm9kZSIsImdldFNpYmxpbmdOb2RlIiwibm9kZVN0YXJ0Iiwibm9kZUVuZCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lci5qcyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldFRleHRDb250ZW50QWNjZXNzb3IuanMiLCJjb250ZW50S2V5IiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24uanMiLCJzY3JvbGxhYmxlIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaHlwaGVuYXRlLmpzIiwiaHlwaGVuYXRlIiwiX3VwcGVyY2FzZVBhdHRlcm4iLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUuanMiLCIuL2h5cGhlbmF0ZSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQuanMiLCJpc0ludGVybmFsQ29tcG9uZW50VHlwZSIsInBhcmVudENvbXBvc2l0ZVR5cGUiLCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIiLCJfbW91bnRJbWFnZSIsIl9pc093bmVyTmVjZXNzYXJ5IiwiLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudCIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qcyIsImNvbmRpdGlvbiIsImZvcm1hdCIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc0V2ZW50U3VwcG9ydGVkLmpzIiwiZXZlbnROYW1lU3VmZml4IiwidXNlSGFzRmVhdHVyZSIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2lzTm9kZS5qcyIsIk5vZGUiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc1RleHRJbnB1dEVsZW1lbnQuanMiLCJzdXBwb3J0ZWRJbnB1dFR5cGVzIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInRlbCIsIndlZWsiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc1RleHROb2RlLmpzIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIva2V5TWlycm9yLmpzIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIva2V5T2YuanMiLCJvbmVLZXlPYmoiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9tYXBPYmplY3QuanMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9tZW1vaXplU3RyaW5nT25seS5qcyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL29ubHlDaGlsZC5qcyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3BlcmZvcm1hbmNlLmpzIiwicGVyZm9ybWFuY2UiLCJtc1BlcmZvcm1hbmNlIiwid2Via2l0UGVyZm9ybWFuY2UiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9wZXJmb3JtYW5jZU5vdy5qcyIsIi4vcGVyZm9ybWFuY2UiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlci5qcyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3NldElubmVySFRNTC5qcyIsIldISVRFU1BBQ0VfVEVTVCIsIk5PTlZJU0lCTEVfVEVTVCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJ0ZXh0Tm9kZSIsImRlbGV0ZURhdGEiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9zZXRUZXh0Q29udGVudC5qcyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3NoYWxsb3dFcXVhbC5qcyIsIm9iakEiLCJvYmpCIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQuanMiLCJwcmV2VHlwZSIsIm5leHRUeXBlIiwib3duZXJzTWF0Y2giLCJwcmV2TmFtZSIsIm5leHROYW1lIiwibmV4dERpc3BsYXlOYW1lIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvdG9BcnJheS5qcyIsImlpIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvdHJhdmVyc2VBbGxDaGlsZHJlbi5qcyIsInVzZXJQcm92aWRlZEtleUVzY2FwZXIiLCJ1c2VyUHJvdmlkZWRLZXlFc2NhcGVyTG9va3VwIiwiZ2V0Q29tcG9uZW50S2V5Iiwid3JhcFVzZXJQcm92aWRlZEtleSIsImVzY2FwZVVzZXJQcm92aWRlZEtleSIsInVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4IiwidHJhdmVyc2VBbGxDaGlsZHJlbkltcGwiLCJuYW1lU29GYXIiLCJpbmRleFNvRmFyIiwic3VidHJlZUNvdW50IiwiU1VCU0VQQVJBVE9SIiwiZGlkV2FybkFib3V0TWFwcyIsIj0iLCIuIiwiOiIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3dhcm5pbmcuanMiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L3JlYWN0LmpzIiwiLi9saWIvUmVhY3QiLCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL2NsaWVudC5qcyIsImlzSG9zdCIsInNlcmlhbGl6ZSIsInBhcnNlU3RyaW5nIiwicGFpciIsInBhcnNlSGVhZGVyIiwiZmllbGQiLCJmaWVsZHMiLCJSZXNwb25zZSIsInJlcSIsInhociIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJzZXRTdGF0dXNQcm9wZXJ0aWVzIiwic3RhdHVzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJzZXRIZWFkZXJQcm9wZXJ0aWVzIiwicGFyc2VCb2R5IiwicmVzcG9uc2UiLCJSZXF1ZXN0IiwiRW1pdHRlciIsIl9xdWVyeSIsIl9oZWFkZXIiLCJvcmlnaW5hbCIsIm5ld19lcnIiLCJnZXRYSFIiLCJYTUxIdHRwUmVxdWVzdCIsInByb3RvY29sIiwiQWN0aXZlWE9iamVjdCIsInNlcmlhbGl6ZU9iamVjdCIsInR5cGVzIiwianNvbiIsInhtbCIsInVybGVuY29kZWQiLCJmb3JtLWRhdGEiLCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiLCJhcHBsaWNhdGlvbi9qc29uIiwiY3QiLCJzdGF0dXNUeXBlIiwib2siLCJjbGllbnRFcnJvciIsInNlcnZlckVycm9yIiwidG9FcnJvciIsImFjY2VwdGVkIiwibm9Db250ZW50IiwiYmFkUmVxdWVzdCIsInVuYXV0aG9yaXplZCIsIm5vdEFjY2VwdGFibGUiLCJub3RGb3VuZCIsImZvcmJpZGRlbiIsInVzZSIsIl90aW1lb3V0IiwiX3RpbWVyIiwiYWJvcnRlZCIsInVuc2V0IiwiZ2V0SGVhZGVyIiwiYXV0aCIsInBhc3MiLCJidG9hIiwiX2Zvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJhdHRhY2giLCJmaWxlIiwiZmlsZW5hbWUiLCJzZW5kIiwiY3Jvc3NEb21haW5FcnJvciIsImNyb3NzRG9tYWluIiwidGltZW91dEVycm9yIiwid2l0aENyZWRlbnRpYWxzIiwiX3dpdGhDcmVkZW50aWFscyIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJ0aW1lZG91dCIsImhhbmRsZVByb2dyZXNzIiwidG90YWwiLCJwZXJjZW50IiwibG9hZGVkIiwiaGFzTGlzdGVuZXJzIiwib25wcm9ncmVzcyIsInVwbG9hZCIsInNldFJlcXVlc3RIZWFkZXIiLCJwYXRjaCIsInBvc3QiLCJwdXQiLCJlbWl0dGVyIiwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9zdXBlcmFnZW50L25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9ub2RlX21vZHVsZXMvcmVkdWNlLWNvbXBvbmVudC9pbmRleC5qcyIsImlkeCIsImN1cnIiXSwibWFwcGluZ3MiOiJDQUFBLFFBQVVBLEdBQUVDLEVBQUVDLEVBQUVDLEdBQUcsUUFBU0MsR0FBRUMsRUFBRUMsR0FBRyxJQUFJSixFQUFFRyxHQUFHLENBQUMsSUFBSUosRUFBRUksR0FBRyxDQUFDLEdBQUlFLEdBQWtCLGtCQUFUQyxVQUFxQkEsT0FBUSxLQUFJRixHQUFHQyxFQUFFLE1BQU9BLEdBQUVGLEdBQUUsRUFBSSxJQUFHSSxFQUFFLE1BQU9BLEdBQUVKLEdBQUUsRUFBSSxJQUFJSyxHQUFFLEdBQUlDLE9BQU0sdUJBQXVCTixFQUFFLElBQUssTUFBTUssR0FBRUUsS0FBSyxtQkFBbUJGLEVBQUUsR0FBSUcsR0FBRVgsRUFBRUcsSUFBSVMsV0FBWWIsR0FBRUksR0FBRyxHQUFHVSxLQUFLRixFQUFFQyxRQUFRLFNBQVNkLEdBQUcsR0FBSUUsR0FBRUQsRUFBRUksR0FBRyxHQUFHTCxFQUFHLE9BQU9JLEdBQUVGLEVBQUVBLEVBQUVGLElBQUlhLEVBQUVBLEVBQUVDLFFBQVFkLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsTUFBT0QsR0FBRUcsR0FBR1MsUUFBa0QsSUFBSSxHQUExQ0wsR0FBa0Isa0JBQVRELFVBQXFCQSxRQUFnQkgsRUFBRSxFQUFFQSxFQUFFRixFQUFFYSxPQUFPWCxJQUFJRCxFQUFFRCxFQUFFRSxHQUFJLE9BQU9ELEtBQUthLGtCQUFrQixTQUFTVCxF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QyxFQUNBcW9FLEVBQUlrNEIsS0FFS2wvSCxFQUFOay9ILEdBQ0xDLEVBQU9ydUksRUFBRy9JLEtBQUssS0FBTW8zSSxFQUFNbjRCLEVBQUlrNEIsS0FBUUEsRUFBS2w0QixFQUc5QyxPQUFPbTRCLGNBRUUiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoe1wiLi9hcHAvaW5kZXguanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vKipcbiAqIENsaWVudCBhcHAgZW50cnkgcG9pbnRcbiAqIEB0eXBlIHsqfGV4cG9ydHN8bW9kdWxlLmV4cG9ydHN9XG4gKi9cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBSb3V0ZXIgPSByZXF1aXJlKCdyZWFjdC1yb3V0ZXInKTtcbnZhciByb3V0ZXMgPSByZXF1aXJlKCcuL3JvdXRlcycpO1xuXG5Sb3V0ZXIucnVuKHJvdXRlcywgUm91dGVyLkhhc2hMb2NhdGlvbiwgZnVuY3Rpb24oUm9vdCkge1xuICBSZWFjdC5yZW5kZXIoUmVhY3QuY3JlYXRlRWxlbWVudChSb290LCBudWxsKSwgZG9jdW1lbnQuYm9keSk7XG59KTtcblxufSx7XCIuL3JvdXRlc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL2FwcC9yb3V0ZXMuanNcIixcInJlYWN0XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L3JlYWN0LmpzXCIsXCJyZWFjdC1yb3V0ZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9pbmRleC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vYXBwL2NvbXBvbmVudHMvQXBwLnJlYWN0LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBBcHAgdG9wIGxldmVsIGNvbXBvbmVudFxuICogU2VydmVzIGFzIGEgbGF5b3V0IGNvbXBvbmVudCBmb3IgdGhlIGFwcFxuICogQHR5cGUgeyp8ZXhwb3J0c3xtb2R1bGUuZXhwb3J0c31cbiAqL1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJvdXRlciA9IHJlcXVpcmUoJ3JlYWN0LXJvdXRlcicpO1xuXG4vLyBjb21wb25lbnRzXG52YXIgSGVhZGVyID0gcmVxdWlyZSgnLi9IZWFkZXIucmVhY3QnKTtcblxudmFyIFJvdXRlSGFuZGxlciA9IFJvdXRlci5Sb3V0ZUhhbmRsZXI7XG5cbnZhciBBcHAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7ZGlzcGxheU5hbWU6IFwiQXBwXCIsXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7aWQ6IFwiYXBwXCJ9LCBcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEhlYWRlciwgbnVsbCksIFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVIYW5kbGVyLCBudWxsKVxuICAgICAgICApXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG59LHtcIi4vSGVhZGVyLnJlYWN0XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vYXBwL2NvbXBvbmVudHMvSGVhZGVyLnJlYWN0LmpzXCIsXCJyZWFjdFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiLFwicmVhY3Qtcm91dGVyXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvaW5kZXguanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL2FwcC9jb21wb25lbnRzL0Zvb3Rlci5yZWFjdC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8qKlxuICogRm9vdGVyIENvbXBvbmVudFxuICogQHNpbmNlIDEuMC4wXG4gKiBAdHlwZSB7KnxleHBvcnRzfG1vZHVsZS5leHBvcnRzfVxuICovXG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cblxudmFyIEZvb3RlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogXCJGb290ZXJcIixcblxuICAvKipcbiAgICogUmVuZGVycyBzaXRlIGhlYWRlclxuICAgKiBAcmV0dXJucyB7anN4fVxuICAgKi9cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZm9vdGVyXCIsIHtpZDogXCJhcHAtZm9vdGVyXCJ9LCBcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtjbGFzc05hbWU6IFwiY29udGFpblwifSwgXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtjbGFzc05hbWU6IFwic2l0ZS1pbmZvXCJ9LCBcbiAgICAgICAgICAgICAgXCJBIHNpdGUgYnkgXCIsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtocmVmOiBcImh0dHBzOi8vdHdpdHRlci5jb20vZGFuZWNhbmRvXCJ9LCBcIkBkYW5lY2FuZG9cIiksIFwiIGZvciBteSBOb2RlNFUhIHByZXNlbnRhdGlvbiBhdCBcIiwgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge2hyZWY6IFwiaHR0cDovL3d3dy5tZWV0dXAuY29tL0JvY2EtSlNcIn0sIFwiQm9jYUpTXCIpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBGb290ZXI7XG5cbn0se1wicmVhY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL2FwcC9jb21wb25lbnRzL0hlYWRlci5yZWFjdC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBIZWFkZXIgQ29tcG9uZW50XG4gKiBAc2luY2UgMS4wLjBcbiAqIEB0eXBlIHsqfGV4cG9ydHN8bW9kdWxlLmV4cG9ydHN9XG4gKi9cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBMaW5rID0gcmVxdWlyZSgncmVhY3Qtcm91dGVyJykuTGluaztcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbnZhciBIZWFkZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7ZGlzcGxheU5hbWU6IFwiSGVhZGVyXCIsXG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGhhc2ggdGFnIGxpbmsgd2l0aCBlbnRlciBrZXkgb24gdGFnIGlucHV0XG4gICAqIEBwYXJhbSBldmVudFxuICAgKi9cbiAgaGFzaElucHV0U3VibWl0OiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBlID0gXy5jbG9uZURlZXAoZXZlbnQpO1xuICAgIGlmIChlLmtleUNvZGUgIT09IDEzKSByZXR1cm47XG5cbiAgICB2YXIgaGFzaExpbmsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGFzaC1saW5rJyk7XG4gICAgaGFzaExpbmsuY2xpY2soKTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyBocmVmIGF0dHJpYnV0ZSBvbiBoYXNoIGxpbmsgd2l0aCBpbnB1dCBpbnB1dFxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICovXG4gIGhhc2hJbnB1dENoYW5nZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgdGFnID0gZW5jb2RlVVJJQ29tcG9uZW50KGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhhc2hMaW5rOiB0YWcgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluaXRpYWwgaGFzaExpbmsgaHJlZiB2YWx1ZVxuICAgKiBAcmV0dXJucyB7e2hhc2hMaW5rOiBzdHJpbmd9fVxuICAgKi9cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geyBoYXNoTGluazogJyd9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHNpdGUgaGVhZGVyXG4gICAqIEByZXR1cm5zIHtqc3h9XG4gICAqL1xuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoYXNoTGluayA9ICcvJyArIHRoaXMuc3RhdGUuaGFzaExpbms7XG4gICAgcmV0dXJuIChcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImhlYWRlclwiLCB7aWQ6IFwiYXBwLWhlYWRlclwifSwgXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7Y2xhc3NOYW1lOiBcImNvbnRhaW5cIn0sIFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNlY3Rpb25cIiwge2NsYXNzTmFtZTogXCJzaXRlLXRpdGxlXCJ9LCBcbiAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImgyXCIsIG51bGwsIFwiTm9kZTRVIFR3aXR0ZXIgRmVlZFwiKVxuICAgICAgICAgICAgKSwgXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiLCB7Y2xhc3NOYW1lOiBcImFwcC1uYXZcIn0sIFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwibmF2XCIsIHtjbGFzc05hbWU6IFwibmF2XCJ9LCBcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtjbGFzc05hbWU6IFwiYnRuLWNvbnRhaW5lclwifSwgXG4gICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHt0bzogXCIvXCIsIGNsYXNzTmFtZTogXCJidG4gYnRuLWhvbWVcIn0sIFwiSG9tZVwiKVxuICAgICAgICAgICAgICAgICksIFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge2NsYXNzTmFtZTogXCJoYXNoLW5hdlwifSwgXG4gICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtjbGFzc05hbWU6IFwidWstZm9ybS1pY29uXCJ9LCBcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge2NsYXNzTmFtZTogXCJoYXNoLW1hcmtcIn0sIFwiI1wiKSwgXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJoYXNoLWxpbmstaW5wdXRcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYXNoSW5wdXRDaGFuZ2UsIFxuICAgICAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duOiB0aGlzLmhhc2hJbnB1dFN1Ym1pdCwgXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJoYXNodGFnXCJ9KSwgXCIgICAgICAgICAgICAgICAgICAgIFwiKSwgXG4gICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHtpZDogXCJoYXNoLWxpbmtcIiwgdG86IGhhc2hMaW5rfSwgXCJGaW5kXCIpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gSGVhZGVyO1xuXG59LHtcImxvZGFzaFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9sb2Rhc2gvaW5kZXguanNcIixcInJlYWN0XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L3JlYWN0LmpzXCIsXCJyZWFjdC1yb3V0ZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9pbmRleC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vYXBwL2NvbXBvbmVudHMvZmVlZC9GZWVkLnJlYWN0LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEZlZWQgQ29tcG9uZW50IGRpc3BsYXlzIGxpc3RzIG9mIHR3ZWV0c1xuICogQHR5cGUgeyp8ZXhwb3J0c3xtb2R1bGUuZXhwb3J0c31cbiAqL1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFR3ZWV0ID0gcmVxdWlyZSgnLi9Ud2VldC5yZWFjdCcpO1xuXG52YXIgRmVlZCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogXCJGZWVkXCIsXG5cbiAgLyoqXG4gICAqIFJlLXJlbmRlciB3aGVuIG5ldyB0d2VldHMgYXJyaXZlXG4gICAqXG4gICAqIEBwYXJhbSBuZXh0UHJvcHNcbiAgICovXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uKG5leHRQcm9wcykge1xuICAgIHZhciB0d2VldHMgPSBuZXh0UHJvcHMudHdlZXRzO1xuICAgIHRoaXMuc2V0U3RhdGUoeyB0d2VldHM6IHR3ZWV0cyB9KTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7IHR3ZWV0czogdGhpcy5wcm9wcy50d2VldHMgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHR3ZWV0Tm9kZXMgPSB0aGlzLnN0YXRlLnR3ZWV0cy5tYXAoZnVuY3Rpb24odHdlZXQpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtjbGFzc05hbWU6IFwidHdlZXRcIiwga2V5OiB0d2VldC5pZH0sIFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUd2VldCwge3R3ZWV0OiB0d2VldH0pXG4gICAgICAgICAgKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge2lkOiBcInR3ZWV0LWZlZWRcIn0sIFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJvbFwiLCB7Y2xhc3NOYW1lOiBcInR3ZWV0c1wifSwgXG4gICAgICAgICAgICB0d2VldE5vZGVzXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBGZWVkO1xuXG59LHtcIi4vVHdlZXQucmVhY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9hcHAvY29tcG9uZW50cy9mZWVkL1R3ZWV0LnJlYWN0LmpzXCIsXCJyZWFjdFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vYXBwL2NvbXBvbmVudHMvZmVlZC9Ud2VldC5yZWFjdC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW5nbGUgVHdlZXQgQ29tcG9uZW50XG4gKiBAdHlwZSB7KnxleHBvcnRzfG1vZHVsZS5leHBvcnRzfVxuICovXG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBUd2VldCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogXCJUd2VldFwiLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHR3ZWV0ID0gdGhpcy5wcm9wcy50d2VldDtcbiAgICB2YXIgbGluayA9ICdodHRwczovL3R3aXR0ZXIuY29tLycgKyB0d2VldC51c2VyLnNjcmVlbl9uYW1lO1xuICAgIHJldHVybiAoXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge2NsYXNzTmFtZTogXCJ0d2VldC1jb250YWluZXJcIn0sIFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge2NsYXNzTmFtZTogXCJwcm9maWxlLXBpY1wifSwgXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7aHJlZjogbGlua30sIFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW1nXCIsIHtzcmM6IHR3ZWV0LnVzZXIucHJvZmlsZV9pbWFnZV91cmwsIGFsdDogXCJcIn0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSwgXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7Y2xhc3NOYW1lOiBcImNvbnRlbnQtYm94XCJ9LCBcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge2NsYXNzTmFtZTogXCJ0d2VldC1tZXRhXCJ9LCBcbiAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImgyXCIsIHtjbGFzc05hbWU6IFwidXNlci1uYW1lXCJ9LCB0d2VldC51c2VyLm5hbWUsIFwiIFwiLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic21hbGxcIiwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge2hyZWY6IGxpbmt9LCBcIkBcIiwgdHdlZXQudXNlci5zY3JlZW5fbmFtZSkpKSwgXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge2NsYXNzTmFtZTogXCJjb250ZW50XCJ9LCB0d2VldC50ZXh0KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVHdlZXQ7XG5cbn0se1wicmVhY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL2FwcC9jb21wb25lbnRzL3BhZ2VzL0hhc2gucmVhY3QuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogSGFzaCBQYWdlIENvbXBvbmVudCAoQ29udHJvbGxlci1WaWV3LUVzcXVlKVxuICpcbiAqIFRoaXMgcGFnZSBjb21wb25lbnQgcmVuZGVycyB0aGUgbGF0ZXN0IHR3ZWV0cyBmb3IgYSBoYXNoIHRhZyBiYXNlZCBvbiB0aGVcbiAqIGNsaWVudCBzaWRlIHVybCBwYXJhbS4gSXQgY29sbGVjdHMgaW5jb21pbmcgdHdlZXQgZGF0YSB0aHJvdWdoIGEgc29ja2V0XG4gKiBjb25uZWN0aW9uIGFuZCBwYXNzZXMgaXQgZG93biB0byBjaGlsZCBjb21wb25lbnRzIHZpYSBwcm9wcy5cbiAqXG4gKiBAdHlwZSB7KnxleHBvcnRzfG1vZHVsZS5leHBvcnRzfVxuICovXG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3N1cGVyYWdlbnQnKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbnZhciBGZWVkID0gcmVxdWlyZSgnLi4vZmVlZC9GZWVkLnJlYWN0Jyk7XG52YXIgRm9vdGVyID0gcmVxdWlyZSgnLi4vRm9vdGVyLnJlYWN0Jyk7XG5cbnZhciBIYXNoID0gUmVhY3QuY3JlYXRlQ2xhc3Moe2Rpc3BsYXlOYW1lOiBcIkhhc2hcIixcblxuICAvKipcbiAgICogTWFrZXMgYW4gaHR0cCByZXF1ZXN0IHRvIG91ciBzZXJ2ZXIgYXBpXG4gICAqIHRvIHJlcXVlc3QgdHdlZXRzIGZvciB0aGUgbWF0Y2hpbmcgdGFnXG4gICAqXG4gICAqIEBwYXJhbSB0YWdcbiAgICogQHJldHVybnMge2JsdWViaXJkfGV4cG9ydHN8bW9kdWxlLmV4cG9ydHN9XG4gICAqL1xuICBnZXRUd2VldHM6IGZ1bmN0aW9uKHRhZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlcXVlc3RcbiAgICAgICAgICAuZ2V0KCcvaGFzaC8nICsgdGFnKVxuICAgICAgICAgIC5lbmQoZnVuY3Rpb24oZXJyLCByZXMpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlcy5ib2R5KTtcbiAgICAgICAgICB9KTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogSW5pdGlhbCBzdGF0ZSBmb3IgdGhlIENvbXBvbmVudFxuICAgKlxuICAgKiBAcmV0dXJucyB7e3R3ZWV0czogQXJyYXl9fVxuICAgKi9cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGFnID0gdGhpcy5wcm9wcy5wYXJhbXMudGFnO1xuXG4gICAgLy8gcGFnZSB0aXRsZVxuICAgIGRvY3VtZW50LnRpdGxlID0gJ1R3ZWV0cyB2aWE6ICMnICsgdGFnICsgJyAtIEJvY2FKUyc7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHdlZXRzOiBbXVxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBkYXRhIHdoZW4gdGhlIHVybCBwYXJhbSBwcm9wIGNoYW5nZXNcbiAgICpcbiAgICogQHBhcmFtIG5leHRQcm9wc1xuICAgKi9cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24obmV4dFByb3BzKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciB0YWcgPSBuZXh0UHJvcHMucGFyYW1zLnRhZztcblxuICAgIC8vIHVwZGF0ZSB0aXRsZSBpZiBwYWdlcyBjaGFuZ2VzXG4gICAgZG9jdW1lbnQudGl0bGUgPSAnVHdlZXRzIHZpYTogIycgKyB0YWcgKyAnIC0gQm9jYUpTJztcblxuICAgIHNlbGYuZ2V0VHdlZXRzKHRhZylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24odHdlZXRzKSB7XG4gICAgICAgICAgc2VsZi5zZXRTdGF0ZSh7IHR3ZWV0czogdHdlZXRzIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZldGNoIHR3ZWV0cyBvbiBpbml0aWFsIHJlbmRlclxuICAgKi9cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgdGFnID0gdGhpcy5wcm9wcy5wYXJhbXMudGFnO1xuXG4gICAgLy8gZ2V0IGluaXRpYWwgdHdlZXRzXG4gICAgc2VsZi5nZXRUd2VldHModGFnKVxuICAgICAgICAudGhlbihmdW5jdGlvbih0d2VldHMpIHtcbiAgICAgICAgICBzZWxmLnNldFN0YXRlKHsgdHdlZXRzOiB0d2VldHMgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVuZGVycyBvdXIgSGFzaCBQYWdlIENvbXBvbmVudFxuICAgKiBQYXNzIGFsb25nIHR3ZWV0cyB0byBmZWVkIENvbXBvbmVudFxuICAgKlxuICAgKiBAcmV0dXJucyB7WE1MfVxuICAgKi9cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiLCB7aWQ6IFwiYXBwLW1haW5cIn0sIFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge2NsYXNzTmFtZTogXCJjb250YWluXCJ9LCBcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCB7Y2xhc3NOYW1lOiBcInBhZ2UtdGl0bGVcIn0sIFwiUmVjZW50IFwiLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7Y2xhc3NOYW1lOiBcImhhc2hcIn0sIFwiI1wiLCB0aGlzLnByb3BzLnBhcmFtcy50YWcpLCBcIiBUd2VldHMgXCIsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzbWFsbFwiLCBudWxsLCBcIigyNSlcIikpLCBcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmVlZCwge3R3ZWV0czogdGhpcy5zdGF0ZS50d2VldHN9KVxuICAgICAgICAgICksIFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9vdGVyLCBudWxsKVxuICAgICAgICApXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuXG59LHtcIi4uL0Zvb3Rlci5yZWFjdFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL2FwcC9jb21wb25lbnRzL0Zvb3Rlci5yZWFjdC5qc1wiLFwiLi4vZmVlZC9GZWVkLnJlYWN0XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vYXBwL2NvbXBvbmVudHMvZmVlZC9GZWVkLnJlYWN0LmpzXCIsXCJibHVlYmlyZFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9ibHVlYmlyZC9qcy9icm93c2VyL2JsdWViaXJkLmpzXCIsXCJyZWFjdFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiLFwic3VwZXJhZ2VudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9zdXBlcmFnZW50L2xpYi9jbGllbnQuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL2FwcC9jb21wb25lbnRzL3BhZ2VzL1N0cmVhbS5yZWFjdC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTdHJlYW0gY29tcG9uZW50IGdldHMgaW5pdGlhbCB0d2VldHMgYW5kIGxpc3RlbnMgZm9yIGluY29taW5nXG4gKiB0d2VldHMgZnJvbSB0aGUgc29ja2V0IGNvbm5lY3Rpb25cbiAqXG4gKiBAdHlwZSB7KnxleHBvcnRzfG1vZHVsZS5leHBvcnRzfVxuICovXG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3N1cGVyYWdlbnQnKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbnZhciBGZWVkID0gcmVxdWlyZSgnLi4vZmVlZC9GZWVkLnJlYWN0Jyk7XG52YXIgRm9vdGVyID0gcmVxdWlyZSgnLi4vRm9vdGVyLnJlYWN0Jyk7XG5cblxudmFyIFN0cmVhbSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogXCJTdHJlYW1cIixcblxuICBnZXRUd2VldHM6IGZ1bmN0aW9uKHRhZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlcXVlc3RcbiAgICAgICAgICAuZ2V0KCcvaGFzaC8nICsgdGFnKVxuICAgICAgICAgIC5lbmQoZnVuY3Rpb24oZXJyLCByZXMpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlcy5ib2R5KTtcbiAgICAgICAgICB9KTtcbiAgICB9KTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0d2VldHM6IFtdLFxuICAgICAgY291bnQ6IDBcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBwYWdlIHRpdGxlXG4gICAgZG9jdW1lbnQudGl0bGUgPSAnU3RyZWFtaW5nIHR3ZWV0cyB2aWE6ICNCb2NhSlMnO1xuXG4gICAgdmFyIHNvY2tldCA9IGlvLmNvbm5lY3QoJ2h0dHA6Ly90d2l0dGVyLXN0cmVhbS5kYW5lLmxpbmsnKTtcblxuICAgIHNvY2tldC5vbignbmV3VHdlZXQnLCBmdW5jdGlvbih0d2VldCkge1xuICAgICAgdmFyIHR3ZWV0cyA9IHNlbGYuc3RhdGUudHdlZXRzO1xuICAgICAgdmFyIGNvdW50ID0gc2VsZi5zdGF0ZS5jb3VudCArIDE7XG4gICAgICB0d2VldHMudW5zaGlmdCh0d2VldCk7XG4gICAgICBzZWxmLnNldFN0YXRlKHtcbiAgICAgICAgdHdlZXRzOiB0d2VldHMsXG4gICAgICAgIGNvdW50OiBjb3VudFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBnZXQgaW5pdGlhbCB0d2VldHNcbiAgICBzZWxmLmdldFR3ZWV0cygnYm9jYWpzJylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24odHdlZXRzKSB7XG4gICAgICAgICAgc2VsZi5zZXRTdGF0ZSh7IHR3ZWV0czogdHdlZXRzIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiLCB7aWQ6IFwiYXBwLW1haW5cIn0sIFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge2NsYXNzTmFtZTogXCJjb250YWluXCJ9LCBcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCB7Y2xhc3NOYW1lOiBcInBhZ2UtdGl0bGVcIn0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtjbGFzc05hbWU6IFwiaGFzaFwifSwgXCIjQm9jYUpTXCIpLCBcIiBMaXZlIFN0cmVhbWluZyBUd2VldHMgXCIsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzbWFsbFwiLCBudWxsLCBcIihcIiwgdGhpcy5zdGF0ZS5jb3VudCwgXCIgbmV3KVwiKSksIFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChGZWVkLCB7dHdlZXRzOiB0aGlzLnN0YXRlLnR3ZWV0c30pXG4gICAgICAgICAgKSwgXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChGb290ZXIsIG51bGwpXG4gICAgICAgIClcbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTtcblxufSx7XCIuLi9Gb290ZXIucmVhY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9hcHAvY29tcG9uZW50cy9Gb290ZXIucmVhY3QuanNcIixcIi4uL2ZlZWQvRmVlZC5yZWFjdFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL2FwcC9jb21wb25lbnRzL2ZlZWQvRmVlZC5yZWFjdC5qc1wiLFwiYmx1ZWJpcmRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvYnJvd3Nlci9ibHVlYmlyZC5qc1wiLFwicmVhY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIixcInN1cGVyYWdlbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvY2xpZW50LmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9hcHAvcm91dGVzLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBSZWFjdCBSb3V0ZXIgZm9yIGNsaWVudCBzaWRlIHJvdXRpbmdcbiAqIEB0eXBlIHsqfGV4cG9ydHN8bW9kdWxlLmV4cG9ydHN9XG4gKi9cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBSb3V0ZXIgPSByZXF1aXJlKCdyZWFjdC1yb3V0ZXInKTtcbnZhciBBcHAgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvQXBwLnJlYWN0Jyk7XG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL3BhZ2VzL1N0cmVhbS5yZWFjdCcpO1xudmFyIEhhc2ggPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvcGFnZXMvSGFzaC5yZWFjdCcpO1xuXG52YXIgUm91dGUgPSBSb3V0ZXIuUm91dGU7XG5cbnZhciByb3V0ZXMgPSAoXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwge2hhbmRsZXI6IEFwcH0sIFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwge25hbWU6IFwic3RyZWFtXCIsIHBhdGg6IFwiL1wiLCBoYW5kbGVyOiBTdHJlYW19KSwgXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7bmFtZTogXCJoYXNoXCIsIHBhdGg6IFwiOnRhZ1wiLCBoYW5kbGVyOiBIYXNofSlcbiAgICApXG4pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcztcblxufSx7XCIuL2NvbXBvbmVudHMvQXBwLnJlYWN0XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vYXBwL2NvbXBvbmVudHMvQXBwLnJlYWN0LmpzXCIsXCIuL2NvbXBvbmVudHMvcGFnZXMvSGFzaC5yZWFjdFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL2FwcC9jb21wb25lbnRzL3BhZ2VzL0hhc2gucmVhY3QuanNcIixcIi4vY29tcG9uZW50cy9wYWdlcy9TdHJlYW0ucmVhY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9hcHAvY29tcG9uZW50cy9wYWdlcy9TdHJlYW0ucmVhY3QuanNcIixcInJlYWN0XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L3JlYWN0LmpzXCIsXCJyZWFjdC1yb3V0ZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9pbmRleC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2JsdWViaXJkL2pzL2Jyb3dzZXIvYmx1ZWJpcmQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsKXtcbi8qIEBwcmVzZXJ2ZVxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBcbiAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczo8L3A+XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cbi8qKlxuICogYmx1ZWJpcmQgYnVpbGQgdmVyc2lvbiAyLjkuMzNcbiAqIEZlYXR1cmVzIGVuYWJsZWQ6IGNvcmUsIHJhY2UsIGNhbGxfZ2V0LCBnZW5lcmF0b3JzLCBtYXAsIG5vZGVpZnksIHByb21pc2lmeSwgcHJvcHMsIHJlZHVjZSwgc2V0dGxlLCBzb21lLCBjYW5jZWwsIHVzaW5nLCBmaWx0ZXIsIGFueSwgZWFjaCwgdGltZXJzXG4qL1xuIWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPWUoKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sZSk7ZWxzZXt2YXIgZjtcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P2Y9d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Zj1nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJihmPXNlbGYpLGYuUHJvbWlzZT1lKCl9fShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgX2RlcmVxXz09XCJmdW5jdGlvblwiJiZfZGVyZXFfO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiBfZGVyZXFfPT1cImZ1bmN0aW9uXCImJl9kZXJlcV87Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlKSB7XG52YXIgU29tZVByb21pc2VBcnJheSA9IFByb21pc2UuX1NvbWVQcm9taXNlQXJyYXk7XG5mdW5jdGlvbiBhbnkocHJvbWlzZXMpIHtcbiAgICB2YXIgcmV0ID0gbmV3IFNvbWVQcm9taXNlQXJyYXkocHJvbWlzZXMpO1xuICAgIHZhciBwcm9taXNlID0gcmV0LnByb21pc2UoKTtcbiAgICByZXQuc2V0SG93TWFueSgxKTtcbiAgICByZXQuc2V0VW53cmFwKCk7XG4gICAgcmV0LmluaXQoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuUHJvbWlzZS5hbnkgPSBmdW5jdGlvbiAocHJvbWlzZXMpIHtcbiAgICByZXR1cm4gYW55KHByb21pc2VzKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmFueSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYW55KHRoaXMpO1xufTtcblxufTtcblxufSx7fV0sMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBmaXJzdExpbmVFcnJvcjtcbnRyeSB7dGhyb3cgbmV3IEVycm9yKCk7IH0gY2F0Y2ggKGUpIHtmaXJzdExpbmVFcnJvciA9IGU7fVxudmFyIHNjaGVkdWxlID0gX2RlcmVxXyhcIi4vc2NoZWR1bGUuanNcIik7XG52YXIgUXVldWUgPSBfZGVyZXFfKFwiLi9xdWV1ZS5qc1wiKTtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcblxuZnVuY3Rpb24gQXN5bmMoKSB7XG4gICAgdGhpcy5faXNUaWNrVXNlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2xhdGVRdWV1ZSA9IG5ldyBRdWV1ZSgxNik7XG4gICAgdGhpcy5fbm9ybWFsUXVldWUgPSBuZXcgUXVldWUoMTYpO1xuICAgIHRoaXMuX3RyYW1wb2xpbmVFbmFibGVkID0gdHJ1ZTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5kcmFpblF1ZXVlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5fZHJhaW5RdWV1ZXMoKTtcbiAgICB9O1xuICAgIHRoaXMuX3NjaGVkdWxlID1cbiAgICAgICAgc2NoZWR1bGUuaXNTdGF0aWMgPyBzY2hlZHVsZSh0aGlzLmRyYWluUXVldWVzKSA6IHNjaGVkdWxlO1xufVxuXG5Bc3luYy5wcm90b3R5cGUuZGlzYWJsZVRyYW1wb2xpbmVJZk5lY2Vzc2FyeSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh1dGlsLmhhc0RldlRvb2xzKSB7XG4gICAgICAgIHRoaXMuX3RyYW1wb2xpbmVFbmFibGVkID0gZmFsc2U7XG4gICAgfVxufTtcblxuQXN5bmMucHJvdG90eXBlLmVuYWJsZVRyYW1wb2xpbmUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuX3RyYW1wb2xpbmVFbmFibGVkKSB7XG4gICAgICAgIHRoaXMuX3RyYW1wb2xpbmVFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc2NoZWR1bGUgPSBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgICAgIH07XG4gICAgfVxufTtcblxuQXN5bmMucHJvdG90eXBlLmhhdmVJdGVtc1F1ZXVlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbm9ybWFsUXVldWUubGVuZ3RoKCkgPiAwO1xufTtcblxuQXN5bmMucHJvdG90eXBlLnRocm93TGF0ZXIgPSBmdW5jdGlvbihmbiwgYXJnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgYXJnID0gZm47XG4gICAgICAgIGZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBhcmc7IH07XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm4oYXJnKTtcbiAgICAgICAgfSwgMCk7XG4gICAgfSBlbHNlIHRyeSB7XG4gICAgICAgIHRoaXMuX3NjaGVkdWxlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm4oYXJnKTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBhc3luYyBzY2hlZHVsZXIgYXZhaWxhYmxlXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvbTNPVFhrXFx1MDAwYVwiKTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBBc3luY0ludm9rZUxhdGVyKGZuLCByZWNlaXZlciwgYXJnKSB7XG4gICAgdGhpcy5fbGF0ZVF1ZXVlLnB1c2goZm4sIHJlY2VpdmVyLCBhcmcpO1xuICAgIHRoaXMuX3F1ZXVlVGljaygpO1xufVxuXG5mdW5jdGlvbiBBc3luY0ludm9rZShmbiwgcmVjZWl2ZXIsIGFyZykge1xuICAgIHRoaXMuX25vcm1hbFF1ZXVlLnB1c2goZm4sIHJlY2VpdmVyLCBhcmcpO1xuICAgIHRoaXMuX3F1ZXVlVGljaygpO1xufVxuXG5mdW5jdGlvbiBBc3luY1NldHRsZVByb21pc2VzKHByb21pc2UpIHtcbiAgICB0aGlzLl9ub3JtYWxRdWV1ZS5fcHVzaE9uZShwcm9taXNlKTtcbiAgICB0aGlzLl9xdWV1ZVRpY2soKTtcbn1cblxuaWYgKCF1dGlsLmhhc0RldlRvb2xzKSB7XG4gICAgQXN5bmMucHJvdG90eXBlLmludm9rZUxhdGVyID0gQXN5bmNJbnZva2VMYXRlcjtcbiAgICBBc3luYy5wcm90b3R5cGUuaW52b2tlID0gQXN5bmNJbnZva2U7XG4gICAgQXN5bmMucHJvdG90eXBlLnNldHRsZVByb21pc2VzID0gQXN5bmNTZXR0bGVQcm9taXNlcztcbn0gZWxzZSB7XG4gICAgaWYgKHNjaGVkdWxlLmlzU3RhdGljKSB7XG4gICAgICAgIHNjaGVkdWxlID0gZnVuY3Rpb24oZm4pIHsgc2V0VGltZW91dChmbiwgMCk7IH07XG4gICAgfVxuICAgIEFzeW5jLnByb3RvdHlwZS5pbnZva2VMYXRlciA9IGZ1bmN0aW9uIChmbiwgcmVjZWl2ZXIsIGFyZykge1xuICAgICAgICBpZiAodGhpcy5fdHJhbXBvbGluZUVuYWJsZWQpIHtcbiAgICAgICAgICAgIEFzeW5jSW52b2tlTGF0ZXIuY2FsbCh0aGlzLCBmbiwgcmVjZWl2ZXIsIGFyZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zY2hlZHVsZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBmbi5jYWxsKHJlY2VpdmVyLCBhcmcpO1xuICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBBc3luYy5wcm90b3R5cGUuaW52b2tlID0gZnVuY3Rpb24gKGZuLCByZWNlaXZlciwgYXJnKSB7XG4gICAgICAgIGlmICh0aGlzLl90cmFtcG9saW5lRW5hYmxlZCkge1xuICAgICAgICAgICAgQXN5bmNJbnZva2UuY2FsbCh0aGlzLCBmbiwgcmVjZWl2ZXIsIGFyZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zY2hlZHVsZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKHJlY2VpdmVyLCBhcmcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQXN5bmMucHJvdG90eXBlLnNldHRsZVByb21pc2VzID0gZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgICAgICBpZiAodGhpcy5fdHJhbXBvbGluZUVuYWJsZWQpIHtcbiAgICAgICAgICAgIEFzeW5jU2V0dGxlUHJvbWlzZXMuY2FsbCh0aGlzLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHByb21pc2UuX3NldHRsZVByb21pc2VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbkFzeW5jLnByb3RvdHlwZS5pbnZva2VGaXJzdCA9IGZ1bmN0aW9uIChmbiwgcmVjZWl2ZXIsIGFyZykge1xuICAgIHRoaXMuX25vcm1hbFF1ZXVlLnVuc2hpZnQoZm4sIHJlY2VpdmVyLCBhcmcpO1xuICAgIHRoaXMuX3F1ZXVlVGljaygpO1xufTtcblxuQXN5bmMucHJvdG90eXBlLl9kcmFpblF1ZXVlID0gZnVuY3Rpb24ocXVldWUpIHtcbiAgICB3aGlsZSAocXVldWUubGVuZ3RoKCkgPiAwKSB7XG4gICAgICAgIHZhciBmbiA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgZm4uX3NldHRsZVByb21pc2VzKCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVjZWl2ZXIgPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICB2YXIgYXJnID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgZm4uY2FsbChyZWNlaXZlciwgYXJnKTtcbiAgICB9XG59O1xuXG5Bc3luYy5wcm90b3R5cGUuX2RyYWluUXVldWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2RyYWluUXVldWUodGhpcy5fbm9ybWFsUXVldWUpO1xuICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgdGhpcy5fZHJhaW5RdWV1ZSh0aGlzLl9sYXRlUXVldWUpO1xufTtcblxuQXN5bmMucHJvdG90eXBlLl9xdWV1ZVRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9pc1RpY2tVc2VkKSB7XG4gICAgICAgIHRoaXMuX2lzVGlja1VzZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zY2hlZHVsZSh0aGlzLmRyYWluUXVldWVzKTtcbiAgICB9XG59O1xuXG5Bc3luYy5wcm90b3R5cGUuX3Jlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2lzVGlja1VzZWQgPSBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IEFzeW5jKCk7XG5tb2R1bGUuZXhwb3J0cy5maXJzdExpbmVFcnJvciA9IGZpcnN0TGluZUVycm9yO1xuXG59LHtcIi4vcXVldWUuanNcIjoyOCxcIi4vc2NoZWR1bGUuanNcIjozMSxcIi4vdXRpbC5qc1wiOjM4fV0sMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgSU5URVJOQUwsIHRyeUNvbnZlcnRUb1Byb21pc2UpIHtcbnZhciByZWplY3RUaGlzID0gZnVuY3Rpb24oXywgZSkge1xuICAgIHRoaXMuX3JlamVjdChlKTtcbn07XG5cbnZhciB0YXJnZXRSZWplY3RlZCA9IGZ1bmN0aW9uKGUsIGNvbnRleHQpIHtcbiAgICBjb250ZXh0LnByb21pc2VSZWplY3Rpb25RdWV1ZWQgPSB0cnVlO1xuICAgIGNvbnRleHQuYmluZGluZ1Byb21pc2UuX3RoZW4ocmVqZWN0VGhpcywgcmVqZWN0VGhpcywgbnVsbCwgdGhpcywgZSk7XG59O1xuXG52YXIgYmluZGluZ1Jlc29sdmVkID0gZnVuY3Rpb24odGhpc0FyZywgY29udGV4dCkge1xuICAgIHRoaXMuX3NldEJvdW5kVG8odGhpc0FyZyk7XG4gICAgaWYgKHRoaXMuX2lzUGVuZGluZygpKSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVDYWxsYmFjayhjb250ZXh0LnRhcmdldCk7XG4gICAgfVxufTtcblxudmFyIGJpbmRpbmdSZWplY3RlZCA9IGZ1bmN0aW9uKGUsIGNvbnRleHQpIHtcbiAgICBpZiAoIWNvbnRleHQucHJvbWlzZVJlamVjdGlvblF1ZXVlZCkgdGhpcy5fcmVqZWN0KGUpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICh0aGlzQXJnKSB7XG4gICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UodGhpc0FyZyk7XG4gICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICByZXQuX3Byb3BhZ2F0ZUZyb20odGhpcywgMSk7XG4gICAgdmFyIHRhcmdldCA9IHRoaXMuX3RhcmdldCgpO1xuICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0ge1xuICAgICAgICAgICAgcHJvbWlzZVJlamVjdGlvblF1ZXVlZDogZmFsc2UsXG4gICAgICAgICAgICBwcm9taXNlOiByZXQsXG4gICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgIGJpbmRpbmdQcm9taXNlOiBtYXliZVByb21pc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGFyZ2V0Ll90aGVuKElOVEVSTkFMLCB0YXJnZXRSZWplY3RlZCwgcmV0Ll9wcm9ncmVzcywgcmV0LCBjb250ZXh0KTtcbiAgICAgICAgbWF5YmVQcm9taXNlLl90aGVuKFxuICAgICAgICAgICAgYmluZGluZ1Jlc29sdmVkLCBiaW5kaW5nUmVqZWN0ZWQsIHJldC5fcHJvZ3Jlc3MsIHJldCwgY29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0Ll9zZXRCb3VuZFRvKHRoaXNBcmcpO1xuICAgICAgICByZXQuX3Jlc29sdmVDYWxsYmFjayh0YXJnZXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldEJvdW5kVG8gPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKG9iaiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCAxMzEwNzI7XG4gICAgICAgIHRoaXMuX2JvdW5kVG8gPSBvYmo7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+MTMxMDcyKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5faXNCb3VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgMTMxMDcyKSA9PT0gMTMxMDcyO1xufTtcblxuUHJvbWlzZS5iaW5kID0gZnVuY3Rpb24gKHRoaXNBcmcsIHZhbHVlKSB7XG4gICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UodGhpc0FyZyk7XG4gICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcblxuICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIG1heWJlUHJvbWlzZS5fdGhlbihmdW5jdGlvbih0aGlzQXJnKSB7XG4gICAgICAgICAgICByZXQuX3NldEJvdW5kVG8odGhpc0FyZyk7XG4gICAgICAgICAgICByZXQuX3Jlc29sdmVDYWxsYmFjayh2YWx1ZSk7XG4gICAgICAgIH0sIHJldC5fcmVqZWN0LCByZXQuX3Byb2dyZXNzLCByZXQsIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldC5fc2V0Qm91bmRUbyh0aGlzQXJnKTtcbiAgICAgICAgcmV0Ll9yZXNvbHZlQ2FsbGJhY2sodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcbn07XG5cbn0se31dLDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgb2xkO1xuaWYgKHR5cGVvZiBQcm9taXNlICE9PSBcInVuZGVmaW5lZFwiKSBvbGQgPSBQcm9taXNlO1xuZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICB0cnkgeyBpZiAoUHJvbWlzZSA9PT0gYmx1ZWJpcmQpIFByb21pc2UgPSBvbGQ7IH1cbiAgICBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gYmx1ZWJpcmQ7XG59XG52YXIgYmx1ZWJpcmQgPSBfZGVyZXFfKFwiLi9wcm9taXNlLmpzXCIpKCk7XG5ibHVlYmlyZC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbm1vZHVsZS5leHBvcnRzID0gYmx1ZWJpcmQ7XG5cbn0se1wiLi9wcm9taXNlLmpzXCI6MjN9XSw1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIGNyID0gT2JqZWN0LmNyZWF0ZTtcbmlmIChjcikge1xuICAgIHZhciBjYWxsZXJDYWNoZSA9IGNyKG51bGwpO1xuICAgIHZhciBnZXR0ZXJDYWNoZSA9IGNyKG51bGwpO1xuICAgIGNhbGxlckNhY2hlW1wiIHNpemVcIl0gPSBnZXR0ZXJDYWNoZVtcIiBzaXplXCJdID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgY2FuRXZhbHVhdGUgPSB1dGlsLmNhbkV2YWx1YXRlO1xudmFyIGlzSWRlbnRpZmllciA9IHV0aWwuaXNJZGVudGlmaWVyO1xuXG52YXIgZ2V0TWV0aG9kQ2FsbGVyO1xudmFyIGdldEdldHRlcjtcbmlmICghdHJ1ZSkge1xudmFyIG1ha2VNZXRob2RDYWxsZXIgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oXCJlbnN1cmVNZXRob2RcIiwgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgJ3VzZSBzdHJpY3QnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgZW5zdXJlTWV0aG9kKG9iaiwgJ21ldGhvZE5hbWUnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgc3dpdGNoKGxlbikgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG9iai5tZXRob2ROYW1lKHRoaXNbMF0pOyAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG9iai5tZXRob2ROYW1lKHRoaXNbMF0sIHRoaXNbMV0pOyAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG9iai5tZXRob2ROYW1lKHRoaXNbMF0sIHRoaXNbMV0sIHRoaXNbMl0pOyAgICBcXG5cXFxuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG9iai5tZXRob2ROYW1lKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqLm1ldGhvZE5hbWUuYXBwbHkob2JqLCB0aGlzKTsgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICBcIi5yZXBsYWNlKC9tZXRob2ROYW1lL2csIG1ldGhvZE5hbWUpKShlbnN1cmVNZXRob2QpO1xufTtcblxudmFyIG1ha2VHZXR0ZXIgPSBmdW5jdGlvbiAocHJvcGVydHlOYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbihcIm9ialwiLCBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICd1c2Ugc3RyaWN0JzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgIHJldHVybiBvYmoucHJvcGVydHlOYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgIFwiLnJlcGxhY2UoXCJwcm9wZXJ0eU5hbWVcIiwgcHJvcGVydHlOYW1lKSk7XG59O1xuXG52YXIgZ2V0Q29tcGlsZWQgPSBmdW5jdGlvbihuYW1lLCBjb21waWxlciwgY2FjaGUpIHtcbiAgICB2YXIgcmV0ID0gY2FjaGVbbmFtZV07XG4gICAgaWYgKHR5cGVvZiByZXQgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBpZiAoIWlzSWRlbnRpZmllcihuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0ID0gY29tcGlsZXIobmFtZSk7XG4gICAgICAgIGNhY2hlW25hbWVdID0gcmV0O1xuICAgICAgICBjYWNoZVtcIiBzaXplXCJdKys7XG4gICAgICAgIGlmIChjYWNoZVtcIiBzaXplXCJdID4gNTEyKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGNhY2hlKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIGRlbGV0ZSBjYWNoZVtrZXlzW2ldXTtcbiAgICAgICAgICAgIGNhY2hlW1wiIHNpemVcIl0gPSBrZXlzLmxlbmd0aCAtIDI1NjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxuZ2V0TWV0aG9kQ2FsbGVyID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiBnZXRDb21waWxlZChuYW1lLCBtYWtlTWV0aG9kQ2FsbGVyLCBjYWxsZXJDYWNoZSk7XG59O1xuXG5nZXRHZXR0ZXIgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIGdldENvbXBpbGVkKG5hbWUsIG1ha2VHZXR0ZXIsIGdldHRlckNhY2hlKTtcbn07XG59XG5cbmZ1bmN0aW9uIGVuc3VyZU1ldGhvZChvYmosIG1ldGhvZE5hbWUpIHtcbiAgICB2YXIgZm47XG4gICAgaWYgKG9iaiAhPSBudWxsKSBmbiA9IG9ialttZXRob2ROYW1lXTtcbiAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBcIk9iamVjdCBcIiArIHV0aWwuY2xhc3NTdHJpbmcob2JqKSArIFwiIGhhcyBubyBtZXRob2QgJ1wiICtcbiAgICAgICAgICAgIHV0aWwudG9TdHJpbmcobWV0aG9kTmFtZSkgKyBcIidcIjtcbiAgICAgICAgdGhyb3cgbmV3IFByb21pc2UuVHlwZUVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gZm47XG59XG5cbmZ1bmN0aW9uIGNhbGxlcihvYmopIHtcbiAgICB2YXIgbWV0aG9kTmFtZSA9IHRoaXMucG9wKCk7XG4gICAgdmFyIGZuID0gZW5zdXJlTWV0aG9kKG9iaiwgbWV0aG9kTmFtZSk7XG4gICAgcmV0dXJuIGZuLmFwcGx5KG9iaiwgdGhpcyk7XG59XG5Qcm9taXNlLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgICB2YXIgJF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoO3ZhciBhcmdzID0gbmV3IEFycmF5KCRfbGVuIC0gMSk7IGZvcih2YXIgJF9pID0gMTsgJF9pIDwgJF9sZW47ICsrJF9pKSB7YXJnc1skX2kgLSAxXSA9IGFyZ3VtZW50c1skX2ldO31cbiAgICBpZiAoIXRydWUpIHtcbiAgICAgICAgaWYgKGNhbkV2YWx1YXRlKSB7XG4gICAgICAgICAgICB2YXIgbWF5YmVDYWxsZXIgPSBnZXRNZXRob2RDYWxsZXIobWV0aG9kTmFtZSk7XG4gICAgICAgICAgICBpZiAobWF5YmVDYWxsZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGhlbihcbiAgICAgICAgICAgICAgICAgICAgbWF5YmVDYWxsZXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcmdzLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFyZ3MucHVzaChtZXRob2ROYW1lKTtcbiAgICByZXR1cm4gdGhpcy5fdGhlbihjYWxsZXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcmdzLCB1bmRlZmluZWQpO1xufTtcblxuZnVuY3Rpb24gbmFtZWRHZXR0ZXIob2JqKSB7XG4gICAgcmV0dXJuIG9ialt0aGlzXTtcbn1cbmZ1bmN0aW9uIGluZGV4ZWRHZXR0ZXIob2JqKSB7XG4gICAgdmFyIGluZGV4ID0gK3RoaXM7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBNYXRoLm1heCgwLCBpbmRleCArIG9iai5sZW5ndGgpO1xuICAgIHJldHVybiBvYmpbaW5kZXhdO1xufVxuUHJvbWlzZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHByb3BlcnR5TmFtZSkge1xuICAgIHZhciBpc0luZGV4ID0gKHR5cGVvZiBwcm9wZXJ0eU5hbWUgPT09IFwibnVtYmVyXCIpO1xuICAgIHZhciBnZXR0ZXI7XG4gICAgaWYgKCFpc0luZGV4KSB7XG4gICAgICAgIGlmIChjYW5FdmFsdWF0ZSkge1xuICAgICAgICAgICAgdmFyIG1heWJlR2V0dGVyID0gZ2V0R2V0dGVyKHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICBnZXR0ZXIgPSBtYXliZUdldHRlciAhPT0gbnVsbCA/IG1heWJlR2V0dGVyIDogbmFtZWRHZXR0ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXR0ZXIgPSBuYW1lZEdldHRlcjtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGdldHRlciA9IGluZGV4ZWRHZXR0ZXI7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl90aGVuKGdldHRlciwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHByb3BlcnR5TmFtZSwgdW5kZWZpbmVkKTtcbn07XG59O1xuXG59LHtcIi4vdXRpbC5qc1wiOjM4fV0sNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSkge1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuL2Vycm9ycy5qc1wiKTtcbnZhciBhc3luYyA9IF9kZXJlcV8oXCIuL2FzeW5jLmpzXCIpO1xudmFyIENhbmNlbGxhdGlvbkVycm9yID0gZXJyb3JzLkNhbmNlbGxhdGlvbkVycm9yO1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fY2FuY2VsID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIGlmICghdGhpcy5pc0NhbmNlbGxhYmxlKCkpIHJldHVybiB0aGlzO1xuICAgIHZhciBwYXJlbnQ7XG4gICAgdmFyIHByb21pc2VUb1JlamVjdCA9IHRoaXM7XG4gICAgd2hpbGUgKChwYXJlbnQgPSBwcm9taXNlVG9SZWplY3QuX2NhbmNlbGxhdGlvblBhcmVudCkgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBwYXJlbnQuaXNDYW5jZWxsYWJsZSgpKSB7XG4gICAgICAgIHByb21pc2VUb1JlamVjdCA9IHBhcmVudDtcbiAgICB9XG4gICAgdGhpcy5fdW5zZXRDYW5jZWxsYWJsZSgpO1xuICAgIHByb21pc2VUb1JlamVjdC5fdGFyZ2V0KCkuX3JlamVjdENhbGxiYWNrKHJlYXNvbiwgZmFsc2UsIHRydWUpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIGlmICghdGhpcy5pc0NhbmNlbGxhYmxlKCkpIHJldHVybiB0aGlzO1xuICAgIGlmIChyZWFzb24gPT09IHVuZGVmaW5lZCkgcmVhc29uID0gbmV3IENhbmNlbGxhdGlvbkVycm9yKCk7XG4gICAgYXN5bmMuaW52b2tlTGF0ZXIodGhpcy5fY2FuY2VsLCB0aGlzLCByZWFzb24pO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuY2FuY2VsbGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX2NhbmNlbGxhYmxlKCkpIHJldHVybiB0aGlzO1xuICAgIGFzeW5jLmVuYWJsZVRyYW1wb2xpbmUoKTtcbiAgICB0aGlzLl9zZXRDYW5jZWxsYWJsZSgpO1xuICAgIHRoaXMuX2NhbmNlbGxhdGlvblBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblByb21pc2UucHJvdG90eXBlLnVuY2FuY2VsbGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJldCA9IHRoaXMudGhlbigpO1xuICAgIHJldC5fdW5zZXRDYW5jZWxsYWJsZSgpO1xuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5mb3JrID0gZnVuY3Rpb24gKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCwgZGlkUHJvZ3Jlc3MpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy5fdGhlbihkaWRGdWxmaWxsLCBkaWRSZWplY3QsIGRpZFByb2dyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcblxuICAgIHJldC5fc2V0Q2FuY2VsbGFibGUoKTtcbiAgICByZXQuX2NhbmNlbGxhdGlvblBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmV0O1xufTtcbn07XG5cbn0se1wiLi9hc3luYy5qc1wiOjIsXCIuL2Vycm9ycy5qc1wiOjEzfV0sNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG52YXIgYXN5bmMgPSBfZGVyZXFfKFwiLi9hc3luYy5qc1wiKTtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciBibHVlYmlyZEZyYW1lUGF0dGVybiA9XG4gICAgL1tcXFxcXFwvXWJsdWViaXJkW1xcXFxcXC9danNbXFxcXFxcL10obWFpbnxkZWJ1Z3x6YWxnb3xpbnN0cnVtZW50ZWQpLztcbnZhciBzdGFja0ZyYW1lUGF0dGVybiA9IG51bGw7XG52YXIgZm9ybWF0U3RhY2sgPSBudWxsO1xudmFyIGluZGVudFN0YWNrRnJhbWVzID0gZmFsc2U7XG52YXIgd2FybjtcblxuZnVuY3Rpb24gQ2FwdHVyZWRUcmFjZShwYXJlbnQpIHtcbiAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMuX2xlbmd0aCA9IDEgKyAocGFyZW50ID09PSB1bmRlZmluZWQgPyAwIDogcGFyZW50Ll9sZW5ndGgpO1xuICAgIGNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIENhcHR1cmVkVHJhY2UpO1xuICAgIGlmIChsZW5ndGggPiAzMikgdGhpcy51bmN5Y2xlKCk7XG59XG51dGlsLmluaGVyaXRzKENhcHR1cmVkVHJhY2UsIEVycm9yKTtcblxuQ2FwdHVyZWRUcmFjZS5wcm90b3R5cGUudW5jeWNsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZW5ndGggPSB0aGlzLl9sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCA8IDIpIHJldHVybjtcbiAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICB2YXIgc3RhY2tUb0luZGV4ID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbm9kZSA9IHRoaXM7IG5vZGUgIT09IHVuZGVmaW5lZDsgKytpKSB7XG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgIG5vZGUgPSBub2RlLl9wYXJlbnQ7XG4gICAgfVxuICAgIGxlbmd0aCA9IHRoaXMuX2xlbmd0aCA9IGk7XG4gICAgZm9yICh2YXIgaSA9IGxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBzdGFjayA9IG5vZGVzW2ldLnN0YWNrO1xuICAgICAgICBpZiAoc3RhY2tUb0luZGV4W3N0YWNrXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdGFja1RvSW5kZXhbc3RhY2tdID0gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBjdXJyZW50U3RhY2sgPSBub2Rlc1tpXS5zdGFjaztcbiAgICAgICAgdmFyIGluZGV4ID0gc3RhY2tUb0luZGV4W2N1cnJlbnRTdGFja107XG4gICAgICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIGluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgbm9kZXNbaW5kZXggLSAxXS5fcGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIG5vZGVzW2luZGV4IC0gMV0uX2xlbmd0aCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2Rlc1tpXS5fcGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgbm9kZXNbaV0uX2xlbmd0aCA9IDE7XG4gICAgICAgICAgICB2YXIgY3ljbGVFZGdlTm9kZSA9IGkgPiAwID8gbm9kZXNbaSAtIDFdIDogdGhpcztcblxuICAgICAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGN5Y2xlRWRnZU5vZGUuX3BhcmVudCA9IG5vZGVzW2luZGV4ICsgMV07XG4gICAgICAgICAgICAgICAgY3ljbGVFZGdlTm9kZS5fcGFyZW50LnVuY3ljbGUoKTtcbiAgICAgICAgICAgICAgICBjeWNsZUVkZ2VOb2RlLl9sZW5ndGggPVxuICAgICAgICAgICAgICAgICAgICBjeWNsZUVkZ2VOb2RlLl9wYXJlbnQuX2xlbmd0aCArIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN5Y2xlRWRnZU5vZGUuX3BhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBjeWNsZUVkZ2VOb2RlLl9sZW5ndGggPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGN1cnJlbnRDaGlsZExlbmd0aCA9IGN5Y2xlRWRnZU5vZGUuX2xlbmd0aCArIDE7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gaSAtIDI7IGogPj0gMDsgLS1qKSB7XG4gICAgICAgICAgICAgICAgbm9kZXNbal0uX2xlbmd0aCA9IGN1cnJlbnRDaGlsZExlbmd0aDtcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2hpbGRMZW5ndGgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbkNhcHR1cmVkVHJhY2UucHJvdG90eXBlLnBhcmVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9wYXJlbnQ7XG59O1xuXG5DYXB0dXJlZFRyYWNlLnByb3RvdHlwZS5oYXNQYXJlbnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFyZW50ICE9PSB1bmRlZmluZWQ7XG59O1xuXG5DYXB0dXJlZFRyYWNlLnByb3RvdHlwZS5hdHRhY2hFeHRyYVRyYWNlID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IuX19zdGFja0NsZWFuZWRfXykgcmV0dXJuO1xuICAgIHRoaXMudW5jeWNsZSgpO1xuICAgIHZhciBwYXJzZWQgPSBDYXB0dXJlZFRyYWNlLnBhcnNlU3RhY2tBbmRNZXNzYWdlKGVycm9yKTtcbiAgICB2YXIgbWVzc2FnZSA9IHBhcnNlZC5tZXNzYWdlO1xuICAgIHZhciBzdGFja3MgPSBbcGFyc2VkLnN0YWNrXTtcblxuICAgIHZhciB0cmFjZSA9IHRoaXM7XG4gICAgd2hpbGUgKHRyYWNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3RhY2tzLnB1c2goY2xlYW5TdGFjayh0cmFjZS5zdGFjay5zcGxpdChcIlxcblwiKSkpO1xuICAgICAgICB0cmFjZSA9IHRyYWNlLl9wYXJlbnQ7XG4gICAgfVxuICAgIHJlbW92ZUNvbW1vblJvb3RzKHN0YWNrcyk7XG4gICAgcmVtb3ZlRHVwbGljYXRlT3JFbXB0eUp1bXBzKHN0YWNrcyk7XG4gICAgdXRpbC5ub3RFbnVtZXJhYmxlUHJvcChlcnJvciwgXCJzdGFja1wiLCByZWNvbnN0cnVjdFN0YWNrKG1lc3NhZ2UsIHN0YWNrcykpO1xuICAgIHV0aWwubm90RW51bWVyYWJsZVByb3AoZXJyb3IsIFwiX19zdGFja0NsZWFuZWRfX1wiLCB0cnVlKTtcbn07XG5cbmZ1bmN0aW9uIHJlY29uc3RydWN0U3RhY2sobWVzc2FnZSwgc3RhY2tzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFja3MubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgICAgIHN0YWNrc1tpXS5wdXNoKFwiRnJvbSBwcmV2aW91cyBldmVudDpcIik7XG4gICAgICAgIHN0YWNrc1tpXSA9IHN0YWNrc1tpXS5qb2luKFwiXFxuXCIpO1xuICAgIH1cbiAgICBpZiAoaSA8IHN0YWNrcy5sZW5ndGgpIHtcbiAgICAgICAgc3RhY2tzW2ldID0gc3RhY2tzW2ldLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlICsgXCJcXG5cIiArIHN0YWNrcy5qb2luKFwiXFxuXCIpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVEdXBsaWNhdGVPckVtcHR5SnVtcHMoc3RhY2tzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFja3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHN0YWNrc1tpXS5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgICAgICgoaSArIDEgPCBzdGFja3MubGVuZ3RoKSAmJiBzdGFja3NbaV1bMF0gPT09IHN0YWNrc1tpKzFdWzBdKSkge1xuICAgICAgICAgICAgc3RhY2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ29tbW9uUm9vdHMoc3RhY2tzKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBzdGFja3NbMF07XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzdGFja3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHByZXYgPSBzdGFja3NbaV07XG4gICAgICAgIHZhciBjdXJyZW50TGFzdEluZGV4ID0gY3VycmVudC5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgY3VycmVudExhc3RMaW5lID0gY3VycmVudFtjdXJyZW50TGFzdEluZGV4XTtcbiAgICAgICAgdmFyIGNvbW1vblJvb3RNZWV0UG9pbnQgPSAtMTtcblxuICAgICAgICBmb3IgKHZhciBqID0gcHJldi5sZW5ndGggLSAxOyBqID49IDA7IC0taikge1xuICAgICAgICAgICAgaWYgKHByZXZbal0gPT09IGN1cnJlbnRMYXN0TGluZSkge1xuICAgICAgICAgICAgICAgIGNvbW1vblJvb3RNZWV0UG9pbnQgPSBqO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IGNvbW1vblJvb3RNZWV0UG9pbnQ7IGogPj0gMDsgLS1qKSB7XG4gICAgICAgICAgICB2YXIgbGluZSA9IHByZXZbal07XG4gICAgICAgICAgICBpZiAoY3VycmVudFtjdXJyZW50TGFzdEluZGV4XSA9PT0gbGluZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQucG9wKCk7XG4gICAgICAgICAgICAgICAgY3VycmVudExhc3RJbmRleC0tO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gcHJldjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNsZWFuU3RhY2soc3RhY2spIHtcbiAgICB2YXIgcmV0ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgbGluZSA9IHN0YWNrW2ldO1xuICAgICAgICB2YXIgaXNUcmFjZUxpbmUgPSBzdGFja0ZyYW1lUGF0dGVybi50ZXN0KGxpbmUpIHx8XG4gICAgICAgICAgICBcIiAgICAoTm8gc3RhY2sgdHJhY2UpXCIgPT09IGxpbmU7XG4gICAgICAgIHZhciBpc0ludGVybmFsRnJhbWUgPSBpc1RyYWNlTGluZSAmJiBzaG91bGRJZ25vcmUobGluZSk7XG4gICAgICAgIGlmIChpc1RyYWNlTGluZSAmJiAhaXNJbnRlcm5hbEZyYW1lKSB7XG4gICAgICAgICAgICBpZiAoaW5kZW50U3RhY2tGcmFtZXMgJiYgbGluZS5jaGFyQXQoMCkgIT09IFwiIFwiKSB7XG4gICAgICAgICAgICAgICAgbGluZSA9IFwiICAgIFwiICsgbGluZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldC5wdXNoKGxpbmUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHN0YWNrRnJhbWVzQXNBcnJheShlcnJvcikge1xuICAgIHZhciBzdGFjayA9IGVycm9yLnN0YWNrLnJlcGxhY2UoL1xccyskL2csIFwiXCIpLnNwbGl0KFwiXFxuXCIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGxpbmUgPSBzdGFja1tpXTtcbiAgICAgICAgaWYgKFwiICAgIChObyBzdGFjayB0cmFjZSlcIiA9PT0gbGluZSB8fCBzdGFja0ZyYW1lUGF0dGVybi50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgc3RhY2sgPSBzdGFjay5zbGljZShpKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YWNrO1xufVxuXG5DYXB0dXJlZFRyYWNlLnBhcnNlU3RhY2tBbmRNZXNzYWdlID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICB2YXIgc3RhY2sgPSBlcnJvci5zdGFjaztcbiAgICB2YXIgbWVzc2FnZSA9IGVycm9yLnRvU3RyaW5nKCk7XG4gICAgc3RhY2sgPSB0eXBlb2Ygc3RhY2sgPT09IFwic3RyaW5nXCIgJiYgc3RhY2subGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgID8gc3RhY2tGcmFtZXNBc0FycmF5KGVycm9yKSA6IFtcIiAgICAoTm8gc3RhY2sgdHJhY2UpXCJdO1xuICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIHN0YWNrOiBjbGVhblN0YWNrKHN0YWNrKVxuICAgIH07XG59O1xuXG5DYXB0dXJlZFRyYWNlLmZvcm1hdEFuZExvZ0Vycm9yID0gZnVuY3Rpb24oZXJyb3IsIHRpdGxlKSB7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHZhciBtZXNzYWdlO1xuICAgICAgICBpZiAodHlwZW9mIGVycm9yID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBlcnJvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB2YXIgc3RhY2sgPSBlcnJvci5zdGFjaztcbiAgICAgICAgICAgIG1lc3NhZ2UgPSB0aXRsZSArIGZvcm1hdFN0YWNrKHN0YWNrLCBlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gdGl0bGUgKyBTdHJpbmcoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygd2FybiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB3YXJuKG1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25zb2xlLmxvZyA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgICAgICAgICB0eXBlb2YgY29uc29sZS5sb2cgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuQ2FwdHVyZWRUcmFjZS51bmhhbmRsZWRSZWplY3Rpb24gPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgQ2FwdHVyZWRUcmFjZS5mb3JtYXRBbmRMb2dFcnJvcihyZWFzb24sIFwiXi0tLSBXaXRoIGFkZGl0aW9uYWwgc3RhY2sgdHJhY2U6IFwiKTtcbn07XG5cbkNhcHR1cmVkVHJhY2UuaXNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBjYXB0dXJlU3RhY2tUcmFjZSA9PT0gXCJmdW5jdGlvblwiO1xufTtcblxuQ2FwdHVyZWRUcmFjZS5maXJlUmVqZWN0aW9uRXZlbnQgPVxuZnVuY3Rpb24obmFtZSwgbG9jYWxIYW5kbGVyLCByZWFzb24sIHByb21pc2UpIHtcbiAgICB2YXIgbG9jYWxFdmVudEZpcmVkID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhbEhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgbG9jYWxFdmVudEZpcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSBcInJlamVjdGlvbkhhbmRsZWRcIikge1xuICAgICAgICAgICAgICAgIGxvY2FsSGFuZGxlcihwcm9taXNlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9jYWxIYW5kbGVyKHJlYXNvbiwgcHJvbWlzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGFzeW5jLnRocm93TGF0ZXIoZSk7XG4gICAgfVxuXG4gICAgdmFyIGdsb2JhbEV2ZW50RmlyZWQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICBnbG9iYWxFdmVudEZpcmVkID0gZmlyZUdsb2JhbEV2ZW50KG5hbWUsIHJlYXNvbiwgcHJvbWlzZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBnbG9iYWxFdmVudEZpcmVkID0gdHJ1ZTtcbiAgICAgICAgYXN5bmMudGhyb3dMYXRlcihlKTtcbiAgICB9XG5cbiAgICB2YXIgZG9tRXZlbnRGaXJlZCA9IGZhbHNlO1xuICAgIGlmIChmaXJlRG9tRXZlbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRvbUV2ZW50RmlyZWQgPSBmaXJlRG9tRXZlbnQobmFtZS50b0xvd2VyQ2FzZSgpLCB7XG4gICAgICAgICAgICAgICAgcmVhc29uOiByZWFzb24sXG4gICAgICAgICAgICAgICAgcHJvbWlzZTogcHJvbWlzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGRvbUV2ZW50RmlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgYXN5bmMudGhyb3dMYXRlcihlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZ2xvYmFsRXZlbnRGaXJlZCAmJiAhbG9jYWxFdmVudEZpcmVkICYmICFkb21FdmVudEZpcmVkICYmXG4gICAgICAgIG5hbWUgPT09IFwidW5oYW5kbGVkUmVqZWN0aW9uXCIpIHtcbiAgICAgICAgQ2FwdHVyZWRUcmFjZS5mb3JtYXRBbmRMb2dFcnJvcihyZWFzb24sIFwiVW5oYW5kbGVkIHJlamVjdGlvbiBcIik7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gZm9ybWF0Tm9uRXJyb3Iob2JqKSB7XG4gICAgdmFyIHN0cjtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHN0ciA9IFwiW2Z1bmN0aW9uIFwiICtcbiAgICAgICAgICAgIChvYmoubmFtZSB8fCBcImFub255bW91c1wiKSArXG4gICAgICAgICAgICBcIl1cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBvYmoudG9TdHJpbmcoKTtcbiAgICAgICAgdmFyIHJ1c2VsZXNzVG9TdHJpbmcgPSAvXFxbb2JqZWN0IFthLXpBLVowLTkkX10rXFxdLztcbiAgICAgICAgaWYgKHJ1c2VsZXNzVG9TdHJpbmcudGVzdChzdHIpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdTdHIgPSBKU09OLnN0cmluZ2lmeShvYmopO1xuICAgICAgICAgICAgICAgIHN0ciA9IG5ld1N0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoKGUpIHtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzdHIgPSBcIihlbXB0eSBhcnJheSlcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKFwiKDxcIiArIHNuaXAoc3RyKSArIFwiPiwgbm8gc3RhY2sgdHJhY2UpXCIpO1xufVxuXG5mdW5jdGlvbiBzbmlwKHN0cikge1xuICAgIHZhciBtYXhDaGFycyA9IDQxO1xuICAgIGlmIChzdHIubGVuZ3RoIDwgbWF4Q2hhcnMpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIHN0ci5zdWJzdHIoMCwgbWF4Q2hhcnMgLSAzKSArIFwiLi4uXCI7XG59XG5cbnZhciBzaG91bGRJZ25vcmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9O1xudmFyIHBhcnNlTGluZUluZm9SZWdleCA9IC9bXFwvPFxcKF0oW146XFwvXSspOihcXGQrKTooPzpcXGQrKVxcKT9cXHMqJC87XG5mdW5jdGlvbiBwYXJzZUxpbmVJbmZvKGxpbmUpIHtcbiAgICB2YXIgbWF0Y2hlcyA9IGxpbmUubWF0Y2gocGFyc2VMaW5lSW5mb1JlZ2V4KTtcbiAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlsZU5hbWU6IG1hdGNoZXNbMV0sXG4gICAgICAgICAgICBsaW5lOiBwYXJzZUludChtYXRjaGVzWzJdLCAxMClcbiAgICAgICAgfTtcbiAgICB9XG59XG5DYXB0dXJlZFRyYWNlLnNldEJvdW5kcyA9IGZ1bmN0aW9uKGZpcnN0TGluZUVycm9yLCBsYXN0TGluZUVycm9yKSB7XG4gICAgaWYgKCFDYXB0dXJlZFRyYWNlLmlzU3VwcG9ydGVkKCkpIHJldHVybjtcbiAgICB2YXIgZmlyc3RTdGFja0xpbmVzID0gZmlyc3RMaW5lRXJyb3Iuc3RhY2suc3BsaXQoXCJcXG5cIik7XG4gICAgdmFyIGxhc3RTdGFja0xpbmVzID0gbGFzdExpbmVFcnJvci5zdGFjay5zcGxpdChcIlxcblwiKTtcbiAgICB2YXIgZmlyc3RJbmRleCA9IC0xO1xuICAgIHZhciBsYXN0SW5kZXggPSAtMTtcbiAgICB2YXIgZmlyc3RGaWxlTmFtZTtcbiAgICB2YXIgbGFzdEZpbGVOYW1lO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlyc3RTdGFja0xpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBwYXJzZUxpbmVJbmZvKGZpcnN0U3RhY2tMaW5lc1tpXSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGZpcnN0RmlsZU5hbWUgPSByZXN1bHQuZmlsZU5hbWU7XG4gICAgICAgICAgICBmaXJzdEluZGV4ID0gcmVzdWx0LmxpbmU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RTdGFja0xpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBwYXJzZUxpbmVJbmZvKGxhc3RTdGFja0xpbmVzW2ldKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgbGFzdEZpbGVOYW1lID0gcmVzdWx0LmZpbGVOYW1lO1xuICAgICAgICAgICAgbGFzdEluZGV4ID0gcmVzdWx0LmxpbmU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmlyc3RJbmRleCA8IDAgfHwgbGFzdEluZGV4IDwgMCB8fCAhZmlyc3RGaWxlTmFtZSB8fCAhbGFzdEZpbGVOYW1lIHx8XG4gICAgICAgIGZpcnN0RmlsZU5hbWUgIT09IGxhc3RGaWxlTmFtZSB8fCBmaXJzdEluZGV4ID49IGxhc3RJbmRleCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2hvdWxkSWdub3JlID0gZnVuY3Rpb24obGluZSkge1xuICAgICAgICBpZiAoYmx1ZWJpcmRGcmFtZVBhdHRlcm4udGVzdChsaW5lKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIHZhciBpbmZvID0gcGFyc2VMaW5lSW5mbyhsaW5lKTtcbiAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgIGlmIChpbmZvLmZpbGVOYW1lID09PSBmaXJzdEZpbGVOYW1lICYmXG4gICAgICAgICAgICAgICAgKGZpcnN0SW5kZXggPD0gaW5mby5saW5lICYmIGluZm8ubGluZSA8PSBsYXN0SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59O1xuXG52YXIgY2FwdHVyZVN0YWNrVHJhY2UgPSAoZnVuY3Rpb24gc3RhY2tEZXRlY3Rpb24oKSB7XG4gICAgdmFyIHY4c3RhY2tGcmFtZVBhdHRlcm4gPSAvXlxccyphdFxccyovO1xuICAgIHZhciB2OHN0YWNrRm9ybWF0dGVyID0gZnVuY3Rpb24oc3RhY2ssIGVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RhY2sgPT09IFwic3RyaW5nXCIpIHJldHVybiBzdGFjaztcblxuICAgICAgICBpZiAoZXJyb3IubmFtZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBlcnJvci5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvci50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXROb25FcnJvcihlcnJvcik7XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID09PSBcIm51bWJlclwiICYmXG4gICAgICAgIHR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdCArIDY7XG4gICAgICAgIHN0YWNrRnJhbWVQYXR0ZXJuID0gdjhzdGFja0ZyYW1lUGF0dGVybjtcbiAgICAgICAgZm9ybWF0U3RhY2sgPSB2OHN0YWNrRm9ybWF0dGVyO1xuICAgICAgICB2YXIgY2FwdHVyZVN0YWNrVHJhY2UgPSBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZTtcblxuICAgICAgICBzaG91bGRJZ25vcmUgPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gYmx1ZWJpcmRGcmFtZVBhdHRlcm4udGVzdChsaW5lKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlY2VpdmVyLCBpZ25vcmVVbnRpbCkge1xuICAgICAgICAgICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ICsgNjtcbiAgICAgICAgICAgIGNhcHR1cmVTdGFja1RyYWNlKHJlY2VpdmVyLCBpZ25vcmVVbnRpbCk7XG4gICAgICAgICAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXQgLSA2O1xuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCk7XG5cbiAgICBpZiAodHlwZW9mIGVyci5zdGFjayA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICBlcnIuc3RhY2suc3BsaXQoXCJcXG5cIilbMF0uaW5kZXhPZihcInN0YWNrRGV0ZWN0aW9uQFwiKSA+PSAwKSB7XG4gICAgICAgIHN0YWNrRnJhbWVQYXR0ZXJuID0gL0AvO1xuICAgICAgICBmb3JtYXRTdGFjayA9IHY4c3RhY2tGb3JtYXR0ZXI7XG4gICAgICAgIGluZGVudFN0YWNrRnJhbWVzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNhcHR1cmVTdGFja1RyYWNlKG8pIHtcbiAgICAgICAgICAgIG8uc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgaGFzU3RhY2tBZnRlclRocm93O1xuICAgIHRyeSB7IHRocm93IG5ldyBFcnJvcigpOyB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgICBoYXNTdGFja0FmdGVyVGhyb3cgPSAoXCJzdGFja1wiIGluIGUpO1xuICAgIH1cbiAgICBpZiAoIShcInN0YWNrXCIgaW4gZXJyKSAmJiBoYXNTdGFja0FmdGVyVGhyb3cgJiZcbiAgICAgICAgdHlwZW9mIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBzdGFja0ZyYW1lUGF0dGVybiA9IHY4c3RhY2tGcmFtZVBhdHRlcm47XG4gICAgICAgIGZvcm1hdFN0YWNrID0gdjhzdGFja0Zvcm1hdHRlcjtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNhcHR1cmVTdGFja1RyYWNlKG8pIHtcbiAgICAgICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdCArIDY7XG4gICAgICAgICAgICB0cnkgeyB0aHJvdyBuZXcgRXJyb3IoKTsgfVxuICAgICAgICAgICAgY2F0Y2goZSkgeyBvLnN0YWNrID0gZS5zdGFjazsgfVxuICAgICAgICAgICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gRXJyb3Iuc3RhY2tUcmFjZUxpbWl0IC0gNjtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmb3JtYXRTdGFjayA9IGZ1bmN0aW9uKHN0YWNrLCBlcnJvcikge1xuICAgICAgICBpZiAodHlwZW9mIHN0YWNrID09PSBcInN0cmluZ1wiKSByZXR1cm4gc3RhY2s7XG5cbiAgICAgICAgaWYgKCh0eXBlb2YgZXJyb3IgPT09IFwib2JqZWN0XCIgfHxcbiAgICAgICAgICAgIHR5cGVvZiBlcnJvciA9PT0gXCJmdW5jdGlvblwiKSAmJlxuICAgICAgICAgICAgZXJyb3IubmFtZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBlcnJvci5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvci50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXROb25FcnJvcihlcnJvcik7XG4gICAgfTtcblxuICAgIHJldHVybiBudWxsO1xuXG59KShbXSk7XG5cbnZhciBmaXJlRG9tRXZlbnQ7XG52YXIgZmlyZUdsb2JhbEV2ZW50ID0gKGZ1bmN0aW9uKCkge1xuICAgIGlmICh1dGlsLmlzTm9kZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24obmFtZSwgcmVhc29uLCBwcm9taXNlKSB7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gXCJyZWplY3Rpb25IYW5kbGVkXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbWl0KG5hbWUsIHByb21pc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbWl0KG5hbWUsIHJlYXNvbiwgcHJvbWlzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGN1c3RvbUV2ZW50V29ya3MgPSBmYWxzZTtcbiAgICAgICAgdmFyIGFueUV2ZW50V29ya3MgPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGV2ID0gbmV3IHNlbGYuQ3VzdG9tRXZlbnQoXCJ0ZXN0XCIpO1xuICAgICAgICAgICAgY3VzdG9tRXZlbnRXb3JrcyA9IGV2IGluc3RhbmNlb2YgQ3VzdG9tRXZlbnQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIGlmICghY3VzdG9tRXZlbnRXb3Jrcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO1xuICAgICAgICAgICAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudChcInRlc3Rpbmd0aGVldmVudFwiLCBmYWxzZSwgdHJ1ZSwge30pO1xuICAgICAgICAgICAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgYW55RXZlbnRXb3JrcyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhbnlFdmVudFdvcmtzKSB7XG4gICAgICAgICAgICBmaXJlRG9tRXZlbnQgPSBmdW5jdGlvbih0eXBlLCBkZXRhaWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKGN1c3RvbUV2ZW50V29ya3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSBuZXcgc2VsZi5DdXN0b21FdmVudCh0eXBlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGRldGFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGYuZGlzcGF0Y2hFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudCh0eXBlLCBmYWxzZSwgdHJ1ZSwgZGV0YWlsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQgPyAhc2VsZi5kaXNwYXRjaEV2ZW50KGV2ZW50KSA6IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b1dpbmRvd01ldGhvZE5hbWVNYXAgPSB7fTtcbiAgICAgICAgdG9XaW5kb3dNZXRob2ROYW1lTWFwW1widW5oYW5kbGVkUmVqZWN0aW9uXCJdID0gKFwib25cIiArXG4gICAgICAgICAgICBcInVuaGFuZGxlZFJlamVjdGlvblwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB0b1dpbmRvd01ldGhvZE5hbWVNYXBbXCJyZWplY3Rpb25IYW5kbGVkXCJdID0gKFwib25cIiArXG4gICAgICAgICAgICBcInJlamVjdGlvbkhhbmRsZWRcIikudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24obmFtZSwgcmVhc29uLCBwcm9taXNlKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kTmFtZSA9IHRvV2luZG93TWV0aG9kTmFtZU1hcFtuYW1lXTtcbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBzZWxmW21ldGhvZE5hbWVdO1xuICAgICAgICAgICAgaWYgKCFtZXRob2QpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSBcInJlamVjdGlvbkhhbmRsZWRcIikge1xuICAgICAgICAgICAgICAgIG1ldGhvZC5jYWxsKHNlbGYsIHByb21pc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXRob2QuY2FsbChzZWxmLCByZWFzb24sIHByb21pc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgfVxufSkoKTtcblxuaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBjb25zb2xlLndhcm4gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3YXJuID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIH07XG4gICAgaWYgKHV0aWwuaXNOb2RlICYmIHByb2Nlc3Muc3RkZXJyLmlzVFRZKSB7XG4gICAgICAgIHdhcm4gPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLnN0ZGVyci53cml0ZShcIlxcdTAwMWJbMzFtXCIgKyBtZXNzYWdlICsgXCJcXHUwMDFiWzM5bVxcblwiKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCF1dGlsLmlzTm9kZSAmJiB0eXBlb2YgKG5ldyBFcnJvcigpLnN0YWNrKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB3YXJuID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiJWNcIiArIG1lc3NhZ2UsIFwiY29sb3I6IHJlZFwiKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbnJldHVybiBDYXB0dXJlZFRyYWNlO1xufTtcblxufSx7XCIuL2FzeW5jLmpzXCI6MixcIi4vdXRpbC5qc1wiOjM4fV0sODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkVYVF9GSUxURVIpIHtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnMuanNcIik7XG52YXIgdHJ5Q2F0Y2ggPSB1dGlsLnRyeUNhdGNoO1xudmFyIGVycm9yT2JqID0gdXRpbC5lcnJvck9iajtcbnZhciBrZXlzID0gX2RlcmVxXyhcIi4vZXM1LmpzXCIpLmtleXM7XG52YXIgVHlwZUVycm9yID0gZXJyb3JzLlR5cGVFcnJvcjtcblxuZnVuY3Rpb24gQ2F0Y2hGaWx0ZXIoaW5zdGFuY2VzLCBjYWxsYmFjaywgcHJvbWlzZSkge1xuICAgIHRoaXMuX2luc3RhbmNlcyA9IGluc3RhbmNlcztcbiAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3Byb21pc2UgPSBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBzYWZlUHJlZGljYXRlKHByZWRpY2F0ZSwgZSkge1xuICAgIHZhciBzYWZlT2JqZWN0ID0ge307XG4gICAgdmFyIHJldGZpbHRlciA9IHRyeUNhdGNoKHByZWRpY2F0ZSkuY2FsbChzYWZlT2JqZWN0LCBlKTtcblxuICAgIGlmIChyZXRmaWx0ZXIgPT09IGVycm9yT2JqKSByZXR1cm4gcmV0ZmlsdGVyO1xuXG4gICAgdmFyIHNhZmVLZXlzID0ga2V5cyhzYWZlT2JqZWN0KTtcbiAgICBpZiAoc2FmZUtleXMubGVuZ3RoKSB7XG4gICAgICAgIGVycm9yT2JqLmUgPSBuZXcgVHlwZUVycm9yKFwiQ2F0Y2ggZmlsdGVyIG11c3QgaW5oZXJpdCBmcm9tIEVycm9yIG9yIGJlIGEgc2ltcGxlIHByZWRpY2F0ZSBmdW5jdGlvblxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL284NG82OFxcdTAwMGFcIik7XG4gICAgICAgIHJldHVybiBlcnJvck9iajtcbiAgICB9XG4gICAgcmV0dXJuIHJldGZpbHRlcjtcbn1cblxuQ2F0Y2hGaWx0ZXIucHJvdG90eXBlLmRvRmlsdGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgY2IgPSB0aGlzLl9jYWxsYmFjaztcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3Byb21pc2U7XG4gICAgdmFyIGJvdW5kVG8gPSBwcm9taXNlLl9ib3VuZFRvO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl9pbnN0YW5jZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLl9pbnN0YW5jZXNbaV07XG4gICAgICAgIHZhciBpdGVtSXNFcnJvclR5cGUgPSBpdGVtID09PSBFcnJvciB8fFxuICAgICAgICAgICAgKGl0ZW0gIT0gbnVsbCAmJiBpdGVtLnByb3RvdHlwZSBpbnN0YW5jZW9mIEVycm9yKTtcblxuICAgICAgICBpZiAoaXRlbUlzRXJyb3JUeXBlICYmIGUgaW5zdGFuY2VvZiBpdGVtKSB7XG4gICAgICAgICAgICB2YXIgcmV0ID0gdHJ5Q2F0Y2goY2IpLmNhbGwoYm91bmRUbywgZSk7XG4gICAgICAgICAgICBpZiAocmV0ID09PSBlcnJvck9iaikge1xuICAgICAgICAgICAgICAgIE5FWFRfRklMVEVSLmUgPSByZXQuZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTkVYVF9GSUxURVI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIgJiYgIWl0ZW1Jc0Vycm9yVHlwZSkge1xuICAgICAgICAgICAgdmFyIHNob3VsZEhhbmRsZSA9IHNhZmVQcmVkaWNhdGUoaXRlbSwgZSk7XG4gICAgICAgICAgICBpZiAoc2hvdWxkSGFuZGxlID09PSBlcnJvck9iaikge1xuICAgICAgICAgICAgICAgIGUgPSBlcnJvck9iai5lO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzaG91bGRIYW5kbGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0gdHJ5Q2F0Y2goY2IpLmNhbGwoYm91bmRUbywgZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJldCA9PT0gZXJyb3JPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgTkVYVF9GSUxURVIuZSA9IHJldC5lO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTkVYVF9GSUxURVI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgTkVYVF9GSUxURVIuZSA9IGU7XG4gICAgcmV0dXJuIE5FWFRfRklMVEVSO1xufTtcblxucmV0dXJuIENhdGNoRmlsdGVyO1xufTtcblxufSx7XCIuL2Vycm9ycy5qc1wiOjEzLFwiLi9lczUuanNcIjoxNCxcIi4vdXRpbC5qc1wiOjM4fV0sOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgQ2FwdHVyZWRUcmFjZSwgaXNEZWJ1Z2dpbmcpIHtcbnZhciBjb250ZXh0U3RhY2sgPSBbXTtcbmZ1bmN0aW9uIENvbnRleHQoKSB7XG4gICAgdGhpcy5fdHJhY2UgPSBuZXcgQ2FwdHVyZWRUcmFjZShwZWVrQ29udGV4dCgpKTtcbn1cbkNvbnRleHQucHJvdG90eXBlLl9wdXNoQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWlzRGVidWdnaW5nKCkpIHJldHVybjtcbiAgICBpZiAodGhpcy5fdHJhY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250ZXh0U3RhY2sucHVzaCh0aGlzLl90cmFjZSk7XG4gICAgfVxufTtcblxuQ29udGV4dC5wcm90b3R5cGUuX3BvcENvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpc0RlYnVnZ2luZygpKSByZXR1cm47XG4gICAgaWYgKHRoaXMuX3RyYWNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGV4dFN0YWNrLnBvcCgpO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQoKSB7XG4gICAgaWYgKGlzRGVidWdnaW5nKCkpIHJldHVybiBuZXcgQ29udGV4dCgpO1xufVxuXG5mdW5jdGlvbiBwZWVrQ29udGV4dCgpIHtcbiAgICB2YXIgbGFzdEluZGV4ID0gY29udGV4dFN0YWNrLmxlbmd0aCAtIDE7XG4gICAgaWYgKGxhc3RJbmRleCA+PSAwKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0U3RhY2tbbGFzdEluZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUuX3BlZWtDb250ZXh0ID0gcGVla0NvbnRleHQ7XG5Qcm9taXNlLnByb3RvdHlwZS5fcHVzaENvbnRleHQgPSBDb250ZXh0LnByb3RvdHlwZS5fcHVzaENvbnRleHQ7XG5Qcm9taXNlLnByb3RvdHlwZS5fcG9wQ29udGV4dCA9IENvbnRleHQucHJvdG90eXBlLl9wb3BDb250ZXh0O1xuXG5yZXR1cm4gY3JlYXRlQ29udGV4dDtcbn07XG5cbn0se31dLDEwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBDYXB0dXJlZFRyYWNlKSB7XG52YXIgZ2V0RG9tYWluID0gUHJvbWlzZS5fZ2V0RG9tYWluO1xudmFyIGFzeW5jID0gX2RlcmVxXyhcIi4vYXN5bmMuanNcIik7XG52YXIgV2FybmluZyA9IF9kZXJlcV8oXCIuL2Vycm9ycy5qc1wiKS5XYXJuaW5nO1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xudmFyIGNhbkF0dGFjaFRyYWNlID0gdXRpbC5jYW5BdHRhY2hUcmFjZTtcbnZhciB1bmhhbmRsZWRSZWplY3Rpb25IYW5kbGVkO1xudmFyIHBvc3NpYmx5VW5oYW5kbGVkUmVqZWN0aW9uO1xudmFyIGRlYnVnZ2luZyA9IGZhbHNlIHx8ICh1dGlsLmlzTm9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAoISFwcm9jZXNzLmVudltcIkJMVUVCSVJEX0RFQlVHXCJdIHx8XG4gICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVudltcIk5PREVfRU5WXCJdID09PSBcImRldmVsb3BtZW50XCIpKTtcblxuaWYgKGRlYnVnZ2luZykge1xuICAgIGFzeW5jLmRpc2FibGVUcmFtcG9saW5lSWZOZWNlc3NhcnkoKTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUuX2lnbm9yZVJlamVjdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl91bnNldFJlamVjdGlvbklzVW5oYW5kbGVkKCk7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDE2Nzc3MjE2O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2Vuc3VyZVBvc3NpYmxlUmVqZWN0aW9uSGFuZGxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoKHRoaXMuX2JpdEZpZWxkICYgMTY3NzcyMTYpICE9PSAwKSByZXR1cm47XG4gICAgdGhpcy5fc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQoKTtcbiAgICBhc3luYy5pbnZva2VMYXRlcih0aGlzLl9ub3RpZnlVbmhhbmRsZWRSZWplY3Rpb24sIHRoaXMsIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uSXNIYW5kbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIENhcHR1cmVkVHJhY2UuZmlyZVJlamVjdGlvbkV2ZW50KFwicmVqZWN0aW9uSGFuZGxlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZWQsIHVuZGVmaW5lZCwgdGhpcyk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9pc1JlamVjdGlvblVuaGFuZGxlZCgpKSB7XG4gICAgICAgIHZhciByZWFzb24gPSB0aGlzLl9nZXRDYXJyaWVkU3RhY2tUcmFjZSgpIHx8IHRoaXMuX3NldHRsZWRWYWx1ZTtcbiAgICAgICAgdGhpcy5fc2V0VW5oYW5kbGVkUmVqZWN0aW9uSXNOb3RpZmllZCgpO1xuICAgICAgICBDYXB0dXJlZFRyYWNlLmZpcmVSZWplY3Rpb25FdmVudChcInVuaGFuZGxlZFJlamVjdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbiwgcmVhc29uLCB0aGlzKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0VW5oYW5kbGVkUmVqZWN0aW9uSXNOb3RpZmllZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgNTI0Mjg4O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0VW5oYW5kbGVkUmVqZWN0aW9uSXNOb3RpZmllZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkICYgKH41MjQyODgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzVW5oYW5kbGVkUmVqZWN0aW9uTm90aWZpZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDUyNDI4OCkgPiAwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldFJlamVjdGlvbklzVW5oYW5kbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCAyMDk3MTUyO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+MjA5NzE1Mik7XG4gICAgaWYgKHRoaXMuX2lzVW5oYW5kbGVkUmVqZWN0aW9uTm90aWZpZWQoKSkge1xuICAgICAgICB0aGlzLl91bnNldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQoKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uSXNIYW5kbGVkKCk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzUmVqZWN0aW9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiAyMDk3MTUyKSA+IDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0Q2FycmllZFN0YWNrVHJhY2UgPSBmdW5jdGlvbiAoY2FwdHVyZWRUcmFjZSkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCAxMDQ4NTc2O1xuICAgIHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjAgPSBjYXB0dXJlZFRyYWNlO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzQ2FycnlpbmdTdGFja1RyYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiAxMDQ4NTc2KSA+IDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fZ2V0Q2FycmllZFN0YWNrVHJhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzQ2FycnlpbmdTdGFja1RyYWNlKClcbiAgICAgICAgPyB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXIwXG4gICAgICAgIDogdW5kZWZpbmVkO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2NhcHR1cmVTdGFja1RyYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChkZWJ1Z2dpbmcpIHtcbiAgICAgICAgdGhpcy5fdHJhY2UgPSBuZXcgQ2FwdHVyZWRUcmFjZSh0aGlzLl9wZWVrQ29udGV4dCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fYXR0YWNoRXh0cmFUcmFjZSA9IGZ1bmN0aW9uIChlcnJvciwgaWdub3JlU2VsZikge1xuICAgIGlmIChkZWJ1Z2dpbmcgJiYgY2FuQXR0YWNoVHJhY2UoZXJyb3IpKSB7XG4gICAgICAgIHZhciB0cmFjZSA9IHRoaXMuX3RyYWNlO1xuICAgICAgICBpZiAodHJhY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGlnbm9yZVNlbGYpIHRyYWNlID0gdHJhY2UuX3BhcmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdHJhY2UuYXR0YWNoRXh0cmFUcmFjZShlcnJvcik7XG4gICAgICAgIH0gZWxzZSBpZiAoIWVycm9yLl9fc3RhY2tDbGVhbmVkX18pIHtcbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSBDYXB0dXJlZFRyYWNlLnBhcnNlU3RhY2tBbmRNZXNzYWdlKGVycm9yKTtcbiAgICAgICAgICAgIHV0aWwubm90RW51bWVyYWJsZVByb3AoZXJyb3IsIFwic3RhY2tcIixcbiAgICAgICAgICAgICAgICBwYXJzZWQubWVzc2FnZSArIFwiXFxuXCIgKyBwYXJzZWQuc3RhY2suam9pbihcIlxcblwiKSk7XG4gICAgICAgICAgICB1dGlsLm5vdEVudW1lcmFibGVQcm9wKGVycm9yLCBcIl9fc3RhY2tDbGVhbmVkX19cIiwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fd2FybiA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICB2YXIgd2FybmluZyA9IG5ldyBXYXJuaW5nKG1lc3NhZ2UpO1xuICAgIHZhciBjdHggPSB0aGlzLl9wZWVrQ29udGV4dCgpO1xuICAgIGlmIChjdHgpIHtcbiAgICAgICAgY3R4LmF0dGFjaEV4dHJhVHJhY2Uod2FybmluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9IENhcHR1cmVkVHJhY2UucGFyc2VTdGFja0FuZE1lc3NhZ2Uod2FybmluZyk7XG4gICAgICAgIHdhcm5pbmcuc3RhY2sgPSBwYXJzZWQubWVzc2FnZSArIFwiXFxuXCIgKyBwYXJzZWQuc3RhY2suam9pbihcIlxcblwiKTtcbiAgICB9XG4gICAgQ2FwdHVyZWRUcmFjZS5mb3JtYXRBbmRMb2dFcnJvcih3YXJuaW5nLCBcIlwiKTtcbn07XG5cblByb21pc2Uub25Qb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbiA9IGZ1bmN0aW9uIChmbikge1xuICAgIHZhciBkb21haW4gPSBnZXREb21haW4oKTtcbiAgICBwb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbiA9XG4gICAgICAgIHR5cGVvZiBmbiA9PT0gXCJmdW5jdGlvblwiID8gKGRvbWFpbiA9PT0gbnVsbCA/IGZuIDogZG9tYWluLmJpbmQoZm4pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG59O1xuXG5Qcm9taXNlLm9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlZCA9IGZ1bmN0aW9uIChmbikge1xuICAgIHZhciBkb21haW4gPSBnZXREb21haW4oKTtcbiAgICB1bmhhbmRsZWRSZWplY3Rpb25IYW5kbGVkID1cbiAgICAgICAgdHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCIgPyAoZG9tYWluID09PSBudWxsID8gZm4gOiBkb21haW4uYmluZChmbikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbn07XG5cblByb21pc2UubG9uZ1N0YWNrVHJhY2VzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChhc3luYy5oYXZlSXRlbXNRdWV1ZWQoKSAmJlxuICAgICAgICBkZWJ1Z2dpbmcgPT09IGZhbHNlXG4gICApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IGVuYWJsZSBsb25nIHN0YWNrIHRyYWNlcyBhZnRlciBwcm9taXNlcyBoYXZlIGJlZW4gY3JlYXRlZFxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL0RUMXF5R1xcdTAwMGFcIik7XG4gICAgfVxuICAgIGRlYnVnZ2luZyA9IENhcHR1cmVkVHJhY2UuaXNTdXBwb3J0ZWQoKTtcbiAgICBpZiAoZGVidWdnaW5nKSB7XG4gICAgICAgIGFzeW5jLmRpc2FibGVUcmFtcG9saW5lSWZOZWNlc3NhcnkoKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLmhhc0xvbmdTdGFja1RyYWNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVidWdnaW5nICYmIENhcHR1cmVkVHJhY2UuaXNTdXBwb3J0ZWQoKTtcbn07XG5cbmlmICghQ2FwdHVyZWRUcmFjZS5pc1N1cHBvcnRlZCgpKSB7XG4gICAgUHJvbWlzZS5sb25nU3RhY2tUcmFjZXMgPSBmdW5jdGlvbigpe307XG4gICAgZGVidWdnaW5nID0gZmFsc2U7XG59XG5cbnJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVidWdnaW5nO1xufTtcbn07XG5cbn0se1wiLi9hc3luYy5qc1wiOjIsXCIuL2Vycm9ycy5qc1wiOjEzLFwiLi91dGlsLmpzXCI6Mzh9XSwxMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciBpc1ByaW1pdGl2ZSA9IHV0aWwuaXNQcmltaXRpdmU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSkge1xudmFyIHJldHVybmVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xufTtcbnZhciB0aHJvd2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IHRoaXM7XG59O1xudmFyIHJldHVyblVuZGVmaW5lZCA9IGZ1bmN0aW9uKCkge307XG52YXIgdGhyb3dVbmRlZmluZWQgPSBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyB1bmRlZmluZWQ7XG59O1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uICh2YWx1ZSwgYWN0aW9uKSB7XG4gICAgaWYgKGFjdGlvbiA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3cgdmFsdWU7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG59O1xuXG5cblByb21pc2UucHJvdG90eXBlW1wicmV0dXJuXCJdID1cblByb21pc2UucHJvdG90eXBlLnRoZW5SZXR1cm4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMudGhlbihyZXR1cm5VbmRlZmluZWQpO1xuXG4gICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGhlbihcbiAgICAgICAgICAgIHdyYXBwZXIodmFsdWUsIDIpLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3RoZW4ocmV0dXJuZXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB2YWx1ZSwgdW5kZWZpbmVkKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlW1widGhyb3dcIl0gPVxuUHJvbWlzZS5wcm90b3R5cGUudGhlblRocm93ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIGlmIChyZWFzb24gPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMudGhlbih0aHJvd1VuZGVmaW5lZCk7XG5cbiAgICBpZiAoaXNQcmltaXRpdmUocmVhc29uKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGhlbihcbiAgICAgICAgICAgIHdyYXBwZXIocmVhc29uLCAxKSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZFxuICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl90aGVuKHRocm93ZXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCByZWFzb24sIHVuZGVmaW5lZCk7XG59O1xufTtcblxufSx7XCIuL3V0aWwuanNcIjozOH1dLDEyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBJTlRFUk5BTCkge1xudmFyIFByb21pc2VSZWR1Y2UgPSBQcm9taXNlLnJlZHVjZTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZWFjaCA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBQcm9taXNlUmVkdWNlKHRoaXMsIGZuLCBudWxsLCBJTlRFUk5BTCk7XG59O1xuXG5Qcm9taXNlLmVhY2ggPSBmdW5jdGlvbiAocHJvbWlzZXMsIGZuKSB7XG4gICAgcmV0dXJuIFByb21pc2VSZWR1Y2UocHJvbWlzZXMsIGZuLCBudWxsLCBJTlRFUk5BTCk7XG59O1xufTtcblxufSx7fV0sMTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZXM1ID0gX2RlcmVxXyhcIi4vZXM1LmpzXCIpO1xudmFyIE9iamVjdGZyZWV6ZSA9IGVzNS5mcmVlemU7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgaW5oZXJpdHMgPSB1dGlsLmluaGVyaXRzO1xudmFyIG5vdEVudW1lcmFibGVQcm9wID0gdXRpbC5ub3RFbnVtZXJhYmxlUHJvcDtcblxuZnVuY3Rpb24gc3ViRXJyb3IobmFtZVByb3BlcnR5LCBkZWZhdWx0TWVzc2FnZSkge1xuICAgIGZ1bmN0aW9uIFN1YkVycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN1YkVycm9yKSkgcmV0dXJuIG5ldyBTdWJFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgbm90RW51bWVyYWJsZVByb3AodGhpcywgXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICB0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiA/IG1lc3NhZ2UgOiBkZWZhdWx0TWVzc2FnZSk7XG4gICAgICAgIG5vdEVudW1lcmFibGVQcm9wKHRoaXMsIFwibmFtZVwiLCBuYW1lUHJvcGVydHkpO1xuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbmhlcml0cyhTdWJFcnJvciwgRXJyb3IpO1xuICAgIHJldHVybiBTdWJFcnJvcjtcbn1cblxudmFyIF9UeXBlRXJyb3IsIF9SYW5nZUVycm9yO1xudmFyIFdhcm5pbmcgPSBzdWJFcnJvcihcIldhcm5pbmdcIiwgXCJ3YXJuaW5nXCIpO1xudmFyIENhbmNlbGxhdGlvbkVycm9yID0gc3ViRXJyb3IoXCJDYW5jZWxsYXRpb25FcnJvclwiLCBcImNhbmNlbGxhdGlvbiBlcnJvclwiKTtcbnZhciBUaW1lb3V0RXJyb3IgPSBzdWJFcnJvcihcIlRpbWVvdXRFcnJvclwiLCBcInRpbWVvdXQgZXJyb3JcIik7XG52YXIgQWdncmVnYXRlRXJyb3IgPSBzdWJFcnJvcihcIkFnZ3JlZ2F0ZUVycm9yXCIsIFwiYWdncmVnYXRlIGVycm9yXCIpO1xudHJ5IHtcbiAgICBfVHlwZUVycm9yID0gVHlwZUVycm9yO1xuICAgIF9SYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcbn0gY2F0Y2goZSkge1xuICAgIF9UeXBlRXJyb3IgPSBzdWJFcnJvcihcIlR5cGVFcnJvclwiLCBcInR5cGUgZXJyb3JcIik7XG4gICAgX1JhbmdlRXJyb3IgPSBzdWJFcnJvcihcIlJhbmdlRXJyb3JcIiwgXCJyYW5nZSBlcnJvclwiKTtcbn1cblxudmFyIG1ldGhvZHMgPSAoXCJqb2luIHBvcCBwdXNoIHNoaWZ0IHVuc2hpZnQgc2xpY2UgZmlsdGVyIGZvckVhY2ggc29tZSBcIiArXG4gICAgXCJldmVyeSBtYXAgaW5kZXhPZiBsYXN0SW5kZXhPZiByZWR1Y2UgcmVkdWNlUmlnaHQgc29ydCByZXZlcnNlXCIpLnNwbGl0KFwiIFwiKTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCBtZXRob2RzLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHR5cGVvZiBBcnJheS5wcm90b3R5cGVbbWV0aG9kc1tpXV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBBZ2dyZWdhdGVFcnJvci5wcm90b3R5cGVbbWV0aG9kc1tpXV0gPSBBcnJheS5wcm90b3R5cGVbbWV0aG9kc1tpXV07XG4gICAgfVxufVxuXG5lczUuZGVmaW5lUHJvcGVydHkoQWdncmVnYXRlRXJyb3IucHJvdG90eXBlLCBcImxlbmd0aFwiLCB7XG4gICAgdmFsdWU6IDAsXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG59KTtcbkFnZ3JlZ2F0ZUVycm9yLnByb3RvdHlwZVtcImlzT3BlcmF0aW9uYWxcIl0gPSB0cnVlO1xudmFyIGxldmVsID0gMDtcbkFnZ3JlZ2F0ZUVycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbmRlbnQgPSBBcnJheShsZXZlbCAqIDQgKyAxKS5qb2luKFwiIFwiKTtcbiAgICB2YXIgcmV0ID0gXCJcXG5cIiArIGluZGVudCArIFwiQWdncmVnYXRlRXJyb3Igb2Y6XCIgKyBcIlxcblwiO1xuICAgIGxldmVsKys7XG4gICAgaW5kZW50ID0gQXJyYXkobGV2ZWwgKiA0ICsgMSkuam9pbihcIiBcIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBzdHIgPSB0aGlzW2ldID09PSB0aGlzID8gXCJbQ2lyY3VsYXIgQWdncmVnYXRlRXJyb3JdXCIgOiB0aGlzW2ldICsgXCJcIjtcbiAgICAgICAgdmFyIGxpbmVzID0gc3RyLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxpbmVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICBsaW5lc1tqXSA9IGluZGVudCArIGxpbmVzW2pdO1xuICAgICAgICB9XG4gICAgICAgIHN0ciA9IGxpbmVzLmpvaW4oXCJcXG5cIik7XG4gICAgICAgIHJldCArPSBzdHIgKyBcIlxcblwiO1xuICAgIH1cbiAgICBsZXZlbC0tO1xuICAgIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBPcGVyYXRpb25hbEVycm9yKG1lc3NhZ2UpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgT3BlcmF0aW9uYWxFcnJvcikpXG4gICAgICAgIHJldHVybiBuZXcgT3BlcmF0aW9uYWxFcnJvcihtZXNzYWdlKTtcbiAgICBub3RFbnVtZXJhYmxlUHJvcCh0aGlzLCBcIm5hbWVcIiwgXCJPcGVyYXRpb25hbEVycm9yXCIpO1xuICAgIG5vdEVudW1lcmFibGVQcm9wKHRoaXMsIFwibWVzc2FnZVwiLCBtZXNzYWdlKTtcbiAgICB0aGlzLmNhdXNlID0gbWVzc2FnZTtcbiAgICB0aGlzW1wiaXNPcGVyYXRpb25hbFwiXSA9IHRydWU7XG5cbiAgICBpZiAobWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIG5vdEVudW1lcmFibGVQcm9wKHRoaXMsIFwibWVzc2FnZVwiLCBtZXNzYWdlLm1lc3NhZ2UpO1xuICAgICAgICBub3RFbnVtZXJhYmxlUHJvcCh0aGlzLCBcInN0YWNrXCIsIG1lc3NhZ2Uuc3RhY2spO1xuICAgIH0gZWxzZSBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG59XG5pbmhlcml0cyhPcGVyYXRpb25hbEVycm9yLCBFcnJvcik7XG5cbnZhciBlcnJvclR5cGVzID0gRXJyb3JbXCJfX0JsdWViaXJkRXJyb3JUeXBlc19fXCJdO1xuaWYgKCFlcnJvclR5cGVzKSB7XG4gICAgZXJyb3JUeXBlcyA9IE9iamVjdGZyZWV6ZSh7XG4gICAgICAgIENhbmNlbGxhdGlvbkVycm9yOiBDYW5jZWxsYXRpb25FcnJvcixcbiAgICAgICAgVGltZW91dEVycm9yOiBUaW1lb3V0RXJyb3IsXG4gICAgICAgIE9wZXJhdGlvbmFsRXJyb3I6IE9wZXJhdGlvbmFsRXJyb3IsXG4gICAgICAgIFJlamVjdGlvbkVycm9yOiBPcGVyYXRpb25hbEVycm9yLFxuICAgICAgICBBZ2dyZWdhdGVFcnJvcjogQWdncmVnYXRlRXJyb3JcbiAgICB9KTtcbiAgICBub3RFbnVtZXJhYmxlUHJvcChFcnJvciwgXCJfX0JsdWViaXJkRXJyb3JUeXBlc19fXCIsIGVycm9yVHlwZXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFcnJvcjogRXJyb3IsXG4gICAgVHlwZUVycm9yOiBfVHlwZUVycm9yLFxuICAgIFJhbmdlRXJyb3I6IF9SYW5nZUVycm9yLFxuICAgIENhbmNlbGxhdGlvbkVycm9yOiBlcnJvclR5cGVzLkNhbmNlbGxhdGlvbkVycm9yLFxuICAgIE9wZXJhdGlvbmFsRXJyb3I6IGVycm9yVHlwZXMuT3BlcmF0aW9uYWxFcnJvcixcbiAgICBUaW1lb3V0RXJyb3I6IGVycm9yVHlwZXMuVGltZW91dEVycm9yLFxuICAgIEFnZ3JlZ2F0ZUVycm9yOiBlcnJvclR5cGVzLkFnZ3JlZ2F0ZUVycm9yLFxuICAgIFdhcm5pbmc6IFdhcm5pbmdcbn07XG5cbn0se1wiLi9lczUuanNcIjoxNCxcIi4vdXRpbC5qc1wiOjM4fV0sMTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGlzRVM1ID0gKGZ1bmN0aW9uKCl7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgcmV0dXJuIHRoaXMgPT09IHVuZGVmaW5lZDtcbn0pKCk7XG5cbmlmIChpc0VTNSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBmcmVlemU6IE9iamVjdC5mcmVlemUsXG4gICAgICAgIGRlZmluZVByb3BlcnR5OiBPYmplY3QuZGVmaW5lUHJvcGVydHksXG4gICAgICAgIGdldERlc2NyaXB0b3I6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgICAgIGtleXM6IE9iamVjdC5rZXlzLFxuICAgICAgICBuYW1lczogT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsXG4gICAgICAgIGdldFByb3RvdHlwZU9mOiBPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gICAgICAgIGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXG4gICAgICAgIGlzRVM1OiBpc0VTNSxcbiAgICAgICAgcHJvcGVydHlJc1dyaXRhYmxlOiBmdW5jdGlvbihvYmosIHByb3ApIHtcbiAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHByb3ApO1xuICAgICAgICAgICAgcmV0dXJuICEhKCFkZXNjcmlwdG9yIHx8IGRlc2NyaXB0b3Iud3JpdGFibGUgfHwgZGVzY3JpcHRvci5zZXQpO1xuICAgICAgICB9XG4gICAgfTtcbn0gZWxzZSB7XG4gICAgdmFyIGhhcyA9IHt9Lmhhc093blByb3BlcnR5O1xuICAgIHZhciBzdHIgPSB7fS50b1N0cmluZztcbiAgICB2YXIgcHJvdG8gPSB7fS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgICB2YXIgT2JqZWN0S2V5cyA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHZhciByZXQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG8pIHtcbiAgICAgICAgICAgIGlmIChoYXMuY2FsbChvLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0LnB1c2goa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG5cbiAgICB2YXIgT2JqZWN0R2V0RGVzY3JpcHRvciA9IGZ1bmN0aW9uKG8sIGtleSkge1xuICAgICAgICByZXR1cm4ge3ZhbHVlOiBvW2tleV19O1xuICAgIH07XG5cbiAgICB2YXIgT2JqZWN0RGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAobywga2V5LCBkZXNjKSB7XG4gICAgICAgIG9ba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICAgIHJldHVybiBvO1xuICAgIH07XG5cbiAgICB2YXIgT2JqZWN0RnJlZXplID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG5cbiAgICB2YXIgT2JqZWN0R2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0KG9iaikuY29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIEFycmF5SXNBcnJheSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBzdHIuY2FsbChvYmopID09PSBcIltvYmplY3QgQXJyYXldXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBpc0FycmF5OiBBcnJheUlzQXJyYXksXG4gICAgICAgIGtleXM6IE9iamVjdEtleXMsXG4gICAgICAgIG5hbWVzOiBPYmplY3RLZXlzLFxuICAgICAgICBkZWZpbmVQcm9wZXJ0eTogT2JqZWN0RGVmaW5lUHJvcGVydHksXG4gICAgICAgIGdldERlc2NyaXB0b3I6IE9iamVjdEdldERlc2NyaXB0b3IsXG4gICAgICAgIGZyZWV6ZTogT2JqZWN0RnJlZXplLFxuICAgICAgICBnZXRQcm90b3R5cGVPZjogT2JqZWN0R2V0UHJvdG90eXBlT2YsXG4gICAgICAgIGlzRVM1OiBpc0VTNSxcbiAgICAgICAgcHJvcGVydHlJc1dyaXRhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxufSx7fV0sMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsIElOVEVSTkFMKSB7XG52YXIgUHJvbWlzZU1hcCA9IFByb21pc2UubWFwO1xuXG5Qcm9taXNlLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAoZm4sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gUHJvbWlzZU1hcCh0aGlzLCBmbiwgb3B0aW9ucywgSU5URVJOQUwpO1xufTtcblxuUHJvbWlzZS5maWx0ZXIgPSBmdW5jdGlvbiAocHJvbWlzZXMsIGZuLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIFByb21pc2VNYXAocHJvbWlzZXMsIGZuLCBvcHRpb25zLCBJTlRFUk5BTCk7XG59O1xufTtcblxufSx7fV0sMTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsIE5FWFRfRklMVEVSLCB0cnlDb252ZXJ0VG9Qcm9taXNlKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgaXNQcmltaXRpdmUgPSB1dGlsLmlzUHJpbWl0aXZlO1xudmFyIHRocm93ZXIgPSB1dGlsLnRocm93ZXI7XG5cbmZ1bmN0aW9uIHJldHVyblRoaXMoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiB0aHJvd1RoaXMoKSB7XG4gICAgdGhyb3cgdGhpcztcbn1cbmZ1bmN0aW9uIHJldHVybiQocikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRocm93JChyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyByO1xuICAgIH07XG59XG5mdW5jdGlvbiBwcm9taXNlZEZpbmFsbHkocmV0LCByZWFzb25PclZhbHVlLCBpc0Z1bGZpbGxlZCkge1xuICAgIHZhciB0aGVuO1xuICAgIGlmIChpc1ByaW1pdGl2ZShyZWFzb25PclZhbHVlKSkge1xuICAgICAgICB0aGVuID0gaXNGdWxmaWxsZWQgPyByZXR1cm4kKHJlYXNvbk9yVmFsdWUpIDogdGhyb3ckKHJlYXNvbk9yVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoZW4gPSBpc0Z1bGZpbGxlZCA/IHJldHVyblRoaXMgOiB0aHJvd1RoaXM7XG4gICAgfVxuICAgIHJldHVybiByZXQuX3RoZW4odGhlbiwgdGhyb3dlciwgdW5kZWZpbmVkLCByZWFzb25PclZhbHVlLCB1bmRlZmluZWQpO1xufVxuXG5mdW5jdGlvbiBmaW5hbGx5SGFuZGxlcihyZWFzb25PclZhbHVlKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG4gICAgdmFyIGhhbmRsZXIgPSB0aGlzLmhhbmRsZXI7XG5cbiAgICB2YXIgcmV0ID0gcHJvbWlzZS5faXNCb3VuZCgpXG4gICAgICAgICAgICAgICAgICAgID8gaGFuZGxlci5jYWxsKHByb21pc2UuX2JvdW5kVG8pXG4gICAgICAgICAgICAgICAgICAgIDogaGFuZGxlcigpO1xuXG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHJldCwgcHJvbWlzZSk7XG4gICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICBtYXliZVByb21pc2UgPSBtYXliZVByb21pc2UuX3RhcmdldCgpO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VkRmluYWxseShtYXliZVByb21pc2UsIHJlYXNvbk9yVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLmlzRnVsZmlsbGVkKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UuaXNSZWplY3RlZCgpKSB7XG4gICAgICAgIE5FWFRfRklMVEVSLmUgPSByZWFzb25PclZhbHVlO1xuICAgICAgICByZXR1cm4gTkVYVF9GSUxURVI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlYXNvbk9yVmFsdWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0YXBIYW5kbGVyKHZhbHVlKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG4gICAgdmFyIGhhbmRsZXIgPSB0aGlzLmhhbmRsZXI7XG5cbiAgICB2YXIgcmV0ID0gcHJvbWlzZS5faXNCb3VuZCgpXG4gICAgICAgICAgICAgICAgICAgID8gaGFuZGxlci5jYWxsKHByb21pc2UuX2JvdW5kVG8sIHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA6IGhhbmRsZXIodmFsdWUpO1xuXG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHJldCwgcHJvbWlzZSk7XG4gICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICBtYXliZVByb21pc2UgPSBtYXliZVByb21pc2UuX3RhcmdldCgpO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VkRmluYWxseShtYXliZVByb21pc2UsIHZhbHVlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cblByb21pc2UucHJvdG90eXBlLl9wYXNzVGhyb3VnaEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlciwgaXNGaW5hbGx5KSB7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0aGlzLnRoZW4oKTtcblxuICAgIHZhciBwcm9taXNlQW5kSGFuZGxlciA9IHtcbiAgICAgICAgcHJvbWlzZTogdGhpcyxcbiAgICAgICAgaGFuZGxlcjogaGFuZGxlclxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5fdGhlbihcbiAgICAgICAgICAgIGlzRmluYWxseSA/IGZpbmFsbHlIYW5kbGVyIDogdGFwSGFuZGxlcixcbiAgICAgICAgICAgIGlzRmluYWxseSA/IGZpbmFsbHlIYW5kbGVyIDogdW5kZWZpbmVkLCB1bmRlZmluZWQsXG4gICAgICAgICAgICBwcm9taXNlQW5kSGFuZGxlciwgdW5kZWZpbmVkKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmxhc3RseSA9XG5Qcm9taXNlLnByb3RvdHlwZVtcImZpbmFsbHlcIl0gPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLl9wYXNzVGhyb3VnaEhhbmRsZXIoaGFuZGxlciwgdHJ1ZSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS50YXAgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLl9wYXNzVGhyb3VnaEhhbmRsZXIoaGFuZGxlciwgZmFsc2UpO1xufTtcbn07XG5cbn0se1wiLi91dGlsLmpzXCI6Mzh9XSwxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpUmVqZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBJTlRFUk5BTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Q29udmVydFRvUHJvbWlzZSkge1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuL2Vycm9ycy5qc1wiKTtcbnZhciBUeXBlRXJyb3IgPSBlcnJvcnMuVHlwZUVycm9yO1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xudmFyIGVycm9yT2JqID0gdXRpbC5lcnJvck9iajtcbnZhciB0cnlDYXRjaCA9IHV0aWwudHJ5Q2F0Y2g7XG52YXIgeWllbGRIYW5kbGVycyA9IFtdO1xuXG5mdW5jdGlvbiBwcm9taXNlRnJvbVlpZWxkSGFuZGxlcih2YWx1ZSwgeWllbGRIYW5kbGVycywgdHJhY2VQYXJlbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHlpZWxkSGFuZGxlcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdHJhY2VQYXJlbnQuX3B1c2hDb250ZXh0KCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0cnlDYXRjaCh5aWVsZEhhbmRsZXJzW2ldKSh2YWx1ZSk7XG4gICAgICAgIHRyYWNlUGFyZW50Ll9wb3BDb250ZXh0KCk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgICAgICB0cmFjZVBhcmVudC5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgICAgIHZhciByZXQgPSBQcm9taXNlLnJlamVjdChlcnJvck9iai5lKTtcbiAgICAgICAgICAgIHRyYWNlUGFyZW50Ll9wb3BDb250ZXh0KCk7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHJlc3VsdCwgdHJhY2VQYXJlbnQpO1xuICAgICAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkgcmV0dXJuIG1heWJlUHJvbWlzZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIFByb21pc2VTcGF3bihnZW5lcmF0b3JGdW5jdGlvbiwgcmVjZWl2ZXIsIHlpZWxkSGFuZGxlciwgc3RhY2spIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgcHJvbWlzZS5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICB0aGlzLl9zdGFjayA9IHN0YWNrO1xuICAgIHRoaXMuX2dlbmVyYXRvckZ1bmN0aW9uID0gZ2VuZXJhdG9yRnVuY3Rpb247XG4gICAgdGhpcy5fcmVjZWl2ZXIgPSByZWNlaXZlcjtcbiAgICB0aGlzLl9nZW5lcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5feWllbGRIYW5kbGVycyA9IHR5cGVvZiB5aWVsZEhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IFt5aWVsZEhhbmRsZXJdLmNvbmNhdCh5aWVsZEhhbmRsZXJzKVxuICAgICAgICA6IHlpZWxkSGFuZGxlcnM7XG59XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUucHJvbWlzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcbn07XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUuX3J1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9nZW5lcmF0b3IgPSB0aGlzLl9nZW5lcmF0b3JGdW5jdGlvbi5jYWxsKHRoaXMuX3JlY2VpdmVyKTtcbiAgICB0aGlzLl9yZWNlaXZlciA9XG4gICAgICAgIHRoaXMuX2dlbmVyYXRvckZ1bmN0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX25leHQodW5kZWZpbmVkKTtcbn07XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUuX2NvbnRpbnVlID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlLl9yZWplY3RDYWxsYmFjayhyZXN1bHQuZSwgZmFsc2UsIHRydWUpO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICBpZiAocmVzdWx0LmRvbmUgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZS5fcmVzb2x2ZUNhbGxiYWNrKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZSh2YWx1ZSwgdGhpcy5fcHJvbWlzZSk7XG4gICAgICAgIGlmICghKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAgICAgICBtYXliZVByb21pc2UgPVxuICAgICAgICAgICAgICAgIHByb21pc2VGcm9tWWllbGRIYW5kbGVyKG1heWJlUHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl95aWVsZEhhbmRsZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb21pc2UpO1xuICAgICAgICAgICAgaWYgKG1heWJlUHJvbWlzZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rocm93KFxuICAgICAgICAgICAgICAgICAgICBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBIHZhbHVlICVzIHdhcyB5aWVsZGVkIHRoYXQgY291bGQgbm90IGJlIHRyZWF0ZWQgYXMgYSBwcm9taXNlXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvNFk0cERrXFx1MDAwYVxcdTAwMGFcIi5yZXBsYWNlKFwiJXNcIiwgdmFsdWUpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRnJvbSBjb3JvdXRpbmU6XFx1MDAwYVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YWNrLnNwbGl0KFwiXFxuXCIpLnNsaWNlKDEsIC03KS5qb2luKFwiXFxuXCIpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtYXliZVByb21pc2UuX3RoZW4oXG4gICAgICAgICAgICB0aGlzLl9uZXh0LFxuICAgICAgICAgICAgdGhpcy5fdGhyb3csXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICk7XG4gICAgfVxufTtcblxuUHJvbWlzZVNwYXduLnByb3RvdHlwZS5fdGhyb3cgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgdGhpcy5fcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZShyZWFzb24pO1xuICAgIHRoaXMuX3Byb21pc2UuX3B1c2hDb250ZXh0KCk7XG4gICAgdmFyIHJlc3VsdCA9IHRyeUNhdGNoKHRoaXMuX2dlbmVyYXRvcltcInRocm93XCJdKVxuICAgICAgICAuY2FsbCh0aGlzLl9nZW5lcmF0b3IsIHJlYXNvbik7XG4gICAgdGhpcy5fcHJvbWlzZS5fcG9wQ29udGV4dCgpO1xuICAgIHRoaXMuX2NvbnRpbnVlKHJlc3VsdCk7XG59O1xuXG5Qcm9taXNlU3Bhd24ucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5fcHJvbWlzZS5fcHVzaENvbnRleHQoKTtcbiAgICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2godGhpcy5fZ2VuZXJhdG9yLm5leHQpLmNhbGwodGhpcy5fZ2VuZXJhdG9yLCB2YWx1ZSk7XG4gICAgdGhpcy5fcHJvbWlzZS5fcG9wQ29udGV4dCgpO1xuICAgIHRoaXMuX2NvbnRpbnVlKHJlc3VsdCk7XG59O1xuXG5Qcm9taXNlLmNvcm91dGluZSA9IGZ1bmN0aW9uIChnZW5lcmF0b3JGdW5jdGlvbiwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgZ2VuZXJhdG9yRnVuY3Rpb24gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiZ2VuZXJhdG9yRnVuY3Rpb24gbXVzdCBiZSBhIGZ1bmN0aW9uXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvNlZxaG0wXFx1MDAwYVwiKTtcbiAgICB9XG4gICAgdmFyIHlpZWxkSGFuZGxlciA9IE9iamVjdChvcHRpb25zKS55aWVsZEhhbmRsZXI7XG4gICAgdmFyIFByb21pc2VTcGF3biQgPSBQcm9taXNlU3Bhd247XG4gICAgdmFyIHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGdlbmVyYXRvciA9IGdlbmVyYXRvckZ1bmN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBzcGF3biA9IG5ldyBQcm9taXNlU3Bhd24kKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB5aWVsZEhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrKTtcbiAgICAgICAgc3Bhd24uX2dlbmVyYXRvciA9IGdlbmVyYXRvcjtcbiAgICAgICAgc3Bhd24uX25leHQodW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIHNwYXduLnByb21pc2UoKTtcbiAgICB9O1xufTtcblxuUHJvbWlzZS5jb3JvdXRpbmUuYWRkWWllbGRIYW5kbGVyID0gZnVuY3Rpb24oZm4pIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJmbiBtdXN0IGJlIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC85MTZsSkpcXHUwMDBhXCIpO1xuICAgIHlpZWxkSGFuZGxlcnMucHVzaChmbik7XG59O1xuXG5Qcm9taXNlLnNwYXduID0gZnVuY3Rpb24gKGdlbmVyYXRvckZ1bmN0aW9uKSB7XG4gICAgaWYgKHR5cGVvZiBnZW5lcmF0b3JGdW5jdGlvbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJnZW5lcmF0b3JGdW5jdGlvbiBtdXN0IGJlIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC82VnFobTBcXHUwMDBhXCIpO1xuICAgIH1cbiAgICB2YXIgc3Bhd24gPSBuZXcgUHJvbWlzZVNwYXduKGdlbmVyYXRvckZ1bmN0aW9uLCB0aGlzKTtcbiAgICB2YXIgcmV0ID0gc3Bhd24ucHJvbWlzZSgpO1xuICAgIHNwYXduLl9ydW4oUHJvbWlzZS5zcGF3bik7XG4gICAgcmV0dXJuIHJldDtcbn07XG59O1xuXG59LHtcIi4vZXJyb3JzLmpzXCI6MTMsXCIuL3V0aWwuanNcIjozOH1dLDE4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPVxuZnVuY3Rpb24oUHJvbWlzZSwgUHJvbWlzZUFycmF5LCB0cnlDb252ZXJ0VG9Qcm9taXNlLCBJTlRFUk5BTCkge1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xudmFyIGNhbkV2YWx1YXRlID0gdXRpbC5jYW5FdmFsdWF0ZTtcbnZhciB0cnlDYXRjaCA9IHV0aWwudHJ5Q2F0Y2g7XG52YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xudmFyIHJlamVjdDtcblxuaWYgKCF0cnVlKSB7XG5pZiAoY2FuRXZhbHVhdGUpIHtcbiAgICB2YXIgdGhlbkNhbGxiYWNrID0gZnVuY3Rpb24oaSkge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwidmFsdWVcIiwgXCJob2xkZXJcIiwgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICAndXNlIHN0cmljdCc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBob2xkZXIucEluZGV4ID0gdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBob2xkZXIuY2hlY2tGdWxmaWxsbWVudCh0aGlzKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBcIi5yZXBsYWNlKC9JbmRleC9nLCBpKSk7XG4gICAgfTtcblxuICAgIHZhciBjYWxsZXIgPSBmdW5jdGlvbihjb3VudCkge1xuICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGNvdW50OyArK2kpIHZhbHVlcy5wdXNoKFwiaG9sZGVyLnBcIiArIGkpO1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiaG9sZGVyXCIsIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgJ3VzZSBzdHJpY3QnOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gaG9sZGVyLmZuOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHZhbHVlcyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgXCIucmVwbGFjZSgvdmFsdWVzL2csIHZhbHVlcy5qb2luKFwiLCBcIikpKTtcbiAgICB9O1xuICAgIHZhciB0aGVuQ2FsbGJhY2tzID0gW107XG4gICAgdmFyIGNhbGxlcnMgPSBbdW5kZWZpbmVkXTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8PSA1OyArK2kpIHtcbiAgICAgICAgdGhlbkNhbGxiYWNrcy5wdXNoKHRoZW5DYWxsYmFjayhpKSk7XG4gICAgICAgIGNhbGxlcnMucHVzaChjYWxsZXIoaSkpO1xuICAgIH1cblxuICAgIHZhciBIb2xkZXIgPSBmdW5jdGlvbih0b3RhbCwgZm4pIHtcbiAgICAgICAgdGhpcy5wMSA9IHRoaXMucDIgPSB0aGlzLnAzID0gdGhpcy5wNCA9IHRoaXMucDUgPSBudWxsO1xuICAgICAgICB0aGlzLmZuID0gZm47XG4gICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDtcbiAgICAgICAgdGhpcy5ub3cgPSAwO1xuICAgIH07XG5cbiAgICBIb2xkZXIucHJvdG90eXBlLmNhbGxlcnMgPSBjYWxsZXJzO1xuICAgIEhvbGRlci5wcm90b3R5cGUuY2hlY2tGdWxmaWxsbWVudCA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgICAgdmFyIG5vdyA9IHRoaXMubm93O1xuICAgICAgICBub3crKztcbiAgICAgICAgdmFyIHRvdGFsID0gdGhpcy50b3RhbDtcbiAgICAgICAgaWYgKG5vdyA+PSB0b3RhbCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzLmNhbGxlcnNbdG90YWxdO1xuICAgICAgICAgICAgcHJvbWlzZS5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgICAgIHZhciByZXQgPSB0cnlDYXRjaChoYW5kbGVyKSh0aGlzKTtcbiAgICAgICAgICAgIHByb21pc2UuX3BvcENvbnRleHQoKTtcbiAgICAgICAgICAgIGlmIChyZXQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2socmV0LmUsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5fcmVzb2x2ZUNhbGxiYWNrKHJldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5vdyA9IG5vdztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICB0aGlzLl9yZWplY3QocmVhc29uKTtcbiAgICB9O1xufVxufVxuXG5Qcm9taXNlLmpvaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxhc3QgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICB2YXIgZm47XG4gICAgaWYgKGxhc3QgPiAwICYmIHR5cGVvZiBhcmd1bWVudHNbbGFzdF0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBmbiA9IGFyZ3VtZW50c1tsYXN0XTtcbiAgICAgICAgaWYgKCF0cnVlKSB7XG4gICAgICAgICAgICBpZiAobGFzdCA8IDYgJiYgY2FuRXZhbHVhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgICAgICAgICAgICAgIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICB2YXIgaG9sZGVyID0gbmV3IEhvbGRlcihsYXN0LCBmbik7XG4gICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoZW5DYWxsYmFja3M7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UoYXJndW1lbnRzW2ldLCByZXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlID0gbWF5YmVQcm9taXNlLl90YXJnZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXliZVByb21pc2UuX2lzUGVuZGluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlLl90aGVuKGNhbGxiYWNrc1tpXSwgcmVqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsIHJldCwgaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF5YmVQcm9taXNlLl9pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzW2ldLmNhbGwocmV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fdmFsdWUoKSwgaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0Ll9yZWplY3QobWF5YmVQcm9taXNlLl9yZWFzb24oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3NbaV0uY2FsbChyZXQsIG1heWJlUHJvbWlzZSwgaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHZhciAkX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7dmFyIGFyZ3MgPSBuZXcgQXJyYXkoJF9sZW4pOyBmb3IodmFyICRfaSA9IDA7ICRfaSA8ICRfbGVuOyArKyRfaSkge2FyZ3NbJF9pXSA9IGFyZ3VtZW50c1skX2ldO31cbiAgICBpZiAoZm4pIGFyZ3MucG9wKCk7XG4gICAgdmFyIHJldCA9IG5ldyBQcm9taXNlQXJyYXkoYXJncykucHJvbWlzZSgpO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gcmV0LnNwcmVhZChmbikgOiByZXQ7XG59O1xuXG59O1xuXG59LHtcIi4vdXRpbC5qc1wiOjM4fV0sMTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2VBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpUmVqZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0cnlDb252ZXJ0VG9Qcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBJTlRFUk5BTCkge1xudmFyIGFzeW5jID0gX2RlcmVxXyhcIi4vYXN5bmMuanNcIik7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgdHJ5Q2F0Y2ggPSB1dGlsLnRyeUNhdGNoO1xudmFyIGVycm9yT2JqID0gdXRpbC5lcnJvck9iajtcbnZhciBQRU5ESU5HID0ge307XG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcblxuZnVuY3Rpb24gTWFwcGluZ1Byb21pc2VBcnJheShwcm9taXNlcywgZm4sIGxpbWl0LCBfZmlsdGVyKSB7XG4gICAgdGhpcy5jb25zdHJ1Y3RvciQocHJvbWlzZXMpO1xuICAgIHRoaXMuX3Byb21pc2UuX2NhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgdGhpcy5fY2FsbGJhY2sgPSBmbjtcbiAgICB0aGlzLl9wcmVzZXJ2ZWRWYWx1ZXMgPSBfZmlsdGVyID09PSBJTlRFUk5BTFxuICAgICAgICA/IG5ldyBBcnJheSh0aGlzLmxlbmd0aCgpKVxuICAgICAgICA6IG51bGw7XG4gICAgdGhpcy5fbGltaXQgPSBsaW1pdDtcbiAgICB0aGlzLl9pbkZsaWdodCA9IDA7XG4gICAgdGhpcy5fcXVldWUgPSBsaW1pdCA+PSAxID8gW10gOiBFTVBUWV9BUlJBWTtcbiAgICBhc3luYy5pbnZva2UoaW5pdCwgdGhpcywgdW5kZWZpbmVkKTtcbn1cbnV0aWwuaW5oZXJpdHMoTWFwcGluZ1Byb21pc2VBcnJheSwgUHJvbWlzZUFycmF5KTtcbmZ1bmN0aW9uIGluaXQoKSB7dGhpcy5faW5pdCQodW5kZWZpbmVkLCAtMik7fVxuXG5NYXBwaW5nUHJvbWlzZUFycmF5LnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uICgpIHt9O1xuXG5NYXBwaW5nUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZUZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICB2YXIgdmFsdWVzID0gdGhpcy5fdmFsdWVzO1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuICAgIHZhciBwcmVzZXJ2ZWRWYWx1ZXMgPSB0aGlzLl9wcmVzZXJ2ZWRWYWx1ZXM7XG4gICAgdmFyIGxpbWl0ID0gdGhpcy5fbGltaXQ7XG4gICAgaWYgKHZhbHVlc1tpbmRleF0gPT09IFBFTkRJTkcpIHtcbiAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICBpZiAobGltaXQgPj0gMSkge1xuICAgICAgICAgICAgdGhpcy5faW5GbGlnaHQtLTtcbiAgICAgICAgICAgIHRoaXMuX2RyYWluUXVldWUoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1Jlc29sdmVkKCkpIHJldHVybjtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChsaW1pdCA+PSAxICYmIHRoaXMuX2luRmxpZ2h0ID49IGxpbWl0KSB7XG4gICAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9xdWV1ZS5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlc2VydmVkVmFsdWVzICE9PSBudWxsKSBwcmVzZXJ2ZWRWYWx1ZXNbaW5kZXhdID0gdmFsdWU7XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGhpcy5fY2FsbGJhY2s7XG4gICAgICAgIHZhciByZWNlaXZlciA9IHRoaXMuX3Byb21pc2UuX2JvdW5kVG87XG4gICAgICAgIHRoaXMuX3Byb21pc2UuX3B1c2hDb250ZXh0KCk7XG4gICAgICAgIHZhciByZXQgPSB0cnlDYXRjaChjYWxsYmFjaykuY2FsbChyZWNlaXZlciwgdmFsdWUsIGluZGV4LCBsZW5ndGgpO1xuICAgICAgICB0aGlzLl9wcm9taXNlLl9wb3BDb250ZXh0KCk7XG4gICAgICAgIGlmIChyZXQgPT09IGVycm9yT2JqKSByZXR1cm4gdGhpcy5fcmVqZWN0KHJldC5lKTtcblxuICAgICAgICB2YXIgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZShyZXQsIHRoaXMuX3Byb21pc2UpO1xuICAgICAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgbWF5YmVQcm9taXNlID0gbWF5YmVQcm9taXNlLl90YXJnZXQoKTtcbiAgICAgICAgICAgIGlmIChtYXliZVByb21pc2UuX2lzUGVuZGluZygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpbWl0ID49IDEpIHRoaXMuX2luRmxpZ2h0Kys7XG4gICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSA9IFBFTkRJTkc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZS5fcHJveHlQcm9taXNlQXJyYXkodGhpcywgaW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXliZVByb21pc2UuX2lzRnVsZmlsbGVkKCkpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBtYXliZVByb21pc2UuX3ZhbHVlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWplY3QobWF5YmVQcm9taXNlLl9yZWFzb24oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVzW2luZGV4XSA9IHJldDtcbiAgICB9XG4gICAgdmFyIHRvdGFsUmVzb2x2ZWQgPSArK3RoaXMuX3RvdGFsUmVzb2x2ZWQ7XG4gICAgaWYgKHRvdGFsUmVzb2x2ZWQgPj0gbGVuZ3RoKSB7XG4gICAgICAgIGlmIChwcmVzZXJ2ZWRWYWx1ZXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpbHRlcih2YWx1ZXMsIHByZXNlcnZlZFZhbHVlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH1cblxuICAgIH1cbn07XG5cbk1hcHBpbmdQcm9taXNlQXJyYXkucHJvdG90eXBlLl9kcmFpblF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBxdWV1ZSA9IHRoaXMuX3F1ZXVlO1xuICAgIHZhciBsaW1pdCA9IHRoaXMuX2xpbWl0O1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLl92YWx1ZXM7XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDAgJiYgdGhpcy5faW5GbGlnaHQgPCBsaW1pdCkge1xuICAgICAgICBpZiAodGhpcy5faXNSZXNvbHZlZCgpKSByZXR1cm47XG4gICAgICAgIHZhciBpbmRleCA9IHF1ZXVlLnBvcCgpO1xuICAgICAgICB0aGlzLl9wcm9taXNlRnVsZmlsbGVkKHZhbHVlc1tpbmRleF0sIGluZGV4KTtcbiAgICB9XG59O1xuXG5NYXBwaW5nUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fZmlsdGVyID0gZnVuY3Rpb24gKGJvb2xlYW5zLCB2YWx1ZXMpIHtcbiAgICB2YXIgbGVuID0gdmFsdWVzLmxlbmd0aDtcbiAgICB2YXIgcmV0ID0gbmV3IEFycmF5KGxlbik7XG4gICAgdmFyIGogPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgaWYgKGJvb2xlYW5zW2ldKSByZXRbaisrXSA9IHZhbHVlc1tpXTtcbiAgICB9XG4gICAgcmV0Lmxlbmd0aCA9IGo7XG4gICAgdGhpcy5fcmVzb2x2ZShyZXQpO1xufTtcblxuTWFwcGluZ1Byb21pc2VBcnJheS5wcm90b3R5cGUucHJlc2VydmVkVmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9wcmVzZXJ2ZWRWYWx1ZXM7XG59O1xuXG5mdW5jdGlvbiBtYXAocHJvbWlzZXMsIGZuLCBvcHRpb25zLCBfZmlsdGVyKSB7XG4gICAgdmFyIGxpbWl0ID0gdHlwZW9mIG9wdGlvbnMgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucyAhPT0gbnVsbFxuICAgICAgICA/IG9wdGlvbnMuY29uY3VycmVuY3lcbiAgICAgICAgOiAwO1xuICAgIGxpbWl0ID0gdHlwZW9mIGxpbWl0ID09PSBcIm51bWJlclwiICYmXG4gICAgICAgIGlzRmluaXRlKGxpbWl0KSAmJiBsaW1pdCA+PSAxID8gbGltaXQgOiAwO1xuICAgIHJldHVybiBuZXcgTWFwcGluZ1Byb21pc2VBcnJheShwcm9taXNlcywgZm4sIGxpbWl0LCBfZmlsdGVyKTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKGZuLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gYXBpUmVqZWN0aW9uKFwiZm4gbXVzdCBiZSBhIGZ1bmN0aW9uXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvOTE2bEpKXFx1MDAwYVwiKTtcblxuICAgIHJldHVybiBtYXAodGhpcywgZm4sIG9wdGlvbnMsIG51bGwpLnByb21pc2UoKTtcbn07XG5cblByb21pc2UubWFwID0gZnVuY3Rpb24gKHByb21pc2VzLCBmbiwgb3B0aW9ucywgX2ZpbHRlcikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGFwaVJlamVjdGlvbihcImZuIG11c3QgYmUgYSBmdW5jdGlvblxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsLzkxNmxKSlxcdTAwMGFcIik7XG4gICAgcmV0dXJuIG1hcChwcm9taXNlcywgZm4sIG9wdGlvbnMsIF9maWx0ZXIpLnByb21pc2UoKTtcbn07XG5cblxufTtcblxufSx7XCIuL2FzeW5jLmpzXCI6MixcIi4vdXRpbC5qc1wiOjM4fV0sMjA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9XG5mdW5jdGlvbihQcm9taXNlLCBJTlRFUk5BTCwgdHJ5Q29udmVydFRvUHJvbWlzZSwgYXBpUmVqZWN0aW9uKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgdHJ5Q2F0Y2ggPSB1dGlsLnRyeUNhdGNoO1xuXG5Qcm9taXNlLm1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgUHJvbWlzZS5UeXBlRXJyb3IoXCJmbiBtdXN0IGJlIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC85MTZsSkpcXHUwMDBhXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgICAgICByZXQuX2NhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgICAgIHJldC5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgdmFyIHZhbHVlID0gdHJ5Q2F0Y2goZm4pLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldC5fcG9wQ29udGV4dCgpO1xuICAgICAgICByZXQuX3Jlc29sdmVGcm9tU3luY1ZhbHVlKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xufTtcblxuUHJvbWlzZS5hdHRlbXB0ID0gUHJvbWlzZVtcInRyeVwiXSA9IGZ1bmN0aW9uIChmbiwgYXJncywgY3R4KSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJmbiBtdXN0IGJlIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC85MTZsSkpcXHUwMDBhXCIpO1xuICAgIH1cbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICByZXQuX3B1c2hDb250ZXh0KCk7XG4gICAgdmFyIHZhbHVlID0gdXRpbC5pc0FycmF5KGFyZ3MpXG4gICAgICAgID8gdHJ5Q2F0Y2goZm4pLmFwcGx5KGN0eCwgYXJncylcbiAgICAgICAgOiB0cnlDYXRjaChmbikuY2FsbChjdHgsIGFyZ3MpO1xuICAgIHJldC5fcG9wQ29udGV4dCgpO1xuICAgIHJldC5fcmVzb2x2ZUZyb21TeW5jVmFsdWUodmFsdWUpO1xuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVzb2x2ZUZyb21TeW5jVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHV0aWwuZXJyb3JPYmopIHtcbiAgICAgICAgdGhpcy5fcmVqZWN0Q2FsbGJhY2sodmFsdWUuZSwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVDYWxsYmFjayh2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxufTtcbn07XG5cbn0se1wiLi91dGlsLmpzXCI6Mzh9XSwyMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSkge1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xudmFyIGFzeW5jID0gX2RlcmVxXyhcIi4vYXN5bmMuanNcIik7XG52YXIgdHJ5Q2F0Y2ggPSB1dGlsLnRyeUNhdGNoO1xudmFyIGVycm9yT2JqID0gdXRpbC5lcnJvck9iajtcblxuZnVuY3Rpb24gc3ByZWFkQWRhcHRlcih2YWwsIG5vZGViYWNrKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzO1xuICAgIGlmICghdXRpbC5pc0FycmF5KHZhbCkpIHJldHVybiBzdWNjZXNzQWRhcHRlci5jYWxsKHByb21pc2UsIHZhbCwgbm9kZWJhY2spO1xuICAgIHZhciByZXQgPSB0cnlDYXRjaChub2RlYmFjaykuYXBwbHkocHJvbWlzZS5fYm91bmRUbywgW251bGxdLmNvbmNhdCh2YWwpKTtcbiAgICBpZiAocmV0ID09PSBlcnJvck9iaikge1xuICAgICAgICBhc3luYy50aHJvd0xhdGVyKHJldC5lKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHN1Y2Nlc3NBZGFwdGVyKHZhbCwgbm9kZWJhY2spIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gICAgdmFyIHJlY2VpdmVyID0gcHJvbWlzZS5fYm91bmRUbztcbiAgICB2YXIgcmV0ID0gdmFsID09PSB1bmRlZmluZWRcbiAgICAgICAgPyB0cnlDYXRjaChub2RlYmFjaykuY2FsbChyZWNlaXZlciwgbnVsbClcbiAgICAgICAgOiB0cnlDYXRjaChub2RlYmFjaykuY2FsbChyZWNlaXZlciwgbnVsbCwgdmFsKTtcbiAgICBpZiAocmV0ID09PSBlcnJvck9iaikge1xuICAgICAgICBhc3luYy50aHJvd0xhdGVyKHJldC5lKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlcnJvckFkYXB0ZXIocmVhc29uLCBub2RlYmFjaykge1xuICAgIHZhciBwcm9taXNlID0gdGhpcztcbiAgICBpZiAoIXJlYXNvbikge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gcHJvbWlzZS5fdGFyZ2V0KCk7XG4gICAgICAgIHZhciBuZXdSZWFzb24gPSB0YXJnZXQuX2dldENhcnJpZWRTdGFja1RyYWNlKCk7XG4gICAgICAgIG5ld1JlYXNvbi5jYXVzZSA9IHJlYXNvbjtcbiAgICAgICAgcmVhc29uID0gbmV3UmVhc29uO1xuICAgIH1cbiAgICB2YXIgcmV0ID0gdHJ5Q2F0Y2gobm9kZWJhY2spLmNhbGwocHJvbWlzZS5fYm91bmRUbywgcmVhc29uKTtcbiAgICBpZiAocmV0ID09PSBlcnJvck9iaikge1xuICAgICAgICBhc3luYy50aHJvd0xhdGVyKHJldC5lKTtcbiAgICB9XG59XG5cblByb21pc2UucHJvdG90eXBlLmFzQ2FsbGJhY2sgPSBcblByb21pc2UucHJvdG90eXBlLm5vZGVpZnkgPSBmdW5jdGlvbiAobm9kZWJhY2ssIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG5vZGViYWNrID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB2YXIgYWRhcHRlciA9IHN1Y2Nlc3NBZGFwdGVyO1xuICAgICAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmIE9iamVjdChvcHRpb25zKS5zcHJlYWQpIHtcbiAgICAgICAgICAgIGFkYXB0ZXIgPSBzcHJlYWRBZGFwdGVyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RoZW4oXG4gICAgICAgICAgICBhZGFwdGVyLFxuICAgICAgICAgICAgZXJyb3JBZGFwdGVyLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIG5vZGViYWNrXG4gICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcbn07XG5cbn0se1wiLi9hc3luYy5qc1wiOjIsXCIuL3V0aWwuanNcIjozOH1dLDIyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBQcm9taXNlQXJyYXkpIHtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciBhc3luYyA9IF9kZXJlcV8oXCIuL2FzeW5jLmpzXCIpO1xudmFyIHRyeUNhdGNoID0gdXRpbC50cnlDYXRjaDtcbnZhciBlcnJvck9iaiA9IHV0aWwuZXJyb3JPYmo7XG5cblByb21pc2UucHJvdG90eXBlLnByb2dyZXNzZWQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLl90aGVuKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoYW5kbGVyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcHJvZ3Jlc3MgPSBmdW5jdGlvbiAocHJvZ3Jlc3NWYWx1ZSkge1xuICAgIGlmICh0aGlzLl9pc0ZvbGxvd2luZ09yRnVsZmlsbGVkT3JSZWplY3RlZCgpKSByZXR1cm47XG4gICAgdGhpcy5fdGFyZ2V0KCkuX3Byb2dyZXNzVW5jaGVja2VkKHByb2dyZXNzVmFsdWUpO1xuXG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcHJvZ3Jlc3NIYW5kbGVyQXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPT09IDBcbiAgICAgICAgPyB0aGlzLl9wcm9ncmVzc0hhbmRsZXIwXG4gICAgICAgIDogdGhpc1soaW5kZXggPDwgMikgKyBpbmRleCAtIDUgKyAyXTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9kb1Byb2dyZXNzV2l0aCA9IGZ1bmN0aW9uIChwcm9ncmVzc2lvbikge1xuICAgIHZhciBwcm9ncmVzc1ZhbHVlID0gcHJvZ3Jlc3Npb24udmFsdWU7XG4gICAgdmFyIGhhbmRsZXIgPSBwcm9ncmVzc2lvbi5oYW5kbGVyO1xuICAgIHZhciBwcm9taXNlID0gcHJvZ3Jlc3Npb24ucHJvbWlzZTtcbiAgICB2YXIgcmVjZWl2ZXIgPSBwcm9ncmVzc2lvbi5yZWNlaXZlcjtcblxuICAgIHZhciByZXQgPSB0cnlDYXRjaChoYW5kbGVyKS5jYWxsKHJlY2VpdmVyLCBwcm9ncmVzc1ZhbHVlKTtcbiAgICBpZiAocmV0ID09PSBlcnJvck9iaikge1xuICAgICAgICBpZiAocmV0LmUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgcmV0LmUubmFtZSAhPT0gXCJTdG9wUHJvZ3Jlc3NQcm9wYWdhdGlvblwiKSB7XG4gICAgICAgICAgICB2YXIgdHJhY2UgPSB1dGlsLmNhbkF0dGFjaFRyYWNlKHJldC5lKVxuICAgICAgICAgICAgICAgID8gcmV0LmUgOiBuZXcgRXJyb3IodXRpbC50b1N0cmluZyhyZXQuZSkpO1xuICAgICAgICAgICAgcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZSh0cmFjZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9wcm9ncmVzcyhyZXQuZSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJldCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgcmV0Ll90aGVuKHByb21pc2UuX3Byb2dyZXNzLCBudWxsLCBudWxsLCBwcm9taXNlLCB1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2UuX3Byb2dyZXNzKHJldCk7XG4gICAgfVxufTtcblxuXG5Qcm9taXNlLnByb3RvdHlwZS5fcHJvZ3Jlc3NVbmNoZWNrZWQgPSBmdW5jdGlvbiAocHJvZ3Jlc3NWYWx1ZSkge1xuICAgIHZhciBsZW4gPSB0aGlzLl9sZW5ndGgoKTtcbiAgICB2YXIgcHJvZ3Jlc3MgPSB0aGlzLl9wcm9ncmVzcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gdGhpcy5fcHJvZ3Jlc3NIYW5kbGVyQXQoaSk7XG4gICAgICAgIHZhciBwcm9taXNlID0gdGhpcy5fcHJvbWlzZUF0KGkpO1xuICAgICAgICBpZiAoIShwcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgICAgICAgIHZhciByZWNlaXZlciA9IHRoaXMuX3JlY2VpdmVyQXQoaSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuY2FsbChyZWNlaXZlciwgcHJvZ3Jlc3NWYWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlY2VpdmVyIGluc3RhbmNlb2YgUHJvbWlzZUFycmF5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICFyZWNlaXZlci5faXNSZXNvbHZlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZXIuX3Byb21pc2VQcm9ncmVzc2VkKHByb2dyZXNzVmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgYXN5bmMuaW52b2tlKHRoaXMuX2RvUHJvZ3Jlc3NXaXRoLCB0aGlzLCB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgICAgICAgICAgICBwcm9taXNlOiBwcm9taXNlLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLl9yZWNlaXZlckF0KGkpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9ncmVzc1ZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFzeW5jLmludm9rZShwcm9ncmVzcywgcHJvbWlzZSwgcHJvZ3Jlc3NWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xufTtcblxufSx7XCIuL2FzeW5jLmpzXCI6MixcIi4vdXRpbC5qc1wiOjM4fV0sMjM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xudmFyIG1ha2VTZWxmUmVzb2x1dGlvbkVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKFwiY2lyY3VsYXIgcHJvbWlzZSByZXNvbHV0aW9uIGNoYWluXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvTGhGcG8wXFx1MDAwYVwiKTtcbn07XG52YXIgcmVmbGVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZS5Qcm9taXNlSW5zcGVjdGlvbih0aGlzLl90YXJnZXQoKSk7XG59O1xudmFyIGFwaVJlamVjdGlvbiA9IGZ1bmN0aW9uKG1zZykge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKG1zZykpO1xufTtcblxudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xuXG52YXIgZ2V0RG9tYWluO1xuaWYgKHV0aWwuaXNOb2RlKSB7XG4gICAgZ2V0RG9tYWluID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZXQgPSBwcm9jZXNzLmRvbWFpbjtcbiAgICAgICAgaWYgKHJldCA9PT0gdW5kZWZpbmVkKSByZXQgPSBudWxsO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG59IGVsc2Uge1xuICAgIGdldERvbWFpbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xufVxudXRpbC5ub3RFbnVtZXJhYmxlUHJvcChQcm9taXNlLCBcIl9nZXREb21haW5cIiwgZ2V0RG9tYWluKTtcblxudmFyIGFzeW5jID0gX2RlcmVxXyhcIi4vYXN5bmMuanNcIik7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4vZXJyb3JzLmpzXCIpO1xudmFyIFR5cGVFcnJvciA9IFByb21pc2UuVHlwZUVycm9yID0gZXJyb3JzLlR5cGVFcnJvcjtcblByb21pc2UuUmFuZ2VFcnJvciA9IGVycm9ycy5SYW5nZUVycm9yO1xuUHJvbWlzZS5DYW5jZWxsYXRpb25FcnJvciA9IGVycm9ycy5DYW5jZWxsYXRpb25FcnJvcjtcblByb21pc2UuVGltZW91dEVycm9yID0gZXJyb3JzLlRpbWVvdXRFcnJvcjtcblByb21pc2UuT3BlcmF0aW9uYWxFcnJvciA9IGVycm9ycy5PcGVyYXRpb25hbEVycm9yO1xuUHJvbWlzZS5SZWplY3Rpb25FcnJvciA9IGVycm9ycy5PcGVyYXRpb25hbEVycm9yO1xuUHJvbWlzZS5BZ2dyZWdhdGVFcnJvciA9IGVycm9ycy5BZ2dyZWdhdGVFcnJvcjtcbnZhciBJTlRFUk5BTCA9IGZ1bmN0aW9uKCl7fTtcbnZhciBBUFBMWSA9IHt9O1xudmFyIE5FWFRfRklMVEVSID0ge2U6IG51bGx9O1xudmFyIHRyeUNvbnZlcnRUb1Byb21pc2UgPSBfZGVyZXFfKFwiLi90aGVuYWJsZXMuanNcIikoUHJvbWlzZSwgSU5URVJOQUwpO1xudmFyIFByb21pc2VBcnJheSA9XG4gICAgX2RlcmVxXyhcIi4vcHJvbWlzZV9hcnJheS5qc1wiKShQcm9taXNlLCBJTlRFUk5BTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeUNvbnZlcnRUb1Byb21pc2UsIGFwaVJlamVjdGlvbik7XG52YXIgQ2FwdHVyZWRUcmFjZSA9IF9kZXJlcV8oXCIuL2NhcHR1cmVkX3RyYWNlLmpzXCIpKCk7XG52YXIgaXNEZWJ1Z2dpbmcgPSBfZGVyZXFfKFwiLi9kZWJ1Z2dhYmlsaXR5LmpzXCIpKFByb21pc2UsIENhcHR1cmVkVHJhY2UpO1xuIC8qanNoaW50IHVudXNlZDpmYWxzZSovXG52YXIgY3JlYXRlQ29udGV4dCA9XG4gICAgX2RlcmVxXyhcIi4vY29udGV4dC5qc1wiKShQcm9taXNlLCBDYXB0dXJlZFRyYWNlLCBpc0RlYnVnZ2luZyk7XG52YXIgQ2F0Y2hGaWx0ZXIgPSBfZGVyZXFfKFwiLi9jYXRjaF9maWx0ZXIuanNcIikoTkVYVF9GSUxURVIpO1xudmFyIFByb21pc2VSZXNvbHZlciA9IF9kZXJlcV8oXCIuL3Byb21pc2VfcmVzb2x2ZXIuanNcIik7XG52YXIgbm9kZWJhY2tGb3JQcm9taXNlID0gUHJvbWlzZVJlc29sdmVyLl9ub2RlYmFja0ZvclByb21pc2U7XG52YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xudmFyIHRyeUNhdGNoID0gdXRpbC50cnlDYXRjaDtcbmZ1bmN0aW9uIFByb21pc2UocmVzb2x2ZXIpIHtcbiAgICBpZiAodHlwZW9mIHJlc29sdmVyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInRoZSBwcm9taXNlIGNvbnN0cnVjdG9yIHJlcXVpcmVzIGEgcmVzb2x2ZXIgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9FQzIyWW5cXHUwMDBhXCIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciAhPT0gUHJvbWlzZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwidGhlIHByb21pc2UgY29uc3RydWN0b3IgY2Fubm90IGJlIGludm9rZWQgZGlyZWN0bHlcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9Lc0lsZ2VcXHUwMDBhXCIpO1xuICAgIH1cbiAgICB0aGlzLl9iaXRGaWVsZCA9IDA7XG4gICAgdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyMCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yZWplY3Rpb25IYW5kbGVyMCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wcm9ncmVzc0hhbmRsZXIwID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3Byb21pc2UwID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3JlY2VpdmVyMCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zZXR0bGVkVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHJlc29sdmVyICE9PSBJTlRFUk5BTCkgdGhpcy5fcmVzb2x2ZUZyb21SZXNvbHZlcihyZXNvbHZlcik7XG59XG5cblByb21pc2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgUHJvbWlzZV1cIjtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmNhdWdodCA9IFByb21pc2UucHJvdG90eXBlW1wiY2F0Y2hcIl0gPSBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAobGVuID4gMSkge1xuICAgICAgICB2YXIgY2F0Y2hJbnN0YW5jZXMgPSBuZXcgQXJyYXkobGVuIC0gMSksXG4gICAgICAgICAgICBqID0gMCwgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbiAtIDE7ICsraSkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGNhdGNoSW5zdGFuY2VzW2orK10gPSBpdGVtO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUeXBlRXJyb3IoXCJDYXRjaCBmaWx0ZXIgbXVzdCBpbmhlcml0IGZyb20gRXJyb3Igb3IgYmUgYSBzaW1wbGUgcHJlZGljYXRlIGZ1bmN0aW9uXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvbzg0bzY4XFx1MDAwYVwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2hJbnN0YW5jZXMubGVuZ3RoID0gajtcbiAgICAgICAgZm4gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIHZhciBjYXRjaEZpbHRlciA9IG5ldyBDYXRjaEZpbHRlcihjYXRjaEluc3RhbmNlcywgZm4sIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdGhlbih1bmRlZmluZWQsIGNhdGNoRmlsdGVyLmRvRmlsdGVyLCB1bmRlZmluZWQsXG4gICAgICAgICAgICBjYXRjaEZpbHRlciwgdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3RoZW4odW5kZWZpbmVkLCBmbiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5yZWZsZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl90aGVuKHJlZmxlY3QsIHJlZmxlY3QsIHVuZGVmaW5lZCwgdGhpcywgdW5kZWZpbmVkKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbiAoZGlkRnVsZmlsbCwgZGlkUmVqZWN0LCBkaWRQcm9ncmVzcykge1xuICAgIGlmIChpc0RlYnVnZ2luZygpICYmIGFyZ3VtZW50cy5sZW5ndGggPiAwICYmXG4gICAgICAgIHR5cGVvZiBkaWRGdWxmaWxsICE9PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgdHlwZW9mIGRpZFJlamVjdCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHZhciBtc2cgPSBcIi50aGVuKCkgb25seSBhY2NlcHRzIGZ1bmN0aW9ucyBidXQgd2FzIHBhc3NlZDogXCIgK1xuICAgICAgICAgICAgICAgIHV0aWwuY2xhc3NTdHJpbmcoZGlkRnVsZmlsbCk7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbXNnICs9IFwiLCBcIiArIHV0aWwuY2xhc3NTdHJpbmcoZGlkUmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93YXJuKG1zZyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl90aGVuKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCwgZGlkUHJvZ3Jlc3MsXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbiAoZGlkRnVsZmlsbCwgZGlkUmVqZWN0LCBkaWRQcm9ncmVzcykge1xuICAgIHZhciBwcm9taXNlID0gdGhpcy5fdGhlbihkaWRGdWxmaWxsLCBkaWRSZWplY3QsIGRpZFByb2dyZXNzLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgcHJvbWlzZS5fc2V0SXNGaW5hbCgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuc3ByZWFkID0gZnVuY3Rpb24gKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCkge1xuICAgIHJldHVybiB0aGlzLmFsbCgpLl90aGVuKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCwgdW5kZWZpbmVkLCBBUFBMWSwgdW5kZWZpbmVkKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmlzQ2FuY2VsbGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICF0aGlzLmlzUmVzb2x2ZWQoKSAmJlxuICAgICAgICB0aGlzLl9jYW5jZWxsYWJsZSgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXQgPSB7XG4gICAgICAgIGlzRnVsZmlsbGVkOiBmYWxzZSxcbiAgICAgICAgaXNSZWplY3RlZDogZmFsc2UsXG4gICAgICAgIGZ1bGZpbGxtZW50VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgcmVqZWN0aW9uUmVhc29uOiB1bmRlZmluZWRcbiAgICB9O1xuICAgIGlmICh0aGlzLmlzRnVsZmlsbGVkKCkpIHtcbiAgICAgICAgcmV0LmZ1bGZpbGxtZW50VmFsdWUgPSB0aGlzLnZhbHVlKCk7XG4gICAgICAgIHJldC5pc0Z1bGZpbGxlZCA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgICByZXQucmVqZWN0aW9uUmVhc29uID0gdGhpcy5yZWFzb24oKTtcbiAgICAgICAgcmV0LmlzUmVqZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuYWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZUFycmF5KHRoaXMpLnByb21pc2UoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIHRoaXMuY2F1Z2h0KHV0aWwub3JpZ2luYXRlc0Zyb21SZWplY3Rpb24sIGZuKTtcbn07XG5cblByb21pc2UuaXMgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIHZhbCBpbnN0YW5jZW9mIFByb21pc2U7XG59O1xuXG5Qcm9taXNlLmZyb21Ob2RlID0gZnVuY3Rpb24oZm4pIHtcbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgIHZhciByZXN1bHQgPSB0cnlDYXRjaChmbikobm9kZWJhY2tGb3JQcm9taXNlKHJldCkpO1xuICAgIGlmIChyZXN1bHQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgIHJldC5fcmVqZWN0Q2FsbGJhY2socmVzdWx0LmUsIHRydWUsIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5hbGwgPSBmdW5jdGlvbiAocHJvbWlzZXMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2VBcnJheShwcm9taXNlcykucHJvbWlzZSgpO1xufTtcblxuUHJvbWlzZS5kZWZlciA9IFByb21pc2UucGVuZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2VSZXNvbHZlcihwcm9taXNlKTtcbn07XG5cblByb21pc2UuY2FzdCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgcmV0ID0gdHJ5Q29udmVydFRvUHJvbWlzZShvYmopO1xuICAgIGlmICghKHJldCBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAgIHZhciB2YWwgPSByZXQ7XG4gICAgICAgIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICAgICAgcmV0Ll9mdWxmaWxsVW5jaGVja2VkKHZhbCk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLnJlc29sdmUgPSBQcm9taXNlLmZ1bGZpbGxlZCA9IFByb21pc2UuY2FzdDtcblxuUHJvbWlzZS5yZWplY3QgPSBQcm9taXNlLnJlamVjdGVkID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgcmV0Ll9jYXB0dXJlU3RhY2tUcmFjZSgpO1xuICAgIHJldC5fcmVqZWN0Q2FsbGJhY2socmVhc29uLCB0cnVlKTtcbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5zZXRTY2hlZHVsZXIgPSBmdW5jdGlvbihmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImZuIG11c3QgYmUgYSBmdW5jdGlvblxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsLzkxNmxKSlxcdTAwMGFcIik7XG4gICAgdmFyIHByZXYgPSBhc3luYy5fc2NoZWR1bGU7XG4gICAgYXN5bmMuX3NjaGVkdWxlID0gZm47XG4gICAgcmV0dXJuIHByZXY7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fdGhlbiA9IGZ1bmN0aW9uIChcbiAgICBkaWRGdWxmaWxsLFxuICAgIGRpZFJlamVjdCxcbiAgICBkaWRQcm9ncmVzcyxcbiAgICByZWNlaXZlcixcbiAgICBpbnRlcm5hbERhdGFcbikge1xuICAgIHZhciBoYXZlSW50ZXJuYWxEYXRhID0gaW50ZXJuYWxEYXRhICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIHJldCA9IGhhdmVJbnRlcm5hbERhdGEgPyBpbnRlcm5hbERhdGEgOiBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG5cbiAgICBpZiAoIWhhdmVJbnRlcm5hbERhdGEpIHtcbiAgICAgICAgcmV0Ll9wcm9wYWdhdGVGcm9tKHRoaXMsIDQgfCAxKTtcbiAgICAgICAgcmV0Ll9jYXB0dXJlU3RhY2tUcmFjZSgpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXQgPSB0aGlzLl90YXJnZXQoKTtcbiAgICBpZiAodGFyZ2V0ICE9PSB0aGlzKSB7XG4gICAgICAgIGlmIChyZWNlaXZlciA9PT0gdW5kZWZpbmVkKSByZWNlaXZlciA9IHRoaXMuX2JvdW5kVG87XG4gICAgICAgIGlmICghaGF2ZUludGVybmFsRGF0YSkgcmV0Ll9zZXRJc01pZ3JhdGVkKCk7XG4gICAgfVxuXG4gICAgdmFyIGNhbGxiYWNrSW5kZXggPSB0YXJnZXQuX2FkZENhbGxiYWNrcyhkaWRGdWxmaWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlkUmVqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlkUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldERvbWFpbigpKTtcblxuICAgIGlmICh0YXJnZXQuX2lzUmVzb2x2ZWQoKSAmJiAhdGFyZ2V0Ll9pc1NldHRsZVByb21pc2VzUXVldWVkKCkpIHtcbiAgICAgICAgYXN5bmMuaW52b2tlKFxuICAgICAgICAgICAgdGFyZ2V0Ll9zZXR0bGVQcm9taXNlQXRQb3N0UmVzb2x1dGlvbiwgdGFyZ2V0LCBjYWxsYmFja0luZGV4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldHRsZVByb21pc2VBdFBvc3RSZXNvbHV0aW9uID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgaWYgKHRoaXMuX2lzUmVqZWN0aW9uVW5oYW5kbGVkKCkpIHRoaXMuX3Vuc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQoKTtcbiAgICB0aGlzLl9zZXR0bGVQcm9taXNlQXQoaW5kZXgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2xlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fYml0RmllbGQgJiAxMzEwNzE7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5faXNGb2xsb3dpbmdPckZ1bGZpbGxlZE9yUmVqZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDkzOTUyNDA5NikgPiAwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzRm9sbG93aW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA1MzY4NzA5MTIpID09PSA1MzY4NzA5MTI7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0TGVuZ3RoID0gZnVuY3Rpb24gKGxlbikge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gKHRoaXMuX2JpdEZpZWxkICYgLTEzMTA3MikgfFxuICAgICAgICAobGVuICYgMTMxMDcxKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRGdWxmaWxsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDI2ODQzNTQ1Njtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRSZWplY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgMTM0MjE3NzI4O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldEZvbGxvd2luZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgNTM2ODcwOTEyO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldElzRmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDMzNTU0NDMyO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzRmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDMzNTU0NDMyKSA+IDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fY2FuY2VsbGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDY3MTA4ODY0KSA+IDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0Q2FuY2VsbGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDY3MTA4ODY0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0Q2FuY2VsbGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+NjcxMDg4NjQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldElzTWlncmF0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDQxOTQzMDQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fdW5zZXRJc01pZ3JhdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgJiAofjQxOTQzMDQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzTWlncmF0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDQxOTQzMDQpID4gMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZWNlaXZlckF0ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgdmFyIHJldCA9IGluZGV4ID09PSAwXG4gICAgICAgID8gdGhpcy5fcmVjZWl2ZXIwXG4gICAgICAgIDogdGhpc1tcbiAgICAgICAgICAgIGluZGV4ICogNSAtIDUgKyA0XTtcbiAgICBpZiAocmV0ID09PSB1bmRlZmluZWQgJiYgdGhpcy5faXNCb3VuZCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ib3VuZFRvO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Byb21pc2VBdCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiBpbmRleCA9PT0gMFxuICAgICAgICA/IHRoaXMuX3Byb21pc2UwXG4gICAgICAgIDogdGhpc1tpbmRleCAqIDUgLSA1ICsgM107XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fZnVsZmlsbG1lbnRIYW5kbGVyQXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPT09IDBcbiAgICAgICAgPyB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXIwXG4gICAgICAgIDogdGhpc1tpbmRleCAqIDUgLSA1ICsgMF07XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVqZWN0aW9uSGFuZGxlckF0ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4ID09PSAwXG4gICAgICAgID8gdGhpcy5fcmVqZWN0aW9uSGFuZGxlcjBcbiAgICAgICAgOiB0aGlzW2luZGV4ICogNSAtIDUgKyAxXTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9taWdyYXRlQ2FsbGJhY2tzID0gZnVuY3Rpb24gKGZvbGxvd2VyLCBpbmRleCkge1xuICAgIHZhciBmdWxmaWxsID0gZm9sbG93ZXIuX2Z1bGZpbGxtZW50SGFuZGxlckF0KGluZGV4KTtcbiAgICB2YXIgcmVqZWN0ID0gZm9sbG93ZXIuX3JlamVjdGlvbkhhbmRsZXJBdChpbmRleCk7XG4gICAgdmFyIHByb2dyZXNzID0gZm9sbG93ZXIuX3Byb2dyZXNzSGFuZGxlckF0KGluZGV4KTtcbiAgICB2YXIgcHJvbWlzZSA9IGZvbGxvd2VyLl9wcm9taXNlQXQoaW5kZXgpO1xuICAgIHZhciByZWNlaXZlciA9IGZvbGxvd2VyLl9yZWNlaXZlckF0KGluZGV4KTtcbiAgICBpZiAocHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHByb21pc2UuX3NldElzTWlncmF0ZWQoKTtcbiAgICB0aGlzLl9hZGRDYWxsYmFja3MoZnVsZmlsbCwgcmVqZWN0LCBwcm9ncmVzcywgcHJvbWlzZSwgcmVjZWl2ZXIsIG51bGwpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2FkZENhbGxiYWNrcyA9IGZ1bmN0aW9uIChcbiAgICBmdWxmaWxsLFxuICAgIHJlamVjdCxcbiAgICBwcm9ncmVzcyxcbiAgICBwcm9taXNlLFxuICAgIHJlY2VpdmVyLFxuICAgIGRvbWFpblxuKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5fbGVuZ3RoKCk7XG5cbiAgICBpZiAoaW5kZXggPj0gMTMxMDcxIC0gNSkge1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX3NldExlbmd0aCgwKTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZTAgPSBwcm9taXNlO1xuICAgICAgICBpZiAocmVjZWl2ZXIgIT09IHVuZGVmaW5lZCkgdGhpcy5fcmVjZWl2ZXIwID0gcmVjZWl2ZXI7XG4gICAgICAgIGlmICh0eXBlb2YgZnVsZmlsbCA9PT0gXCJmdW5jdGlvblwiICYmICF0aGlzLl9pc0NhcnJ5aW5nU3RhY2tUcmFjZSgpKSB7XG4gICAgICAgICAgICB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXIwID1cbiAgICAgICAgICAgICAgICBkb21haW4gPT09IG51bGwgPyBmdWxmaWxsIDogZG9tYWluLmJpbmQoZnVsZmlsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiByZWplY3QgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhpcy5fcmVqZWN0aW9uSGFuZGxlcjAgPVxuICAgICAgICAgICAgICAgIGRvbWFpbiA9PT0gbnVsbCA/IHJlamVjdCA6IGRvbWFpbi5iaW5kKHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBwcm9ncmVzcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9ncmVzc0hhbmRsZXIwID1cbiAgICAgICAgICAgICAgICBkb21haW4gPT09IG51bGwgPyBwcm9ncmVzcyA6IGRvbWFpbi5iaW5kKHByb2dyZXNzKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBiYXNlID0gaW5kZXggKiA1IC0gNTtcbiAgICAgICAgdGhpc1tiYXNlICsgM10gPSBwcm9taXNlO1xuICAgICAgICB0aGlzW2Jhc2UgKyA0XSA9IHJlY2VpdmVyO1xuICAgICAgICBpZiAodHlwZW9mIGZ1bGZpbGwgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhpc1tiYXNlICsgMF0gPVxuICAgICAgICAgICAgICAgIGRvbWFpbiA9PT0gbnVsbCA/IGZ1bGZpbGwgOiBkb21haW4uYmluZChmdWxmaWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJlamVjdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzW2Jhc2UgKyAxXSA9XG4gICAgICAgICAgICAgICAgZG9tYWluID09PSBudWxsID8gcmVqZWN0IDogZG9tYWluLmJpbmQocmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHByb2dyZXNzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXNbYmFzZSArIDJdID1cbiAgICAgICAgICAgICAgICBkb21haW4gPT09IG51bGwgPyBwcm9ncmVzcyA6IGRvbWFpbi5iaW5kKHByb2dyZXNzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9zZXRMZW5ndGgoaW5kZXggKyAxKTtcbiAgICByZXR1cm4gaW5kZXg7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0UHJveHlIYW5kbGVycyA9IGZ1bmN0aW9uIChyZWNlaXZlciwgcHJvbWlzZVNsb3RWYWx1ZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuX2xlbmd0aCgpO1xuXG4gICAgaWYgKGluZGV4ID49IDEzMTA3MSAtIDUpIHtcbiAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICB0aGlzLl9zZXRMZW5ndGgoMCk7XG4gICAgfVxuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICB0aGlzLl9wcm9taXNlMCA9IHByb21pc2VTbG90VmFsdWU7XG4gICAgICAgIHRoaXMuX3JlY2VpdmVyMCA9IHJlY2VpdmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBiYXNlID0gaW5kZXggKiA1IC0gNTtcbiAgICAgICAgdGhpc1tiYXNlICsgM10gPSBwcm9taXNlU2xvdFZhbHVlO1xuICAgICAgICB0aGlzW2Jhc2UgKyA0XSA9IHJlY2VpdmVyO1xuICAgIH1cbiAgICB0aGlzLl9zZXRMZW5ndGgoaW5kZXggKyAxKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9wcm94eVByb21pc2VBcnJheSA9IGZ1bmN0aW9uIChwcm9taXNlQXJyYXksIGluZGV4KSB7XG4gICAgdGhpcy5fc2V0UHJveHlIYW5kbGVycyhwcm9taXNlQXJyYXksIGluZGV4KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZXNvbHZlQ2FsbGJhY2sgPSBmdW5jdGlvbih2YWx1ZSwgc2hvdWxkQmluZCkge1xuICAgIGlmICh0aGlzLl9pc0ZvbGxvd2luZ09yRnVsZmlsbGVkT3JSZWplY3RlZCgpKSByZXR1cm47XG4gICAgaWYgKHZhbHVlID09PSB0aGlzKVxuICAgICAgICByZXR1cm4gdGhpcy5fcmVqZWN0Q2FsbGJhY2sobWFrZVNlbGZSZXNvbHV0aW9uRXJyb3IoKSwgZmFsc2UsIHRydWUpO1xuICAgIHZhciBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHZhbHVlLCB0aGlzKTtcbiAgICBpZiAoIShtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSkgcmV0dXJuIHRoaXMuX2Z1bGZpbGwodmFsdWUpO1xuXG4gICAgdmFyIHByb3BhZ2F0aW9uRmxhZ3MgPSAxIHwgKHNob3VsZEJpbmQgPyA0IDogMCk7XG4gICAgdGhpcy5fcHJvcGFnYXRlRnJvbShtYXliZVByb21pc2UsIHByb3BhZ2F0aW9uRmxhZ3MpO1xuICAgIHZhciBwcm9taXNlID0gbWF5YmVQcm9taXNlLl90YXJnZXQoKTtcbiAgICBpZiAocHJvbWlzZS5faXNQZW5kaW5nKCkpIHtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuX2xlbmd0aCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBwcm9taXNlLl9taWdyYXRlQ2FsbGJhY2tzKHRoaXMsIGkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NldEZvbGxvd2luZygpO1xuICAgICAgICB0aGlzLl9zZXRMZW5ndGgoMCk7XG4gICAgICAgIHRoaXMuX3NldEZvbGxvd2VlKHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAocHJvbWlzZS5faXNGdWxmaWxsZWQoKSkge1xuICAgICAgICB0aGlzLl9mdWxmaWxsVW5jaGVja2VkKHByb21pc2UuX3ZhbHVlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3JlamVjdFVuY2hlY2tlZChwcm9taXNlLl9yZWFzb24oKSxcbiAgICAgICAgICAgIHByb21pc2UuX2dldENhcnJpZWRTdGFja1RyYWNlKCkpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZWplY3RDYWxsYmFjayA9XG5mdW5jdGlvbihyZWFzb24sIHN5bmNocm9ub3VzLCBzaG91bGROb3RNYXJrT3JpZ2luYXRpbmdGcm9tUmVqZWN0aW9uKSB7XG4gICAgaWYgKCFzaG91bGROb3RNYXJrT3JpZ2luYXRpbmdGcm9tUmVqZWN0aW9uKSB7XG4gICAgICAgIHV0aWwubWFya0FzT3JpZ2luYXRpbmdGcm9tUmVqZWN0aW9uKHJlYXNvbik7XG4gICAgfVxuICAgIHZhciB0cmFjZSA9IHV0aWwuZW5zdXJlRXJyb3JPYmplY3QocmVhc29uKTtcbiAgICB2YXIgaGFzU3RhY2sgPSB0cmFjZSA9PT0gcmVhc29uO1xuICAgIHRoaXMuX2F0dGFjaEV4dHJhVHJhY2UodHJhY2UsIHN5bmNocm9ub3VzID8gaGFzU3RhY2sgOiBmYWxzZSk7XG4gICAgdGhpcy5fcmVqZWN0KHJlYXNvbiwgaGFzU3RhY2sgPyB1bmRlZmluZWQgOiB0cmFjZSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVzb2x2ZUZyb21SZXNvbHZlciA9IGZ1bmN0aW9uIChyZXNvbHZlcikge1xuICAgIHZhciBwcm9taXNlID0gdGhpcztcbiAgICB0aGlzLl9jYXB0dXJlU3RhY2tUcmFjZSgpO1xuICAgIHRoaXMuX3B1c2hDb250ZXh0KCk7XG4gICAgdmFyIHN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICB2YXIgciA9IHRyeUNhdGNoKHJlc29sdmVyKShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAocHJvbWlzZSA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBwcm9taXNlLl9yZXNvbHZlQ2FsbGJhY2sodmFsdWUpO1xuICAgICAgICBwcm9taXNlID0gbnVsbDtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIGlmIChwcm9taXNlID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIHByb21pc2UuX3JlamVjdENhbGxiYWNrKHJlYXNvbiwgc3luY2hyb25vdXMpO1xuICAgICAgICBwcm9taXNlID0gbnVsbDtcbiAgICB9KTtcbiAgICBzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgIHRoaXMuX3BvcENvbnRleHQoKTtcblxuICAgIGlmIChyICE9PSB1bmRlZmluZWQgJiYgciA9PT0gZXJyb3JPYmogJiYgcHJvbWlzZSAhPT0gbnVsbCkge1xuICAgICAgICBwcm9taXNlLl9yZWplY3RDYWxsYmFjayhyLmUsIHRydWUsIHRydWUpO1xuICAgICAgICBwcm9taXNlID0gbnVsbDtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0dGxlUHJvbWlzZUZyb21IYW5kbGVyID0gZnVuY3Rpb24gKFxuICAgIGhhbmRsZXIsIHJlY2VpdmVyLCB2YWx1ZSwgcHJvbWlzZVxuKSB7XG4gICAgaWYgKHByb21pc2UuX2lzUmVqZWN0ZWQoKSkgcmV0dXJuO1xuICAgIHByb21pc2UuX3B1c2hDb250ZXh0KCk7XG4gICAgdmFyIHg7XG4gICAgaWYgKHJlY2VpdmVyID09PSBBUFBMWSAmJiAhdGhpcy5faXNSZWplY3RlZCgpKSB7XG4gICAgICAgIHggPSB0cnlDYXRjaChoYW5kbGVyKS5hcHBseSh0aGlzLl9ib3VuZFRvLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgeCA9IHRyeUNhdGNoKGhhbmRsZXIpLmNhbGwocmVjZWl2ZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgcHJvbWlzZS5fcG9wQ29udGV4dCgpO1xuXG4gICAgaWYgKHggPT09IGVycm9yT2JqIHx8IHggPT09IHByb21pc2UgfHwgeCA9PT0gTkVYVF9GSUxURVIpIHtcbiAgICAgICAgdmFyIGVyciA9IHggPT09IHByb21pc2UgPyBtYWtlU2VsZlJlc29sdXRpb25FcnJvcigpIDogeC5lO1xuICAgICAgICBwcm9taXNlLl9yZWplY3RDYWxsYmFjayhlcnIsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlLl9yZXNvbHZlQ2FsbGJhY2soeCk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3RhcmdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXQgPSB0aGlzO1xuICAgIHdoaWxlIChyZXQuX2lzRm9sbG93aW5nKCkpIHJldCA9IHJldC5fZm9sbG93ZWUoKTtcbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2ZvbGxvd2VlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlamVjdGlvbkhhbmRsZXIwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldEZvbGxvd2VlID0gZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgIHRoaXMuX3JlamVjdGlvbkhhbmRsZXIwID0gcHJvbWlzZTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9jbGVhblZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fY2FuY2VsbGFibGUoKSkge1xuICAgICAgICB0aGlzLl9jYW5jZWxsYXRpb25QYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Byb3BhZ2F0ZUZyb20gPSBmdW5jdGlvbiAocGFyZW50LCBmbGFncykge1xuICAgIGlmICgoZmxhZ3MgJiAxKSA+IDAgJiYgcGFyZW50Ll9jYW5jZWxsYWJsZSgpKSB7XG4gICAgICAgIHRoaXMuX3NldENhbmNlbGxhYmxlKCk7XG4gICAgICAgIHRoaXMuX2NhbmNlbGxhdGlvblBhcmVudCA9IHBhcmVudDtcbiAgICB9XG4gICAgaWYgKChmbGFncyAmIDQpID4gMCAmJiBwYXJlbnQuX2lzQm91bmQoKSkge1xuICAgICAgICB0aGlzLl9zZXRCb3VuZFRvKHBhcmVudC5fYm91bmRUbyk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2Z1bGZpbGwgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodGhpcy5faXNGb2xsb3dpbmdPckZ1bGZpbGxlZE9yUmVqZWN0ZWQoKSkgcmV0dXJuO1xuICAgIHRoaXMuX2Z1bGZpbGxVbmNoZWNrZWQodmFsdWUpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3JlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24sIGNhcnJpZWRTdGFja1RyYWNlKSB7XG4gICAgaWYgKHRoaXMuX2lzRm9sbG93aW5nT3JGdWxmaWxsZWRPclJlamVjdGVkKCkpIHJldHVybjtcbiAgICB0aGlzLl9yZWplY3RVbmNoZWNrZWQocmVhc29uLCBjYXJyaWVkU3RhY2tUcmFjZSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0dGxlUHJvbWlzZUF0ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLl9wcm9taXNlQXQoaW5kZXgpO1xuICAgIHZhciBpc1Byb21pc2UgPSBwcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZTtcblxuICAgIGlmIChpc1Byb21pc2UgJiYgcHJvbWlzZS5faXNNaWdyYXRlZCgpKSB7XG4gICAgICAgIHByb21pc2UuX3Vuc2V0SXNNaWdyYXRlZCgpO1xuICAgICAgICByZXR1cm4gYXN5bmMuaW52b2tlKHRoaXMuX3NldHRsZVByb21pc2VBdCwgdGhpcywgaW5kZXgpO1xuICAgIH1cbiAgICB2YXIgaGFuZGxlciA9IHRoaXMuX2lzRnVsZmlsbGVkKClcbiAgICAgICAgPyB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXJBdChpbmRleClcbiAgICAgICAgOiB0aGlzLl9yZWplY3Rpb25IYW5kbGVyQXQoaW5kZXgpO1xuXG4gICAgdmFyIGNhcnJpZWRTdGFja1RyYWNlID1cbiAgICAgICAgdGhpcy5faXNDYXJyeWluZ1N0YWNrVHJhY2UoKSA/IHRoaXMuX2dldENhcnJpZWRTdGFja1RyYWNlKCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5fc2V0dGxlZFZhbHVlO1xuICAgIHZhciByZWNlaXZlciA9IHRoaXMuX3JlY2VpdmVyQXQoaW5kZXgpO1xuXG5cbiAgICB0aGlzLl9jbGVhckNhbGxiYWNrRGF0YUF0SW5kZXgoaW5kZXgpO1xuXG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWYgKCFpc1Byb21pc2UpIHtcbiAgICAgICAgICAgIGhhbmRsZXIuY2FsbChyZWNlaXZlciwgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc2V0dGxlUHJvbWlzZUZyb21IYW5kbGVyKGhhbmRsZXIsIHJlY2VpdmVyLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJlY2VpdmVyIGluc3RhbmNlb2YgUHJvbWlzZUFycmF5KSB7XG4gICAgICAgIGlmICghcmVjZWl2ZXIuX2lzUmVzb2x2ZWQoKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzRnVsZmlsbGVkKCkpIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlci5fcHJvbWlzZUZ1bGZpbGxlZCh2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlci5fcHJvbWlzZVJlamVjdGVkKHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgICAgICBwcm9taXNlLl9mdWxmaWxsKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb21pc2UuX3JlamVjdCh2YWx1ZSwgY2FycmllZFN0YWNrVHJhY2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ID49IDQgJiYgKGluZGV4ICYgMzEpID09PSA0KVxuICAgICAgICBhc3luYy5pbnZva2VMYXRlcih0aGlzLl9zZXRMZW5ndGgsIHRoaXMsIDApO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2NsZWFyQ2FsbGJhY2tEYXRhQXRJbmRleCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgIGlmICghdGhpcy5faXNDYXJyeWluZ1N0YWNrVHJhY2UoKSkge1xuICAgICAgICAgICAgdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyMCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZWplY3Rpb25IYW5kbGVyMCA9XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzSGFuZGxlcjAgPVxuICAgICAgICB0aGlzLl9yZWNlaXZlcjAgPVxuICAgICAgICB0aGlzLl9wcm9taXNlMCA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYmFzZSA9IGluZGV4ICogNSAtIDU7XG4gICAgICAgIHRoaXNbYmFzZSArIDNdID1cbiAgICAgICAgdGhpc1tiYXNlICsgNF0gPVxuICAgICAgICB0aGlzW2Jhc2UgKyAwXSA9XG4gICAgICAgIHRoaXNbYmFzZSArIDFdID1cbiAgICAgICAgdGhpc1tiYXNlICsgMl0gPSB1bmRlZmluZWQ7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzU2V0dGxlUHJvbWlzZXNRdWV1ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmXG4gICAgICAgICAgICAtMTA3Mzc0MTgyNCkgPT09IC0xMDczNzQxODI0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldFNldHRsZVByb21pc2VzUXVldWVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCAtMTA3Mzc0MTgyNDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl91bnNldFNldHRsZVByb21pc2VzUXVldWVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgJiAofi0xMDczNzQxODI0KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9xdWV1ZVNldHRsZVByb21pc2VzID0gZnVuY3Rpb24oKSB7XG4gICAgYXN5bmMuc2V0dGxlUHJvbWlzZXModGhpcyk7XG4gICAgdGhpcy5fc2V0U2V0dGxlUHJvbWlzZXNRdWV1ZWQoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9mdWxmaWxsVW5jaGVja2VkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSB0aGlzKSB7XG4gICAgICAgIHZhciBlcnIgPSBtYWtlU2VsZlJlc29sdXRpb25FcnJvcigpO1xuICAgICAgICB0aGlzLl9hdHRhY2hFeHRyYVRyYWNlKGVycik7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWplY3RVbmNoZWNrZWQoZXJyLCB1bmRlZmluZWQpO1xuICAgIH1cbiAgICB0aGlzLl9zZXRGdWxmaWxsZWQoKTtcbiAgICB0aGlzLl9zZXR0bGVkVmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLl9jbGVhblZhbHVlcygpO1xuXG4gICAgaWYgKHRoaXMuX2xlbmd0aCgpID4gMCkge1xuICAgICAgICB0aGlzLl9xdWV1ZVNldHRsZVByb21pc2VzKCk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3JlamVjdFVuY2hlY2tlZENoZWNrRXJyb3IgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgdmFyIHRyYWNlID0gdXRpbC5lbnN1cmVFcnJvck9iamVjdChyZWFzb24pO1xuICAgIHRoaXMuX3JlamVjdFVuY2hlY2tlZChyZWFzb24sIHRyYWNlID09PSByZWFzb24gPyB1bmRlZmluZWQgOiB0cmFjZSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVqZWN0VW5jaGVja2VkID0gZnVuY3Rpb24gKHJlYXNvbiwgdHJhY2UpIHtcbiAgICBpZiAocmVhc29uID09PSB0aGlzKSB7XG4gICAgICAgIHZhciBlcnIgPSBtYWtlU2VsZlJlc29sdXRpb25FcnJvcigpO1xuICAgICAgICB0aGlzLl9hdHRhY2hFeHRyYVRyYWNlKGVycik7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWplY3RVbmNoZWNrZWQoZXJyKTtcbiAgICB9XG4gICAgdGhpcy5fc2V0UmVqZWN0ZWQoKTtcbiAgICB0aGlzLl9zZXR0bGVkVmFsdWUgPSByZWFzb247XG4gICAgdGhpcy5fY2xlYW5WYWx1ZXMoKTtcblxuICAgIGlmICh0aGlzLl9pc0ZpbmFsKCkpIHtcbiAgICAgICAgYXN5bmMudGhyb3dMYXRlcihmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAoXCJzdGFja1wiIGluIGUpIHtcbiAgICAgICAgICAgICAgICBhc3luYy5pbnZva2VGaXJzdChcbiAgICAgICAgICAgICAgICAgICAgQ2FwdHVyZWRUcmFjZS51bmhhbmRsZWRSZWplY3Rpb24sIHVuZGVmaW5lZCwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9LCB0cmFjZSA9PT0gdW5kZWZpbmVkID8gcmVhc29uIDogdHJhY2UpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRyYWNlICE9PSB1bmRlZmluZWQgJiYgdHJhY2UgIT09IHJlYXNvbikge1xuICAgICAgICB0aGlzLl9zZXRDYXJyaWVkU3RhY2tUcmFjZSh0cmFjZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlbmd0aCgpID4gMCkge1xuICAgICAgICB0aGlzLl9xdWV1ZVNldHRsZVByb21pc2VzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZW5zdXJlUG9zc2libGVSZWplY3Rpb25IYW5kbGVkKCk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldHRsZVByb21pc2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3Vuc2V0U2V0dGxlUHJvbWlzZXNRdWV1ZWQoKTtcbiAgICB2YXIgbGVuID0gdGhpcy5fbGVuZ3RoKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0aGlzLl9zZXR0bGVQcm9taXNlQXQoaSk7XG4gICAgfVxufTtcblxudXRpbC5ub3RFbnVtZXJhYmxlUHJvcChQcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICAgICBcIl9tYWtlU2VsZlJlc29sdXRpb25FcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICBtYWtlU2VsZlJlc29sdXRpb25FcnJvcik7XG5cbl9kZXJlcV8oXCIuL3Byb2dyZXNzLmpzXCIpKFByb21pc2UsIFByb21pc2VBcnJheSk7XG5fZGVyZXFfKFwiLi9tZXRob2QuanNcIikoUHJvbWlzZSwgSU5URVJOQUwsIHRyeUNvbnZlcnRUb1Byb21pc2UsIGFwaVJlamVjdGlvbik7XG5fZGVyZXFfKFwiLi9iaW5kLmpzXCIpKFByb21pc2UsIElOVEVSTkFMLCB0cnlDb252ZXJ0VG9Qcm9taXNlKTtcbl9kZXJlcV8oXCIuL2ZpbmFsbHkuanNcIikoUHJvbWlzZSwgTkVYVF9GSUxURVIsIHRyeUNvbnZlcnRUb1Byb21pc2UpO1xuX2RlcmVxXyhcIi4vZGlyZWN0X3Jlc29sdmUuanNcIikoUHJvbWlzZSk7XG5fZGVyZXFfKFwiLi9zeW5jaHJvbm91c19pbnNwZWN0aW9uLmpzXCIpKFByb21pc2UpO1xuX2RlcmVxXyhcIi4vam9pbi5qc1wiKShQcm9taXNlLCBQcm9taXNlQXJyYXksIHRyeUNvbnZlcnRUb1Byb21pc2UsIElOVEVSTkFMKTtcblByb21pc2UuUHJvbWlzZSA9IFByb21pc2U7XG5fZGVyZXFfKCcuL21hcC5qcycpKFByb21pc2UsIFByb21pc2VBcnJheSwgYXBpUmVqZWN0aW9uLCB0cnlDb252ZXJ0VG9Qcm9taXNlLCBJTlRFUk5BTCk7XG5fZGVyZXFfKCcuL2NhbmNlbC5qcycpKFByb21pc2UpO1xuX2RlcmVxXygnLi91c2luZy5qcycpKFByb21pc2UsIGFwaVJlamVjdGlvbiwgdHJ5Q29udmVydFRvUHJvbWlzZSwgY3JlYXRlQ29udGV4dCk7XG5fZGVyZXFfKCcuL2dlbmVyYXRvcnMuanMnKShQcm9taXNlLCBhcGlSZWplY3Rpb24sIElOVEVSTkFMLCB0cnlDb252ZXJ0VG9Qcm9taXNlKTtcbl9kZXJlcV8oJy4vbm9kZWlmeS5qcycpKFByb21pc2UpO1xuX2RlcmVxXygnLi9jYWxsX2dldC5qcycpKFByb21pc2UpO1xuX2RlcmVxXygnLi9wcm9wcy5qcycpKFByb21pc2UsIFByb21pc2VBcnJheSwgdHJ5Q29udmVydFRvUHJvbWlzZSwgYXBpUmVqZWN0aW9uKTtcbl9kZXJlcV8oJy4vcmFjZS5qcycpKFByb21pc2UsIElOVEVSTkFMLCB0cnlDb252ZXJ0VG9Qcm9taXNlLCBhcGlSZWplY3Rpb24pO1xuX2RlcmVxXygnLi9yZWR1Y2UuanMnKShQcm9taXNlLCBQcm9taXNlQXJyYXksIGFwaVJlamVjdGlvbiwgdHJ5Q29udmVydFRvUHJvbWlzZSwgSU5URVJOQUwpO1xuX2RlcmVxXygnLi9zZXR0bGUuanMnKShQcm9taXNlLCBQcm9taXNlQXJyYXkpO1xuX2RlcmVxXygnLi9zb21lLmpzJykoUHJvbWlzZSwgUHJvbWlzZUFycmF5LCBhcGlSZWplY3Rpb24pO1xuX2RlcmVxXygnLi9wcm9taXNpZnkuanMnKShQcm9taXNlLCBJTlRFUk5BTCk7XG5fZGVyZXFfKCcuL2FueS5qcycpKFByb21pc2UpO1xuX2RlcmVxXygnLi9lYWNoLmpzJykoUHJvbWlzZSwgSU5URVJOQUwpO1xuX2RlcmVxXygnLi90aW1lcnMuanMnKShQcm9taXNlLCBJTlRFUk5BTCk7XG5fZGVyZXFfKCcuL2ZpbHRlci5qcycpKFByb21pc2UsIElOVEVSTkFMKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIHV0aWwudG9GYXN0UHJvcGVydGllcyhQcm9taXNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICB1dGlsLnRvRmFzdFByb3BlcnRpZXMoUHJvbWlzZS5wcm90b3R5cGUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgZnVuY3Rpb24gZmlsbFR5cGVzKHZhbHVlKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB2YXIgcCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgcC5fZnVsZmlsbG1lbnRIYW5kbGVyMCA9IHZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHAuX3JlamVjdGlvbkhhbmRsZXIwID0gdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBwLl9wcm9ncmVzc0hhbmRsZXIwID0gdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgcC5fcHJvbWlzZTAgPSB2YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHAuX3JlY2VpdmVyMCA9IHZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBwLl9zZXR0bGVkVmFsdWUgPSB2YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgLy8gQ29tcGxldGUgc2xhY2sgdHJhY2tpbmcsIG9wdCBvdXQgb2YgZmllbGQtdHlwZSB0cmFja2luZyBhbmQgICAgICAgICAgIFxuICAgIC8vIHN0YWJpbGl6ZSBtYXAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBmaWxsVHlwZXMoe2E6IDF9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgZmlsbFR5cGVzKHtiOiAyfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIGZpbGxUeXBlcyh7YzogM30pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBmaWxsVHlwZXMoMSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgZmlsbFR5cGVzKGZ1bmN0aW9uKCl7fSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIGZpbGxUeXBlcyh1bmRlZmluZWQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBmaWxsVHlwZXMoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgZmlsbFR5cGVzKG5ldyBQcm9taXNlKElOVEVSTkFMKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIENhcHR1cmVkVHJhY2Uuc2V0Qm91bmRzKGFzeW5jLmZpcnN0TGluZUVycm9yLCB1dGlsLmxhc3RMaW5lRXJyb3IpOyAgICAgICBcbiAgICByZXR1cm4gUHJvbWlzZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cbn07XG5cbn0se1wiLi9hbnkuanNcIjoxLFwiLi9hc3luYy5qc1wiOjIsXCIuL2JpbmQuanNcIjozLFwiLi9jYWxsX2dldC5qc1wiOjUsXCIuL2NhbmNlbC5qc1wiOjYsXCIuL2NhcHR1cmVkX3RyYWNlLmpzXCI6NyxcIi4vY2F0Y2hfZmlsdGVyLmpzXCI6OCxcIi4vY29udGV4dC5qc1wiOjksXCIuL2RlYnVnZ2FiaWxpdHkuanNcIjoxMCxcIi4vZGlyZWN0X3Jlc29sdmUuanNcIjoxMSxcIi4vZWFjaC5qc1wiOjEyLFwiLi9lcnJvcnMuanNcIjoxMyxcIi4vZmlsdGVyLmpzXCI6MTUsXCIuL2ZpbmFsbHkuanNcIjoxNixcIi4vZ2VuZXJhdG9ycy5qc1wiOjE3LFwiLi9qb2luLmpzXCI6MTgsXCIuL21hcC5qc1wiOjE5LFwiLi9tZXRob2QuanNcIjoyMCxcIi4vbm9kZWlmeS5qc1wiOjIxLFwiLi9wcm9ncmVzcy5qc1wiOjIyLFwiLi9wcm9taXNlX2FycmF5LmpzXCI6MjQsXCIuL3Byb21pc2VfcmVzb2x2ZXIuanNcIjoyNSxcIi4vcHJvbWlzaWZ5LmpzXCI6MjYsXCIuL3Byb3BzLmpzXCI6MjcsXCIuL3JhY2UuanNcIjoyOSxcIi4vcmVkdWNlLmpzXCI6MzAsXCIuL3NldHRsZS5qc1wiOjMyLFwiLi9zb21lLmpzXCI6MzMsXCIuL3N5bmNocm9ub3VzX2luc3BlY3Rpb24uanNcIjozNCxcIi4vdGhlbmFibGVzLmpzXCI6MzUsXCIuL3RpbWVycy5qc1wiOjM2LFwiLi91c2luZy5qc1wiOjM3LFwiLi91dGlsLmpzXCI6Mzh9XSwyNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgSU5URVJOQUwsIHRyeUNvbnZlcnRUb1Byb21pc2UsXG4gICAgYXBpUmVqZWN0aW9uKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgaXNBcnJheSA9IHV0aWwuaXNBcnJheTtcblxuZnVuY3Rpb24gdG9SZXNvbHV0aW9uVmFsdWUodmFsKSB7XG4gICAgc3dpdGNoKHZhbCkge1xuICAgIGNhc2UgLTI6IHJldHVybiBbXTtcbiAgICBjYXNlIC0zOiByZXR1cm4ge307XG4gICAgfVxufVxuXG5mdW5jdGlvbiBQcm9taXNlQXJyYXkodmFsdWVzKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgIHZhciBwYXJlbnQ7XG4gICAgaWYgKHZhbHVlcyBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgcGFyZW50ID0gdmFsdWVzO1xuICAgICAgICBwcm9taXNlLl9wcm9wYWdhdGVGcm9tKHBhcmVudCwgMSB8IDQpO1xuICAgIH1cbiAgICB0aGlzLl92YWx1ZXMgPSB2YWx1ZXM7XG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICB0aGlzLl90b3RhbFJlc29sdmVkID0gMDtcbiAgICB0aGlzLl9pbml0KHVuZGVmaW5lZCwgLTIpO1xufVxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUucHJvbWlzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KF8sIHJlc29sdmVWYWx1ZUlmRW1wdHkpIHtcbiAgICB2YXIgdmFsdWVzID0gdHJ5Q29udmVydFRvUHJvbWlzZSh0aGlzLl92YWx1ZXMsIHRoaXMuX3Byb21pc2UpO1xuICAgIGlmICh2YWx1ZXMgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHZhbHVlcyA9IHZhbHVlcy5fdGFyZ2V0KCk7XG4gICAgICAgIHRoaXMuX3ZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgaWYgKHZhbHVlcy5faXNGdWxmaWxsZWQoKSkge1xuICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLl92YWx1ZSgpO1xuICAgICAgICAgICAgaWYgKCFpc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IFByb21pc2UuVHlwZUVycm9yKFwiZXhwZWN0aW5nIGFuIGFycmF5LCBhIHByb21pc2Ugb3IgYSB0aGVuYWJsZVxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL3M4TU1oY1xcdTAwMGFcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fX2hhcmRSZWplY3RfXyhlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZXMuX2lzUGVuZGluZygpKSB7XG4gICAgICAgICAgICB2YWx1ZXMuX3RoZW4oXG4gICAgICAgICAgICAgICAgaW5pdCxcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWplY3QsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZVZhbHVlSWZFbXB0eVxuICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVqZWN0KHZhbHVlcy5fcmVhc29uKCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICghaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgICAgIHRoaXMuX3Byb21pc2UuX3JlamVjdChhcGlSZWplY3Rpb24oXCJleHBlY3RpbmcgYW4gYXJyYXksIGEgcHJvbWlzZSBvciBhIHRoZW5hYmxlXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvczhNTWhjXFx1MDAwYVwiKS5fcmVhc29uKCkpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKHJlc29sdmVWYWx1ZUlmRW1wdHkgPT09IC01KSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlRW1wdHlBcnJheSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSh0b1Jlc29sdXRpb25WYWx1ZShyZXNvbHZlVmFsdWVJZkVtcHR5KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbGVuID0gdGhpcy5nZXRBY3R1YWxMZW5ndGgodmFsdWVzLmxlbmd0aCk7XG4gICAgdGhpcy5fbGVuZ3RoID0gbGVuO1xuICAgIHRoaXMuX3ZhbHVlcyA9IHRoaXMuc2hvdWxkQ29weVZhbHVlcygpID8gbmV3IEFycmF5KGxlbikgOiB0aGlzLl92YWx1ZXM7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLl9wcm9taXNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgdmFyIGlzUmVzb2x2ZWQgPSB0aGlzLl9pc1Jlc29sdmVkKCk7XG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHZhbHVlc1tpXSwgcHJvbWlzZSk7XG4gICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICBtYXliZVByb21pc2UgPSBtYXliZVByb21pc2UuX3RhcmdldCgpO1xuICAgICAgICAgICAgaWYgKGlzUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICBtYXliZVByb21pc2UuX2lnbm9yZVJlamVjdGlvbnMoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWF5YmVQcm9taXNlLl9pc1BlbmRpbmcoKSkge1xuICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fcHJveHlQcm9taXNlQXJyYXkodGhpcywgaSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1heWJlUHJvbWlzZS5faXNGdWxmaWxsZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb21pc2VGdWxmaWxsZWQobWF5YmVQcm9taXNlLl92YWx1ZSgpLCBpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvbWlzZVJlamVjdGVkKG1heWJlUHJvbWlzZS5fcmVhc29uKCksIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc1Jlc29sdmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9taXNlRnVsZmlsbGVkKG1heWJlUHJvbWlzZSwgaSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9pc1Jlc29sdmVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZXMgPT09IG51bGw7XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9yZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5fdmFsdWVzID0gbnVsbDtcbiAgICB0aGlzLl9wcm9taXNlLl9mdWxmaWxsKHZhbHVlKTtcbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX19oYXJkUmVqZWN0X18gPVxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHRoaXMuX3ZhbHVlcyA9IG51bGw7XG4gICAgdGhpcy5fcHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2socmVhc29uLCBmYWxzZSwgdHJ1ZSk7XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlUHJvZ3Jlc3NlZCA9IGZ1bmN0aW9uIChwcm9ncmVzc1ZhbHVlLCBpbmRleCkge1xuICAgIHRoaXMuX3Byb21pc2UuX3Byb2dyZXNzKHtcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICB2YWx1ZTogcHJvZ3Jlc3NWYWx1ZVxuICAgIH0pO1xufTtcblxuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlRnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgIHRoaXMuX3ZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICB2YXIgdG90YWxSZXNvbHZlZCA9ICsrdGhpcy5fdG90YWxSZXNvbHZlZDtcbiAgICBpZiAodG90YWxSZXNvbHZlZCA+PSB0aGlzLl9sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZSh0aGlzLl92YWx1ZXMpO1xuICAgIH1cbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX3Byb21pc2VSZWplY3RlZCA9IGZ1bmN0aW9uIChyZWFzb24sIGluZGV4KSB7XG4gICAgdGhpcy5fdG90YWxSZXNvbHZlZCsrO1xuICAgIHRoaXMuX3JlamVjdChyZWFzb24pO1xufTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5zaG91bGRDb3B5VmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0cnVlO1xufTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5nZXRBY3R1YWxMZW5ndGggPSBmdW5jdGlvbiAobGVuKSB7XG4gICAgcmV0dXJuIGxlbjtcbn07XG5cbnJldHVybiBQcm9taXNlQXJyYXk7XG59O1xuXG59LHtcIi4vdXRpbC5qc1wiOjM4fV0sMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgbWF5YmVXcmFwQXNFcnJvciA9IHV0aWwubWF5YmVXcmFwQXNFcnJvcjtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnMuanNcIik7XG52YXIgVGltZW91dEVycm9yID0gZXJyb3JzLlRpbWVvdXRFcnJvcjtcbnZhciBPcGVyYXRpb25hbEVycm9yID0gZXJyb3JzLk9wZXJhdGlvbmFsRXJyb3I7XG52YXIgaGF2ZUdldHRlcnMgPSB1dGlsLmhhdmVHZXR0ZXJzO1xudmFyIGVzNSA9IF9kZXJlcV8oXCIuL2VzNS5qc1wiKTtcblxuZnVuY3Rpb24gaXNVbnR5cGVkRXJyb3Iob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEVycm9yICYmXG4gICAgICAgIGVzNS5nZXRQcm90b3R5cGVPZihvYmopID09PSBFcnJvci5wcm90b3R5cGU7XG59XG5cbnZhciByRXJyb3JLZXkgPSAvXig/Om5hbWV8bWVzc2FnZXxzdGFja3xjYXVzZSkkLztcbmZ1bmN0aW9uIHdyYXBBc09wZXJhdGlvbmFsRXJyb3Iob2JqKSB7XG4gICAgdmFyIHJldDtcbiAgICBpZiAoaXNVbnR5cGVkRXJyb3Iob2JqKSkge1xuICAgICAgICByZXQgPSBuZXcgT3BlcmF0aW9uYWxFcnJvcihvYmopO1xuICAgICAgICByZXQubmFtZSA9IG9iai5uYW1lO1xuICAgICAgICByZXQubWVzc2FnZSA9IG9iai5tZXNzYWdlO1xuICAgICAgICByZXQuc3RhY2sgPSBvYmouc3RhY2s7XG4gICAgICAgIHZhciBrZXlzID0gZXM1LmtleXMob2JqKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghckVycm9yS2V5LnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldFtrZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgdXRpbC5tYXJrQXNPcmlnaW5hdGluZ0Zyb21SZWplY3Rpb24ob2JqKTtcbiAgICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBub2RlYmFja0ZvclByb21pc2UocHJvbWlzZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihlcnIsIHZhbHVlKSB7XG4gICAgICAgIGlmIChwcm9taXNlID09PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgdmFyIHdyYXBwZWQgPSB3cmFwQXNPcGVyYXRpb25hbEVycm9yKG1heWJlV3JhcEFzRXJyb3IoZXJyKSk7XG4gICAgICAgICAgICBwcm9taXNlLl9hdHRhY2hFeHRyYVRyYWNlKHdyYXBwZWQpO1xuICAgICAgICAgICAgcHJvbWlzZS5fcmVqZWN0KHdyYXBwZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICB2YXIgJF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoO3ZhciBhcmdzID0gbmV3IEFycmF5KCRfbGVuIC0gMSk7IGZvcih2YXIgJF9pID0gMTsgJF9pIDwgJF9sZW47ICsrJF9pKSB7YXJnc1skX2kgLSAxXSA9IGFyZ3VtZW50c1skX2ldO31cbiAgICAgICAgICAgIHByb21pc2UuX2Z1bGZpbGwoYXJncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9taXNlLl9mdWxmaWxsKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgIH07XG59XG5cblxudmFyIFByb21pc2VSZXNvbHZlcjtcbmlmICghaGF2ZUdldHRlcnMpIHtcbiAgICBQcm9taXNlUmVzb2x2ZXIgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgICAgICB0aGlzLmFzQ2FsbGJhY2sgPSBub2RlYmFja0ZvclByb21pc2UocHJvbWlzZSk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSB0aGlzLmFzQ2FsbGJhY2s7XG4gICAgfTtcbn1cbmVsc2Uge1xuICAgIFByb21pc2VSZXNvbHZlciA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgfTtcbn1cbmlmIChoYXZlR2V0dGVycykge1xuICAgIHZhciBwcm9wID0ge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGViYWNrRm9yUHJvbWlzZSh0aGlzLnByb21pc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBlczUuZGVmaW5lUHJvcGVydHkoUHJvbWlzZVJlc29sdmVyLnByb3RvdHlwZSwgXCJhc0NhbGxiYWNrXCIsIHByb3ApO1xuICAgIGVzNS5kZWZpbmVQcm9wZXJ0eShQcm9taXNlUmVzb2x2ZXIucHJvdG90eXBlLCBcImNhbGxiYWNrXCIsIHByb3ApO1xufVxuXG5Qcm9taXNlUmVzb2x2ZXIuX25vZGViYWNrRm9yUHJvbWlzZSA9IG5vZGViYWNrRm9yUHJvbWlzZTtcblxuUHJvbWlzZVJlc29sdmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IFByb21pc2VSZXNvbHZlcl1cIjtcbn07XG5cblByb21pc2VSZXNvbHZlci5wcm90b3R5cGUucmVzb2x2ZSA9XG5Qcm9taXNlUmVzb2x2ZXIucHJvdG90eXBlLmZ1bGZpbGwgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUHJvbWlzZVJlc29sdmVyKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSWxsZWdhbCBpbnZvY2F0aW9uLCByZXNvbHZlciByZXNvbHZlL3JlamVjdCBtdXN0IGJlIGNhbGxlZCB3aXRoaW4gYSByZXNvbHZlciBjb250ZXh0LiBDb25zaWRlciB1c2luZyB0aGUgcHJvbWlzZSBjb25zdHJ1Y3RvciBpbnN0ZWFkLlxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL3Nka1hMOVxcdTAwMGFcIik7XG4gICAgfVxuICAgIHRoaXMucHJvbWlzZS5fcmVzb2x2ZUNhbGxiYWNrKHZhbHVlKTtcbn07XG5cblByb21pc2VSZXNvbHZlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlUmVzb2x2ZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGludm9jYXRpb24sIHJlc29sdmVyIHJlc29sdmUvcmVqZWN0IG11c3QgYmUgY2FsbGVkIHdpdGhpbiBhIHJlc29sdmVyIGNvbnRleHQuIENvbnNpZGVyIHVzaW5nIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yIGluc3RlYWQuXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvc2RrWEw5XFx1MDAwYVwiKTtcbiAgICB9XG4gICAgdGhpcy5wcm9taXNlLl9yZWplY3RDYWxsYmFjayhyZWFzb24pO1xufTtcblxuUHJvbWlzZVJlc29sdmVyLnByb3RvdHlwZS5wcm9ncmVzcyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlUmVzb2x2ZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGludm9jYXRpb24sIHJlc29sdmVyIHJlc29sdmUvcmVqZWN0IG11c3QgYmUgY2FsbGVkIHdpdGhpbiBhIHJlc29sdmVyIGNvbnRleHQuIENvbnNpZGVyIHVzaW5nIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yIGluc3RlYWQuXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvc2RrWEw5XFx1MDAwYVwiKTtcbiAgICB9XG4gICAgdGhpcy5wcm9taXNlLl9wcm9ncmVzcyh2YWx1ZSk7XG59O1xuXG5Qcm9taXNlUmVzb2x2ZXIucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICB0aGlzLnByb21pc2UuY2FuY2VsKGVycik7XG59O1xuXG5Qcm9taXNlUmVzb2x2ZXIucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZWplY3QobmV3IFRpbWVvdXRFcnJvcihcInRpbWVvdXRcIikpO1xufTtcblxuUHJvbWlzZVJlc29sdmVyLnByb3RvdHlwZS5pc1Jlc29sdmVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnByb21pc2UuaXNSZXNvbHZlZCgpO1xufTtcblxuUHJvbWlzZVJlc29sdmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvbWlzZS50b0pTT04oKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZVJlc29sdmVyO1xuXG59LHtcIi4vZXJyb3JzLmpzXCI6MTMsXCIuL2VzNS5qc1wiOjE0LFwiLi91dGlsLmpzXCI6Mzh9XSwyNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgSU5URVJOQUwpIHtcbnZhciBUSElTID0ge307XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgbm9kZWJhY2tGb3JQcm9taXNlID0gX2RlcmVxXyhcIi4vcHJvbWlzZV9yZXNvbHZlci5qc1wiKVxuICAgIC5fbm9kZWJhY2tGb3JQcm9taXNlO1xudmFyIHdpdGhBcHBlbmRlZCA9IHV0aWwud2l0aEFwcGVuZGVkO1xudmFyIG1heWJlV3JhcEFzRXJyb3IgPSB1dGlsLm1heWJlV3JhcEFzRXJyb3I7XG52YXIgY2FuRXZhbHVhdGUgPSB1dGlsLmNhbkV2YWx1YXRlO1xudmFyIFR5cGVFcnJvciA9IF9kZXJlcV8oXCIuL2Vycm9yc1wiKS5UeXBlRXJyb3I7XG52YXIgZGVmYXVsdFN1ZmZpeCA9IFwiQXN5bmNcIjtcbnZhciBkZWZhdWx0UHJvbWlzaWZpZWQgPSB7X19pc1Byb21pc2lmaWVkX186IHRydWV9O1xudmFyIG5vQ29weVByb3BzID0gW1xuICAgIFwiYXJpdHlcIiwgICAgXCJsZW5ndGhcIixcbiAgICBcIm5hbWVcIixcbiAgICBcImFyZ3VtZW50c1wiLFxuICAgIFwiY2FsbGVyXCIsXG4gICAgXCJjYWxsZWVcIixcbiAgICBcInByb3RvdHlwZVwiLFxuICAgIFwiX19pc1Byb21pc2lmaWVkX19cIlxuXTtcbnZhciBub0NvcHlQcm9wc1BhdHRlcm4gPSBuZXcgUmVnRXhwKFwiXig/OlwiICsgbm9Db3B5UHJvcHMuam9pbihcInxcIikgKyBcIikkXCIpO1xuXG52YXIgZGVmYXVsdEZpbHRlciA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdXRpbC5pc0lkZW50aWZpZXIobmFtZSkgJiZcbiAgICAgICAgbmFtZS5jaGFyQXQoMCkgIT09IFwiX1wiICYmXG4gICAgICAgIG5hbWUgIT09IFwiY29uc3RydWN0b3JcIjtcbn07XG5cbmZ1bmN0aW9uIHByb3BzRmlsdGVyKGtleSkge1xuICAgIHJldHVybiAhbm9Db3B5UHJvcHNQYXR0ZXJuLnRlc3Qoa2V5KTtcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNpZmllZChmbikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmbi5fX2lzUHJvbWlzaWZpZWRfXyA9PT0gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaGFzUHJvbWlzaWZpZWQob2JqLCBrZXksIHN1ZmZpeCkge1xuICAgIHZhciB2YWwgPSB1dGlsLmdldERhdGFQcm9wZXJ0eU9yRGVmYXVsdChvYmosIGtleSArIHN1ZmZpeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFByb21pc2lmaWVkKTtcbiAgICByZXR1cm4gdmFsID8gaXNQcm9taXNpZmllZCh2YWwpIDogZmFsc2U7XG59XG5mdW5jdGlvbiBjaGVja1ZhbGlkKHJldCwgc3VmZml4LCBzdWZmaXhSZWdleHApIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICB2YXIga2V5ID0gcmV0W2ldO1xuICAgICAgICBpZiAoc3VmZml4UmVnZXhwLnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgdmFyIGtleVdpdGhvdXRBc3luY1N1ZmZpeCA9IGtleS5yZXBsYWNlKHN1ZmZpeFJlZ2V4cCwgXCJcIik7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJldC5sZW5ndGg7IGogKz0gMikge1xuICAgICAgICAgICAgICAgIGlmIChyZXRbal0gPT09IGtleVdpdGhvdXRBc3luY1N1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHByb21pc2lmeSBhbiBBUEkgdGhhdCBoYXMgbm9ybWFsIG1ldGhvZHMgd2l0aCAnJXMnLXN1ZmZpeFxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL2lXclpid1xcdTAwMGFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoXCIlc1wiLCBzdWZmaXgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHByb21pc2lmaWFibGVNZXRob2RzKG9iaiwgc3VmZml4LCBzdWZmaXhSZWdleHAsIGZpbHRlcikge1xuICAgIHZhciBrZXlzID0gdXRpbC5pbmhlcml0ZWREYXRhS2V5cyhvYmopO1xuICAgIHZhciByZXQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICB2YXIgcGFzc2VzRGVmYXVsdEZpbHRlciA9IGZpbHRlciA9PT0gZGVmYXVsdEZpbHRlclxuICAgICAgICAgICAgPyB0cnVlIDogZGVmYXVsdEZpbHRlcihrZXksIHZhbHVlLCBvYmopO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgICAgICFpc1Byb21pc2lmaWVkKHZhbHVlKSAmJlxuICAgICAgICAgICAgIWhhc1Byb21pc2lmaWVkKG9iaiwga2V5LCBzdWZmaXgpICYmXG4gICAgICAgICAgICBmaWx0ZXIoa2V5LCB2YWx1ZSwgb2JqLCBwYXNzZXNEZWZhdWx0RmlsdGVyKSkge1xuICAgICAgICAgICAgcmV0LnB1c2goa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tWYWxpZChyZXQsIHN1ZmZpeCwgc3VmZml4UmVnZXhwKTtcbiAgICByZXR1cm4gcmV0O1xufVxuXG52YXIgZXNjYXBlSWRlbnRSZWdleCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvKFskXSkvLCBcIlxcXFwkXCIpO1xufTtcblxudmFyIG1ha2VOb2RlUHJvbWlzaWZpZWRFdmFsO1xuaWYgKCF0cnVlKSB7XG52YXIgc3dpdGNoQ2FzZUFyZ3VtZW50T3JkZXIgPSBmdW5jdGlvbihsaWtlbHlBcmd1bWVudENvdW50KSB7XG4gICAgdmFyIHJldCA9IFtsaWtlbHlBcmd1bWVudENvdW50XTtcbiAgICB2YXIgbWluID0gTWF0aC5tYXgoMCwgbGlrZWx5QXJndW1lbnRDb3VudCAtIDEgLSAzKTtcbiAgICBmb3IodmFyIGkgPSBsaWtlbHlBcmd1bWVudENvdW50IC0gMTsgaSA+PSBtaW47IC0taSkge1xuICAgICAgICByZXQucHVzaChpKTtcbiAgICB9XG4gICAgZm9yKHZhciBpID0gbGlrZWx5QXJndW1lbnRDb3VudCArIDE7IGkgPD0gMzsgKytpKSB7XG4gICAgICAgIHJldC5wdXNoKGkpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxudmFyIGFyZ3VtZW50U2VxdWVuY2UgPSBmdW5jdGlvbihhcmd1bWVudENvdW50KSB7XG4gICAgcmV0dXJuIHV0aWwuZmlsbGVkUmFuZ2UoYXJndW1lbnRDb3VudCwgXCJfYXJnXCIsIFwiXCIpO1xufTtcblxudmFyIHBhcmFtZXRlckRlY2xhcmF0aW9uID0gZnVuY3Rpb24ocGFyYW1ldGVyQ291bnQpIHtcbiAgICByZXR1cm4gdXRpbC5maWxsZWRSYW5nZShcbiAgICAgICAgTWF0aC5tYXgocGFyYW1ldGVyQ291bnQsIDMpLCBcIl9hcmdcIiwgXCJcIik7XG59O1xuXG52YXIgcGFyYW1ldGVyQ291bnQgPSBmdW5jdGlvbihmbikge1xuICAgIGlmICh0eXBlb2YgZm4ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihmbi5sZW5ndGgsIDEwMjMgKyAxKSwgMCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xufTtcblxubWFrZU5vZGVQcm9taXNpZmllZEV2YWwgPVxuZnVuY3Rpb24oY2FsbGJhY2ssIHJlY2VpdmVyLCBvcmlnaW5hbE5hbWUsIGZuKSB7XG4gICAgdmFyIG5ld1BhcmFtZXRlckNvdW50ID0gTWF0aC5tYXgoMCwgcGFyYW1ldGVyQ291bnQoZm4pIC0gMSk7XG4gICAgdmFyIGFyZ3VtZW50T3JkZXIgPSBzd2l0Y2hDYXNlQXJndW1lbnRPcmRlcihuZXdQYXJhbWV0ZXJDb3VudCk7XG4gICAgdmFyIHNob3VsZFByb3h5VGhpcyA9IHR5cGVvZiBjYWxsYmFjayA9PT0gXCJzdHJpbmdcIiB8fCByZWNlaXZlciA9PT0gVEhJUztcblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlQ2FsbEZvckFyZ3VtZW50Q291bnQoY291bnQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudFNlcXVlbmNlKGNvdW50KS5qb2luKFwiLCBcIik7XG4gICAgICAgIHZhciBjb21tYSA9IGNvdW50ID4gMCA/IFwiLCBcIiA6IFwiXCI7XG4gICAgICAgIHZhciByZXQ7XG4gICAgICAgIGlmIChzaG91bGRQcm94eVRoaXMpIHtcbiAgICAgICAgICAgIHJldCA9IFwicmV0ID0gY2FsbGJhY2suY2FsbCh0aGlzLCB7e2FyZ3N9fSwgbm9kZWJhY2spOyBicmVhaztcXG5cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldCA9IHJlY2VpdmVyID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IFwicmV0ID0gY2FsbGJhY2soe3thcmdzfX0sIG5vZGViYWNrKTsgYnJlYWs7XFxuXCJcbiAgICAgICAgICAgICAgICA6IFwicmV0ID0gY2FsbGJhY2suY2FsbChyZWNlaXZlciwge3thcmdzfX0sIG5vZGViYWNrKTsgYnJlYWs7XFxuXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldC5yZXBsYWNlKFwie3thcmdzfX1cIiwgYXJncykucmVwbGFjZShcIiwgXCIsIGNvbW1hKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUFyZ3VtZW50U3dpdGNoQ2FzZSgpIHtcbiAgICAgICAgdmFyIHJldCA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRPcmRlci5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgcmV0ICs9IFwiY2FzZSBcIiArIGFyZ3VtZW50T3JkZXJbaV0gK1wiOlwiICtcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUNhbGxGb3JBcmd1bWVudENvdW50KGFyZ3VtZW50T3JkZXJbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0ICs9IFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgIGRlZmF1bHQ6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShsZW4gKyAxKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICB2YXIgaSA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBhcmdzW2ldID0gbm9kZWJhY2s7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBbQ29kZUZvckNhbGxdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBicmVhazsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgIFwiLnJlcGxhY2UoXCJbQ29kZUZvckNhbGxdXCIsIChzaG91bGRQcm94eVRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcInJldCA9IGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MpO1xcblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJyZXQgPSBjYWxsYmFjay5hcHBseShyZWNlaXZlciwgYXJncyk7XFxuXCIpKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICB2YXIgZ2V0RnVuY3Rpb25Db2RlID0gdHlwZW9mIGNhbGxiYWNrID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKFwidGhpcyAhPSBudWxsID8gdGhpc1snXCIrY2FsbGJhY2srXCInXSA6IGZuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJmblwiO1xuXG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbihcIlByb21pc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZm5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwid2l0aEFwcGVuZGVkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm1heWJlV3JhcEFzRXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibm9kZWJhY2tGb3JQcm9taXNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRyeUNhdGNoXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImVycm9yT2JqXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5vdEVudW1lcmFibGVQcm9wXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIklOVEVSTkFMXCIsXCIndXNlIHN0cmljdCc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgIHZhciByZXQgPSBmdW5jdGlvbiAoUGFyYW1ldGVycykgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICAndXNlIHN0cmljdCc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBwcm9taXNlLl9jYXB0dXJlU3RhY2tUcmFjZSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICB2YXIgbm9kZWJhY2sgPSBub2RlYmFja0ZvclByb21pc2UocHJvbWlzZSk7ICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICB2YXIgcmV0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSB0cnlDYXRjaChbR2V0RnVuY3Rpb25Db2RlXSk7ICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBzd2l0Y2gobGVuKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICAgICAgW0NvZGVGb3JTd2l0Y2hDYXNlXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBpZiAocmV0ID09PSBlcnJvck9iaikgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICAgICAgcHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2sobWF5YmVXcmFwQXNFcnJvcihyZXQuZSksIHRydWUsIHRydWUpO1xcblxcXG4gICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgIG5vdEVudW1lcmFibGVQcm9wKHJldCwgJ19faXNQcm9taXNpZmllZF9fJywgdHJ1ZSk7ICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgIHJldHVybiByZXQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgIFwiXG4gICAgICAgIC5yZXBsYWNlKFwiUGFyYW1ldGVyc1wiLCBwYXJhbWV0ZXJEZWNsYXJhdGlvbihuZXdQYXJhbWV0ZXJDb3VudCkpXG4gICAgICAgIC5yZXBsYWNlKFwiW0NvZGVGb3JTd2l0Y2hDYXNlXVwiLCBnZW5lcmF0ZUFyZ3VtZW50U3dpdGNoQ2FzZSgpKVxuICAgICAgICAucmVwbGFjZShcIltHZXRGdW5jdGlvbkNvZGVdXCIsIGdldEZ1bmN0aW9uQ29kZSkpKFxuICAgICAgICAgICAgUHJvbWlzZSxcbiAgICAgICAgICAgIGZuLFxuICAgICAgICAgICAgcmVjZWl2ZXIsXG4gICAgICAgICAgICB3aXRoQXBwZW5kZWQsXG4gICAgICAgICAgICBtYXliZVdyYXBBc0Vycm9yLFxuICAgICAgICAgICAgbm9kZWJhY2tGb3JQcm9taXNlLFxuICAgICAgICAgICAgdXRpbC50cnlDYXRjaCxcbiAgICAgICAgICAgIHV0aWwuZXJyb3JPYmosXG4gICAgICAgICAgICB1dGlsLm5vdEVudW1lcmFibGVQcm9wLFxuICAgICAgICAgICAgSU5URVJOQUxcbiAgICAgICAgKTtcbn07XG59XG5cbmZ1bmN0aW9uIG1ha2VOb2RlUHJvbWlzaWZpZWRDbG9zdXJlKGNhbGxiYWNrLCByZWNlaXZlciwgXywgZm4pIHtcbiAgICB2YXIgZGVmYXVsdFRoaXMgPSAoZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXM7fSkoKTtcbiAgICB2YXIgbWV0aG9kID0gY2FsbGJhY2s7XG4gICAgaWYgKHR5cGVvZiBtZXRob2QgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBmbjtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJvbWlzaWZpZWQoKSB7XG4gICAgICAgIHZhciBfcmVjZWl2ZXIgPSByZWNlaXZlcjtcbiAgICAgICAgaWYgKHJlY2VpdmVyID09PSBUSElTKSBfcmVjZWl2ZXIgPSB0aGlzO1xuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICAgICAgcHJvbWlzZS5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICAgICAgdmFyIGNiID0gdHlwZW9mIG1ldGhvZCA9PT0gXCJzdHJpbmdcIiAmJiB0aGlzICE9PSBkZWZhdWx0VGhpc1xuICAgICAgICAgICAgPyB0aGlzW21ldGhvZF0gOiBjYWxsYmFjaztcbiAgICAgICAgdmFyIGZuID0gbm9kZWJhY2tGb3JQcm9taXNlKHByb21pc2UpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2IuYXBwbHkoX3JlY2VpdmVyLCB3aXRoQXBwZW5kZWQoYXJndW1lbnRzLCBmbikpO1xuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgIHByb21pc2UuX3JlamVjdENhbGxiYWNrKG1heWJlV3JhcEFzRXJyb3IoZSksIHRydWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICB1dGlsLm5vdEVudW1lcmFibGVQcm9wKHByb21pc2lmaWVkLCBcIl9faXNQcm9taXNpZmllZF9fXCIsIHRydWUpO1xuICAgIHJldHVybiBwcm9taXNpZmllZDtcbn1cblxudmFyIG1ha2VOb2RlUHJvbWlzaWZpZWQgPSBjYW5FdmFsdWF0ZVxuICAgID8gbWFrZU5vZGVQcm9taXNpZmllZEV2YWxcbiAgICA6IG1ha2VOb2RlUHJvbWlzaWZpZWRDbG9zdXJlO1xuXG5mdW5jdGlvbiBwcm9taXNpZnlBbGwob2JqLCBzdWZmaXgsIGZpbHRlciwgcHJvbWlzaWZpZXIpIHtcbiAgICB2YXIgc3VmZml4UmVnZXhwID0gbmV3IFJlZ0V4cChlc2NhcGVJZGVudFJlZ2V4KHN1ZmZpeCkgKyBcIiRcIik7XG4gICAgdmFyIG1ldGhvZHMgPVxuICAgICAgICBwcm9taXNpZmlhYmxlTWV0aG9kcyhvYmosIHN1ZmZpeCwgc3VmZml4UmVnZXhwLCBmaWx0ZXIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuOyBpKz0gMikge1xuICAgICAgICB2YXIga2V5ID0gbWV0aG9kc1tpXTtcbiAgICAgICAgdmFyIGZuID0gbWV0aG9kc1tpKzFdO1xuICAgICAgICB2YXIgcHJvbWlzaWZpZWRLZXkgPSBrZXkgKyBzdWZmaXg7XG4gICAgICAgIG9ialtwcm9taXNpZmllZEtleV0gPSBwcm9taXNpZmllciA9PT0gbWFrZU5vZGVQcm9taXNpZmllZFxuICAgICAgICAgICAgICAgID8gbWFrZU5vZGVQcm9taXNpZmllZChrZXksIFRISVMsIGtleSwgZm4sIHN1ZmZpeClcbiAgICAgICAgICAgICAgICA6IHByb21pc2lmaWVyKGZuLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VOb2RlUHJvbWlzaWZpZWQoa2V5LCBUSElTLCBrZXksIGZuLCBzdWZmaXgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICB1dGlsLnRvRmFzdFByb3BlcnRpZXMob2JqKTtcbiAgICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBwcm9taXNpZnkoY2FsbGJhY2ssIHJlY2VpdmVyKSB7XG4gICAgcmV0dXJuIG1ha2VOb2RlUHJvbWlzaWZpZWQoY2FsbGJhY2ssIHJlY2VpdmVyLCB1bmRlZmluZWQsIGNhbGxiYWNrKTtcbn1cblxuUHJvbWlzZS5wcm9taXNpZnkgPSBmdW5jdGlvbiAoZm4sIHJlY2VpdmVyKSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJmbiBtdXN0IGJlIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC85MTZsSkpcXHUwMDBhXCIpO1xuICAgIH1cbiAgICBpZiAoaXNQcm9taXNpZmllZChmbikpIHtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgICB2YXIgcmV0ID0gcHJvbWlzaWZ5KGZuLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IFRISVMgOiByZWNlaXZlcik7XG4gICAgdXRpbC5jb3B5RGVzY3JpcHRvcnMoZm4sIHJldCwgcHJvcHNGaWx0ZXIpO1xuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLnByb21pc2lmeUFsbCA9IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInRoZSB0YXJnZXQgb2YgcHJvbWlzaWZ5QWxsIG11c3QgYmUgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC85SVRsVjBcXHUwMDBhXCIpO1xuICAgIH1cbiAgICBvcHRpb25zID0gT2JqZWN0KG9wdGlvbnMpO1xuICAgIHZhciBzdWZmaXggPSBvcHRpb25zLnN1ZmZpeDtcbiAgICBpZiAodHlwZW9mIHN1ZmZpeCAhPT0gXCJzdHJpbmdcIikgc3VmZml4ID0gZGVmYXVsdFN1ZmZpeDtcbiAgICB2YXIgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09IFwiZnVuY3Rpb25cIikgZmlsdGVyID0gZGVmYXVsdEZpbHRlcjtcbiAgICB2YXIgcHJvbWlzaWZpZXIgPSBvcHRpb25zLnByb21pc2lmaWVyO1xuICAgIGlmICh0eXBlb2YgcHJvbWlzaWZpZXIgIT09IFwiZnVuY3Rpb25cIikgcHJvbWlzaWZpZXIgPSBtYWtlTm9kZVByb21pc2lmaWVkO1xuXG4gICAgaWYgKCF1dGlsLmlzSWRlbnRpZmllcihzdWZmaXgpKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwic3VmZml4IG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvOEZabzVWXFx1MDAwYVwiKTtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IHV0aWwuaW5oZXJpdGVkRGF0YUtleXModGFyZ2V0KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGFyZ2V0W2tleXNbaV1dO1xuICAgICAgICBpZiAoa2V5c1tpXSAhPT0gXCJjb25zdHJ1Y3RvclwiICYmXG4gICAgICAgICAgICB1dGlsLmlzQ2xhc3ModmFsdWUpKSB7XG4gICAgICAgICAgICBwcm9taXNpZnlBbGwodmFsdWUucHJvdG90eXBlLCBzdWZmaXgsIGZpbHRlciwgcHJvbWlzaWZpZXIpO1xuICAgICAgICAgICAgcHJvbWlzaWZ5QWxsKHZhbHVlLCBzdWZmaXgsIGZpbHRlciwgcHJvbWlzaWZpZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2lmeUFsbCh0YXJnZXQsIHN1ZmZpeCwgZmlsdGVyLCBwcm9taXNpZmllcik7XG59O1xufTtcblxuXG59LHtcIi4vZXJyb3JzXCI6MTMsXCIuL3Byb21pc2VfcmVzb2x2ZXIuanNcIjoyNSxcIi4vdXRpbC5qc1wiOjM4fV0sMjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFxuICAgIFByb21pc2UsIFByb21pc2VBcnJheSwgdHJ5Q29udmVydFRvUHJvbWlzZSwgYXBpUmVqZWN0aW9uKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgaXNPYmplY3QgPSB1dGlsLmlzT2JqZWN0O1xudmFyIGVzNSA9IF9kZXJlcV8oXCIuL2VzNS5qc1wiKTtcblxuZnVuY3Rpb24gUHJvcGVydGllc1Byb21pc2VBcnJheShvYmopIHtcbiAgICB2YXIga2V5cyA9IGVzNS5rZXlzKG9iaik7XG4gICAgdmFyIGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuICogMik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFsdWVzW2ldID0gb2JqW2tleV07XG4gICAgICAgIHZhbHVlc1tpICsgbGVuXSA9IGtleTtcbiAgICB9XG4gICAgdGhpcy5jb25zdHJ1Y3RvciQodmFsdWVzKTtcbn1cbnV0aWwuaW5oZXJpdHMoUHJvcGVydGllc1Byb21pc2VBcnJheSwgUHJvbWlzZUFycmF5KTtcblxuUHJvcGVydGllc1Byb21pc2VBcnJheS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5faW5pdCQodW5kZWZpbmVkLCAtMykgO1xufTtcblxuUHJvcGVydGllc1Byb21pc2VBcnJheS5wcm90b3R5cGUuX3Byb21pc2VGdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgdGhpcy5fdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgIHZhciB0b3RhbFJlc29sdmVkID0gKyt0aGlzLl90b3RhbFJlc29sdmVkO1xuICAgIGlmICh0b3RhbFJlc29sdmVkID49IHRoaXMuX2xlbmd0aCkge1xuICAgICAgICB2YXIgdmFsID0ge307XG4gICAgICAgIHZhciBrZXlPZmZzZXQgPSB0aGlzLmxlbmd0aCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5sZW5ndGgoKTsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICB2YWxbdGhpcy5fdmFsdWVzW2kgKyBrZXlPZmZzZXRdXSA9IHRoaXMuX3ZhbHVlc1tpXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXNvbHZlKHZhbCk7XG4gICAgfVxufTtcblxuUHJvcGVydGllc1Byb21pc2VBcnJheS5wcm90b3R5cGUuX3Byb21pc2VQcm9ncmVzc2VkID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgIHRoaXMuX3Byb21pc2UuX3Byb2dyZXNzKHtcbiAgICAgICAga2V5OiB0aGlzLl92YWx1ZXNbaW5kZXggKyB0aGlzLmxlbmd0aCgpXSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSk7XG59O1xuXG5Qcm9wZXJ0aWVzUHJvbWlzZUFycmF5LnByb3RvdHlwZS5zaG91bGRDb3B5VmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cblByb3BlcnRpZXNQcm9taXNlQXJyYXkucHJvdG90eXBlLmdldEFjdHVhbExlbmd0aCA9IGZ1bmN0aW9uIChsZW4pIHtcbiAgICByZXR1cm4gbGVuID4+IDE7XG59O1xuXG5mdW5jdGlvbiBwcm9wcyhwcm9taXNlcykge1xuICAgIHZhciByZXQ7XG4gICAgdmFyIGNhc3RWYWx1ZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UocHJvbWlzZXMpO1xuXG4gICAgaWYgKCFpc09iamVjdChjYXN0VmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJjYW5ub3QgYXdhaXQgcHJvcGVydGllcyBvZiBhIG5vbi1vYmplY3RcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9Pc0ZLQzhcXHUwMDBhXCIpO1xuICAgIH0gZWxzZSBpZiAoY2FzdFZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICByZXQgPSBjYXN0VmFsdWUuX3RoZW4oXG4gICAgICAgICAgICBQcm9taXNlLnByb3BzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldCA9IG5ldyBQcm9wZXJ0aWVzUHJvbWlzZUFycmF5KGNhc3RWYWx1ZSkucHJvbWlzZSgpO1xuICAgIH1cblxuICAgIGlmIChjYXN0VmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHJldC5fcHJvcGFnYXRlRnJvbShjYXN0VmFsdWUsIDQpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5wcm9wcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcHJvcHModGhpcyk7XG59O1xuXG5Qcm9taXNlLnByb3BzID0gZnVuY3Rpb24gKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIHByb3BzKHByb21pc2VzKTtcbn07XG59O1xuXG59LHtcIi4vZXM1LmpzXCI6MTQsXCIuL3V0aWwuanNcIjozOH1dLDI4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gYXJyYXlNb3ZlKHNyYywgc3JjSW5kZXgsIGRzdCwgZHN0SW5kZXgsIGxlbikge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyArK2opIHtcbiAgICAgICAgZHN0W2ogKyBkc3RJbmRleF0gPSBzcmNbaiArIHNyY0luZGV4XTtcbiAgICAgICAgc3JjW2ogKyBzcmNJbmRleF0gPSB2b2lkIDA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBRdWV1ZShjYXBhY2l0eSkge1xuICAgIHRoaXMuX2NhcGFjaXR5ID0gY2FwYWNpdHk7XG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICB0aGlzLl9mcm9udCA9IDA7XG59XG5cblF1ZXVlLnByb3RvdHlwZS5fd2lsbEJlT3ZlckNhcGFjaXR5ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FwYWNpdHkgPCBzaXplO1xufTtcblxuUXVldWUucHJvdG90eXBlLl9wdXNoT25lID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuICAgIHRoaXMuX2NoZWNrQ2FwYWNpdHkobGVuZ3RoICsgMSk7XG4gICAgdmFyIGkgPSAodGhpcy5fZnJvbnQgKyBsZW5ndGgpICYgKHRoaXMuX2NhcGFjaXR5IC0gMSk7XG4gICAgdGhpc1tpXSA9IGFyZztcbiAgICB0aGlzLl9sZW5ndGggPSBsZW5ndGggKyAxO1xufTtcblxuUXVldWUucHJvdG90eXBlLl91bnNoaWZ0T25lID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgY2FwYWNpdHkgPSB0aGlzLl9jYXBhY2l0eTtcbiAgICB0aGlzLl9jaGVja0NhcGFjaXR5KHRoaXMubGVuZ3RoKCkgKyAxKTtcbiAgICB2YXIgZnJvbnQgPSB0aGlzLl9mcm9udDtcbiAgICB2YXIgaSA9ICgoKCggZnJvbnQgLSAxICkgJlxuICAgICAgICAgICAgICAgICAgICAoIGNhcGFjaXR5IC0gMSkgKSBeIGNhcGFjaXR5ICkgLSBjYXBhY2l0eSApO1xuICAgIHRoaXNbaV0gPSB2YWx1ZTtcbiAgICB0aGlzLl9mcm9udCA9IGk7XG4gICAgdGhpcy5fbGVuZ3RoID0gdGhpcy5sZW5ndGgoKSArIDE7XG59O1xuXG5RdWV1ZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uKGZuLCByZWNlaXZlciwgYXJnKSB7XG4gICAgdGhpcy5fdW5zaGlmdE9uZShhcmcpO1xuICAgIHRoaXMuX3Vuc2hpZnRPbmUocmVjZWl2ZXIpO1xuICAgIHRoaXMuX3Vuc2hpZnRPbmUoZm4pO1xufTtcblxuUXVldWUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZm4sIHJlY2VpdmVyLCBhcmcpIHtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKSArIDM7XG4gICAgaWYgKHRoaXMuX3dpbGxCZU92ZXJDYXBhY2l0eShsZW5ndGgpKSB7XG4gICAgICAgIHRoaXMuX3B1c2hPbmUoZm4pO1xuICAgICAgICB0aGlzLl9wdXNoT25lKHJlY2VpdmVyKTtcbiAgICAgICAgdGhpcy5fcHVzaE9uZShhcmcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBqID0gdGhpcy5fZnJvbnQgKyBsZW5ndGggLSAzO1xuICAgIHRoaXMuX2NoZWNrQ2FwYWNpdHkobGVuZ3RoKTtcbiAgICB2YXIgd3JhcE1hc2sgPSB0aGlzLl9jYXBhY2l0eSAtIDE7XG4gICAgdGhpc1soaiArIDApICYgd3JhcE1hc2tdID0gZm47XG4gICAgdGhpc1soaiArIDEpICYgd3JhcE1hc2tdID0gcmVjZWl2ZXI7XG4gICAgdGhpc1soaiArIDIpICYgd3JhcE1hc2tdID0gYXJnO1xuICAgIHRoaXMuX2xlbmd0aCA9IGxlbmd0aDtcbn07XG5cblF1ZXVlLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnJvbnQgPSB0aGlzLl9mcm9udCxcbiAgICAgICAgcmV0ID0gdGhpc1tmcm9udF07XG5cbiAgICB0aGlzW2Zyb250XSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9mcm9udCA9IChmcm9udCArIDEpICYgKHRoaXMuX2NhcGFjaXR5IC0gMSk7XG4gICAgdGhpcy5fbGVuZ3RoLS07XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblF1ZXVlLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbn07XG5cblF1ZXVlLnByb3RvdHlwZS5fY2hlY2tDYXBhY2l0eSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgaWYgKHRoaXMuX2NhcGFjaXR5IDwgc2l6ZSkge1xuICAgICAgICB0aGlzLl9yZXNpemVUbyh0aGlzLl9jYXBhY2l0eSA8PCAxKTtcbiAgICB9XG59O1xuXG5RdWV1ZS5wcm90b3R5cGUuX3Jlc2l6ZVRvID0gZnVuY3Rpb24gKGNhcGFjaXR5KSB7XG4gICAgdmFyIG9sZENhcGFjaXR5ID0gdGhpcy5fY2FwYWNpdHk7XG4gICAgdGhpcy5fY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgICB2YXIgZnJvbnQgPSB0aGlzLl9mcm9udDtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5fbGVuZ3RoO1xuICAgIHZhciBtb3ZlSXRlbXNDb3VudCA9IChmcm9udCArIGxlbmd0aCkgJiAob2xkQ2FwYWNpdHkgLSAxKTtcbiAgICBhcnJheU1vdmUodGhpcywgMCwgdGhpcywgb2xkQ2FwYWNpdHksIG1vdmVJdGVtc0NvdW50KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUXVldWU7XG5cbn0se31dLDI5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihcbiAgICBQcm9taXNlLCBJTlRFUk5BTCwgdHJ5Q29udmVydFRvUHJvbWlzZSwgYXBpUmVqZWN0aW9uKSB7XG52YXIgaXNBcnJheSA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIikuaXNBcnJheTtcblxudmFyIHJhY2VMYXRlciA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbihhcnJheSkge1xuICAgICAgICByZXR1cm4gcmFjZShhcnJheSwgcHJvbWlzZSk7XG4gICAgfSk7XG59O1xuXG5mdW5jdGlvbiByYWNlKHByb21pc2VzLCBwYXJlbnQpIHtcbiAgICB2YXIgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZShwcm9taXNlcyk7XG5cbiAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICByZXR1cm4gcmFjZUxhdGVyKG1heWJlUHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmICghaXNBcnJheShwcm9taXNlcykpIHtcbiAgICAgICAgcmV0dXJuIGFwaVJlamVjdGlvbihcImV4cGVjdGluZyBhbiBhcnJheSwgYSBwcm9taXNlIG9yIGEgdGhlbmFibGVcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9zOE1NaGNcXHUwMDBhXCIpO1xuICAgIH1cblxuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgaWYgKHBhcmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldC5fcHJvcGFnYXRlRnJvbShwYXJlbnQsIDQgfCAxKTtcbiAgICB9XG4gICAgdmFyIGZ1bGZpbGwgPSByZXQuX2Z1bGZpbGw7XG4gICAgdmFyIHJlamVjdCA9IHJldC5fcmVqZWN0O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwcm9taXNlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICB2YXIgdmFsID0gcHJvbWlzZXNbaV07XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkICYmICEoaSBpbiBwcm9taXNlcykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgUHJvbWlzZS5jYXN0KHZhbCkuX3RoZW4oZnVsZmlsbCwgcmVqZWN0LCB1bmRlZmluZWQsIHJldCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cblByb21pc2UucmFjZSA9IGZ1bmN0aW9uIChwcm9taXNlcykge1xuICAgIHJldHVybiByYWNlKHByb21pc2VzLCB1bmRlZmluZWQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUucmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmFjZSh0aGlzLCB1bmRlZmluZWQpO1xufTtcblxufTtcblxufSx7XCIuL3V0aWwuanNcIjozOH1dLDMwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9taXNlQXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFwaVJlamVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Q29udmVydFRvUHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgSU5URVJOQUwpIHtcbnZhciBhc3luYyA9IF9kZXJlcV8oXCIuL2FzeW5jLmpzXCIpO1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xudmFyIHRyeUNhdGNoID0gdXRpbC50cnlDYXRjaDtcbnZhciBlcnJvck9iaiA9IHV0aWwuZXJyb3JPYmo7XG5mdW5jdGlvbiBSZWR1Y3Rpb25Qcm9taXNlQXJyYXkocHJvbWlzZXMsIGZuLCBhY2N1bSwgX2VhY2gpIHtcbiAgICB0aGlzLmNvbnN0cnVjdG9yJChwcm9taXNlcyk7XG4gICAgdGhpcy5fcHJvbWlzZS5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICB0aGlzLl9wcmVzZXJ2ZWRWYWx1ZXMgPSBfZWFjaCA9PT0gSU5URVJOQUwgPyBbXSA6IG51bGw7XG4gICAgdGhpcy5femVyb3RoSXNBY2N1bSA9IChhY2N1bSA9PT0gdW5kZWZpbmVkKTtcbiAgICB0aGlzLl9nb3RBY2N1bSA9IGZhbHNlO1xuICAgIHRoaXMuX3JlZHVjaW5nSW5kZXggPSAodGhpcy5femVyb3RoSXNBY2N1bSA/IDEgOiAwKTtcbiAgICB0aGlzLl92YWx1ZXNQaGFzZSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZShhY2N1bSwgdGhpcy5fcHJvbWlzZSk7XG4gICAgdmFyIHJlamVjdGVkID0gZmFsc2U7XG4gICAgdmFyIGlzUHJvbWlzZSA9IG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2U7XG4gICAgaWYgKGlzUHJvbWlzZSkge1xuICAgICAgICBtYXliZVByb21pc2UgPSBtYXliZVByb21pc2UuX3RhcmdldCgpO1xuICAgICAgICBpZiAobWF5YmVQcm9taXNlLl9pc1BlbmRpbmcoKSkge1xuICAgICAgICAgICAgbWF5YmVQcm9taXNlLl9wcm94eVByb21pc2VBcnJheSh0aGlzLCAtMSk7XG4gICAgICAgIH0gZWxzZSBpZiAobWF5YmVQcm9taXNlLl9pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgICAgICBhY2N1bSA9IG1heWJlUHJvbWlzZS5fdmFsdWUoKTtcbiAgICAgICAgICAgIHRoaXMuX2dvdEFjY3VtID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdChtYXliZVByb21pc2UuX3JlYXNvbigpKTtcbiAgICAgICAgICAgIHJlamVjdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIShpc1Byb21pc2UgfHwgdGhpcy5femVyb3RoSXNBY2N1bSkpIHRoaXMuX2dvdEFjY3VtID0gdHJ1ZTtcbiAgICB0aGlzLl9jYWxsYmFjayA9IGZuO1xuICAgIHRoaXMuX2FjY3VtID0gYWNjdW07XG4gICAgaWYgKCFyZWplY3RlZCkgYXN5bmMuaW52b2tlKGluaXQsIHRoaXMsIHVuZGVmaW5lZCk7XG59XG5mdW5jdGlvbiBpbml0KCkge1xuICAgIHRoaXMuX2luaXQkKHVuZGVmaW5lZCwgLTUpO1xufVxudXRpbC5pbmhlcml0cyhSZWR1Y3Rpb25Qcm9taXNlQXJyYXksIFByb21pc2VBcnJheSk7XG5cblJlZHVjdGlvblByb21pc2VBcnJheS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuUmVkdWN0aW9uUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcmVzb2x2ZUVtcHR5QXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX2dvdEFjY3VtIHx8IHRoaXMuX3plcm90aElzQWNjdW0pIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZSh0aGlzLl9wcmVzZXJ2ZWRWYWx1ZXMgIT09IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgID8gW10gOiB0aGlzLl9hY2N1bSk7XG4gICAgfVxufTtcblxuUmVkdWN0aW9uUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZUZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICB2YXIgdmFsdWVzID0gdGhpcy5fdmFsdWVzO1xuICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcbiAgICB2YXIgcHJlc2VydmVkVmFsdWVzID0gdGhpcy5fcHJlc2VydmVkVmFsdWVzO1xuICAgIHZhciBpc0VhY2ggPSBwcmVzZXJ2ZWRWYWx1ZXMgIT09IG51bGw7XG4gICAgdmFyIGdvdEFjY3VtID0gdGhpcy5fZ290QWNjdW07XG4gICAgdmFyIHZhbHVlc1BoYXNlID0gdGhpcy5fdmFsdWVzUGhhc2U7XG4gICAgdmFyIHZhbHVlc1BoYXNlSW5kZXg7XG4gICAgaWYgKCF2YWx1ZXNQaGFzZSkge1xuICAgICAgICB2YWx1ZXNQaGFzZSA9IHRoaXMuX3ZhbHVlc1BoYXNlID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgICAgIGZvciAodmFsdWVzUGhhc2VJbmRleD0wOyB2YWx1ZXNQaGFzZUluZGV4PGxlbmd0aDsgKyt2YWx1ZXNQaGFzZUluZGV4KSB7XG4gICAgICAgICAgICB2YWx1ZXNQaGFzZVt2YWx1ZXNQaGFzZUluZGV4XSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFsdWVzUGhhc2VJbmRleCA9IHZhbHVlc1BoYXNlW2luZGV4XTtcblxuICAgIGlmIChpbmRleCA9PT0gMCAmJiB0aGlzLl96ZXJvdGhJc0FjY3VtKSB7XG4gICAgICAgIHRoaXMuX2FjY3VtID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX2dvdEFjY3VtID0gZ290QWNjdW0gPSB0cnVlO1xuICAgICAgICB2YWx1ZXNQaGFzZVtpbmRleF0gPSAoKHZhbHVlc1BoYXNlSW5kZXggPT09IDApXG4gICAgICAgICAgICA/IDEgOiAyKTtcbiAgICB9IGVsc2UgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICB0aGlzLl9hY2N1bSA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9nb3RBY2N1bSA9IGdvdEFjY3VtID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodmFsdWVzUGhhc2VJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgdmFsdWVzUGhhc2VbaW5kZXhdID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlc1BoYXNlW2luZGV4XSA9IDI7XG4gICAgICAgICAgICB0aGlzLl9hY2N1bSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghZ290QWNjdW0pIHJldHVybjtcblxuICAgIHZhciBjYWxsYmFjayA9IHRoaXMuX2NhbGxiYWNrO1xuICAgIHZhciByZWNlaXZlciA9IHRoaXMuX3Byb21pc2UuX2JvdW5kVG87XG4gICAgdmFyIHJldDtcblxuICAgIGZvciAodmFyIGkgPSB0aGlzLl9yZWR1Y2luZ0luZGV4OyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFsdWVzUGhhc2VJbmRleCA9IHZhbHVlc1BoYXNlW2ldO1xuICAgICAgICBpZiAodmFsdWVzUGhhc2VJbmRleCA9PT0gMikge1xuICAgICAgICAgICAgdGhpcy5fcmVkdWNpbmdJbmRleCA9IGkgKyAxO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlc1BoYXNlSW5kZXggIT09IDEpIHJldHVybjtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgIHRoaXMuX3Byb21pc2UuX3B1c2hDb250ZXh0KCk7XG4gICAgICAgIGlmIChpc0VhY2gpIHtcbiAgICAgICAgICAgIHByZXNlcnZlZFZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIHJldCA9IHRyeUNhdGNoKGNhbGxiYWNrKS5jYWxsKHJlY2VpdmVyLCB2YWx1ZSwgaSwgbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldCA9IHRyeUNhdGNoKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgIC5jYWxsKHJlY2VpdmVyLCB0aGlzLl9hY2N1bSwgdmFsdWUsIGksIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvbWlzZS5fcG9wQ29udGV4dCgpO1xuXG4gICAgICAgIGlmIChyZXQgPT09IGVycm9yT2JqKSByZXR1cm4gdGhpcy5fcmVqZWN0KHJldC5lKTtcblxuICAgICAgICB2YXIgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZShyZXQsIHRoaXMuX3Byb21pc2UpO1xuICAgICAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgbWF5YmVQcm9taXNlID0gbWF5YmVQcm9taXNlLl90YXJnZXQoKTtcbiAgICAgICAgICAgIGlmIChtYXliZVByb21pc2UuX2lzUGVuZGluZygpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzUGhhc2VbaV0gPSA0O1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXliZVByb21pc2UuX3Byb3h5UHJvbWlzZUFycmF5KHRoaXMsIGkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXliZVByb21pc2UuX2lzRnVsZmlsbGVkKCkpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBtYXliZVByb21pc2UuX3ZhbHVlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWplY3QobWF5YmVQcm9taXNlLl9yZWFzb24oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZWR1Y2luZ0luZGV4ID0gaSArIDE7XG4gICAgICAgIHRoaXMuX2FjY3VtID0gcmV0O1xuICAgIH1cblxuICAgIHRoaXMuX3Jlc29sdmUoaXNFYWNoID8gcHJlc2VydmVkVmFsdWVzIDogdGhpcy5fYWNjdW0pO1xufTtcblxuZnVuY3Rpb24gcmVkdWNlKHByb21pc2VzLCBmbiwgaW5pdGlhbFZhbHVlLCBfZWFjaCkge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGFwaVJlamVjdGlvbihcImZuIG11c3QgYmUgYSBmdW5jdGlvblxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsLzkxNmxKSlxcdTAwMGFcIik7XG4gICAgdmFyIGFycmF5ID0gbmV3IFJlZHVjdGlvblByb21pc2VBcnJheShwcm9taXNlcywgZm4sIGluaXRpYWxWYWx1ZSwgX2VhY2gpO1xuICAgIHJldHVybiBhcnJheS5wcm9taXNlKCk7XG59XG5cblByb21pc2UucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChmbiwgaW5pdGlhbFZhbHVlKSB7XG4gICAgcmV0dXJuIHJlZHVjZSh0aGlzLCBmbiwgaW5pdGlhbFZhbHVlLCBudWxsKTtcbn07XG5cblByb21pc2UucmVkdWNlID0gZnVuY3Rpb24gKHByb21pc2VzLCBmbiwgaW5pdGlhbFZhbHVlLCBfZWFjaCkge1xuICAgIHJldHVybiByZWR1Y2UocHJvbWlzZXMsIGZuLCBpbml0aWFsVmFsdWUsIF9lYWNoKTtcbn07XG59O1xuXG59LHtcIi4vYXN5bmMuanNcIjoyLFwiLi91dGlsLmpzXCI6Mzh9XSwzMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBzY2hlZHVsZTtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbFwiKTtcbnZhciBub0FzeW5jU2NoZWR1bGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gYXN5bmMgc2NoZWR1bGVyIGF2YWlsYWJsZVxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL20zT1RYa1xcdTAwMGFcIik7XG59O1xuaWYgKHV0aWwuaXNOb2RlICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIEdsb2JhbFNldEltbWVkaWF0ZSA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG4gICAgdmFyIFByb2Nlc3NOZXh0VGljayA9IHByb2Nlc3MubmV4dFRpY2s7XG4gICAgc2NoZWR1bGUgPSB1dGlsLmlzUmVjZW50Tm9kZVxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oZm4pIHsgR2xvYmFsU2V0SW1tZWRpYXRlLmNhbGwoZ2xvYmFsLCBmbik7IH1cbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGZuKSB7IFByb2Nlc3NOZXh0VGljay5jYWxsKHByb2Nlc3MsIGZuKTsgfTtcbn0gZWxzZSBpZiAoKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSBcInVuZGVmaW5lZFwiKSAmJlxuICAgICAgICAgICEodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgICAgd2luZG93Lm5hdmlnYXRvciAmJlxuICAgICAgICAgICAgd2luZG93Lm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHNjaGVkdWxlID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZuKTtcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkaXYsIHthdHRyaWJ1dGVzOiB0cnVlfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsgZGl2LmNsYXNzTGlzdC50b2dnbGUoXCJmb29cIik7IH07XG4gICAgfTtcbiAgICBzY2hlZHVsZS5pc1N0YXRpYyA9IHRydWU7XG59IGVsc2UgaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBzY2hlZHVsZSA9IGZ1bmN0aW9uIChmbikge1xuICAgICAgICBzZXRJbW1lZGlhdGUoZm4pO1xuICAgIH07XG59IGVsc2UgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgc2NoZWR1bGUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0gZWxzZSB7XG4gICAgc2NoZWR1bGUgPSBub0FzeW5jU2NoZWR1bGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBzY2hlZHVsZTtcblxufSx7XCIuL3V0aWxcIjozOH1dLDMyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPVxuICAgIGZ1bmN0aW9uKFByb21pc2UsIFByb21pc2VBcnJheSkge1xudmFyIFByb21pc2VJbnNwZWN0aW9uID0gUHJvbWlzZS5Qcm9taXNlSW5zcGVjdGlvbjtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcblxuZnVuY3Rpb24gU2V0dGxlZFByb21pc2VBcnJheSh2YWx1ZXMpIHtcbiAgICB0aGlzLmNvbnN0cnVjdG9yJCh2YWx1ZXMpO1xufVxudXRpbC5pbmhlcml0cyhTZXR0bGVkUHJvbWlzZUFycmF5LCBQcm9taXNlQXJyYXkpO1xuXG5TZXR0bGVkUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZVJlc29sdmVkID0gZnVuY3Rpb24gKGluZGV4LCBpbnNwZWN0aW9uKSB7XG4gICAgdGhpcy5fdmFsdWVzW2luZGV4XSA9IGluc3BlY3Rpb247XG4gICAgdmFyIHRvdGFsUmVzb2x2ZWQgPSArK3RoaXMuX3RvdGFsUmVzb2x2ZWQ7XG4gICAgaWYgKHRvdGFsUmVzb2x2ZWQgPj0gdGhpcy5fbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmUodGhpcy5fdmFsdWVzKTtcbiAgICB9XG59O1xuXG5TZXR0bGVkUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZUZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2VJbnNwZWN0aW9uKCk7XG4gICAgcmV0Ll9iaXRGaWVsZCA9IDI2ODQzNTQ1NjtcbiAgICByZXQuX3NldHRsZWRWYWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuX3Byb21pc2VSZXNvbHZlZChpbmRleCwgcmV0KTtcbn07XG5TZXR0bGVkUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZVJlamVjdGVkID0gZnVuY3Rpb24gKHJlYXNvbiwgaW5kZXgpIHtcbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2VJbnNwZWN0aW9uKCk7XG4gICAgcmV0Ll9iaXRGaWVsZCA9IDEzNDIxNzcyODtcbiAgICByZXQuX3NldHRsZWRWYWx1ZSA9IHJlYXNvbjtcbiAgICB0aGlzLl9wcm9taXNlUmVzb2x2ZWQoaW5kZXgsIHJldCk7XG59O1xuXG5Qcm9taXNlLnNldHRsZSA9IGZ1bmN0aW9uIChwcm9taXNlcykge1xuICAgIHJldHVybiBuZXcgU2V0dGxlZFByb21pc2VBcnJheShwcm9taXNlcykucHJvbWlzZSgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuc2V0dGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU2V0dGxlZFByb21pc2VBcnJheSh0aGlzKS5wcm9taXNlKCk7XG59O1xufTtcblxufSx7XCIuL3V0aWwuanNcIjozOH1dLDMzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPVxuZnVuY3Rpb24oUHJvbWlzZSwgUHJvbWlzZUFycmF5LCBhcGlSZWplY3Rpb24pIHtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciBSYW5nZUVycm9yID0gX2RlcmVxXyhcIi4vZXJyb3JzLmpzXCIpLlJhbmdlRXJyb3I7XG52YXIgQWdncmVnYXRlRXJyb3IgPSBfZGVyZXFfKFwiLi9lcnJvcnMuanNcIikuQWdncmVnYXRlRXJyb3I7XG52YXIgaXNBcnJheSA9IHV0aWwuaXNBcnJheTtcblxuXG5mdW5jdGlvbiBTb21lUHJvbWlzZUFycmF5KHZhbHVlcykge1xuICAgIHRoaXMuY29uc3RydWN0b3IkKHZhbHVlcyk7XG4gICAgdGhpcy5faG93TWFueSA9IDA7XG4gICAgdGhpcy5fdW53cmFwID0gZmFsc2U7XG4gICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbn1cbnV0aWwuaW5oZXJpdHMoU29tZVByb21pc2VBcnJheSwgUHJvbWlzZUFycmF5KTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLl9ob3dNYW55ID09PSAwKSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmUoW10pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2luaXQkKHVuZGVmaW5lZCwgLTUpO1xuICAgIHZhciBpc0FycmF5UmVzb2x2ZWQgPSBpc0FycmF5KHRoaXMuX3ZhbHVlcyk7XG4gICAgaWYgKCF0aGlzLl9pc1Jlc29sdmVkKCkgJiZcbiAgICAgICAgaXNBcnJheVJlc29sdmVkICYmXG4gICAgICAgIHRoaXMuX2hvd01hbnkgPiB0aGlzLl9jYW5Qb3NzaWJseUZ1bGZpbGwoKSkge1xuICAgICAgICB0aGlzLl9yZWplY3QodGhpcy5fZ2V0UmFuZ2VFcnJvcih0aGlzLmxlbmd0aCgpKSk7XG4gICAgfVxufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgdGhpcy5faW5pdCgpO1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuc2V0VW53cmFwID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3Vud3JhcCA9IHRydWU7XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5ob3dNYW55ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9ob3dNYW55O1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuc2V0SG93TWFueSA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgIHRoaXMuX2hvd01hbnkgPSBjb3VudDtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlRnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5fYWRkRnVsZmlsbGVkKHZhbHVlKTtcbiAgICBpZiAodGhpcy5fZnVsZmlsbGVkKCkgPT09IHRoaXMuaG93TWFueSgpKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlcy5sZW5ndGggPSB0aGlzLmhvd01hbnkoKTtcbiAgICAgICAgaWYgKHRoaXMuaG93TWFueSgpID09PSAxICYmIHRoaXMuX3Vud3JhcCkge1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSh0aGlzLl92YWx1ZXNbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSh0aGlzLl92YWx1ZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX3Byb21pc2VSZWplY3RlZCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICB0aGlzLl9hZGRSZWplY3RlZChyZWFzb24pO1xuICAgIGlmICh0aGlzLmhvd01hbnkoKSA+IHRoaXMuX2NhblBvc3NpYmx5RnVsZmlsbCgpKSB7XG4gICAgICAgIHZhciBlID0gbmV3IEFnZ3JlZ2F0ZUVycm9yKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCgpOyBpIDwgdGhpcy5fdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBlLnB1c2godGhpcy5fdmFsdWVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZWplY3QoZSk7XG4gICAgfVxufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX2Z1bGZpbGxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fdG90YWxSZXNvbHZlZDtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLl9yZWplY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVzLmxlbmd0aCAtIHRoaXMubGVuZ3RoKCk7XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fYWRkUmVqZWN0ZWQgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgdGhpcy5fdmFsdWVzLnB1c2gocmVhc29uKTtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLl9hZGRGdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLl92YWx1ZXNbdGhpcy5fdG90YWxSZXNvbHZlZCsrXSA9IHZhbHVlO1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX2NhblBvc3NpYmx5RnVsZmlsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGgoKSAtIHRoaXMuX3JlamVjdGVkKCk7XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fZ2V0UmFuZ2VFcnJvciA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgIHZhciBtZXNzYWdlID0gXCJJbnB1dCBhcnJheSBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgXCIgK1xuICAgICAgICAgICAgdGhpcy5faG93TWFueSArIFwiIGl0ZW1zIGJ1dCBjb250YWlucyBvbmx5IFwiICsgY291bnQgKyBcIiBpdGVtc1wiO1xuICAgIHJldHVybiBuZXcgUmFuZ2VFcnJvcihtZXNzYWdlKTtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLl9yZXNvbHZlRW1wdHlBcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9yZWplY3QodGhpcy5fZ2V0UmFuZ2VFcnJvcigwKSk7XG59O1xuXG5mdW5jdGlvbiBzb21lKHByb21pc2VzLCBob3dNYW55KSB7XG4gICAgaWYgKChob3dNYW55IHwgMCkgIT09IGhvd01hbnkgfHwgaG93TWFueSA8IDApIHtcbiAgICAgICAgcmV0dXJuIGFwaVJlamVjdGlvbihcImV4cGVjdGluZyBhIHBvc2l0aXZlIGludGVnZXJcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC8xd0FtSHhcXHUwMDBhXCIpO1xuICAgIH1cbiAgICB2YXIgcmV0ID0gbmV3IFNvbWVQcm9taXNlQXJyYXkocHJvbWlzZXMpO1xuICAgIHZhciBwcm9taXNlID0gcmV0LnByb21pc2UoKTtcbiAgICByZXQuc2V0SG93TWFueShob3dNYW55KTtcbiAgICByZXQuaW5pdCgpO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5Qcm9taXNlLnNvbWUgPSBmdW5jdGlvbiAocHJvbWlzZXMsIGhvd01hbnkpIHtcbiAgICByZXR1cm4gc29tZShwcm9taXNlcywgaG93TWFueSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5zb21lID0gZnVuY3Rpb24gKGhvd01hbnkpIHtcbiAgICByZXR1cm4gc29tZSh0aGlzLCBob3dNYW55KTtcbn07XG5cblByb21pc2UuX1NvbWVQcm9taXNlQXJyYXkgPSBTb21lUHJvbWlzZUFycmF5O1xufTtcblxufSx7XCIuL2Vycm9ycy5qc1wiOjEzLFwiLi91dGlsLmpzXCI6Mzh9XSwzNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSkge1xuZnVuY3Rpb24gUHJvbWlzZUluc3BlY3Rpb24ocHJvbWlzZSkge1xuICAgIGlmIChwcm9taXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UuX3RhcmdldCgpO1xuICAgICAgICB0aGlzLl9iaXRGaWVsZCA9IHByb21pc2UuX2JpdEZpZWxkO1xuICAgICAgICB0aGlzLl9zZXR0bGVkVmFsdWUgPSBwcm9taXNlLl9zZXR0bGVkVmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLl9iaXRGaWVsZCA9IDA7XG4gICAgICAgIHRoaXMuX3NldHRsZWRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG59XG5cblByb21pc2VJbnNwZWN0aW9uLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuaXNGdWxmaWxsZWQoKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2Fubm90IGdldCBmdWxmaWxsbWVudCB2YWx1ZSBvZiBhIG5vbi1mdWxmaWxsZWQgcHJvbWlzZVxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL2hjMURMalxcdTAwMGFcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zZXR0bGVkVmFsdWU7XG59O1xuXG5Qcm9taXNlSW5zcGVjdGlvbi5wcm90b3R5cGUuZXJyb3IgPVxuUHJvbWlzZUluc3BlY3Rpb24ucHJvdG90eXBlLnJlYXNvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuaXNSZWplY3RlZCgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW5ub3QgZ2V0IHJlamVjdGlvbiByZWFzb24gb2YgYSBub24tcmVqZWN0ZWQgcHJvbWlzZVxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL2hQdWl3QlxcdTAwMGFcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zZXR0bGVkVmFsdWU7XG59O1xuXG5Qcm9taXNlSW5zcGVjdGlvbi5wcm90b3R5cGUuaXNGdWxmaWxsZWQgPVxuUHJvbWlzZS5wcm90b3R5cGUuX2lzRnVsZmlsbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiAyNjg0MzU0NTYpID4gMDtcbn07XG5cblByb21pc2VJbnNwZWN0aW9uLnByb3RvdHlwZS5pc1JlamVjdGVkID1cblByb21pc2UucHJvdG90eXBlLl9pc1JlamVjdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiAxMzQyMTc3MjgpID4gMDtcbn07XG5cblByb21pc2VJbnNwZWN0aW9uLnByb3RvdHlwZS5pc1BlbmRpbmcgPVxuUHJvbWlzZS5wcm90b3R5cGUuX2lzUGVuZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgNDAyNjUzMTg0KSA9PT0gMDtcbn07XG5cblByb21pc2VJbnNwZWN0aW9uLnByb3RvdHlwZS5pc1Jlc29sdmVkID1cblByb21pc2UucHJvdG90eXBlLl9pc1Jlc29sdmVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA0MDI2NTMxODQpID4gMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmlzUGVuZGluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXQoKS5faXNQZW5kaW5nKCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5pc1JlamVjdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldCgpLl9pc1JlamVjdGVkKCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5pc0Z1bGZpbGxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXQoKS5faXNGdWxmaWxsZWQoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmlzUmVzb2x2ZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0KCkuX2lzUmVzb2x2ZWQoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl92YWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9zZXR0bGVkVmFsdWU7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVhc29uID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fdW5zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZCgpO1xuICAgIHJldHVybiB0aGlzLl9zZXR0bGVkVmFsdWU7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLl90YXJnZXQoKTtcbiAgICBpZiAoIXRhcmdldC5pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW5ub3QgZ2V0IGZ1bGZpbGxtZW50IHZhbHVlIG9mIGEgbm9uLWZ1bGZpbGxlZCBwcm9taXNlXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvaGMxRExqXFx1MDAwYVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldC5fc2V0dGxlZFZhbHVlO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUucmVhc29uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXMuX3RhcmdldCgpO1xuICAgIGlmICghdGFyZ2V0LmlzUmVqZWN0ZWQoKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2Fubm90IGdldCByZWplY3Rpb24gcmVhc29uIG9mIGEgbm9uLXJlamVjdGVkIHByb21pc2VcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9oUHVpd0JcXHUwMDBhXCIpO1xuICAgIH1cbiAgICB0YXJnZXQuX3Vuc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQoKTtcbiAgICByZXR1cm4gdGFyZ2V0Ll9zZXR0bGVkVmFsdWU7XG59O1xuXG5cblByb21pc2UuUHJvbWlzZUluc3BlY3Rpb24gPSBQcm9taXNlSW5zcGVjdGlvbjtcbn07XG5cbn0se31dLDM1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBJTlRFUk5BTCkge1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xudmFyIGVycm9yT2JqID0gdXRpbC5lcnJvck9iajtcbnZhciBpc09iamVjdCA9IHV0aWwuaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIHRyeUNvbnZlcnRUb1Byb21pc2Uob2JqLCBjb250ZXh0KSB7XG4gICAgaWYgKGlzT2JqZWN0KG9iaikpIHtcbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBbnlCbHVlYmlyZFByb21pc2Uob2JqKSkge1xuICAgICAgICAgICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICAgICAgICAgIG9iai5fdGhlbihcbiAgICAgICAgICAgICAgICByZXQuX2Z1bGZpbGxVbmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgcmV0Ll9yZWplY3RVbmNoZWNrZWRDaGVja0Vycm9yLFxuICAgICAgICAgICAgICAgIHJldC5fcHJvZ3Jlc3NVbmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGVuID0gdXRpbC50cnlDYXRjaChnZXRUaGVuKShvYmopO1xuICAgICAgICBpZiAodGhlbiA9PT0gZXJyb3JPYmopIHtcbiAgICAgICAgICAgIGlmIChjb250ZXh0KSBjb250ZXh0Ll9wdXNoQ29udGV4dCgpO1xuICAgICAgICAgICAgdmFyIHJldCA9IFByb21pc2UucmVqZWN0KHRoZW4uZSk7XG4gICAgICAgICAgICBpZiAoY29udGV4dCkgY29udGV4dC5fcG9wQ29udGV4dCgpO1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9UaGVuYWJsZShvYmosIHRoZW4sIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIGdldFRoZW4ob2JqKSB7XG4gICAgcmV0dXJuIG9iai50aGVuO1xufVxuXG52YXIgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaXNBbnlCbHVlYmlyZFByb21pc2Uob2JqKSB7XG4gICAgcmV0dXJuIGhhc1Byb3AuY2FsbChvYmosIFwiX3Byb21pc2UwXCIpO1xufVxuXG5mdW5jdGlvbiBkb1RoZW5hYmxlKHgsIHRoZW4sIGNvbnRleHQpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICB2YXIgcmV0ID0gcHJvbWlzZTtcbiAgICBpZiAoY29udGV4dCkgY29udGV4dC5fcHVzaENvbnRleHQoKTtcbiAgICBwcm9taXNlLl9jYXB0dXJlU3RhY2tUcmFjZSgpO1xuICAgIGlmIChjb250ZXh0KSBjb250ZXh0Ll9wb3BDb250ZXh0KCk7XG4gICAgdmFyIHN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICB2YXIgcmVzdWx0ID0gdXRpbC50cnlDYXRjaCh0aGVuKS5jYWxsKHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUZyb21UaGVuYWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3RGcm9tVGhlbmFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NGcm9tVGhlbmFibGUpO1xuICAgIHN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgaWYgKHByb21pc2UgJiYgcmVzdWx0ID09PSBlcnJvck9iaikge1xuICAgICAgICBwcm9taXNlLl9yZWplY3RDYWxsYmFjayhyZXN1bHQuZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc29sdmVGcm9tVGhlbmFibGUodmFsdWUpIHtcbiAgICAgICAgaWYgKCFwcm9taXNlKSByZXR1cm47XG4gICAgICAgIHByb21pc2UuX3Jlc29sdmVDYWxsYmFjayh2YWx1ZSk7XG4gICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlamVjdEZyb21UaGVuYWJsZShyZWFzb24pIHtcbiAgICAgICAgaWYgKCFwcm9taXNlKSByZXR1cm47XG4gICAgICAgIHByb21pc2UuX3JlamVjdENhbGxiYWNrKHJlYXNvbiwgc3luY2hyb25vdXMsIHRydWUpO1xuICAgICAgICBwcm9taXNlID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9ncmVzc0Zyb21UaGVuYWJsZSh2YWx1ZSkge1xuICAgICAgICBpZiAoIXByb21pc2UpIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9taXNlLl9wcm9ncmVzcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBwcm9taXNlLl9wcm9ncmVzcyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxucmV0dXJuIHRyeUNvbnZlcnRUb1Byb21pc2U7XG59O1xuXG59LHtcIi4vdXRpbC5qc1wiOjM4fV0sMzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsIElOVEVSTkFMKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgVGltZW91dEVycm9yID0gUHJvbWlzZS5UaW1lb3V0RXJyb3I7XG5cbnZhciBhZnRlclRpbWVvdXQgPSBmdW5jdGlvbiAocHJvbWlzZSwgbWVzc2FnZSkge1xuICAgIGlmICghcHJvbWlzZS5pc1BlbmRpbmcoKSkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBtZXNzYWdlID0gXCJvcGVyYXRpb24gdGltZWQgb3V0XCI7XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgVGltZW91dEVycm9yKG1lc3NhZ2UpO1xuICAgIHV0aWwubWFya0FzT3JpZ2luYXRpbmdGcm9tUmVqZWN0aW9uKGVycik7XG4gICAgcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZShlcnIpO1xuICAgIHByb21pc2UuX2NhbmNlbChlcnIpO1xufTtcblxudmFyIGFmdGVyVmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gZGVsYXkoK3RoaXMpLnRoZW5SZXR1cm4odmFsdWUpOyB9O1xudmFyIGRlbGF5ID0gUHJvbWlzZS5kZWxheSA9IGZ1bmN0aW9uICh2YWx1ZSwgbXMpIHtcbiAgICBpZiAobXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtcyA9IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgcmV0Ll9mdWxmaWxsKCk7IH0sIG1zKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgbXMgPSArbXM7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkuX3RoZW4oYWZ0ZXJWYWx1ZSwgbnVsbCwgbnVsbCwgbXMsIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5kZWxheSA9IGZ1bmN0aW9uIChtcykge1xuICAgIHJldHVybiBkZWxheSh0aGlzLCBtcyk7XG59O1xuXG5mdW5jdGlvbiBzdWNjZXNzQ2xlYXIodmFsdWUpIHtcbiAgICB2YXIgaGFuZGxlID0gdGhpcztcbiAgICBpZiAoaGFuZGxlIGluc3RhbmNlb2YgTnVtYmVyKSBoYW5kbGUgPSAraGFuZGxlO1xuICAgIGNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZmFpbHVyZUNsZWFyKHJlYXNvbikge1xuICAgIHZhciBoYW5kbGUgPSB0aGlzO1xuICAgIGlmIChoYW5kbGUgaW5zdGFuY2VvZiBOdW1iZXIpIGhhbmRsZSA9ICtoYW5kbGU7XG4gICAgY2xlYXJUaW1lb3V0KGhhbmRsZSk7XG4gICAgdGhyb3cgcmVhc29uO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS50aW1lb3V0ID0gZnVuY3Rpb24gKG1zLCBtZXNzYWdlKSB7XG4gICAgbXMgPSArbXM7XG4gICAgdmFyIHJldCA9IHRoaXMudGhlbigpLmNhbmNlbGxhYmxlKCk7XG4gICAgcmV0Ll9jYW5jZWxsYXRpb25QYXJlbnQgPSB0aGlzO1xuICAgIHZhciBoYW5kbGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIHRpbWVvdXRUaW1lb3V0KCkge1xuICAgICAgICBhZnRlclRpbWVvdXQocmV0LCBtZXNzYWdlKTtcbiAgICB9LCBtcyk7XG4gICAgcmV0dXJuIHJldC5fdGhlbihzdWNjZXNzQ2xlYXIsIGZhaWx1cmVDbGVhciwgdW5kZWZpbmVkLCBoYW5kbGUsIHVuZGVmaW5lZCk7XG59O1xuXG59O1xuXG59LHtcIi4vdXRpbC5qc1wiOjM4fV0sMzc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChQcm9taXNlLCBhcGlSZWplY3Rpb24sIHRyeUNvbnZlcnRUb1Byb21pc2UsXG4gICAgY3JlYXRlQ29udGV4dCkge1xuICAgIHZhciBUeXBlRXJyb3IgPSBfZGVyZXFfKFwiLi9lcnJvcnMuanNcIikuVHlwZUVycm9yO1xuICAgIHZhciBpbmhlcml0cyA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIikuaW5oZXJpdHM7XG4gICAgdmFyIFByb21pc2VJbnNwZWN0aW9uID0gUHJvbWlzZS5Qcm9taXNlSW5zcGVjdGlvbjtcblxuICAgIGZ1bmN0aW9uIGluc3BlY3Rpb25NYXBwZXIoaW5zcGVjdGlvbnMpIHtcbiAgICAgICAgdmFyIGxlbiA9IGluc3BlY3Rpb25zLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgdmFyIGluc3BlY3Rpb24gPSBpbnNwZWN0aW9uc1tpXTtcbiAgICAgICAgICAgIGlmIChpbnNwZWN0aW9uLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChpbnNwZWN0aW9uLmVycm9yKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5zcGVjdGlvbnNbaV0gPSBpbnNwZWN0aW9uLl9zZXR0bGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3BlY3Rpb25zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRocm93ZXIoZSkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9LCAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYXN0UHJlc2VydmluZ0Rpc3Bvc2FibGUodGhlbmFibGUpIHtcbiAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UodGhlbmFibGUpO1xuICAgICAgICBpZiAobWF5YmVQcm9taXNlICE9PSB0aGVuYWJsZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoZW5hYmxlLl9pc0Rpc3Bvc2FibGUgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoZW5hYmxlLl9nZXREaXNwb3NlciA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgICAgICB0aGVuYWJsZS5faXNEaXNwb3NhYmxlKCkpIHtcbiAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fc2V0RGlzcG9zYWJsZSh0aGVuYWJsZS5fZ2V0RGlzcG9zZXIoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGlzcG9zZShyZXNvdXJjZXMsIGluc3BlY3Rpb24pIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gcmVzb3VyY2VzLmxlbmd0aDtcbiAgICAgICAgdmFyIHJldCA9IFByb21pc2UuZGVmZXIoKTtcbiAgICAgICAgZnVuY3Rpb24gaXRlcmF0b3IoKSB7XG4gICAgICAgICAgICBpZiAoaSA+PSBsZW4pIHJldHVybiByZXQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IGNhc3RQcmVzZXJ2aW5nRGlzcG9zYWJsZShyZXNvdXJjZXNbaSsrXSk7XG4gICAgICAgICAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSAmJlxuICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5faXNEaXNwb3NhYmxlKCkpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlLl9nZXREaXNwb3NlcigpLnRyeURpc3Bvc2UoaW5zcGVjdGlvbiksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXMucHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhyb3dlcihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZS5fdGhlbihpdGVyYXRvciwgdGhyb3dlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVyYXRvcigpO1xuICAgICAgICB9XG4gICAgICAgIGl0ZXJhdG9yKCk7XG4gICAgICAgIHJldHVybiByZXQucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNwb3NlclN1Y2Nlc3ModmFsdWUpIHtcbiAgICAgICAgdmFyIGluc3BlY3Rpb24gPSBuZXcgUHJvbWlzZUluc3BlY3Rpb24oKTtcbiAgICAgICAgaW5zcGVjdGlvbi5fc2V0dGxlZFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGluc3BlY3Rpb24uX2JpdEZpZWxkID0gMjY4NDM1NDU2O1xuICAgICAgICByZXR1cm4gZGlzcG9zZSh0aGlzLCBpbnNwZWN0aW9uKS50aGVuUmV0dXJuKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNwb3NlckZhaWwocmVhc29uKSB7XG4gICAgICAgIHZhciBpbnNwZWN0aW9uID0gbmV3IFByb21pc2VJbnNwZWN0aW9uKCk7XG4gICAgICAgIGluc3BlY3Rpb24uX3NldHRsZWRWYWx1ZSA9IHJlYXNvbjtcbiAgICAgICAgaW5zcGVjdGlvbi5fYml0RmllbGQgPSAxMzQyMTc3Mjg7XG4gICAgICAgIHJldHVybiBkaXNwb3NlKHRoaXMsIGluc3BlY3Rpb24pLnRoZW5UaHJvdyhyZWFzb24pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIERpc3Bvc2VyKGRhdGEsIHByb21pc2UsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBwcm9taXNlO1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB9XG5cbiAgICBEaXNwb3Nlci5wcm90b3R5cGUuZGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gICAgfTtcblxuICAgIERpc3Bvc2VyLnByb3RvdHlwZS5wcm9taXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgRGlzcG9zZXIucHJvdG90eXBlLnJlc291cmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9taXNlKCkuaXNGdWxmaWxsZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZSgpLnZhbHVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIERpc3Bvc2VyLnByb3RvdHlwZS50cnlEaXNwb3NlID0gZnVuY3Rpb24oaW5zcGVjdGlvbikge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSB0aGlzLnJlc291cmNlKCk7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5fY29udGV4dDtcbiAgICAgICAgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCkgY29udGV4dC5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgdmFyIHJldCA9IHJlc291cmNlICE9PSBudWxsXG4gICAgICAgICAgICA/IHRoaXMuZG9EaXNwb3NlKHJlc291cmNlLCBpbnNwZWN0aW9uKSA6IG51bGw7XG4gICAgICAgIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQpIGNvbnRleHQuX3BvcENvbnRleHQoKTtcbiAgICAgICAgdGhpcy5fcHJvbWlzZS5fdW5zZXREaXNwb3NhYmxlKCk7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBudWxsO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG5cbiAgICBEaXNwb3Nlci5pc0Rpc3Bvc2VyID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIChkICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZC5yZXNvdXJjZSA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGQudHJ5RGlzcG9zZSA9PT0gXCJmdW5jdGlvblwiKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gRnVuY3Rpb25EaXNwb3NlcihmbiwgcHJvbWlzZSwgY29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yJChmbiwgcHJvbWlzZSwgY29udGV4dCk7XG4gICAgfVxuICAgIGluaGVyaXRzKEZ1bmN0aW9uRGlzcG9zZXIsIERpc3Bvc2VyKTtcblxuICAgIEZ1bmN0aW9uRGlzcG9zZXIucHJvdG90eXBlLmRvRGlzcG9zZSA9IGZ1bmN0aW9uIChyZXNvdXJjZSwgaW5zcGVjdGlvbikge1xuICAgICAgICB2YXIgZm4gPSB0aGlzLmRhdGEoKTtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwocmVzb3VyY2UsIHJlc291cmNlLCBpbnNwZWN0aW9uKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbWF5YmVVbndyYXBEaXNwb3Nlcih2YWx1ZSkge1xuICAgICAgICBpZiAoRGlzcG9zZXIuaXNEaXNwb3Nlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzW3RoaXMuaW5kZXhdLl9zZXREaXNwb3NhYmxlKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5wcm9taXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIFByb21pc2UudXNpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuIDwgMikgcmV0dXJuIGFwaVJlamVjdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwieW91IG11c3QgcGFzcyBhdCBsZWFzdCAyIGFyZ3VtZW50cyB0byBQcm9taXNlLnVzaW5nXCIpO1xuICAgICAgICB2YXIgZm4gPSBhcmd1bWVudHNbbGVuIC0gMV07XG4gICAgICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGFwaVJlamVjdGlvbihcImZuIG11c3QgYmUgYSBmdW5jdGlvblxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsLzkxNmxKSlxcdTAwMGFcIik7XG4gICAgICAgIGxlbi0tO1xuICAgICAgICB2YXIgcmVzb3VyY2VzID0gbmV3IEFycmF5KGxlbik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGlmIChEaXNwb3Nlci5pc0Rpc3Bvc2VyKHJlc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHZhciBkaXNwb3NlciA9IHJlc291cmNlO1xuICAgICAgICAgICAgICAgIHJlc291cmNlID0gcmVzb3VyY2UucHJvbWlzZSgpO1xuICAgICAgICAgICAgICAgIHJlc291cmNlLl9zZXREaXNwb3NhYmxlKGRpc3Bvc2VyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UocmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fdGhlbihtYXliZVVud3JhcERpc3Bvc2VyLCBudWxsLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzOiByZXNvdXJjZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgICAgICAgfSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvdXJjZXNbaV0gPSByZXNvdXJjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5zZXR0bGUocmVzb3VyY2VzKVxuICAgICAgICAgICAgLnRoZW4oaW5zcGVjdGlvbk1hcHBlcilcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHZhbHMpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlLl9wdXNoQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgIHZhciByZXQ7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0ID0gZm4uYXBwbHkodW5kZWZpbmVkLCB2YWxzKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLl9wb3BDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLl90aGVuKFxuICAgICAgICAgICAgICAgIGRpc3Bvc2VyU3VjY2VzcywgZGlzcG9zZXJGYWlsLCB1bmRlZmluZWQsIHJlc291cmNlcywgdW5kZWZpbmVkKTtcbiAgICAgICAgcmVzb3VyY2VzLnByb21pc2UgPSBwcm9taXNlO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgUHJvbWlzZS5wcm90b3R5cGUuX3NldERpc3Bvc2FibGUgPSBmdW5jdGlvbiAoZGlzcG9zZXIpIHtcbiAgICAgICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDI2MjE0NDtcbiAgICAgICAgdGhpcy5fZGlzcG9zZXIgPSBkaXNwb3NlcjtcbiAgICB9O1xuXG4gICAgUHJvbWlzZS5wcm90b3R5cGUuX2lzRGlzcG9zYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDI2MjE0NCkgPiAwO1xuICAgIH07XG5cbiAgICBQcm9taXNlLnByb3RvdHlwZS5fZ2V0RGlzcG9zZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwb3NlcjtcbiAgICB9O1xuXG4gICAgUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0RGlzcG9zYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+MjYyMTQ0KTtcbiAgICAgICAgdGhpcy5fZGlzcG9zZXIgPSB1bmRlZmluZWQ7XG4gICAgfTtcblxuICAgIFByb21pc2UucHJvdG90eXBlLmRpc3Bvc2VyID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbkRpc3Bvc2VyKGZuLCB0aGlzLCBjcmVhdGVDb250ZXh0KCkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICB9O1xuXG59O1xuXG59LHtcIi4vZXJyb3JzLmpzXCI6MTMsXCIuL3V0aWwuanNcIjozOH1dLDM4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIGVzNSA9IF9kZXJlcV8oXCIuL2VzNS5qc1wiKTtcbnZhciBjYW5FdmFsdWF0ZSA9IHR5cGVvZiBuYXZpZ2F0b3IgPT0gXCJ1bmRlZmluZWRcIjtcbnZhciBoYXZlR2V0dGVycyA9IChmdW5jdGlvbigpe1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBvID0ge307XG4gICAgICAgIGVzNS5kZWZpbmVQcm9wZXJ0eShvLCBcImZcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gby5mID09PSAzO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG59KSgpO1xuXG52YXIgZXJyb3JPYmogPSB7ZToge319O1xudmFyIHRyeUNhdGNoVGFyZ2V0O1xuZnVuY3Rpb24gdHJ5Q2F0Y2hlcigpIHtcbiAgICB0cnkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdHJ5Q2F0Y2hUYXJnZXQ7XG4gICAgICAgIHRyeUNhdGNoVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyb3JPYmouZSA9IGU7XG4gICAgICAgIHJldHVybiBlcnJvck9iajtcbiAgICB9XG59XG5mdW5jdGlvbiB0cnlDYXRjaChmbikge1xuICAgIHRyeUNhdGNoVGFyZ2V0ID0gZm47XG4gICAgcmV0dXJuIHRyeUNhdGNoZXI7XG59XG5cbnZhciBpbmhlcml0cyA9IGZ1bmN0aW9uKENoaWxkLCBQYXJlbnQpIHtcbiAgICB2YXIgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gICAgZnVuY3Rpb24gVCgpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IENoaWxkO1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yJCA9IFBhcmVudDtcbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHlOYW1lIGluIFBhcmVudC5wcm90b3R5cGUpIHtcbiAgICAgICAgICAgIGlmIChoYXNQcm9wLmNhbGwoUGFyZW50LnByb3RvdHlwZSwgcHJvcGVydHlOYW1lKSAmJlxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZS5jaGFyQXQocHJvcGVydHlOYW1lLmxlbmd0aC0xKSAhPT0gXCIkXCJcbiAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhpc1twcm9wZXJ0eU5hbWUgKyBcIiRcIl0gPSBQYXJlbnQucHJvdG90eXBlW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgVC5wcm90b3R5cGUgPSBQYXJlbnQucHJvdG90eXBlO1xuICAgIENoaWxkLnByb3RvdHlwZSA9IG5ldyBUKCk7XG4gICAgcmV0dXJuIENoaWxkLnByb3RvdHlwZTtcbn07XG5cblxuZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsKSB7XG4gICAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09IGZhbHNlIHx8XG4gICAgICAgIHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIjtcblxufVxuXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiAhaXNQcmltaXRpdmUodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBtYXliZVdyYXBBc0Vycm9yKG1heWJlRXJyb3IpIHtcbiAgICBpZiAoIWlzUHJpbWl0aXZlKG1heWJlRXJyb3IpKSByZXR1cm4gbWF5YmVFcnJvcjtcblxuICAgIHJldHVybiBuZXcgRXJyb3Ioc2FmZVRvU3RyaW5nKG1heWJlRXJyb3IpKTtcbn1cblxuZnVuY3Rpb24gd2l0aEFwcGVuZGVkKHRhcmdldCwgYXBwZW5kZWUpIHtcbiAgICB2YXIgbGVuID0gdGFyZ2V0Lmxlbmd0aDtcbiAgICB2YXIgcmV0ID0gbmV3IEFycmF5KGxlbiArIDEpO1xuICAgIHZhciBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICByZXRbaV0gPSB0YXJnZXRbaV07XG4gICAgfVxuICAgIHJldFtpXSA9IGFwcGVuZGVlO1xuICAgIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGdldERhdGFQcm9wZXJ0eU9yRGVmYXVsdChvYmosIGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKGVzNS5pc0VTNSkge1xuICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuXG4gICAgICAgIGlmIChkZXNjICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBkZXNjLmdldCA9PSBudWxsICYmIGRlc2Muc2V0ID09IG51bGxcbiAgICAgICAgICAgICAgICAgICAgPyBkZXNjLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIDogZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHt9Lmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpID8gb2JqW2tleV0gOiB1bmRlZmluZWQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBub3RFbnVtZXJhYmxlUHJvcChvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGlzUHJpbWl0aXZlKG9iaikpIHJldHVybiBvYmo7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9O1xuICAgIGVzNS5kZWZpbmVQcm9wZXJ0eShvYmosIG5hbWUsIGRlc2NyaXB0b3IpO1xuICAgIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIHRocm93ZXIocikge1xuICAgIHRocm93IHI7XG59XG5cbnZhciBpbmhlcml0ZWREYXRhS2V5cyA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgZXhjbHVkZWRQcm90b3R5cGVzID0gW1xuICAgICAgICBBcnJheS5wcm90b3R5cGUsXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUsXG4gICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZVxuICAgIF07XG5cbiAgICB2YXIgaXNFeGNsdWRlZFByb3RvID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhjbHVkZWRQcm90b3R5cGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoZXhjbHVkZWRQcm90b3R5cGVzW2ldID09PSB2YWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIGlmIChlczUuaXNFUzUpIHtcbiAgICAgICAgdmFyIGdldEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgICAgICAgdmFyIHZpc2l0ZWRLZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgIHdoaWxlIChvYmogIT0gbnVsbCAmJiAhaXNFeGNsdWRlZFByb3RvKG9iaikpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5cztcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBrZXlzID0gZ2V0S2V5cyhvYmopO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmlzaXRlZEtleXNba2V5XSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIHZpc2l0ZWRLZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzYyAhPSBudWxsICYmIGRlc2MuZ2V0ID09IG51bGwgJiYgZGVzYy5zZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmogPSBlczUuZ2V0UHJvdG90eXBlT2Yob2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgaWYgKGlzRXhjbHVkZWRQcm90byhvYmopKSByZXR1cm4gW107XG4gICAgICAgICAgICB2YXIgcmV0ID0gW107XG5cbiAgICAgICAgICAgIC8qanNoaW50IGZvcmluOmZhbHNlICovXG4gICAgICAgICAgICBlbnVtZXJhdGlvbjogZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNQcm9wLmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleGNsdWRlZFByb3RvdHlwZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNQcm9wLmNhbGwoZXhjbHVkZWRQcm90b3R5cGVzW2ldLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgZW51bWVyYXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9O1xuICAgIH1cblxufSkoKTtcblxudmFyIHRoaXNBc3NpZ25tZW50UGF0dGVybiA9IC90aGlzXFxzKlxcLlxccypcXFMrXFxzKj0vO1xuZnVuY3Rpb24gaXNDbGFzcyhmbikge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBlczUubmFtZXMoZm4ucHJvdG90eXBlKTtcblxuICAgICAgICAgICAgdmFyIGhhc01ldGhvZHMgPSBlczUuaXNFUzUgJiYga2V5cy5sZW5ndGggPiAxO1xuICAgICAgICAgICAgdmFyIGhhc01ldGhvZHNPdGhlclRoYW5Db25zdHJ1Y3RvciA9IGtleXMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICEoa2V5cy5sZW5ndGggPT09IDEgJiYga2V5c1swXSA9PT0gXCJjb25zdHJ1Y3RvclwiKTtcbiAgICAgICAgICAgIHZhciBoYXNUaGlzQXNzaWdubWVudEFuZFN0YXRpY01ldGhvZHMgPVxuICAgICAgICAgICAgICAgIHRoaXNBc3NpZ25tZW50UGF0dGVybi50ZXN0KGZuICsgXCJcIikgJiYgZXM1Lm5hbWVzKGZuKS5sZW5ndGggPiAwO1xuXG4gICAgICAgICAgICBpZiAoaGFzTWV0aG9kcyB8fCBoYXNNZXRob2RzT3RoZXJUaGFuQ29uc3RydWN0b3IgfHxcbiAgICAgICAgICAgICAgICBoYXNUaGlzQXNzaWdubWVudEFuZFN0YXRpY01ldGhvZHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0b0Zhc3RQcm9wZXJ0aWVzKG9iaikge1xuICAgIC8qanNoaW50IC1XMDI3LC1XMDU1LC1XMDMxKi9cbiAgICBmdW5jdGlvbiBmKCkge31cbiAgICBmLnByb3RvdHlwZSA9IG9iajtcbiAgICB2YXIgbCA9IDg7XG4gICAgd2hpbGUgKGwtLSkgbmV3IGYoKTtcbiAgICByZXR1cm4gb2JqO1xuICAgIGV2YWwob2JqKTtcbn1cblxudmFyIHJpZGVudCA9IC9eW2EteiRfXVthLXokXzAtOV0qJC9pO1xuZnVuY3Rpb24gaXNJZGVudGlmaWVyKHN0cikge1xuICAgIHJldHVybiByaWRlbnQudGVzdChzdHIpO1xufVxuXG5mdW5jdGlvbiBmaWxsZWRSYW5nZShjb3VudCwgcHJlZml4LCBzdWZmaXgpIHtcbiAgICB2YXIgcmV0ID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuICAgICAgICByZXRbaV0gPSBwcmVmaXggKyBpICsgc3VmZml4O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzYWZlVG9TdHJpbmcob2JqKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG9iaiArIFwiXCI7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gXCJbbm8gc3RyaW5nIHJlcHJlc2VudGF0aW9uXVwiO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFya0FzT3JpZ2luYXRpbmdGcm9tUmVqZWN0aW9uKGUpIHtcbiAgICB0cnkge1xuICAgICAgICBub3RFbnVtZXJhYmxlUHJvcChlLCBcImlzT3BlcmF0aW9uYWxcIiwgdHJ1ZSk7XG4gICAgfVxuICAgIGNhdGNoKGlnbm9yZSkge31cbn1cblxuZnVuY3Rpb24gb3JpZ2luYXRlc0Zyb21SZWplY3Rpb24oZSkge1xuICAgIGlmIChlID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gKChlIGluc3RhbmNlb2YgRXJyb3JbXCJfX0JsdWViaXJkRXJyb3JUeXBlc19fXCJdLk9wZXJhdGlvbmFsRXJyb3IpIHx8XG4gICAgICAgIGVbXCJpc09wZXJhdGlvbmFsXCJdID09PSB0cnVlKTtcbn1cblxuZnVuY3Rpb24gY2FuQXR0YWNoVHJhY2Uob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEVycm9yICYmIGVzNS5wcm9wZXJ0eUlzV3JpdGFibGUob2JqLCBcInN0YWNrXCIpO1xufVxuXG52YXIgZW5zdXJlRXJyb3JPYmplY3QgPSAoZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEoXCJzdGFja1wiIGluIG5ldyBFcnJvcigpKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChjYW5BdHRhY2hUcmFjZSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIHRyeSB7dGhyb3cgbmV3IEVycm9yKHNhZmVUb1N0cmluZyh2YWx1ZSkpO31cbiAgICAgICAgICAgIGNhdGNoKGVycikge3JldHVybiBlcnI7fVxuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGNhbkF0dGFjaFRyYWNlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihzYWZlVG9TdHJpbmcodmFsdWUpKTtcbiAgICAgICAgfTtcbiAgICB9XG59KSgpO1xuXG5mdW5jdGlvbiBjbGFzc1N0cmluZyhvYmopIHtcbiAgICByZXR1cm4ge30udG9TdHJpbmcuY2FsbChvYmopO1xufVxuXG5mdW5jdGlvbiBjb3B5RGVzY3JpcHRvcnMoZnJvbSwgdG8sIGZpbHRlcikge1xuICAgIHZhciBrZXlzID0gZXM1Lm5hbWVzKGZyb20pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgaWYgKGZpbHRlcihrZXkpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGVzNS5kZWZpbmVQcm9wZXJ0eSh0bywga2V5LCBlczUuZ2V0RGVzY3JpcHRvcihmcm9tLCBrZXkpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIHJldCA9IHtcbiAgICBpc0NsYXNzOiBpc0NsYXNzLFxuICAgIGlzSWRlbnRpZmllcjogaXNJZGVudGlmaWVyLFxuICAgIGluaGVyaXRlZERhdGFLZXlzOiBpbmhlcml0ZWREYXRhS2V5cyxcbiAgICBnZXREYXRhUHJvcGVydHlPckRlZmF1bHQ6IGdldERhdGFQcm9wZXJ0eU9yRGVmYXVsdCxcbiAgICB0aHJvd2VyOiB0aHJvd2VyLFxuICAgIGlzQXJyYXk6IGVzNS5pc0FycmF5LFxuICAgIGhhdmVHZXR0ZXJzOiBoYXZlR2V0dGVycyxcbiAgICBub3RFbnVtZXJhYmxlUHJvcDogbm90RW51bWVyYWJsZVByb3AsXG4gICAgaXNQcmltaXRpdmU6IGlzUHJpbWl0aXZlLFxuICAgIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgICBjYW5FdmFsdWF0ZTogY2FuRXZhbHVhdGUsXG4gICAgZXJyb3JPYmo6IGVycm9yT2JqLFxuICAgIHRyeUNhdGNoOiB0cnlDYXRjaCxcbiAgICBpbmhlcml0czogaW5oZXJpdHMsXG4gICAgd2l0aEFwcGVuZGVkOiB3aXRoQXBwZW5kZWQsXG4gICAgbWF5YmVXcmFwQXNFcnJvcjogbWF5YmVXcmFwQXNFcnJvcixcbiAgICB0b0Zhc3RQcm9wZXJ0aWVzOiB0b0Zhc3RQcm9wZXJ0aWVzLFxuICAgIGZpbGxlZFJhbmdlOiBmaWxsZWRSYW5nZSxcbiAgICB0b1N0cmluZzogc2FmZVRvU3RyaW5nLFxuICAgIGNhbkF0dGFjaFRyYWNlOiBjYW5BdHRhY2hUcmFjZSxcbiAgICBlbnN1cmVFcnJvck9iamVjdDogZW5zdXJlRXJyb3JPYmplY3QsXG4gICAgb3JpZ2luYXRlc0Zyb21SZWplY3Rpb246IG9yaWdpbmF0ZXNGcm9tUmVqZWN0aW9uLFxuICAgIG1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbjogbWFya0FzT3JpZ2luYXRpbmdGcm9tUmVqZWN0aW9uLFxuICAgIGNsYXNzU3RyaW5nOiBjbGFzc1N0cmluZyxcbiAgICBjb3B5RGVzY3JpcHRvcnM6IGNvcHlEZXNjcmlwdG9ycyxcbiAgICBoYXNEZXZUb29sczogdHlwZW9mIGNocm9tZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjaHJvbWUgJiZcbiAgICAgICAgICAgICAgICAgdHlwZW9mIGNocm9tZS5sb2FkVGltZXMgPT09IFwiZnVuY3Rpb25cIixcbiAgICBpc05vZGU6IHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIGNsYXNzU3RyaW5nKHByb2Nlc3MpLnRvTG93ZXJDYXNlKCkgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiXG59O1xucmV0LmlzUmVjZW50Tm9kZSA9IHJldC5pc05vZGUgJiYgKGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ZXJzaW9uID0gcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLnNwbGl0KFwiLlwiKS5tYXAoTnVtYmVyKTtcbiAgICByZXR1cm4gKHZlcnNpb25bMF0gPT09IDAgJiYgdmVyc2lvblsxXSA+IDEwKSB8fCAodmVyc2lvblswXSA+IDApO1xufSkoKTtcblxuaWYgKHJldC5pc05vZGUpIHJldC50b0Zhc3RQcm9wZXJ0aWVzKHByb2Nlc3MpO1xuXG50cnkge3Rocm93IG5ldyBFcnJvcigpOyB9IGNhdGNoIChlKSB7cmV0Lmxhc3RMaW5lRXJyb3IgPSBlO31cbm1vZHVsZS5leHBvcnRzID0gcmV0O1xuXG59LHtcIi4vZXM1LmpzXCI6MTR9XX0se30sWzRdKSg0KVxufSk7ICAgICAgICAgICAgICAgICAgICA7aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdyAhPT0gbnVsbCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuUCA9IHdpbmRvdy5Qcm9taXNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZiAhPT0gbnVsbCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5QID0gc2VsZi5Qcm9taXNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG59LHtcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG59LHt9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvbG9kYXNoL2luZGV4LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuLyoqXG4gKiBAbGljZW5zZVxuICogbG9kYXNoIDMuMTAuMCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZGVybiAtZCAtbyAuL2luZGV4LmpzYFxuICogQ29weXJpZ2h0IDIwMTItMjAxNSBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgMjAwOS0yMDE1IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnMy4xMC4wJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB3cmFwcGVyIG1ldGFkYXRhLiAqL1xuICB2YXIgQklORF9GTEFHID0gMSxcbiAgICAgIEJJTkRfS0VZX0ZMQUcgPSAyLFxuICAgICAgQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBDVVJSWV9GTEFHID0gOCxcbiAgICAgIENVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICAgIFBBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgUEFSVElBTF9SSUdIVF9GTEFHID0gNjQsXG4gICAgICBBUllfRkxBRyA9IDEyOCxcbiAgICAgIFJFQVJHX0ZMQUcgPSAyNTY7XG5cbiAgLyoqIFVzZWQgYXMgZGVmYXVsdCBvcHRpb25zIGZvciBgXy50cnVuY2AuICovXG4gIHZhciBERUZBVUxUX1RSVU5DX0xFTkdUSCA9IDMwLFxuICAgICAgREVGQVVMVF9UUlVOQ19PTUlTU0lPTiA9ICcuLi4nO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB3aGVuIGEgZnVuY3Rpb24gYmVjb21lcyBob3QuICovXG4gIHZhciBIT1RfQ09VTlQgPSAxNTAsXG4gICAgICBIT1RfU1BBTiA9IDE2O1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xuICB2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDI7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi9cbiAgdmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuICAvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG4gIHZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG4gIHZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxuICB2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5fCM5Nik7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ2BdL2csXG4gICAgICByZUhhc0VzY2FwZWRIdG1sID0gUmVnRXhwKHJlRXNjYXBlZEh0bWwuc291cmNlKSxcbiAgICAgIHJlSGFzVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlRXZhbHVhdGUgPSAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xcc1xcU10rPyklPi9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcblxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC8sXG4gICAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcblxcXFxdfFxcXFwuKSo/KVxcMilcXF0vZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXBhdHRlcm5zKVxuICAgKiBhbmQgdGhvc2Ugb3V0bGluZWQgYnkgW2BFc2NhcGVSZWdFeHBQYXR0ZXJuYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZXNjYXBlcmVnZXhwcGF0dGVybikuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFycyA9IC9eWzohLF18W1xcXFxeJC4qKz8oKVtcXF17fXxcXC9dfCheWzAtOWEtZkEtRm5ydHV2eF0pfChbXFxuXFxyXFx1MjAyOFxcdTIwMjldKS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFycyA9IFJlZ0V4cChyZVJlZ0V4cENoYXJzLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS4gKi9cbiAgdmFyIHJlQ29tYm9NYXJrID0gL1tcXHUwMzAwLVxcdTAzNmZcXHVmZTIwLVxcdWZlMjNdL2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBbRVMgdGVtcGxhdGUgZGVsaW1pdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbC1sZXhpY2FsLWNvbXBvbmVudHMpLiAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUhhc0hleFByZWZpeCA9IC9eMFt4WF0vO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpID4gNSkuICovXG4gIHZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL15cXGQrJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGF0aW4tMSBzdXBwbGVtZW50YXJ5IGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4xID0gL1tcXHhjMC1cXHhkNlxceGQ4LVxceGRlXFx4ZGYtXFx4ZjZcXHhmOC1cXHhmZl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgdG8gY3JlYXRlIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVXb3JkcyA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgdXBwZXIgPSAnW0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZV0nLFxuICAgICAgICBsb3dlciA9ICdbYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmXSsnO1xuXG4gICAgcmV0dXJuIFJlZ0V4cCh1cHBlciArICcrKD89JyArIHVwcGVyICsgbG93ZXIgKyAnKXwnICsgdXBwZXIgKyAnPycgKyBsb3dlciArICd8JyArIHVwcGVyICsgJyt8WzAtOV0rJywgJ2cnKTtcbiAgfSgpKTtcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0FycmF5QnVmZmVyJywgJ0RhdGUnLCAnRXJyb3InLCAnRmxvYXQzMkFycmF5JywgJ0Zsb2F0NjRBcnJheScsXG4gICAgJ0Z1bmN0aW9uJywgJ0ludDhBcnJheScsICdJbnQxNkFycmF5JywgJ0ludDMyQXJyYXknLCAnTWF0aCcsICdOdW1iZXInLFxuICAgICdPYmplY3QnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnXycsICdjbGVhclRpbWVvdXQnLCAnaXNGaW5pdGUnLFxuICAgICdwYXJzZUZsb2F0JywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnLCAnVHlwZUVycm9yJywgJ1VpbnQ4QXJyYXknLFxuICAgICdVaW50OENsYW1wZWRBcnJheScsICdVaW50MTZBcnJheScsICdVaW50MzJBcnJheScsICdXZWFrTWFwJ1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIG1ha2UgdGVtcGxhdGUgc291cmNlVVJMcyBlYXNpZXIgdG8gaWRlbnRpZnkuICovXG4gIHZhciB0ZW1wbGF0ZUNvdW50ZXIgPSAtMTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG4gIHZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xuICB0eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICB0eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPSB0eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9IHR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID0gdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzZXRUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbiAgdmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbiAgY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbiAgY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2Jvb2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPVxuICBjbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIGNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBtYXAgbGF0aW4tMSBzdXBwbGVtZW50YXJ5IGxldHRlcnMgdG8gYmFzaWMgbGF0aW4gbGV0dGVycy4gKi9cbiAgdmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y0MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlQyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJ1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG4gIHZhciBodG1sRXNjYXBlcyA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OycsXG4gICAgJ2AnOiAnJiM5NjsnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy4gKi9cbiAgdmFyIGh0bWxVbmVzY2FwZXMgPSB7XG4gICAgJyZhbXA7JzogJyYnLFxuICAgICcmbHQ7JzogJzwnLFxuICAgICcmZ3Q7JzogJz4nLFxuICAgICcmcXVvdDsnOiAnXCInLFxuICAgICcmIzM5Oyc6IFwiJ1wiLFxuICAgICcmIzk2Oyc6ICdgJ1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGRldGVybWluZSBpZiB2YWx1ZXMgYXJlIG9mIHRoZSBsYW5ndWFnZSB0eXBlIGBPYmplY3RgLiAqL1xuICB2YXIgb2JqZWN0VHlwZXMgPSB7XG4gICAgJ2Z1bmN0aW9uJzogdHJ1ZSxcbiAgICAnb2JqZWN0JzogdHJ1ZVxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgcmVnZXhlcy4gKi9cbiAgdmFyIHJlZ2V4cEVzY2FwZXMgPSB7XG4gICAgJzAnOiAneDMwJywgJzEnOiAneDMxJywgJzInOiAneDMyJywgJzMnOiAneDMzJywgJzQnOiAneDM0JyxcbiAgICAnNSc6ICd4MzUnLCAnNic6ICd4MzYnLCAnNyc6ICd4MzcnLCAnOCc6ICd4MzgnLCAnOSc6ICd4MzknLFxuICAgICdBJzogJ3g0MScsICdCJzogJ3g0MicsICdDJzogJ3g0MycsICdEJzogJ3g0NCcsICdFJzogJ3g0NScsICdGJzogJ3g0NicsXG4gICAgJ2EnOiAneDYxJywgJ2InOiAneDYyJywgJ2MnOiAneDYzJywgJ2QnOiAneDY0JywgJ2UnOiAneDY1JywgJ2YnOiAneDY2JyxcbiAgICAnbic6ICd4NmUnLCAncic6ICd4NzInLCAndCc6ICd4NzQnLCAndSc6ICd4NzUnLCAndic6ICd4NzYnLCAneCc6ICd4NzgnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciBzdHJpbmdFc2NhcGVzID0ge1xuICAgICdcXFxcJzogJ1xcXFwnLFxuICAgIFwiJ1wiOiBcIidcIixcbiAgICAnXFxuJzogJ24nLFxuICAgICdcXHInOiAncicsXG4gICAgJ1xcdTIwMjgnOiAndTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ3UyMDI5J1xuICB9O1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG4gIHZhciBmcmVlRXhwb3J0cyA9IG9iamVjdFR5cGVzW3R5cGVvZiBleHBvcnRzXSAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IG9iamVjdFR5cGVzW3R5cGVvZiBtb2R1bGVdICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZUdsb2JhbCA9IGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUgJiYgdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCAmJiBnbG9iYWw7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbiAgdmFyIGZyZWVTZWxmID0gb2JqZWN0VHlwZXNbdHlwZW9mIHNlbGZdICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgJiYgc2VsZjtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHdpbmRvd2AuICovXG4gIHZhciBmcmVlV2luZG93ID0gb2JqZWN0VHlwZXNbdHlwZW9mIHdpbmRvd10gJiYgd2luZG93ICYmIHdpbmRvdy5PYmplY3QgJiYgd2luZG93O1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzICYmIGZyZWVFeHBvcnRzO1xuXG4gIC8qKlxuICAgKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgKlxuICAgKiBUaGUgYHRoaXNgIHZhbHVlIGlzIHVzZWQgaWYgaXQncyB0aGUgZ2xvYmFsIG9iamVjdCB0byBhdm9pZCBHcmVhc2Vtb25rZXknc1xuICAgKiByZXN0cmljdGVkIGB3aW5kb3dgIG9iamVjdCwgb3RoZXJ3aXNlIHRoZSBgd2luZG93YCBvYmplY3QgaXMgdXNlZC5cbiAgICovXG4gIHZhciByb290ID0gZnJlZUdsb2JhbCB8fCAoKGZyZWVXaW5kb3cgIT09ICh0aGlzICYmIHRoaXMud2luZG93KSkgJiYgZnJlZVdpbmRvdykgfHwgZnJlZVNlbGYgfHwgdGhpcztcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGNvbXBhcmVBc2NlbmRpbmdgIHdoaWNoIGNvbXBhcmVzIHZhbHVlcyBhbmRcbiAgICogc29ydHMgdGhlbSBpbiBhc2NlbmRpbmcgb3JkZXIgd2l0aG91dCBndWFyYW50ZWVpbmcgYSBzdGFibGUgc29ydC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlQ29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgICB2YXIgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNVbmRlZiA9IHZhbHVlID09PSB1bmRlZmluZWQsXG4gICAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWU7XG5cbiAgICAgIHZhciBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICBvdGhJc1VuZGVmID0gb3RoZXIgPT09IHVuZGVmaW5lZCxcbiAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcjtcblxuICAgICAgaWYgKCh2YWx1ZSA+IG90aGVyICYmICFvdGhJc051bGwpIHx8ICF2YWxJc1JlZmxleGl2ZSB8fFxuICAgICAgICAgICh2YWxJc051bGwgJiYgIW90aElzVW5kZWYgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgKHZhbElzVW5kZWYgJiYgb3RoSXNSZWZsZXhpdmUpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgaWYgKCh2YWx1ZSA8IG90aGVyICYmICF2YWxJc051bGwpIHx8ICFvdGhJc1JlZmxleGl2ZSB8fFxuICAgICAgICAgIChvdGhJc051bGwgJiYgIXZhbElzVW5kZWYgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgKG90aElzVW5kZWYgJiYgdmFsSXNSZWZsZXhpdmUpKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBjYWxsYmFjayBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYmluYXJ5IHNlYXJjaGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgaWYgKHZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGluZGV4T2ZOYU4oYXJyYXksIGZyb21JbmRleCk7XG4gICAgfVxuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0Z1bmN0aW9uYCB3aXRob3V0IHN1cHBvcnQgZm9yIGVudmlyb25tZW50c1xuICAgKiB3aXRoIGluY29ycmVjdCBgdHlwZW9mYCByZXN1bHRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgLy8gQXZvaWQgYSBDaGFrcmEgSklUIGJ1ZyBpbiBjb21wYXRpYmlsaXR5IG1vZGVzIG9mIElFIDExLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvaXNzdWVzLzE2MjEgZm9yIG1vcmUgZGV0YWlscy5cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgfHwgZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBpZiBpdCdzIG5vdCBvbmUuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZFxuICAgKiBmb3IgYG51bGxgIG9yIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6ICh2YWx1ZSArICcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltTGVmdGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gICAqIG9mIGBzdHJpbmdgIHRoYXQgaXMgbm90IGZvdW5kIGluIGBjaGFyc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhcnMgVGhlIGNoYXJhY3RlcnMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGNoYXJhY3RlciBub3QgZm91bmQgaW4gYGNoYXJzYC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzTGVmdEluZGV4KHN0cmluZywgY2hhcnMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGNoYXJzLmluZGV4T2Yoc3RyaW5nLmNoYXJBdChpbmRleCkpID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1SaWdodGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBjaGFyYWN0ZXJcbiAgICogb2YgYHN0cmluZ2AgdGhhdCBpcyBub3QgZm91bmQgaW4gYGNoYXJzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaGFycyBUaGUgY2hhcmFjdGVycyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBjaGFyYWN0ZXIgbm90IGZvdW5kIGluIGBjaGFyc2AuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1JpZ2h0SW5kZXgoc3RyaW5nLCBjaGFycykge1xuICAgIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiBjaGFycy5pbmRleE9mKHN0cmluZy5jaGFyQXQoaW5kZXgpKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnNvcnRCeWAgdG8gY29tcGFyZSB0cmFuc2Zvcm1lZCBlbGVtZW50cyBvZiBhIGNvbGxlY3Rpb24gYW5kIHN0YWJsZVxuICAgKiBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyhvYmplY3QsIG90aGVyKSB7XG4gICAgcmV0dXJuIGJhc2VDb21wYXJlQXNjZW5kaW5nKG9iamVjdC5jcml0ZXJpYSwgb3RoZXIuY3JpdGVyaWEpIHx8IChvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5zb3J0QnlPcmRlcmAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICpcbiAgICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXNzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAqIGEgdmFsdWUgaXMgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBpZiBpdHMgY29ycmVzcG9uZGluZyBvcmRlciBpcyBcImFzY1wiLCBhbmRcbiAgICogZGVzY2VuZGluZyBpZiBcImRlc2NcIi5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbltdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgIGxlbmd0aCA9IG9iakNyaXRlcmlhLmxlbmd0aCxcbiAgICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gcmVzdWx0ICogKChvcmRlciA9PT0gJ2FzYycgfHwgb3JkZXIgPT09IHRydWUpID8gMSA6IC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvL1xuICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgLy8gU2VlIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBsYXRpbi0xIHN1cHBsZW1lbnRhcnkgbGV0dGVycyB0byBiYXNpYyBsYXRpbiBsZXR0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAgICovXG4gIGZ1bmN0aW9uIGRlYnVyckxldHRlcihsZXR0ZXIpIHtcbiAgICByZXR1cm4gZGVidXJyZWRMZXR0ZXJzW2xldHRlcl07XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlSHRtbENoYXIoY2hyKSB7XG4gICAgcmV0dXJuIGh0bWxFc2NhcGVzW2Nocl07XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVSZWdFeHBgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgcmVnZXhlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGVhZGluZ0NoYXIgVGhlIGNhcHR1cmUgZ3JvdXAgZm9yIGEgbGVhZGluZyBjaGFyYWN0ZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB3aGl0ZXNwYWNlQ2hhciBUaGUgY2FwdHVyZSBncm91cCBmb3IgYSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGVSZWdFeHBDaGFyKGNociwgbGVhZGluZ0NoYXIsIHdoaXRlc3BhY2VDaGFyKSB7XG4gICAgaWYgKGxlYWRpbmdDaGFyKSB7XG4gICAgICBjaHIgPSByZWdleHBFc2NhcGVzW2Nocl07XG4gICAgfSBlbHNlIGlmICh3aGl0ZXNwYWNlQ2hhcikge1xuICAgICAgY2hyID0gc3RyaW5nRXNjYXBlc1tjaHJdO1xuICAgIH1cbiAgICByZXR1cm4gJ1xcXFwnICsgY2hyO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGBOYU5gIGlzIGZvdW5kIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgYE5hTmAsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGluZGV4T2ZOYU4oYXJyYXksIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMCA6IC0xKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICB2YXIgb3RoZXIgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAob3RoZXIgIT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGB0cmltbWVkTGVmdEluZGV4YCBhbmQgYHRyaW1tZWRSaWdodEluZGV4YCB0byBkZXRlcm1pbmUgaWYgYVxuICAgKiBjaGFyYWN0ZXIgY29kZSBpcyB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gY2hhckNvZGUgVGhlIGNoYXJhY3RlciBjb2RlIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgY2hhckNvZGVgIGlzIHdoaXRlc3BhY2UsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGlzU3BhY2UoY2hhckNvZGUpIHtcbiAgICByZXR1cm4gKChjaGFyQ29kZSA8PSAxNjAgJiYgKGNoYXJDb2RlID49IDkgJiYgY2hhckNvZGUgPD0gMTMpIHx8IGNoYXJDb2RlID09IDMyIHx8IGNoYXJDb2RlID09IDE2MCkgfHwgY2hhckNvZGUgPT0gNTc2MCB8fCBjaGFyQ29kZSA9PSA2MTU4IHx8XG4gICAgICAoY2hhckNvZGUgPj0gODE5MiAmJiAoY2hhckNvZGUgPD0gODIwMiB8fCBjaGFyQ29kZSA9PSA4MjMyIHx8IGNoYXJDb2RlID09IDgyMzMgfHwgY2hhckNvZGUgPT0gODIzOSB8fCBjaGFyQ29kZSA9PSA4Mjg3IHx8IGNoYXJDb2RlID09IDEyMjg4IHx8IGNoYXJDb2RlID09IDY1Mjc5KSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gUExBQ0VIT0xERVI7XG4gICAgICAgIHJlc3VsdFsrK3Jlc0luZGV4XSA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFgIG9wdGltaXplZCBmb3Igc29ydGVkIGFycmF5cyB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGNhbGxiYWNrIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUtdmFsdWUtZnJlZSBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIHNlZW4sXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSA6IHZhbHVlO1xuXG4gICAgICBpZiAoIWluZGV4IHx8IHNlZW4gIT09IGNvbXB1dGVkKSB7XG4gICAgICAgIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgcmVzdWx0WysrcmVzSW5kZXhdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUxlZnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IG5vbi13aGl0ZXNwYWNlXG4gICAqIGNoYXJhY3RlciBvZiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiB0cmltbWVkTGVmdEluZGV4KHN0cmluZykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgaXNTcGFjZShzdHJpbmcuY2hhckNvZGVBdChpbmRleCkpKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltUmlnaHRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2VcbiAgICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gdHJpbW1lZFJpZ2h0SW5kZXgoc3RyaW5nKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyaW5nLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIGlzU3BhY2Uoc3RyaW5nLmNoYXJDb2RlQXQoaW5kZXgpKSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy51bmVzY2FwZWAgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5lc2NhcGVIdG1sQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gaHRtbFVuZXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB1c2luZyB0aGUgZ2l2ZW4gYGNvbnRleHRgIG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAY2F0ZWdvcnkgVXRpbGl0eVxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHQ9cm9vdF0gVGhlIGNvbnRleHQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBuZXcgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8ubWl4aW4oeyAnZm9vJzogXy5jb25zdGFudCgnZm9vJykgfSk7XG4gICAqXG4gICAqIHZhciBsb2Rhc2ggPSBfLnJ1bkluQ29udGV4dCgpO1xuICAgKiBsb2Rhc2gubWl4aW4oeyAnYmFyJzogbG9kYXNoLmNvbnN0YW50KCdiYXInKSB9KTtcbiAgICpcbiAgICogXy5pc0Z1bmN0aW9uKF8uZm9vKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKiBfLmlzRnVuY3Rpb24oXy5iYXIpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guZm9vKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmJhcik7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogLy8gdXNpbmcgYGNvbnRleHRgIHRvIG1vY2sgYERhdGUjZ2V0VGltZWAgdXNlIGluIGBfLm5vd2BcbiAgICogdmFyIG1vY2sgPSBfLnJ1bkluQ29udGV4dCh7XG4gICAqICAgJ0RhdGUnOiBmdW5jdGlvbigpIHtcbiAgICogICAgIHJldHVybiB7ICdnZXRUaW1lJzogZ2V0VGltZU1vY2sgfTtcbiAgICogICB9XG4gICAqIH0pO1xuICAgKlxuICAgKiAvLyBvciBjcmVhdGluZyBhIHN1cGVkLXVwIGBkZWZlcmAgaW4gTm9kZS5qc1xuICAgKiB2YXIgZGVmZXIgPSBfLnJ1bkluQ29udGV4dCh7ICdzZXRUaW1lb3V0Jzogc2V0SW1tZWRpYXRlIH0pLmRlZmVyO1xuICAgKi9cbiAgZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQpIHtcbiAgICAvLyBBdm9pZCBpc3N1ZXMgd2l0aCBzb21lIEVTMyBlbnZpcm9ubWVudHMgdGhhdCBhdHRlbXB0IHRvIHVzZSB2YWx1ZXMsIG5hbWVkXG4gICAgLy8gYWZ0ZXIgYnVpbHQtaW4gY29uc3RydWN0b3JzIGxpa2UgYE9iamVjdGAsIGZvciB0aGUgY3JlYXRpb24gb2YgbGl0ZXJhbHMuXG4gICAgLy8gRVM1IGNsZWFycyB0aGlzIHVwIGJ5IHN0YXRpbmcgdGhhdCBsaXRlcmFscyBtdXN0IHVzZSBidWlsdC1pbiBjb25zdHJ1Y3RvcnMuXG4gICAgLy8gU2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDExLjEuNSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIGNvbnRleHQgPSBjb250ZXh0ID8gXy5kZWZhdWx0cyhyb290Lk9iamVjdCgpLCBjb250ZXh0LCBfLnBpY2socm9vdCwgY29udGV4dFByb3BzKSkgOiByb290O1xuXG4gICAgLyoqIE5hdGl2ZSBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBOdW1iZXIgPSBjb250ZXh0Lk51bWJlcixcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QsXG4gICAgICAgIFJlZ0V4cCA9IGNvbnRleHQuUmVnRXhwLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0LlN0cmluZyxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3I7XG5cbiAgICAvKiogVXNlZCBmb3IgbmF0aXZlIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGUsXG4gICAgICAgIHN0cmluZ1Byb3RvID0gU3RyaW5nLnByb3RvdHlwZTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZm5Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xuICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4gICAgLyoqIFVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIElEcy4gKi9cbiAgICB2YXIgaWRDb3VudGVyID0gMDtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gICAgICogb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIHZhciBvYmpUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZuVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZSgvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csICdcXFxcJCYnKVxuICAgICAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4gICAgKTtcblxuICAgIC8qKiBOYXRpdmUgbWV0aG9kIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEFycmF5QnVmZmVyID0gY29udGV4dC5BcnJheUJ1ZmZlcixcbiAgICAgICAgY2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIHBhcnNlRmxvYXQgPSBjb250ZXh0LnBhcnNlRmxvYXQsXG4gICAgICAgIHBvdyA9IE1hdGgucG93LFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBzZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0LFxuICAgICAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICAgICAgVWludDhBcnJheSA9IGNvbnRleHQuVWludDhBcnJheSxcbiAgICAgICAgV2Vha01hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnV2Vha01hcCcpO1xuXG4gICAgLyogTmF0aXZlIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbiAgICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpLFxuICAgICAgICBuYXRpdmVGbG9vciA9IE1hdGguZmxvb3IsXG4gICAgICAgIG5hdGl2ZUlzQXJyYXkgPSBnZXROYXRpdmUoQXJyYXksICdpc0FycmF5JyksXG4gICAgICAgIG5hdGl2ZUlzRmluaXRlID0gY29udGV4dC5pc0Zpbml0ZSxcbiAgICAgICAgbmF0aXZlS2V5cyA9IGdldE5hdGl2ZShPYmplY3QsICdrZXlzJyksXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlTm93ID0gZ2V0TmF0aXZlKERhdGUsICdub3cnKSxcbiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LFxuICAgICAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbTtcblxuICAgIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIGAtSW5maW5pdHlgIGFuZCBgSW5maW5pdHlgLiAqL1xuICAgIHZhciBORUdBVElWRV9JTkZJTklUWSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSxcbiAgICAgICAgUE9TSVRJVkVfSU5GSU5JVFkgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cbiAgICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xuICAgIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgICAgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsXG4gICAgICAgIEhBTEZfTUFYX0FSUkFZX0xFTkdUSCA9IE1BWF9BUlJBWV9MRU5HVEggPj4+IDE7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGFzIHRoZSBbbWF4aW11bSBsZW5ndGhdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW51bWJlci5tYXhfc2FmZV9pbnRlZ2VyKVxuICAgICAqIG9mIGFuIGFycmF5LWxpa2UgdmFsdWUuXG4gICAgICovXG4gICAgdmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4gICAgLyoqIFVzZWQgdG8gc3RvcmUgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gICAgdmFyIG1ldGFNYXAgPSBXZWFrTWFwICYmIG5ldyBXZWFrTWFwO1xuXG4gICAgLyoqIFVzZWQgdG8gbG9va3VwIHVubWluaWZpZWQgZnVuY3Rpb24gbmFtZXMuICovXG4gICAgdmFyIHJlYWxOYW1lcyA9IHt9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBNZXRob2RzIHRoYXQgb3BlcmF0ZSBvbiBhbmQgcmV0dXJuIGFycmF5cywgY29sbGVjdGlvbnMsIGFuZCBmdW5jdGlvbnMgY2FuXG4gICAgICogYmUgY2hhaW5lZCB0b2dldGhlci4gTWV0aG9kcyB0aGF0IHJldHJpZXZlIGEgc2luZ2xlIHZhbHVlIG9yIG1heSByZXR1cm4gYVxuICAgICAqIHByaW1pdGl2ZSB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZW5kIHRoZSBjaGFpbiByZXR1cm5pbmcgdGhlIHVud3JhcHBlZFxuICAgICAqIHZhbHVlLiBFeHBsaWNpdCBjaGFpbmluZyBtYXkgYmUgZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuIFRoZSBleGVjdXRpb24gb2ZcbiAgICAgKiBjaGFpbmVkIG1ldGhvZHMgaXMgbGF6eSwgdGhhdCBpcywgZXhlY3V0aW9uIGlzIGRlZmVycmVkIHVudGlsIGBfI3ZhbHVlYFxuICAgICAqIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi4gU2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHN0cmF0ZWd5IHdoaWNoIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGNhbiBoZWxwXG4gICAgICogdG8gYXZvaWQgdGhlIGNyZWF0aW9uIG9mIGludGVybWVkaWF0ZSBkYXRhIHN0cnVjdHVyZXMgYW5kIGdyZWF0bHkgcmVkdWNlIHRoZVxuICAgICAqIG51bWJlciBvZiBpdGVyYXRlZSBleGVjdXRpb25zLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHJldmVyc2VgLCBgc2hpZnRgLCBgc2xpY2VgLCBgc29ydGAsXG4gICAgICogYHNwbGljZWAsIGFuZCBgdW5zaGlmdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBTdHJpbmdgIG1ldGhvZHMgYXJlOlxuICAgICAqIGByZXBsYWNlYCBhbmQgYHNwbGl0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uIGFyZTpcbiAgICAgKiBgY29tcGFjdGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBkcm9wUmlnaHRXaGlsZWAsIGBkcm9wV2hpbGVgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmlyc3RgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGBwbHVja2AsIGByZWplY3RgLCBgcmVzdGAsIGByZXZlcnNlYCxcbiAgICAgKiBgc2xpY2VgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRvQXJyYXlgLFxuICAgICAqIGFuZCBgd2hlcmVgXG4gICAgICpcbiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgbWV0aG9kcyBhcmU6XG4gICAgICogYGFmdGVyYCwgYGFyeWAsIGBhc3NpZ25gLCBgYXRgLCBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCxcbiAgICAgKiBgY2FsbGJhY2tgLCBgY2hhaW5gLCBgY2h1bmtgLCBgY29tbWl0YCwgYGNvbXBhY3RgLCBgY29uY2F0YCwgYGNvbnN0YW50YCxcbiAgICAgKiBgY291bnRCeWAsIGBjcmVhdGVgLCBgY3VycnlgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCxcbiAgICAgKiBgZGVmZXJgLCBgZGVsYXlgLCBgZGlmZmVyZW5jZWAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBkcm9wUmlnaHRXaGlsZWAsXG4gICAgICogYGRyb3BXaGlsZWAsIGBmaWxsYCwgYGZpbHRlcmAsIGBmbGF0dGVuYCwgYGZsYXR0ZW5EZWVwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCxcbiAgICAgKiBgZm9yRWFjaGAsIGBmb3JFYWNoUmlnaHRgLCBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLFxuICAgICAqIGBmdW5jdGlvbnNgLCBgZ3JvdXBCeWAsIGBpbmRleEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludmVydGAsXG4gICAgICogYGludm9rZWAsIGBrZXlzYCwgYGtleXNJbmAsIGBtYXBgLCBgbWFwS2V5c2AsIGBtYXBWYWx1ZXNgLCBgbWF0Y2hlc2AsXG4gICAgICogYG1hdGNoZXNQcm9wZXJ0eWAsIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1ldGhvZGAsIGBtZXRob2RPZmAsIGBtaXhpbmAsXG4gICAgICogYG1vZEFyZ3NgLCBgbmVnYXRlYCwgYG9taXRgLCBgb25jZWAsIGBwYWlyc2AsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsXG4gICAgICogYHBhcnRpdGlvbmAsIGBwaWNrYCwgYHBsYW50YCwgYHBsdWNrYCwgYHByb3BlcnR5YCwgYHByb3BlcnR5T2ZgLCBgcHVsbGAsXG4gICAgICogYHB1bGxBdGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJlYXJnYCwgYHJlamVjdGAsIGByZW1vdmVgLCBgcmVzdGAsIGByZXN0UGFyYW1gLFxuICAgICAqIGByZXZlcnNlYCwgYHNldGAsIGBzaHVmZmxlYCwgYHNsaWNlYCwgYHNvcnRgLCBgc29ydEJ5YCwgYHNvcnRCeUFsbGAsXG4gICAgICogYHNvcnRCeU9yZGVyYCwgYHNwbGljZWAsIGBzcHJlYWRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLFxuICAgICAqIGB0YWtlV2hpbGVgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRocnVgLCBgdGltZXNgLCBgdG9BcnJheWAsIGB0b1BsYWluT2JqZWN0YCxcbiAgICAgKiBgdHJhbnNmb3JtYCwgYHVuaW9uYCwgYHVuaXFgLCBgdW5zaGlmdGAsIGB1bnppcGAsIGB1bnppcFdpdGhgLCBgdmFsdWVzYCxcbiAgICAgKiBgdmFsdWVzSW5gLCBgd2hlcmVgLCBgd2l0aG91dGAsIGB3cmFwYCwgYHhvcmAsIGB6aXBgLCBgemlwT2JqZWN0YCwgYHppcFdpdGhgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgYXJlICoqbm90KiogY2hhaW5hYmxlIGJ5IGRlZmF1bHQgYXJlOlxuICAgICAqIGBhZGRgLCBgYXR0ZW1wdGAsIGBjYW1lbENhc2VgLCBgY2FwaXRhbGl6ZWAsIGBjZWlsYCwgYGNsb25lYCwgYGNsb25lRGVlcGAsXG4gICAgICogYGRlYnVycmAsIGBlbmRzV2l0aGAsIGBlc2NhcGVgLCBgZXNjYXBlUmVnRXhwYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCxcbiAgICAgKiBgZmluZEtleWAsIGBmaW5kTGFzdGAsIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGZpbmRXaGVyZWAsIGBmaXJzdGAsXG4gICAgICogYGZsb29yYCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCwgYGlkZW50aXR5YCwgYGluY2x1ZGVzYCwgYGluZGV4T2ZgLFxuICAgICAqIGBpblJhbmdlYCwgYGlzQXJndW1lbnRzYCwgYGlzQXJyYXlgLCBgaXNCb29sZWFuYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLFxuICAgICAqIGBpc0VtcHR5YCwgYGlzRXF1YWxgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAgYGlzRnVuY3Rpb25gLCBgaXNNYXRjaGAsXG4gICAgICogYGlzTmF0aXZlYCwgYGlzTmFOYCwgYGlzTnVsbGAsIGBpc051bWJlcmAsIGBpc09iamVjdGAsIGBpc1BsYWluT2JqZWN0YCxcbiAgICAgKiBgaXNSZWdFeHBgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgaXNUeXBlZEFycmF5YCwgYGpvaW5gLCBga2ViYWJDYXNlYCxcbiAgICAgKiBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsIGBsdGAsIGBsdGVgLCBgbWF4YCwgYG1pbmAsIGBub0NvbmZsaWN0YCwgYG5vb3BgLFxuICAgICAqIGBub3dgLCBgcGFkYCwgYHBhZExlZnRgLCBgcGFkUmlnaHRgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLFxuICAgICAqIGByZWR1Y2VSaWdodGAsIGByZXBlYXRgLCBgcmVzdWx0YCwgYHJvdW5kYCwgYHJ1bkluQ29udGV4dGAsIGBzaGlmdGAsIGBzaXplYCxcbiAgICAgKiBgc25ha2VDYXNlYCwgYHNvbWVgLCBgc29ydGVkSW5kZXhgLCBgc29ydGVkTGFzdEluZGV4YCwgYHN0YXJ0Q2FzZWAsXG4gICAgICogYHN0YXJ0c1dpdGhgLCBgc3VtYCwgYHRlbXBsYXRlYCwgYHRyaW1gLCBgdHJpbUxlZnRgLCBgdHJpbVJpZ2h0YCwgYHRydW5jYCxcbiAgICAgKiBgdW5lc2NhcGVgLCBgdW5pcXVlSWRgLCBgdmFsdWVgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kIGBzYW1wbGVgIHdpbGwgcmV0dXJuIGEgd3JhcHBlZCB2YWx1ZSB3aGVuIGBuYCBpcyBwcm92aWRlZCxcbiAgICAgKiBvdGhlcndpc2UgYW4gdW53cmFwcGVkIHZhbHVlIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQG5hbWUgX1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBjYXRlZ29yeSBDaGFpblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyByZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZVxuICAgICAqIHdyYXBwZWQucmVkdWNlKGZ1bmN0aW9uKHRvdGFsLCBuKSB7XG4gICAgICogICByZXR1cm4gdG90YWwgKyBuO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIHJldHVybnMgYSB3cmFwcGVkIHZhbHVlXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzLnZhbHVlKCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2Rhc2godmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExvZGFzaFdyYXBwZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdfX2NoYWluX18nKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSkge1xuICAgICAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgYWxsIGNoYWluaW5nIHdyYXBwZXJzIGluaGVyaXQgZnJvbS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUxvZGFzaCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgY29uc3RydWN0b3IgZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjaGFpbkFsbF0gRW5hYmxlIGNoYWluaW5nIGZvciBhbGwgd3JhcHBlciBtZXRob2RzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthY3Rpb25zPVtdXSBBY3Rpb25zIHRvIHBlZm9ybSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTG9kYXNoV3JhcHBlcih2YWx1ZSwgY2hhaW5BbGwsIGFjdGlvbnMpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBhY3Rpb25zIHx8IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCBlbnZpcm9ubWVudCBmZWF0dXJlIGZsYWdzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgT2JqZWN0XG4gICAgICovXG4gICAgdmFyIHN1cHBvcnQgPSBsb2Rhc2guc3VwcG9ydCA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAgICAgKiBlbWJlZGRlZCBSdWJ5IChFUkIpLiBDaGFuZ2UgdGhlIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2VcbiAgICAgKiBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgT2JqZWN0XG4gICAgICovXG4gICAgbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUgUmVnRXhwXG4gICAgICAgKi9cbiAgICAgICdlc2NhcGUnOiByZUVzY2FwZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSBSZWdFeHBcbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSBSZWdFeHBcbiAgICAgICAqL1xuICAgICAgJ2ludGVycG9sYXRlJzogcmVJbnRlcnBvbGF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUgc3RyaW5nXG4gICAgICAgKi9cbiAgICAgICd2YXJpYWJsZSc6ICcnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSBPYmplY3RcbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAgICAgICAqL1xuICAgICAgICAnXyc6IGxvZGFzaFxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGF6eSB3cmFwcGVyIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBsYXp5IGV2YWx1YXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19kaXJfXyA9IDE7XG4gICAgICB0aGlzLl9fZmlsdGVyZWRfXyA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGVlc19fID0gW107XG4gICAgICB0aGlzLl9fdGFrZUNvdW50X18gPSBQT1NJVElWRV9JTkZJTklUWTtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gYXJyYXlDb3B5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGFycmF5Q29weSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gYXJyYXlDb3B5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8IGFyckxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgfHwgKGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoKGlzUmlnaHQgJiYgaXNBcnIpID8gYXJyYXkucmV2ZXJzZSgpIDogYXJyYXksIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlIChsZW5ndGgtLSAmJiByZXNJbmRleCA8IHRha2VDb3VudCkge1xuICAgICAgICBpbmRleCArPSBkaXI7XG5cbiAgICAgICAgdmFyIGl0ZXJJbmRleCA9IC0xLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge1xuICAgICAgICAgIHZhciBkYXRhID0gaXRlcmF0ZWVzW2l0ZXJJbmRleF0sXG4gICAgICAgICAgICAgIGl0ZXJhdGVlID0gZGF0YS5pdGVyYXRlZSxcbiAgICAgICAgICAgICAgdHlwZSA9IGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX01BUF9GTEFHKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbXB1dGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS92YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBuYW1lIENhY2hlXG4gICAgICogQG1lbWJlck9mIF8ubWVtb2l6ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1hcENhY2hlKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIF8ubWVtb2l6ZS5DYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQgc3VjY2Vzc2Z1bGx5LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwRGVsZXRlKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjYWNoZWQgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgXy5tZW1vaXplLkNhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNhY2hlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBHZXQoa2V5KSB7XG4gICAgICByZXR1cm4ga2V5ID09ICdfX3Byb3RvX18nID8gdW5kZWZpbmVkIDogdGhpcy5fX2RhdGFfX1trZXldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGNhY2hlZCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgXy5tZW1vaXplLkNhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcEhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBrZXkgIT0gJ19fcHJvdG9fXycgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9fZGF0YV9fLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYHZhbHVlYCB0byBga2V5YCBvZiB0aGUgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBfLm1lbW9pemUuQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSAhPSAnX19wcm90b19fJykge1xuICAgICAgICB0aGlzLl9fZGF0YV9fW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhIGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlcyA/IHZhbHVlcy5sZW5ndGggOiAwO1xuXG4gICAgICB0aGlzLmRhdGEgPSB7ICdoYXNoJzogbmF0aXZlQ3JlYXRlKG51bGwpLCAnc2V0JzogbmV3IFNldCB9O1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHRoaXMucHVzaCh2YWx1ZXNbbGVuZ3RoXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gYGNhY2hlYCBtaW1pY2tpbmcgdGhlIHJldHVybiBzaWduYXR1cmUgb2ZcbiAgICAgKiBgXy5pbmRleE9mYCBieSByZXR1cm5pbmcgYDBgIGlmIHRoZSB2YWx1ZSBpcyBmb3VuZCwgZWxzZSBgLTFgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYDBgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYC0xYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYWNoZUluZGV4T2YoY2FjaGUsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGNhY2hlLmRhdGEsXG4gICAgICAgICAgcmVzdWx0ID0gKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc09iamVjdCh2YWx1ZSkpID8gZGF0YS5zZXQuaGFzKHZhbHVlKSA6IGRhdGEuaGFzaFt2YWx1ZV07XG5cbiAgICAgIHJldHVybiByZXN1bHQgPyAwIDogLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcHVzaFxuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhY2hlUHVzaCh2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICBkYXRhLnNldC5hZGQodmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YS5oYXNoW3ZhbHVlXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcnJheSBqb2luaW5nIGBhcnJheWAgd2l0aCBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gam9pbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gam9pbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb25jYXRlbmF0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlDb25jYXQoYXJyYXksIG90aGVyKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgb3RoSW5kZXggPSAtMSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoICsgb3RoTGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK290aEluZGV4IDwgb3RoTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleCsrXSA9IG90aGVyW290aEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5Q29weShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFja1xuICAgICAqIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogY2FsbGJhY2sgc2hvcnRoYW5kcyBhbmQgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheUVhY2hSaWdodChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZXZlcnlgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFja1xuICAgICAqIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlRXh0cmVtdW1gIGZvciBhcnJheXMgd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgXG4gICAgICogd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBmdW5jdGlvbiB1c2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Kn0gZXhWYWx1ZSBUaGUgaW5pdGlhbCBleHRyZW11bSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IsIGV4VmFsdWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBjb21wdXRlZCA9IGV4VmFsdWUsXG4gICAgICAgICAgcmVzdWx0ID0gY29tcHV0ZWQ7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSAraXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIGlmIChjb21wYXJhdG9yKGN1cnJlbnQsIGNvbXB1dGVkKSkge1xuICAgICAgICAgIGNvbXB1dGVkID0gY3VycmVudDtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0WysrcmVzSW5kZXhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrXG4gICAgICogc2hvcnRoYW5kcyBhbmQgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFja1xuICAgICAqIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRGcm9tQXJyYXldIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YFxuICAgICAqICBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEZyb21BcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAoaW5pdEZyb21BcnJheSAmJiBsZW5ndGgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgICAqIGNhbGxiYWNrIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRGcm9tQXJyYXldIFNwZWNpZnkgdXNpbmcgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgXG4gICAgICogIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRGcm9tQXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoaW5pdEZyb21BcnJheSAmJiBsZW5ndGgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgICB9XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFja1xuICAgICAqIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc3VtYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy4uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTdW0oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IDA7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHQgKz0gK2l0ZXJhdGVlKGFycmF5W2xlbmd0aF0pIHx8IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uYXNzaWduYCB1c2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0VmFsdWUgVGhlIGRlc3RpbmF0aW9uIG9iamVjdCBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNvdXJjZVZhbHVlIFRoZSBzb3VyY2Ugb2JqZWN0IHByb3BlcnR5IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24gdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25EZWZhdWx0cyhvYmplY3RWYWx1ZSwgc291cmNlVmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmplY3RWYWx1ZSA9PT0gdW5kZWZpbmVkID8gc291cmNlVmFsdWUgOiBvYmplY3RWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbmAgdXNlLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduRGVmYXVsdHNgIGV4Y2VwdCB0aGF0IGl0IGlnbm9yZXNcbiAgICAgKiBpbmhlcml0ZWQgcHJvcGVydHkgdmFsdWVzIHdoZW4gY2hlY2tpbmcgaWYgYSBwcm9wZXJ0eSBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3RWYWx1ZSBUaGUgZGVzdGluYXRpb24gb2JqZWN0IHByb3BlcnR5IHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc291cmNlVmFsdWUgVGhlIHNvdXJjZSBvYmplY3QgcHJvcGVydHkgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IGFzc29jaWF0ZWQgd2l0aCB0aGUgb2JqZWN0IGFuZCBzb3VyY2UgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduT3duRGVmYXVsdHMob2JqZWN0VmFsdWUsIHNvdXJjZVZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgcmV0dXJuIChvYmplY3RWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSlcbiAgICAgICAgPyBzb3VyY2VWYWx1ZVxuICAgICAgICA6IG9iamVjdFZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5hc3NpZ25gIGZvciBjdXN0b21pemluZyBhc3NpZ25lZCB2YWx1ZXMgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGFyZ3VtZW50IGp1Z2dsaW5nLCBtdWx0aXBsZSBzb3VyY2VzLCBhbmQgYHRoaXNgIGJpbmRpbmcgYGN1c3RvbWl6ZXJgXG4gICAgICogZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcHJvcHMgPSBrZXlzKHNvdXJjZSksXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIHJlc3VsdCA9IGN1c3RvbWl6ZXIodmFsdWUsIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKTtcblxuICAgICAgICBpZiAoKHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlc3VsdCAhPT0gdmFsdWUpIDogKHZhbHVlID09PSB2YWx1ZSkpIHx8XG4gICAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICAgIG9iamVjdFtrZXldID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBhcmd1bWVudCBqdWdnbGluZyxcbiAgICAgKiBtdWx0aXBsZSBzb3VyY2VzLCBhbmQgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlQ29weShzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBzdHJpbmcgY29sbGVjdGlvbnNcbiAgICAgKiBhbmQgaW5kaXZpZHVhbCBrZXkgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXXxzdHJpbmdbXX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIG9yIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwaWNrZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUF0KGNvbGxlY3Rpb24sIHByb3BzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc05pbCA9IGNvbGxlY3Rpb24gPT0gbnVsbCxcbiAgICAgICAgICBpc0FyciA9ICFpc05pbCAmJiBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSxcbiAgICAgICAgICBsZW5ndGggPSBpc0FyciA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMCxcbiAgICAgICAgICBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShwcm9wc0xlbmd0aCk7XG5cbiAgICAgIHdoaWxlKCsraW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgICByZXN1bHRbaW5kZXhdID0gaXNJbmRleChrZXksIGxlbmd0aCkgPyBjb2xsZWN0aW9uW2tleV0gOiB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGlzTmlsID8gdW5kZWZpbmVkIDogY29sbGVjdGlvbltrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvcHkoc291cmNlLCBwcm9wcywgb2JqZWN0KSB7XG4gICAgICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jYWxsYmFja2Agd2hpY2ggc3VwcG9ydHMgc3BlY2lmeWluZyB0aGVcbiAgICAgKiBudW1iZXIgb2YgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyZ0NvdW50XSBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDYWxsYmFjayhmdW5jLCB0aGlzQXJnLCBhcmdDb3VudCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgZnVuYztcbiAgICAgIGlmICh0eXBlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNBcmcgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gZnVuY1xuICAgICAgICAgIDogYmluZENhbGxiYWNrKGZ1bmMsIHRoaXNBcmcsIGFyZ0NvdW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGZ1bmMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNBcmcgPT09IHVuZGVmaW5lZFxuICAgICAgICA/IHByb3BlcnR5KGZ1bmMpXG4gICAgICAgIDogYmFzZU1hdGNoZXNQcm9wZXJ0eShmdW5jLCB0aGlzQXJnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhcmd1bWVudCBqdWdnbGluZ1xuICAgICAqIGFuZCBgdGhpc2AgYmluZGluZyBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgYHZhbHVlYCBiZWxvbmdzIHRvLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0E9W11dIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQj1bXV0gQXNzb2NpYXRlcyBjbG9uZXMgd2l0aCBzb3VyY2UgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBpc0RlZXAsIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFja0EsIHN0YWNrQikge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0KSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGFycmF5Q29weSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IG9ialRvU3RyaW5nLmNhbGwodmFsdWUpLFxuICAgICAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWc7XG5cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZU9iamVjdChpc0Z1bmMgPyB7fSA6IHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjbG9uZWFibGVUYWdzW3RhZ11cbiAgICAgICAgICAgID8gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKVxuICAgICAgICAgICAgOiAob2JqZWN0ID8gdmFsdWUgOiB7fSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gICAgICBzdGFja0EgfHwgKHN0YWNrQSA9IFtdKTtcbiAgICAgIHN0YWNrQiB8fCAoc3RhY2tCID0gW10pO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RhY2tBLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoc3RhY2tBW2xlbmd0aF0gPT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc3RhY2tCW2xlbmd0aF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEFkZCB0aGUgc291cmNlIHZhbHVlIHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgYXNzb2NpYXRlIGl0IHdpdGggaXRzIGNsb25lLlxuICAgICAgc3RhY2tBLnB1c2godmFsdWUpO1xuICAgICAgc3RhY2tCLnB1c2gocmVzdWx0KTtcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIChpc0FyciA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gYmFzZUNsb25lKHN1YlZhbHVlLCBpc0RlZXAsIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrQSwgc3RhY2tCKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChpc09iamVjdChwcm90b3R5cGUpKSB7XG4gICAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQgfHwge307XG4gICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kZWxheWAgYW5kIGBfLmRlZmVyYCB3aGljaCBhY2NlcHRzIGFuIGluZGV4XG4gICAgICogb2Ygd2hlcmUgdG8gc2xpY2UgdGhlIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYXJncyBUaGUgYXJndW1lbnRzIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEZWxheShmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kaWZmZXJlbmNlYCB3aGljaCBhY2NlcHRzIGEgc2luZ2xlIGFycmF5XG4gICAgICogb2YgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleE9mID0gZ2V0SW5kZXhPZigpLFxuICAgICAgICAgIGlzQ29tbW9uID0gaW5kZXhPZiA9PSBiYXNlSW5kZXhPZixcbiAgICAgICAgICBjYWNoZSA9IChpc0NvbW1vbiAmJiB2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpID8gY3JlYXRlQ2FjaGUodmFsdWVzKSA6IG51bGwsXG4gICAgICAgICAgdmFsdWVzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgIGluZGV4T2YgPSBjYWNoZUluZGV4T2Y7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcyA9IGNhY2hlO1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIHZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgIHZhciB2YWx1ZXNJbmRleCA9IHZhbHVlc0xlbmd0aDtcbiAgICAgICAgICB3aGlsZSAodmFsdWVzSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1t2YWx1ZXNJbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5kZXhPZih2YWx1ZXMsIHZhbHVlLCAwKSA8IDApIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFja1xuICAgICAqIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdHxzdHJpbmd9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrXG4gICAgICogc2hvcnRoYW5kcyBhbmQgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fHN0cmluZ30gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoUmlnaHQgPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duUmlnaHQsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZXZlcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gISFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBleHRyZW11bSB2YWx1ZSBvZiBgY29sbGVjdGlvbmAgaW52b2tpbmcgYGl0ZXJhdGVlYCBmb3IgZWFjaCB2YWx1ZVxuICAgICAqIGluIGBjb2xsZWN0aW9uYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoIHRoZSB2YWx1ZSBpcyByYW5rZWQuXG4gICAgICogVGhlIGBpdGVyYXRlZWAgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgZnVuY3Rpb24gdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0geyp9IGV4VmFsdWUgVGhlIGluaXRpYWwgZXh0cmVtdW0gdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgY29tcGFyYXRvciwgZXhWYWx1ZSkge1xuICAgICAgdmFyIGNvbXB1dGVkID0gZXhWYWx1ZSxcbiAgICAgICAgICByZXN1bHQgPSBjb21wdXRlZDtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gK2l0ZXJhdGVlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIGlmIChjb21wYXJhdG9yKGN1cnJlbnQsIGNvbXB1dGVkKSB8fCAoY3VycmVudCA9PT0gZXhWYWx1ZSAmJiBjdXJyZW50ID09PSByZXN1bHQpKSB7XG4gICAgICAgICAgY29tcHV0ZWQgPSBjdXJyZW50O1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogKCtzdGFydCB8fCAwKTtcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogKCtlbmQgfHwgMCk7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKGVuZCA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHdoaWxlIChzdGFydCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFja1xuICAgICAqIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZGAsIGBfLmZpbmRMYXN0YCwgYF8uZmluZEtleWAsIGFuZCBgXy5maW5kTGFzdEtleWAsXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFjayBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZywgd2hpY2ggaXRlcmF0ZXNcbiAgICAgKiBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyB0aGUgcHJvdmlkZWQgYGVhY2hGdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRLZXldIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBrZXkgb2YgdGhlIGZvdW5kIGVsZW1lbnRcbiAgICAgKiAgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZvdW5kIGVsZW1lbnQgb3IgaXRzIGtleSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmluZChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jLCByZXRLZXkpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGtleSwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXRLZXkgPyBrZXkgOiB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIGFkZGVkIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nXG4gICAgICogZmxhdHRlbmluZyBhbmQgc3BlY2lmeWluZyB0aGUgc3RhcnQgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgZmxhdHRlbmluZyB0byBhcnJheXMtbGlrZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGlzRGVlcCwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICAgICAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAgIChpc1N0cmljdCB8fCBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICAgIGJhc2VGbGF0dGVuKHZhbHVlLCBpc0RlZXAsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9ySW5gIGFuZCBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXNcbiAgICAgKiBvdmVyIGBvYmplY3RgIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBpbnZva2luZyBgaXRlcmF0ZWVgIGZvclxuICAgICAqIGVhY2ggcHJvcGVydHkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseVxuICAgICAqIHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlRm9yYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXNcbiAgICAgKiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3JSaWdodCA9IGNyZWF0ZUJhc2VGb3IodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFja1xuICAgICAqIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25SaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFja1xuICAgICAqIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIHRob3NlIHByb3ZpZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZmlsdGVyLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9iamVjdFtrZXldKSkge1xuICAgICAgICAgIHJlc3VsdFsrK3Jlc0luZGV4XSA9IGtleTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0cmluZyBwYXRoc1xuICAgICAqIGFuZCBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3BhdGhLZXldIFRoZSBrZXkgcmVwcmVzZW50YXRpb24gb2YgcGF0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgsIHBhdGhLZXkpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocGF0aEtleSAhPT0gdW5kZWZpbmVkICYmIHBhdGhLZXkgaW4gdG9PYmplY3Qob2JqZWN0KSkge1xuICAgICAgICBwYXRoID0gW3BhdGhLZXldO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtwYXRoW2luZGV4KytdXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aXRob3V0IHN1cHBvcnQgZm9yIGB0aGlzYCBiaW5kaW5nXG4gICAgICogYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmluZyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNMb29zZV0gU3BlY2lmeSBwZXJmb3JtaW5nIHBhcnRpYWwgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQV0gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQl0gVHJhY2tzIHRyYXZlcnNlZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIsIGlzTG9vc2UsIHN0YWNrQSwgc3RhY2tCKSB7XG4gICAgICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0KHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYmFzZUlzRXF1YWwsIGN1c3RvbWl6ZXIsIGlzTG9vc2UsIHN0YWNrQSwgc3RhY2tCKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmluZyBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzTG9vc2VdIFNwZWNpZnkgcGVyZm9ybWluZyBwYXJ0aWFsIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0E9W11dIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0I9W11dIFRyYWNrcyB0cmF2ZXJzZWQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGlzTG9vc2UsIHN0YWNrQSwgc3RhY2tCKSB7XG4gICAgICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgICAgICBvYmpUYWcgPSBhcnJheVRhZyxcbiAgICAgICAgICBvdGhUYWcgPSBhcnJheVRhZztcblxuICAgICAgaWYgKCFvYmpJc0Fycikge1xuICAgICAgICBvYmpUYWcgPSBvYmpUb1N0cmluZy5jYWxsKG9iamVjdCk7XG4gICAgICAgIGlmIChvYmpUYWcgPT0gYXJnc1RhZykge1xuICAgICAgICAgIG9ialRhZyA9IG9iamVjdFRhZztcbiAgICAgICAgfSBlbHNlIGlmIChvYmpUYWcgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgICAgb2JqSXNBcnIgPSBpc1R5cGVkQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFvdGhJc0Fycikge1xuICAgICAgICBvdGhUYWcgPSBvYmpUb1N0cmluZy5jYWxsKG90aGVyKTtcbiAgICAgICAgaWYgKG90aFRhZyA9PSBhcmdzVGFnKSB7XG4gICAgICAgICAgb3RoVGFnID0gb2JqZWN0VGFnO1xuICAgICAgICB9IGVsc2UgaWYgKG90aFRhZyAhPSBvYmplY3RUYWcpIHtcbiAgICAgICAgICBvdGhJc0FyciA9IGlzVHlwZWRBcnJheShvdGhlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIShvYmpJc0FyciB8fCBvYmpJc09iaikpIHtcbiAgICAgICAgcmV0dXJuIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNMb29zZSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICByZXR1cm4gZXF1YWxGdW5jKG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LCBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXIsIGN1c3RvbWl6ZXIsIGlzTG9vc2UsIHN0YWNrQSwgc3RhY2tCKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgLy8gRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gZGV0ZWN0aW5nIGNpcmN1bGFyIHJlZmVyZW5jZXMgc2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jSk8uXG4gICAgICBzdGFja0EgfHwgKHN0YWNrQSA9IFtdKTtcbiAgICAgIHN0YWNrQiB8fCAoc3RhY2tCID0gW10pO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RhY2tBLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoc3RhY2tBW2xlbmd0aF0gPT0gb2JqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIHN0YWNrQltsZW5ndGhdID09IG90aGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBBZGQgYG9iamVjdGAgYW5kIGBvdGhlcmAgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAgc3RhY2tBLnB1c2gob2JqZWN0KTtcbiAgICAgIHN0YWNrQi5wdXNoKG90aGVyKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IChvYmpJc0FyciA/IGVxdWFsQXJyYXlzIDogZXF1YWxPYmplY3RzKShvYmplY3QsIG90aGVyLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGlzTG9vc2UsIHN0YWNrQSwgc3RhY2tCKTtcblxuICAgICAgc3RhY2tBLnBvcCgpO1xuICAgICAgc3RhY2tCLnBvcCgpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmluZyBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IHRvT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgICAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIGN1c3RvbWl6ZXIsIHRydWUpIDogcmVzdWx0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrIHNob3J0aGFuZHNcbiAgICAgKiBhbmQgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2VzIG5vdCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgICAgIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgICAgIHZhciBrZXkgPSBtYXRjaERhdGFbMF1bMF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG1hdGNoRGF0YVswXVsxXTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gdmFsdWUgJiYgKHZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiB0b09iamVjdChvYmplY3QpKSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lcyBub3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkocGF0aCksXG4gICAgICAgICAgaXNDb21tb24gPSBpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpLFxuICAgICAgICAgIHBhdGhLZXkgPSAocGF0aCArICcnKTtcblxuICAgICAgcGF0aCA9IHRvUGF0aChwYXRoKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBrZXkgPSBwYXRoS2V5O1xuICAgICAgICBvYmplY3QgPSB0b09iamVjdChvYmplY3QpO1xuICAgICAgICBpZiAoKGlzQXJyIHx8ICFpc0NvbW1vbikgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgIG9iamVjdCA9IHBhdGgubGVuZ3RoID09IDEgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGtleSA9IGxhc3QocGF0aCk7XG4gICAgICAgICAgb2JqZWN0ID0gdG9PYmplY3Qob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlXG4gICAgICAgICAgPyAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIG9iamVjdCkpXG4gICAgICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqZWN0W2tleV0sIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFyZ3VtZW50IGp1Z2dsaW5nLFxuICAgICAqIG11bHRpcGxlIHNvdXJjZXMsIGFuZCBgdGhpc2AgYmluZGluZyBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0E9W11dIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQj1bXV0gQXNzb2NpYXRlcyB2YWx1ZXMgd2l0aCBzb3VyY2UgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyLCBzdGFja0EsIHN0YWNrQikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICB2YXIgaXNTcmNBcnIgPSBpc0FycmF5TGlrZShzb3VyY2UpICYmIChpc0FycmF5KHNvdXJjZSkgfHwgaXNUeXBlZEFycmF5KHNvdXJjZSkpLFxuICAgICAgICAgIHByb3BzID0gaXNTcmNBcnIgPyB1bmRlZmluZWQgOiBrZXlzKHNvdXJjZSk7XG5cbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCBzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAga2V5ID0gc3JjVmFsdWU7XG4gICAgICAgICAgc3JjVmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYmplY3RMaWtlKHNyY1ZhbHVlKSkge1xuICAgICAgICAgIHN0YWNrQSB8fCAoc3RhY2tBID0gW10pO1xuICAgICAgICAgIHN0YWNrQiB8fCAoc3RhY2tCID0gW10pO1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgYmFzZU1lcmdlLCBjdXN0b21pemVyLCBzdGFja0EsIHN0YWNrQik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGlzQ29tbW9uID0gcmVzdWx0ID09PSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHNyY1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoKHJlc3VsdCAhPT0gdW5kZWZpbmVkIHx8IChpc1NyY0FyciAmJiAhKGtleSBpbiBvYmplY3QpKSkgJiZcbiAgICAgICAgICAgICAgKGlzQ29tbW9uIHx8IChyZXN1bHQgPT09IHJlc3VsdCA/IChyZXN1bHQgIT09IHZhbHVlKSA6ICh2YWx1ZSA9PT0gdmFsdWUpKSkpIHtcbiAgICAgICAgICAgIG9iamVjdFtrZXldID0gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0E9W11dIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQj1bXV0gQXNzb2NpYXRlcyB2YWx1ZXMgd2l0aCBzb3VyY2UgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFja0EsIHN0YWNrQikge1xuICAgICAgdmFyIGxlbmd0aCA9IHN0YWNrQS5sZW5ndGgsXG4gICAgICAgICAgc3JjVmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChzdGFja0FbbGVuZ3RoXSA9PSBzcmNWYWx1ZSkge1xuICAgICAgICAgIG9iamVjdFtrZXldID0gc3RhY2tCW2xlbmd0aF07XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGlzQ29tbW9uID0gcmVzdWx0ID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICByZXN1bHQgPSBzcmNWYWx1ZTtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKHNyY1ZhbHVlKSAmJiAoaXNBcnJheShzcmNWYWx1ZSkgfHwgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKSkpIHtcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgICAgPyB2YWx1ZVxuICAgICAgICAgICAgOiAoaXNBcnJheUxpa2UodmFsdWUpID8gYXJyYXlDb3B5KHZhbHVlKSA6IFtdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICByZXN1bHQgPSBpc0FyZ3VtZW50cyh2YWx1ZSlcbiAgICAgICAgICAgID8gdG9QbGFpbk9iamVjdCh2YWx1ZSlcbiAgICAgICAgICAgIDogKGlzUGxhaW5PYmplY3QodmFsdWUpID8gdmFsdWUgOiB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQWRkIHRoZSBzb3VyY2UgdmFsdWUgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzIGFuZCBhc3NvY2lhdGVcbiAgICAgIC8vIGl0IHdpdGggaXRzIG1lcmdlZCB2YWx1ZS5cbiAgICAgIHN0YWNrQS5wdXNoKHNyY1ZhbHVlKTtcbiAgICAgIHN0YWNrQi5wdXNoKHJlc3VsdCk7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgb2JqZWN0W2tleV0gPSBtZXJnZUZ1bmMocmVzdWx0LCBzcmNWYWx1ZSwgY3VzdG9taXplciwgc3RhY2tBLCBzdGFja0IpO1xuICAgICAgfSBlbHNlIGlmIChyZXN1bHQgPT09IHJlc3VsdCA/IChyZXN1bHQgIT09IHZhbHVlKSA6ICh2YWx1ZSA9PT0gdmFsdWUpKSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgdmFyIHBhdGhLZXkgPSAocGF0aCArICcnKTtcbiAgICAgIHBhdGggPSB0b1BhdGgocGF0aCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCwgcGF0aEtleSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogaW5kZXggYXJndW1lbnRzIGFuZCBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGluZGV4ICE9IHByZXZpb3VzICYmIGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmRvbWAgd2l0aG91dCBzdXBwb3J0IGZvciBhcmd1bWVudCBqdWdnbGluZ1xuICAgICAqIGFuZCByZXR1cm5pbmcgZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbiBUaGUgbWluaW11bSBwb3NzaWJsZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4IFRoZSBtYXhpbXVtIHBvc3NpYmxlIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShtaW4sIG1heCkge1xuICAgICAgcmV0dXJuIG1pbiArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZWR1Y2VgIGFuZCBgXy5yZWR1Y2VSaWdodGAgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGNhbGxiYWNrIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgICAqIHVzaW5nIHRoZSBwcm92aWRlZCBgZWFjaEZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaXRGcm9tQ29sbGVjdGlvbiBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBvciBsYXN0IGVsZW1lbnRcbiAgICAgKiAgb2YgYGNvbGxlY3Rpb25gIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEZyb21Db2xsZWN0aW9uLCBlYWNoRnVuYykge1xuICAgICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gaW5pdEZyb21Db2xsZWN0aW9uXG4gICAgICAgICAgPyAoaW5pdEZyb21Db2xsZWN0aW9uID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICAgIDogaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0RGF0YWAgd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBkZXRlY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldERhdGEgPSAhbWV0YU1hcCA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgZGF0YSkge1xuICAgICAgbWV0YU1hcC5zZXQoZnVuYywgZGF0YSk7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiAoK3N0YXJ0IHx8IDApO1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IGxlbmd0aCkgPyBsZW5ndGggOiAoK2VuZCB8fCAwKTtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrIHNob3J0aGFuZHNcbiAgICAgKiBhbmQgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydEJ5YCB3aGljaCB1c2VzIGBjb21wYXJlcmAgdG8gZGVmaW5lXG4gICAgICogdGhlIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmVyIFRoZSBmdW5jdGlvbiB0byBkZWZpbmUgc29ydCBvcmRlci5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydEJ5KGFycmF5LCBjb21wYXJlcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgYXJyYXkuc29ydChjb21wYXJlcik7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydEJ5T3JkZXJgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gaXRlcmF0ZWVzIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW5bXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRCeU9yZGVyKGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBnZXRDYWxsYmFjaygpLFxuICAgICAgICAgIGluZGV4ID0gLTE7XG5cbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHsgcmV0dXJuIGNhbGxiYWNrKGl0ZXJhdGVlKTsgfSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHsgcmV0dXJuIGl0ZXJhdGVlKHZhbHVlKTsgfSk7XG4gICAgICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuICAgICAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2sgc2hvcnRoYW5kc1xuICAgICAqIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU3VtKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gMDtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgKz0gK2l0ZXJhdGVlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikgfHwgMDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxYCB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrIHNob3J0aGFuZHNcbiAgICAgKiBhbmQgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUtdmFsdWUtZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4T2YgPSBnZXRJbmRleE9mKCksXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gaW5kZXhPZiA9PSBiYXNlSW5kZXhPZixcbiAgICAgICAgICBpc0xhcmdlID0gaXNDb21tb24gJiYgbGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUsXG4gICAgICAgICAgc2VlbiA9IGlzTGFyZ2UgPyBjcmVhdGVDYWNoZSgpIDogbnVsbCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgaW5kZXhPZiA9IGNhY2hlSW5kZXhPZjtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlzTGFyZ2UgPSBmYWxzZTtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSA6IHZhbHVlO1xuXG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiB2YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5kZXhPZihzZWVuLCBjb21wdXRlZCwgMCkgPCAwKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlIHx8IGlzTGFyZ2UpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgICAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICAgICAqIG9mIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBvYmplY3RbcHJvcHNbaW5kZXhdXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZHJvcFJpZ2h0V2hpbGVgLCBgXy5kcm9wV2hpbGVgLCBgXy50YWtlUmlnaHRXaGlsZWAsXG4gICAgICogYW5kIGBfLnRha2VXaGlsZWAgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFjayBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRHJvcF0gU3BlY2lmeSBkcm9wcGluZyBlbGVtZW50cyBpbnN0ZWFkIG9mIHRha2luZyB0aGVtLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgaXNEcm9wLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkgJiYgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge31cbiAgICAgIHJldHVybiBpc0Ryb3BcbiAgICAgICAgPyBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyAwIDogaW5kZXgpLCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogbGVuZ3RoKSlcbiAgICAgICAgOiBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiAwKSwgKGZyb21SaWdodCA/IGxlbmd0aCA6IGluZGV4KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHdyYXBwZXJWYWx1ZWAgd2hpY2ggcmV0dXJucyB0aGUgcmVzdWx0IG9mXG4gICAgICogcGVyZm9ybWluZyBhIHNlcXVlbmNlIG9mIGFjdGlvbnMgb24gdGhlIHVud3JhcHBlZCBgdmFsdWVgLCB3aGVyZSBlYWNoXG4gICAgICogc3VjY2Vzc2l2ZSBhY3Rpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhY3Rpb25zIEFjdGlvbnMgdG8gcGVmb3JtIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdyYXBwZXJWYWx1ZSh2YWx1ZSwgYWN0aW9ucykge1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC52YWx1ZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYWN0aW9ucy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBhY3Rpb25zW2luZGV4XTtcbiAgICAgICAgcmVzdWx0ID0gYWN0aW9uLmZ1bmMuYXBwbHkoYWN0aW9uLnRoaXNBcmcsIGFycmF5UHVzaChbcmVzdWx0XSwgYWN0aW9uLmFyZ3MpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmluYXJ5SW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiBsb3c7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT09IHZhbHVlICYmIGhpZ2ggPD0gSEFMRl9NQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuXG4gICAgICAgICAgaWYgKChyZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKSkgJiYgY29tcHV0ZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWdoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJpbmFyeUluZGV4QnkoYXJyYXksIHZhbHVlLCBpZGVudGl0eSwgcmV0SGlnaGVzdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiaW5hcnlJbmRleGAgZXhjZXB0IHRoYXQgaXQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvclxuICAgICAqIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXIgc29ydCByYW5raW5nLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJpbmFyeUluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNVbmRlZiA9IHZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIHZhciBtaWQgPSBuYXRpdmVGbG9vcigobG93ICsgaGlnaCkgLyAyKSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUoYXJyYXlbbWlkXSksXG4gICAgICAgICAgICBpc0RlZiA9IGNvbXB1dGVkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBpc1JlZmxleGl2ZSA9IGNvbXB1dGVkID09PSBjb21wdXRlZDtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gaXNSZWZsZXhpdmUgfHwgcmV0SGlnaGVzdDtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc051bGwpIHtcbiAgICAgICAgICBzZXRMb3cgPSBpc1JlZmxleGl2ZSAmJiBpc0RlZiAmJiAocmV0SGlnaGVzdCB8fCBjb21wdXRlZCAhPSBudWxsKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmKSB7XG4gICAgICAgICAgc2V0TG93ID0gaXNSZWZsZXhpdmUgJiYgKHJldEhpZ2hlc3QgfHwgaXNEZWYpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbXB1dGVkID09IG51bGwpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQ2FsbGJhY2tgIHdoaWNoIG9ubHkgc3VwcG9ydHMgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBhbmQgc3BlY2lmeWluZyB0aGUgbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYmluZC5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyZ0NvdW50XSBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJpbmRDYWxsYmFjayhmdW5jLCB0aGlzQXJnLCBhcmdDb3VudCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXNBcmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoYXJnQ291bnQpIHtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBmdW5jdGlvbihhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FzZSA1OiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyLCBrZXksIG9iamVjdCwgc291cmNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgb3RoZXIsIGtleSwgb2JqZWN0LCBzb3VyY2UpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGdpdmVuIGFycmF5IGJ1ZmZlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1ZmZlcikge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXIuYnl0ZUxlbmd0aCksXG4gICAgICAgICAgdmlldyA9IG5ldyBVaW50OEFycmF5KHJlc3VsdCk7XG5cbiAgICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlcikpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMpIHtcbiAgICAgIHZhciBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVmdExlbmd0aCArIGFyZ3NMZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICAgICAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycykge1xuICAgICAgdmFyIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGFyZ3NMZW5ndGggKyByaWdodExlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uY291bnRCeWAsIGBfLmdyb3VwQnlgLCBgXy5pbmRleEJ5YCwgb3IgYF8ucGFydGl0aW9uYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQga2V5cyBhbmQgdmFsdWVzIG9mIHRoZSBhY2N1bXVsYXRvciBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgZnVuY3Rpb24gdG8gaW5pdGlhbGl6ZSB0aGUgYWNjdW11bGF0b3Igb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUsIHRoaXNBcmcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuICAgICAgICBpdGVyYXRlZSA9IGdldENhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCAzKTtcblxuICAgICAgICBpZiAoaXNBcnJheShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBjb2xsZWN0aW9uW2luZGV4XTtcbiAgICAgICAgICAgIHNldHRlcihyZXN1bHQsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pLCBjb2xsZWN0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICAgICAgc2V0dGVyKHJlc3VsdCwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pLCBjb2xsZWN0aW9uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uYXNzaWduYCwgYF8uZGVmYXVsdHNgLCBvciBgXy5tZXJnZWAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gcmVzdFBhcmFtKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzW2xlbmd0aCAtIDJdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRoaXNBcmcgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAodHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGN1c3RvbWl6ZXIgPSBiaW5kQ2FsbGJhY2soY3VzdG9taXplciwgdGhpc0FyZywgNSk7XG4gICAgICAgICAgbGVuZ3RoIC09IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IHR5cGVvZiB0aGlzQXJnID09ICdmdW5jdGlvbicgPyB0aGlzQXJnIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGxlbmd0aCAtPSAoY3VzdG9taXplciA/IDEgOiAwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGdldExlbmd0aChjb2xsZWN0aW9uKSA6IDA7XG4gICAgICAgIGlmICghaXNMZW5ndGgobGVuZ3RoKSkge1xuICAgICAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IHRvT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIGBfLmZvckluYCBvciBgXy5mb3JJblJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IHRvT2JqZWN0KG9iamVjdCksXG4gICAgICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIGFuZCBpbnZva2VzIGl0IHdpdGggdGhlIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZFdyYXBwZXIoZnVuYywgdGhpc0FyZykge1xuICAgICAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yV3JhcHBlcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYFNldGAgY2FjaGUgb2JqZWN0IHRvIG9wdGltaXplIGxpbmVhciBzZWFyY2hlcyBvZiBsYXJnZSBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICogQHJldHVybnMge251bGx8T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgY2FjaGUgb2JqZWN0IGlmIGBTZXRgIGlzIHN1cHBvcnRlZCwgZWxzZSBgbnVsbGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FjaGUodmFsdWVzKSB7XG4gICAgICByZXR1cm4gKG5hdGl2ZUNyZWF0ZSAmJiBTZXQpID8gbmV3IFNldENhY2hlKHZhbHVlcykgOiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGNvbXBvdW5kIHdvcmRzIG91dCBvZiB0aGUgd29yZHMgaW4gYVxuICAgICAqIGdpdmVuIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFycmF5ID0gd29yZHMoZGVidXJyKHN0cmluZykpLFxuICAgICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgICAgcmVzdWx0ID0gJyc7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjayhyZXN1bHQsIGFycmF5W2luZGV4XSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGFuIGluc3RhbmNlIG9mIGBDdG9yYCByZWdhcmRsZXNzIG9mXG4gICAgICogd2hldGhlciBpdCB3YXMgaW52b2tlZCBhcyBwYXJ0IG9mIGEgYG5ld2AgZXhwcmVzc2lvbiBvciBieSBgY2FsbGAgb3IgYGFwcGx5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gQ3RvciBUaGUgY29uc3RydWN0b3IgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN0b3JXcmFwcGVyKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuXG4gICAgICAgIC8vIFNlZSBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBmbGFnIFRoZSBjdXJyeSBiaXQgZmxhZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyeSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdXJyeShmbGFnKSB7XG4gICAgICBmdW5jdGlvbiBjdXJyeUZ1bmMoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChmdW5jLCBhcml0eSwgZ3VhcmQpKSB7XG4gICAgICAgICAgYXJpdHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXBwZXIoZnVuYywgZmxhZywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnlGdW5jLnBsYWNlaG9sZGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGN1cnJ5RnVuYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZGVmYXVsdHNgIG9yIGBfLmRlZmF1bHRzRGVlcGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVmYXVsdHMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRGVmYXVsdHMoYXNzaWduZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHJldHVybiByZXN0UGFyYW0oZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgb2JqZWN0ID0gYXJnc1swXTtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBhcmdzLnB1c2goY3VzdG9taXplcik7XG4gICAgICAgIHJldHVybiBhc3NpZ25lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLm1heGAgb3IgYF8ubWluYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgZnVuY3Rpb24gdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0geyp9IGV4VmFsdWUgVGhlIGluaXRpYWwgZXh0cmVtdW0gdmFsdWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZXh0cmVtdW0gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRXh0cmVtdW0oY29tcGFyYXRvciwgZXhWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCB0aGlzQXJnKSB7XG4gICAgICAgIGlmICh0aGlzQXJnICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCB0aGlzQXJnKSkge1xuICAgICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGl0ZXJhdGVlID0gZ2V0Q2FsbGJhY2soaXRlcmF0ZWUsIHRoaXNBcmcsIDMpO1xuICAgICAgICBpZiAoaXRlcmF0ZWUubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICBjb2xsZWN0aW9uID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB0b0l0ZXJhYmxlKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBhcnJheUV4dHJlbXVtKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBjb21wYXJhdG9yLCBleFZhbHVlKTtcbiAgICAgICAgICBpZiAoIShjb2xsZWN0aW9uLmxlbmd0aCAmJiByZXN1bHQgPT09IGV4VmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZUV4dHJlbXVtKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBjb21wYXJhdG9yLCBleFZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGaW5kKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICAgICAgcHJlZGljYXRlID0gZ2V0Q2FsbGJhY2socHJlZGljYXRlLCB0aGlzQXJnLCAzKTtcbiAgICAgICAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBiYXNlRmluZEluZGV4KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbVJpZ2h0KTtcbiAgICAgICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGNvbGxlY3Rpb25baW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlRmluZChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRJbmRleGAgb3IgYF8uZmluZExhc3RJbmRleGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZpbmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZEluZGV4KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBwcmVkaWNhdGUgPSBnZXRDYWxsYmFjayhwcmVkaWNhdGUsIHRoaXNBcmcsIDMpO1xuICAgICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmluZEtleWAgb3IgYF8uZmluZExhc3RLZXlgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvYmplY3RGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZpbmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZEtleShvYmplY3RGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICAgICAgcHJlZGljYXRlID0gZ2V0Q2FsbGJhY2socHJlZGljYXRlLCB0aGlzQXJnLCAzKTtcbiAgICAgICAgcmV0dXJuIGJhc2VGaW5kKG9iamVjdCwgcHJlZGljYXRlLCBvYmplY3RGdW5jLCB0cnVlKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsb3cgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIsXG4gICAgICAgICAgICBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IDAsXG4gICAgICAgICAgICBmdW5jcyA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2xlZnRJbmRleCsrXSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCF3cmFwcGVyICYmIExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnUgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IHdyYXBwZXIgPyAtMSA6IGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBmdW5jID0gZnVuY3NbaW5kZXhdO1xuXG4gICAgICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgICAgIGRhdGEgPSBmdW5jTmFtZSA9PSAnd3JhcHBlcicgPyBnZXREYXRhKGZ1bmMpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGRhdGEgJiYgaXNMYXppYWJsZShkYXRhWzBdKSAmJiBkYXRhWzFdID09IChBUllfRkxBRyB8IENVUlJZX0ZMQUcgfCBQQVJUSUFMX0ZMQUcgfCBSRUFSR19GTEFHKSAmJiAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gd3JhcHBlcltnZXRGdW5jTmFtZShkYXRhWzBdKV0uYXBwbHkod3JhcHBlciwgZGF0YVszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKSA/IHdyYXBwZXJbZnVuY05hbWVdKCkgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBmb3IgYF8uZm9yRWFjaGAgb3IgYF8uZm9yRWFjaFJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYW4gYXJyYXkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZWFjaCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGb3JFYWNoKGFycmF5RnVuYywgZWFjaEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSwgdGhpc0FyZykge1xuICAgICAgICByZXR1cm4gKHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIHRoaXNBcmcgPT09IHVuZGVmaW5lZCAmJiBpc0FycmF5KGNvbGxlY3Rpb24pKVxuICAgICAgICAgID8gYXJyYXlGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKVxuICAgICAgICAgIDogZWFjaEZ1bmMoY29sbGVjdGlvbiwgYmluZENhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCAzKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBmb3IgYF8uZm9ySW5gIG9yIGBfLmZvckluUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvYmplY3RGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGVhY2ggZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRm9ySW4ob2JqZWN0RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIHRoaXNBcmcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVyYXRlZSAhPSAnZnVuY3Rpb24nIHx8IHRoaXNBcmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGl0ZXJhdGVlID0gYmluZENhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCAzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0RnVuYyhvYmplY3QsIGl0ZXJhdGVlLCBrZXlzSW4pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gZm9yIGBfLmZvck93bmAgb3IgYF8uZm9yT3duUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvYmplY3RGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGVhY2ggZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRm9yT3duKG9iamVjdEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCB0aGlzQXJnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlcmF0ZWUgIT0gJ2Z1bmN0aW9uJyB8fCB0aGlzQXJnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpdGVyYXRlZSA9IGJpbmRDYWxsYmFjayhpdGVyYXRlZSwgdGhpc0FyZywgMyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdEZ1bmMob2JqZWN0LCBpdGVyYXRlZSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBmb3IgYF8ubWFwS2V5c2Agb3IgYF8ubWFwVmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNNYXBLZXlzXSBTcGVjaWZ5IG1hcHBpbmcga2V5cyBpbnN0ZWFkIG9mIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXAgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT2JqZWN0TWFwcGVyKGlzTWFwS2V5cykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIHRoaXNBcmcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICBpdGVyYXRlZSA9IGdldENhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCAzKTtcblxuICAgICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgICAgdmFyIG1hcHBlZCA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCk7XG4gICAgICAgICAga2V5ID0gaXNNYXBLZXlzID8gbWFwcGVkIDoga2V5O1xuICAgICAgICAgIHZhbHVlID0gaXNNYXBLZXlzID8gdmFsdWUgOiBtYXBwZWQ7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBmb3IgYF8ucGFkTGVmdGAgb3IgYF8ucGFkUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgcGFkZGluZyBmcm9tIHRoZSByaWdodC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFkRGlyKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgICBzdHJpbmcgPSBiYXNlVG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIChmcm9tUmlnaHQgPyBzdHJpbmcgOiAnJykgKyBjcmVhdGVQYWRkaW5nKHN0cmluZywgbGVuZ3RoLCBjaGFycykgKyAoZnJvbVJpZ2h0ID8gJycgOiBzdHJpbmcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8ucGFydGlhbGAgb3IgYF8ucGFydGlhbFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBmbGFnIFRoZSBwYXJ0aWFsIGJpdCBmbGFnLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWwgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFydGlhbChmbGFnKSB7XG4gICAgICB2YXIgcGFydGlhbEZ1bmMgPSByZXN0UGFyYW0oZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgcGFydGlhbEZ1bmMucGxhY2Vob2xkZXIpO1xuICAgICAgICByZXR1cm4gY3JlYXRlV3JhcHBlcihmdW5jLCBmbGFnLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBhcnRpYWxGdW5jO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBmb3IgYF8ucmVkdWNlYCBvciBgXy5yZWR1Y2VSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGFuIGFycmF5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGVhY2ggZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVkdWNlKGFycmF5RnVuYywgZWFjaEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIHRoaXNBcmcpIHtcbiAgICAgICAgdmFyIGluaXRGcm9tQXJyYXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzQXJnID09PSB1bmRlZmluZWQgJiYgaXNBcnJheShjb2xsZWN0aW9uKSlcbiAgICAgICAgICA/IGFycmF5RnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRGcm9tQXJyYXkpXG4gICAgICAgICAgOiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGdldENhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCA0KSwgYWNjdW11bGF0b3IsIGluaXRGcm9tQXJyYXksIGVhY2hGdW5jKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIGFuZCBpbnZva2VzIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gcmVmZXJlbmNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIG9mIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBwZXJgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc1JpZ2h0XSBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzUmlnaHRdIFRoZSBgcGFydGlhbHNSaWdodGAgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVIeWJyaWRXcmFwcGVyKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIEFSWV9GTEFHLFxuICAgICAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBCSU5EX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIEJJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyeSA9IGJpdG1hc2sgJiBDVVJSWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycnlCb3VuZCA9IGJpdG1hc2sgJiBDVVJSWV9CT1VORF9GTEFHLFxuICAgICAgICAgIGlzQ3VycnlSaWdodCA9IGJpdG1hc2sgJiBDVVJSWV9SSUdIVF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBjcmVhdGVDdG9yV3JhcHBlcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgLy8gQXZvaWQgYGFyZ3VtZW50c2Agb2JqZWN0IHVzZSBkaXNxdWFsaWZ5aW5nIG9wdGltaXphdGlvbnMgYnlcbiAgICAgICAgLy8gY29udmVydGluZyBpdCB0byBhbiBhcnJheSBiZWZvcmUgcHJvdmlkaW5nIGl0IHRvIG90aGVyIGZ1bmN0aW9ucy5cbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzUmlnaHQpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJ5IHx8IGlzQ3VycnlSaWdodCkge1xuICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IHdyYXBwZXIucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgIGFyZ3NIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgICAgbGVuZ3RoIC09IGFyZ3NIb2xkZXJzLmxlbmd0aDtcbiAgICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICAgIHZhciBuZXdBcmdQb3MgPSBhcmdQb3MgPyBhcnJheUNvcHkoYXJnUG9zKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBuZXdBcml0eSA9IG5hdGl2ZU1heChhcml0eSAtIGxlbmd0aCwgMCksXG4gICAgICAgICAgICAgICAgbmV3c0hvbGRlcnMgPSBpc0N1cnJ5ID8gYXJnc0hvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGFyZ3NIb2xkZXJzLFxuICAgICAgICAgICAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IGFyZ3MgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBhcmdzO1xuXG4gICAgICAgICAgICBiaXRtYXNrIHw9IChpc0N1cnJ5ID8gUEFSVElBTF9GTEFHIDogUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gUEFSVElBTF9SSUdIVF9GTEFHIDogUEFSVElBTF9GTEFHKTtcblxuICAgICAgICAgICAgaWYgKCFpc0N1cnJ5Qm91bmQpIHtcbiAgICAgICAgICAgICAgYml0bWFzayAmPSB+KEJJTkRfRkxBRyB8IEJJTkRfS0VZX0ZMQUcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG5ld0RhdGEgPSBbZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld3NIb2xkZXJzLCBuZXdQYXJ0aWFsc1JpZ2h0LCBuZXdIb2xkZXJzUmlnaHQsIG5ld0FyZ1BvcywgYXJ5LCBuZXdBcml0eV0sXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY3JlYXRlSHlicmlkV3JhcHBlci5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuXG4gICAgICAgICAgICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgICAgICAgICAgICBzZXREYXRhKHJlc3VsdCwgbmV3RGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLFxuICAgICAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yV3JhcHBlcihmdW5jKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyByZXF1aXJlZCBmb3IgYHN0cmluZ2AgYmFzZWQgb24gdGhlIGdpdmVuIGBsZW5ndGhgLlxuICAgICAqIFRoZSBgY2hhcnNgIHN0cmluZyBpcyB0cnVuY2F0ZWQgaWYgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGV4Y2VlZHMgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjcmVhdGUgcGFkZGluZyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWQgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGxlbmd0aCA9ICtsZW5ndGg7XG5cbiAgICAgIGlmIChzdHJMZW5ndGggPj0gbGVuZ3RoIHx8ICFuYXRpdmVJc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHZhciBwYWRMZW5ndGggPSBsZW5ndGggLSBzdHJMZW5ndGg7XG4gICAgICBjaGFycyA9IGNoYXJzID09IG51bGwgPyAnICcgOiAoY2hhcnMgKyAnJyk7XG4gICAgICByZXR1cm4gcmVwZWF0KGNoYXJzLCBuYXRpdmVDZWlsKHBhZExlbmd0aCAvIGNoYXJzLmxlbmd0aCkpLnNsaWNlKDAsIHBhZExlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIGFuZCBpbnZva2VzIGl0IHdpdGggdGhlIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiB0aGUgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBvZiBmbGFncy4gU2VlIGBjcmVhdGVXcmFwcGVyYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWxXcmFwcGVyKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIEJJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcldyYXBwZXIoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIC8vIEF2b2lkIGBhcmd1bWVudHNgIG9iamVjdCB1c2UgZGlzcXVhbGlmeWluZyBvcHRpbWl6YXRpb25zIGJ5XG4gICAgICAgIC8vIGNvbnZlcnRpbmcgaXQgdG8gYW4gYXJyYXkgYmVmb3JlIHByb3ZpZGluZyBpdCBgZnVuY2AuXG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uY2VpbGAsIGBfLmZsb29yYCwgb3IgYF8ucm91bmRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAwIDogKCtwcmVjaXNpb24gfHwgMCk7XG4gICAgICAgIGlmIChwcmVjaXNpb24pIHtcbiAgICAgICAgICBwcmVjaXNpb24gPSBwb3coMTAsIHByZWNpc2lvbik7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyICogcHJlY2lzaW9uKSAvIHByZWNpc2lvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uc29ydGVkSW5kZXhgIG9yIGBfLnNvcnRlZExhc3RJbmRleGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbmRleCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVTb3J0ZWRJbmRleChyZXRIaWdoZXN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgdGhpc0FyZykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBnZXRDYWxsYmFjayhpdGVyYXRlZSk7XG4gICAgICAgIHJldHVybiAoaXRlcmF0ZWUgPT0gbnVsbCAmJiBjYWxsYmFjayA9PT0gYmFzZUNhbGxiYWNrKVxuICAgICAgICAgID8gYmluYXJ5SW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KVxuICAgICAgICAgIDogYmluYXJ5SW5kZXhCeShhcnJheSwgdmFsdWUsIGNhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCAxKSwgcmV0SGlnaGVzdCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gcmVmZXJlbmNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIG9mIGZsYWdzLlxuICAgICAqICBUaGUgYml0bWFzayBtYXkgYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBmbGFnczpcbiAgICAgKiAgICAgMSAtIGBfLmJpbmRgXG4gICAgICogICAgIDIgLSBgXy5iaW5kS2V5YFxuICAgICAqICAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICAgOCAtIGBfLmN1cnJ5YFxuICAgICAqICAgIDE2IC0gYF8uY3VycnlSaWdodGBcbiAgICAgKiAgICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogICAxMjggLSBgXy5yZWFyZ2BcbiAgICAgKiAgIDI1NiAtIGBfLmFyeWBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwcGVyKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgQklORF9LRVlfRkxBRztcbiAgICAgIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihQQVJUSUFMX0ZMQUcgfCBQQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsZW5ndGggLT0gKGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDApO1xuICAgICAgaWYgKGJpdG1hc2sgJiBQQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpLFxuICAgICAgICAgIG5ld0RhdGEgPSBbZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XTtcblxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgbWVyZ2VEYXRhKG5ld0RhdGEsIGRhdGEpO1xuICAgICAgICBiaXRtYXNrID0gbmV3RGF0YVsxXTtcbiAgICAgICAgYXJpdHkgPSBuZXdEYXRhWzldO1xuICAgICAgfVxuICAgICAgbmV3RGF0YVs5XSA9IGFyaXR5ID09IG51bGxcbiAgICAgICAgPyAoaXNCaW5kS2V5ID8gMCA6IGZ1bmMubGVuZ3RoKVxuICAgICAgICA6IChuYXRpdmVNYXgoYXJpdHkgLSBsZW5ndGgsIDApIHx8IDApO1xuXG4gICAgICBpZiAoYml0bWFzayA9PSBCSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmRXcmFwcGVyKG5ld0RhdGFbMF0sIG5ld0RhdGFbMl0pO1xuICAgICAgfSBlbHNlIGlmICgoYml0bWFzayA9PSBQQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoQklORF9GTEFHIHwgUEFSVElBTF9GTEFHKSkgJiYgIW5ld0RhdGFbNF0ubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVBhcnRpYWxXcmFwcGVyLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWRXcmFwcGVyLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICB2YXIgc2V0dGVyID0gZGF0YSA/IGJhc2VTZXREYXRhIDogc2V0RGF0YTtcbiAgICAgIHJldHVybiBzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaW5nIGFycmF5cy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0xvb3NlXSBTcGVjaWZ5IHBlcmZvcm1pbmcgcGFydGlhbCBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tBXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tCXSBUcmFja3MgdHJhdmVyc2VkIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBpc0xvb3NlLCBzdGFja0EsIHN0YWNrQikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICAgICAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc0xvb3NlICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICAgICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF0sXG4gICAgICAgICAgICByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihpc0xvb3NlID8gb3RoVmFsdWUgOiBhcnJWYWx1ZSwgaXNMb29zZSA/IGFyclZhbHVlIDogb3RoVmFsdWUsIGluZGV4KSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChpc0xvb3NlKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBjdXN0b21pemVyLCBpc0xvb3NlLCBzdGFja0EsIHN0YWNrQik7XG4gICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGN1c3RvbWl6ZXIsIGlzTG9vc2UsIHN0YWNrQSwgc3RhY2tCKSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAgICAgKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1iZXJzLCBkYXRlcyB0byBtaWxsaXNlY29uZHMgYW5kIGJvb2xlYW5zXG4gICAgICAgICAgLy8gdG8gYDFgIG9yIGAwYCB0cmVhdGluZyBpbnZhbGlkIGRhdGVzIGNvZXJjZWQgdG8gYE5hTmAgYXMgbm90IGVxdWFsLlxuICAgICAgICAgIHJldHVybiArb2JqZWN0ID09ICtvdGhlcjtcblxuICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gVHJlYXQgYE5hTmAgdnMuIGBOYU5gIGFzIGVxdWFsLlxuICAgICAgICAgIHJldHVybiAob2JqZWN0ICE9ICtvYmplY3QpXG4gICAgICAgICAgICA/IG90aGVyICE9ICtvdGhlclxuICAgICAgICAgICAgOiBvYmplY3QgPT0gK290aGVyO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzIHByaW1pdGl2ZXMgYW5kIHN0cmluZ1xuICAgICAgICAgIC8vIG9iamVjdHMgYXMgZXF1YWwuIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xMC42LjQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaW5nIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0xvb3NlXSBTcGVjaWZ5IHBlcmZvcm1pbmcgcGFydGlhbCBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tBXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tCXSBUcmFja3MgdHJhdmVyc2VkIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBpc0xvb3NlLCBzdGFja0EsIHN0YWNrQikge1xuICAgICAgdmFyIG9ialByb3BzID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzTG9vc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKCEoaXNMb29zZSA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgc2tpcEN0b3IgPSBpc0xvb3NlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XSxcbiAgICAgICAgICAgIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKGlzTG9vc2UgPyBvdGhWYWx1ZSA6IG9ialZhbHVlLCBpc0xvb3NlPyBvYmpWYWx1ZSA6IG90aFZhbHVlLCBrZXkpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZCA/IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGN1c3RvbWl6ZXIsIGlzTG9vc2UsIHN0YWNrQSwgc3RhY2tCKSA6IHJlc3VsdCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgaWYgKCFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiY2FsbGJhY2tcIiBmdW5jdGlvbi4gSWYgdGhlIGBfLmNhbGxiYWNrYCBtZXRob2QgaXNcbiAgICAgKiBjdXN0b21pemVkIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgY3VzdG9tIG1ldGhvZCwgb3RoZXJ3aXNlIGl0IHJldHVybnNcbiAgICAgKiB0aGUgYGJhc2VDYWxsYmFja2AgZnVuY3Rpb24uIElmIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdGhlIGNob3NlbiBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZCBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNob3NlbiBmdW5jdGlvbiBvciBpdHMgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldENhbGxiYWNrKGZ1bmMsIHRoaXNBcmcsIGFyZ0NvdW50KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoLmNhbGxiYWNrIHx8IGNhbGxiYWNrO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSBjYWxsYmFjayA/IGJhc2VDYWxsYmFjayA6IHJlc3VsdDtcbiAgICAgIHJldHVybiBhcmdDb3VudCA/IHJlc3VsdChmdW5jLCB0aGlzQXJnLCBhcmdDb3VudCkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgIHJldHVybiBtZXRhTWFwLmdldChmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMubmFtZSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBcImluZGV4T2ZcIiBmdW5jdGlvbi4gSWYgdGhlIGBfLmluZGV4T2ZgIG1ldGhvZCBpc1xuICAgICAqIGN1c3RvbWl6ZWQgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJuc1xuICAgICAqIHRoZSBgYmFzZUluZGV4T2ZgIGZ1bmN0aW9uLiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRoZSBjaG9zZW4gZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdGhlbSBhbmQgaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufG51bWJlcn0gUmV0dXJucyB0aGUgY2hvc2VuIGZ1bmN0aW9uIG9yIGl0cyByZXN1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SW5kZXhPZihjb2xsZWN0aW9uLCB0YXJnZXQsIGZyb21JbmRleCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaC5pbmRleE9mIHx8IGluZGV4T2Y7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGluZGV4T2YgPyBiYXNlSW5kZXhPZiA6IHJlc3VsdDtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uID8gcmVzdWx0KGNvbGxlY3Rpb24sIHRhcmdldCwgZnJvbUluZGV4KSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IHZhbHVlIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBhdm9pZCBhIFtKSVQgYnVnXShodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQyNzkyKVxuICAgICAqIHRoYXQgYWZmZWN0cyBTYWZhcmkgb24gYXQgbGVhc3QgaU9TIDguMS04LjMgQVJNNjQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgXCJsZW5ndGhcIiB2YWx1ZS5cbiAgICAgKi9cbiAgICB2YXIgZ2V0TGVuZ3RoID0gYmFzZVByb3BlcnR5KCdsZW5ndGgnKTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb3BlcnkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHBhaXJzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZW5ndGhdWzJdID0gaXNTdHJpY3RDb21wYXJhYmxlKHJlc3VsdFtsZW5ndGhdWzFdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgICByZXR1cm4gaXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmlldywgYXBwbHlpbmcgYW55IGB0cmFuc2Zvcm1zYCB0byB0aGUgYHN0YXJ0YCBhbmQgYGVuZGAgcG9zaXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm1zIFRoZSB0cmFuc2Zvcm1hdGlvbnMgdG8gYXBwbHkgdG8gdGhlIHZpZXcuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHN0YXJ0YCBhbmQgYGVuZGBcbiAgICAgKiAgcG9zaXRpb25zIG9mIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFZpZXcoc3RhcnQsIGVuZCwgdHJhbnNmb3Jtcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdHJhbnNmb3Jtc1tpbmRleF0sXG4gICAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnZHJvcCc6ICAgICAgc3RhcnQgKz0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZHJvcFJpZ2h0JzogZW5kIC09IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2UnOiAgICAgIGVuZCA9IG5hdGl2ZU1pbihlbmQsIHN0YXJ0ICsgc2l6ZSk7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2VSaWdodCc6IHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0LCBlbmQgLSBzaXplKTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7ICdzdGFydCc6IHN0YXJ0LCAnZW5kJzogZW5kIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgYXJyYXkgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIGlmICghKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IpKSB7XG4gICAgICAgIEN0b3IgPSBPYmplY3Q7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gYnVmZmVyQ2xvbmUob2JqZWN0KTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICAgICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICAgICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgICAgICB2YXIgYnVmZmVyID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoaXNEZWVwID8gYnVmZmVyQ2xvbmUoYnVmZmVyKSA6IGJ1ZmZlciwgb2JqZWN0LmJ5dGVPZmZzZXQsIG9iamVjdC5sZW5ndGgpO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IEN0b3Iob2JqZWN0LnNvdXJjZSwgcmVGbGFncy5leGVjKG9iamVjdCkpO1xuICAgICAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSBvYmplY3QubGFzdEluZGV4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW52b2tlUGF0aChvYmplY3QsIHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCAmJiAhaXNLZXkocGF0aCwgb2JqZWN0KSkge1xuICAgICAgICBwYXRoID0gdG9QYXRoKHBhdGgpO1xuICAgICAgICBvYmplY3QgPSBwYXRoLmxlbmd0aCA9PSAxID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xuICAgICAgICBwYXRoID0gbGFzdChwYXRoKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBvYmplY3RbcGF0aF07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogZnVuYy5hcHBseShvYmplY3QsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgoZ2V0TGVuZ3RoKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFsdWUgPSAodHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8IHJlSXNVaW50LnRlc3QodmFsdWUpKSA/ICt2YWx1ZSA6IC0xO1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuICAgICAgcmV0dXJuIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBwcm92aWRlZCBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IG9iamVjdFtpbmRleF07XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAodmFsdWUgPT09IG90aGVyKSA6IChvdGhlciAhPT0gb3RoZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICgodHlwZSA9PSAnc3RyaW5nJyAmJiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpKSB8fCB0eXBlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpO1xuICAgICAgcmV0dXJuIHJlc3VsdCB8fCAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gdG9PYmplY3Qob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xhemlhYmxlKGZ1bmMpIHtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpO1xuICAgICAgaWYgKCEoZnVuY05hbWUgaW4gTGF6eVdyYXBwZXIucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuICAgICAgaWYgKGZ1bmMgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKG90aGVyKTtcbiAgICAgIHJldHVybiAhIWRhdGEgJiYgZnVuYyA9PT0gZGF0YVswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gaXMgYmFzZWQgb24gW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyByZXF1aXJlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgbWV0aG9kcyBsaWtlIGBfLmJpbmRgLCBgXy5jdXJyeWAsIGFuZCBgXy5wYXJ0aWFsYFxuICAgICAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmQgYF8ucmVhcmdgXG4gICAgICogYXVnbWVudCBmdW5jdGlvbiBhcmd1bWVudHMsIG1ha2luZyB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcmUgZXhlY3V0ZWQgaW1wb3J0YW50LFxuICAgICAqIHByZXZlbnRpbmcgdGhlIG1lcmdpbmcgb2YgbWV0YWRhdGEuIEhvd2V2ZXIsIHdlIG1ha2UgYW4gZXhjZXB0aW9uIGZvciBhIHNhZmVcbiAgICAgKiBjb21tb24gY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWAgYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIHNvdXJjZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgICAgIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzayxcbiAgICAgICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCBBUllfRkxBRztcblxuICAgICAgdmFyIGlzQ29tYm8gPVxuICAgICAgICAoc3JjQml0bWFzayA9PSBBUllfRkxBRyAmJiBiaXRtYXNrID09IENVUlJZX0ZMQUcpIHx8XG4gICAgICAgIChzcmNCaXRtYXNrID09IEFSWV9GTEFHICYmIGJpdG1hc2sgPT0gUkVBUkdfRkxBRyAmJiBkYXRhWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pIHx8XG4gICAgICAgIChzcmNCaXRtYXNrID09IChBUllfRkxBRyB8IFJFQVJHX0ZMQUcpICYmIGJpdG1hc2sgPT0gQ1VSUllfRkxBRyk7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICAgICAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIEJJTkRfRkxBRykge1xuICAgICAgICBkYXRhWzJdID0gc291cmNlWzJdO1xuICAgICAgICAvLyBTZXQgd2hlbiBjdXJyeWluZyBhIGJvdW5kIGZ1bmN0aW9uLlxuICAgICAgICBuZXdCaXRtYXNrIHw9IChiaXRtYXNrICYgQklORF9GTEFHKSA/IDAgOiBDVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiBhcnJheUNvcHkodmFsdWUpO1xuICAgICAgICBkYXRhWzRdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzNdLCBQTEFDRUhPTERFUikgOiBhcnJheUNvcHkoc291cmNlWzRdKTtcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogYXJyYXlDb3B5KHZhbHVlKTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogYXJyYXlDb3B5KHNvdXJjZVs2XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcmdQb3NgIGlmIGF2YWlsYWJsZS5cbiAgICAgIHZhbHVlID0gc291cmNlWzddO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRhdGFbN10gPSBhcnJheUNvcHkodmFsdWUpO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIEFSWV9GTEFHKSB7XG4gICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdID09IG51bGwgPyBzb3VyY2VbOF0gOiBuYXRpdmVNaW4oZGF0YVs4XSwgc291cmNlWzhdKTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyaXR5YCBpZiBvbmUgaXMgbm90IHByb3ZpZGVkLlxuICAgICAgaWYgKGRhdGFbOV0gPT0gbnVsbCkge1xuICAgICAgICBkYXRhWzldID0gc291cmNlWzldO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgZnVuY2AgYW5kIG1lcmdlIGJpdG1hc2tzLlxuICAgICAgZGF0YVswXSA9IHNvdXJjZVswXTtcbiAgICAgIGRhdGFbMV0gPSBuZXdCaXRtYXNrO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzRGVlcGAgdG8gY3VzdG9taXplIGl0cyBgXy5tZXJnZWAgdXNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdFZhbHVlIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QgcHJvcGVydHkgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzb3VyY2VWYWx1ZSBUaGUgc291cmNlIG9iamVjdCBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEZWZhdWx0cyhvYmplY3RWYWx1ZSwgc291cmNlVmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmplY3RWYWx1ZSA9PT0gdW5kZWZpbmVkID8gc291cmNlVmFsdWUgOiBtZXJnZShvYmplY3RWYWx1ZSwgc291cmNlVmFsdWUsIG1lcmdlRGVmYXVsdHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5waWNrYCB3aGljaCBwaWNrcyBgb2JqZWN0YCBwcm9wZXJ0aWVzIHNwZWNpZmllZFxuICAgICAqIGJ5IGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrQnlBcnJheShvYmplY3QsIHByb3BzKSB7XG4gICAgICBvYmplY3QgPSB0b09iamVjdChvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucGlja2Agd2hpY2ggcGlja3MgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYFxuICAgICAqIHJldHVybnMgdHJ1dGh5IGZvci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBpY2tCeUNhbGxiYWNrKG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBiYXNlRm9ySW4ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgYGFycmF5YCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIGZpcnN0IGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBmaXJzdCBlbGVtZW50LCB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBzZWNvbmQgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIHNlY29uZCBlbGVtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byByZW9yZGVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFycmF5IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlcihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oaW5kZXhlcy5sZW5ndGgsIGFyckxlbmd0aCksXG4gICAgICAgICAgb2xkQXJyYXkgPSBhcnJheUNvcHkoYXJyYXkpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgdGhpcyBmdW5jdGlvbiBiZWNvbWVzIGhvdCwgaS5lLiBpcyBpbnZva2VkIGEgbG90IGluIGEgc2hvcnRcbiAgICAgKiBwZXJpb2Qgb2YgdGltZSwgaXQgd2lsbCB0cmlwIGl0cyBicmVha2VyIGFuZCB0cmFuc2l0aW9uIHRvIGFuIGlkZW50aXR5IGZ1bmN0aW9uXG4gICAgICogdG8gYXZvaWQgZ2FyYmFnZSBjb2xsZWN0aW9uIHBhdXNlcyBpbiBWOC4gU2VlIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldERhdGEgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY291bnQgPSAwLFxuICAgICAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgc3RhbXAgPSBub3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlU2V0RGF0YShrZXksIHZhbHVlKTtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIEEgZmFsbGJhY2sgaW1wbGVtZW50YXRpb24gb2YgYE9iamVjdC5rZXlzYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5IG9mIHRoZVxuICAgICAqIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaGltS2V5cyhvYmplY3QpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXNJbihvYmplY3QpLFxuICAgICAgICAgIHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzTGVuZ3RoICYmIG9iamVjdC5sZW5ndGg7XG5cbiAgICAgIHZhciBhbGxvd0luZGV4ZXMgPSAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgIGlmICgoYWxsb3dJbmRleGVzICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpKSB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS1saWtlIG9iamVjdCBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyB0aGUgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9JdGVyYWJsZSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNPYmplY3QodmFsdWUpID8gdmFsdWUgOiBPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gb2JqZWN0IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IE9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBwcm9wZXJ0eSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgYmFzZVRvU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdHJpbmcpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gd3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyXG4gICAgICAgID8gd3JhcHBlci5jbG9uZSgpXG4gICAgICAgIDogbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18sIGFycmF5Q29weSh3cmFwcGVyLl9fYWN0aW9uc19fKSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIGdyb3VwcyB0aGUgbGVuZ3RoIG9mIGBzaXplYC5cbiAgICAgKiBJZiBgY29sbGVjdGlvbmAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IGNvbnRhaW5pbmcgY2h1bmtzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAyKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWydjJywgJ2QnXV1cbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDMpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYicsICdjJ10sIFsnZCddXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplLCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT0gbnVsbCkge1xuICAgICAgICBzaXplID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSBuYXRpdmVNYXgobmF0aXZlRmxvb3Ioc2l6ZSkgfHwgMSwgMSk7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXNJbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG5hdGl2ZUNlaWwobGVuZ3RoIC8gc2l6ZSkpO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0WysrcmVzSW5kZXhdID0gYmFzZVNsaWNlKGFycmF5LCBpbmRleCwgKGluZGV4ICs9IHNpemUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBmYWxzZXkgdmFsdWVzIHJlbW92ZWQuIFRoZSB2YWx1ZXMgYGZhbHNlYCwgYG51bGxgLFxuICAgICAqIGAwYCwgYFwiXCJgLCBgdW5kZWZpbmVkYCwgYW5kIGBOYU5gIGFyZSBmYWxzZXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY29tcGFjdChbMCwgMSwgZmFsc2UsIDIsICcnLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0WysrcmVzSW5kZXhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlclxuICAgICAqIHByb3ZpZGVkIGFycmF5cyB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSBhcnJheXMgb2YgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2UoWzEsIDIsIDNdLCBbNCwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlID0gcmVzdFBhcmFtKGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiAoaXNPYmplY3RMaWtlKGFycmF5KSAmJiBpc0FycmF5TGlrZShhcnJheSkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgZmFsc2UsIHRydWUpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgbiwgZ3VhcmQpIDogbiA9PSBudWxsKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIG4sIGd1YXJkKSA6IG4gPT0gbnVsbCkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH1cbiAgICAgIG4gPSBsZW5ndGggLSAoK24gfHwgMCk7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBtYXRjaCB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYHByZWRpY2F0ZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKFsxLCAyLCAzXSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gPiAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucGx1Y2soXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJywgZmFsc2UpLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5wcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyksICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMyksIHRydWUsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYHByZWRpY2F0ZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BXaGlsZShbMSwgMiwgM10sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuIDwgMztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzYCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8uZHJvcFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8uZHJvcFdoaWxlKHVzZXJzLCAnYWN0aXZlJywgZmFsc2UpLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucGx1Y2soXy5kcm9wV2hpbGUodXNlcnMsICdhY3RpdmUnKSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMyksIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsbHMgZWxlbWVudHMgb2YgYGFycmF5YCB3aXRoIGB2YWx1ZWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90XG4gICAgICogaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8uZmlsbChhcnJheSwgJ2EnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2EnLCAnYSddXG4gICAgICpcbiAgICAgKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICAgICAqIC8vID0+IFsyLCAyLCAyXVxuICAgICAqXG4gICAgICogXy5maWxsKFs0LCA2LCA4XSwgJyonLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCA4XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ICYmIHR5cGVvZiBzdGFydCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgdmFsdWUsIHN0YXJ0KSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBjaHIudXNlciA9PSAnYmFybmV5JztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc2AgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIHZhciBmaW5kSW5kZXggPSBjcmVhdGVGaW5kSW5kZXgoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYHByZWRpY2F0ZWAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBjaHIudXNlciA9PSAncGViYmxlcyc7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0SW5kZXggPSBjcmVhdGVGaW5kSW5kZXgodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgaGVhZFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZpcnN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5maXJzdChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlyc3QoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGEgbmVzdGVkIGFycmF5LiBJZiBgaXNEZWVwYCBpcyBgdHJ1ZWAgdGhlIGFycmF5IGlzIHJlY3Vyc2l2ZWx5XG4gICAgICogZmxhdHRlbmVkLCBvdGhlcndpc2UgaXQgaXMgb25seSBmbGF0dGVuZWQgYSBzaW5nbGUgbGV2ZWwuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyLCAzLCBbNF1dXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XV1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIGBpc0RlZXBgXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgMywgWzRdXV0sIHRydWUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXksIGlzRGVlcCwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIGlzRGVlcCwgZ3VhcmQpKSB7XG4gICAgICAgIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCBpc0RlZXApIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgYSBuZXN0ZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVjdXJzaXZlbHkgZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlZXAoWzEsIFsyLCAzLCBbNF1dXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIHRydWUpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCBpcyB1c2VkIGFzIHRoZSBvZmZzZXRcbiAgICAgKiBmcm9tIHRoZSBlbmQgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBzb3J0ZWQgcHJvdmlkaW5nIGB0cnVlYCBmb3IgYGZyb21JbmRleGBcbiAgICAgKiBwZXJmb3JtcyBhIGZhc3RlciBiaW5hcnkgc2VhcmNoLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tIG9yIGB0cnVlYFxuICAgICAqICB0byBwZXJmb3JtIGEgYmluYXJ5IHNlYXJjaCBvbiBhIHNvcnRlZCBhcnJheS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBgZnJvbUluZGV4YFxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIHBlcmZvcm1pbmcgYSBiaW5hcnkgc2VhcmNoXG4gICAgICogXy5pbmRleE9mKFsxLCAxLCAyLCAyXSwgMiwgdHJ1ZSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGZyb21JbmRleCA9PSAnbnVtYmVyJykge1xuICAgICAgICBmcm9tSW5kZXggPSBmcm9tSW5kZXggPCAwID8gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCkgOiBmcm9tSW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiaW5hcnlJbmRleChhcnJheSwgdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiZcbiAgICAgICAgICAgICh2YWx1ZSA9PT0gdmFsdWUgPyAodmFsdWUgPT09IGFycmF5W2luZGV4XSkgOiAoYXJyYXlbaW5kZXhdICE9PSBhcnJheVtpbmRleF0pKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXggfHwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRpYWwoYXJyYXkpIHtcbiAgICAgIHJldHVybiBkcm9wUmlnaHQoYXJyYXksIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBhbGwgb2YgdGhlIHByb3ZpZGVkXG4gICAgICogYXJyYXlzIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMSwgMl0sIFs0LCAyXSwgWzIsIDFdKTtcbiAgICAgKiAvLyA9PiBbMl1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gcmVzdFBhcmFtKGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG90aExlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICAgICAgY2FjaGVzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBpbmRleE9mID0gZ2V0SW5kZXhPZigpLFxuICAgICAgICAgIGlzQ29tbW9uID0gaW5kZXhPZiA9PSBiYXNlSW5kZXhPZixcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKG90aEluZGV4LS0pIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlzW290aEluZGV4XSA9IGlzQXJyYXlMaWtlKHZhbHVlID0gYXJyYXlzW290aEluZGV4XSkgPyB2YWx1ZSA6IFtdO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gKGlzQ29tbW9uICYmIHZhbHVlLmxlbmd0aCA+PSAxMjApID8gY3JlYXRlQ2FjaGUob3RoSW5kZXggJiYgdmFsdWUpIDogbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBhcnJheSA9IGFycmF5c1swXSxcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICBzZWVuID0gY2FjaGVzWzBdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoKHNlZW4gPyBjYWNoZUluZGV4T2Yoc2VlbiwgdmFsdWUpIDogaW5kZXhPZihyZXN1bHQsIHZhbHVlLCAwKSkgPCAwKSB7XG4gICAgICAgICAgdmFyIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKChjYWNoZSA/IGNhY2hlSW5kZXhPZihjYWNoZSwgdmFsdWUpIDogaW5kZXhPZihhcnJheXNbb3RoSW5kZXhdLCB2YWx1ZSwgMCkpIDwgMCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtib29sZWFufG51bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tXG4gICAgICogIG9yIGB0cnVlYCB0byBwZXJmb3JtIGEgYmluYXJ5IHNlYXJjaCBvbiBhIHNvcnRlZCBhcnJheS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgYGZyb21JbmRleGBcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gcGVyZm9ybWluZyBhIGJpbmFyeSBzZWFyY2hcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAxLCAyLCAyXSwgMiwgdHJ1ZSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgaWYgKHR5cGVvZiBmcm9tSW5kZXggPT0gJ251bWJlcicpIHtcbiAgICAgICAgaW5kZXggPSAoZnJvbUluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApIDogbmF0aXZlTWluKGZyb21JbmRleCB8fCAwLCBsZW5ndGggLSAxKSkgKyAxO1xuICAgICAgfSBlbHNlIGlmIChmcm9tSW5kZXgpIHtcbiAgICAgICAgaW5kZXggPSBiaW5hcnlJbmRleChhcnJheSwgdmFsdWUsIHRydWUpIC0gMTtcbiAgICAgICAgdmFyIG90aGVyID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUgPT09IHZhbHVlID8gKHZhbHVlID09PSBvdGhlcikgOiAob3RoZXIgIT09IG90aGVyKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleE9mTmFOKGFycmF5LCBpbmRleCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIHByb3ZpZGVkIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ud2l0aG91dGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDMsIDEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAyLCAzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbCgpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIGFycmF5ID0gYXJnc1swXTtcblxuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGluZGV4T2YgPSBnZXRJbmRleE9mKCksXG4gICAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBmcm9tSW5kZXggPSAwLFxuICAgICAgICAgICAgdmFsdWUgPSBhcmdzW2luZGV4XTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpKSA+IC0xKSB7XG4gICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBpbmRleGVzIGFuZCByZXR1cm5zXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlbW92ZWQgZWxlbWVudHMuIEluZGV4ZXMgbWF5IGJlIHNwZWNpZmllZCBhcyBhbiBhcnJheSBvZlxuICAgICAqIGluZGV4ZXMgb3IgYXMgaW5kaXZpZHVhbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLFxuICAgICAqICBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBpbmRleGVzIG9yIGFycmF5cyBvZiBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFs1LCAxMCwgMTUsIDIwXTtcbiAgICAgKiB2YXIgZXZlbnMgPSBfLnB1bGxBdChhcnJheSwgMSwgMyk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzUsIDE1XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsxMCwgMjBdXG4gICAgICovXG4gICAgdmFyIHB1bGxBdCA9IHJlc3RQYXJhbShmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICAgICAgaW5kZXhlcyA9IGJhc2VGbGF0dGVuKGluZGV4ZXMpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMuc29ydChiYXNlQ29tcGFyZUFzY2VuZGluZykpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gYGFycmF5YCB0aGF0IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByZW1vdmVkIGVsZW1lbnRzLiBUaGUgcHJlZGljYXRlIGlzIGJvdW5kIHRvXG4gICAgICogYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYHByZWRpY2F0ZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDMsIDRdO1xuICAgICAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlID0gZ2V0Q2FsbGJhY2socHJlZGljYXRlLCB0aGlzQXJnLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgdGFpbFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3QoYXJyYXkpIHtcbiAgICAgIHJldHVybiBkcm9wKGFycmF5LCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluc3RlYWQgb2YgYEFycmF5I3NsaWNlYCB0byBzdXBwb3J0IG5vZGVcbiAgICAgKiBsaXN0cyBpbiBJRSA8IDkgYW5kIHRvIGVuc3VyZSBkZW5zZSBhcnJheXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGRcbiAgICAgKiBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuIElmIGFuIGl0ZXJhdGVlXG4gICAgICogZnVuY3Rpb24gaXMgcHJvdmlkZWQgaXQgaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWBcbiAgICAgKiB0byBjb21wdXRlIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmRcbiAgICAgKiBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgaXRlcmF0ZWVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbNCwgNCwgNSwgNV0sIDUpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIHZhciBkaWN0ID0geyAnZGF0YSc6IHsgJ3RoaXJ0eSc6IDMwLCAnZm9ydHknOiA0MCwgJ2ZpZnR5JzogNTAgfSB9O1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgYW4gaXRlcmF0ZWUgZnVuY3Rpb25cbiAgICAgKiBfLnNvcnRlZEluZGV4KFsndGhpcnR5JywgJ2ZpZnR5J10sICdmb3J0eScsIGZ1bmN0aW9uKHdvcmQpIHtcbiAgICAgKiAgIHJldHVybiB0aGlzLmRhdGFbd29yZF07XG4gICAgICogfSwgZGljdCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnNvcnRlZEluZGV4KFt7ICd4JzogMzAgfSwgeyAneCc6IDUwIH1dLCB7ICd4JzogNDAgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgdmFyIHNvcnRlZEluZGV4ID0gY3JlYXRlU29ydGVkSW5kZXgoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGhpZ2hlc3RcbiAgICAgKiBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG9cbiAgICAgKiBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDQsIDUsIDVdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgdmFyIHNvcnRlZExhc3RJbmRleCA9IGNyZWF0ZVNvcnRlZEluZGV4KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2UoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIG4sIGd1YXJkKSA6IG4gPT0gbnVsbCkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgbiwgZ3VhcmQpIDogbiA9PSBudWxsKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfVxuICAgICAgbiA9IGxlbmd0aCAtICgrbiB8fCAwKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBib3VuZCB0byBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgcHJlZGljYXRlYCB0aGUgY3JlYXRlZCBgXy5wcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGEgdmFsdWUgaXMgYWxzbyBwcm92aWRlZCBmb3IgYHRoaXNBcmdgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNQcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIGEgbWF0Y2hpbmcgcHJvcGVydHlcbiAgICAgKiB2YWx1ZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgcHJlZGljYXRlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHRXaGlsZShbMSwgMiwgM10sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuID4gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzYCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLnRha2VSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJywgZmFsc2UpLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5wcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLnRha2VSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyksICd1c2VyJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMyksIGZhbHNlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLiBFbGVtZW50c1xuICAgICAqIGFyZSB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBib3VuZCB0b1xuICAgICAqIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgcHJlZGljYXRlYCB0aGUgY3JlYXRlZCBgXy5wcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGEgdmFsdWUgaXMgYWxzbyBwcm92aWRlZCBmb3IgYHRoaXNBcmdgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNQcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIGEgbWF0Y2hpbmcgcHJvcGVydHlcbiAgICAgKiB2YWx1ZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgcHJlZGljYXRlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlV2hpbGUoWzEsIDIsIDNdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiA8IDM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZX0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzYCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8udGFrZVdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8udGFrZVdoaWxlKHVzZXJzLCAnYWN0aXZlJywgZmFsc2UpLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8udGFrZVdoaWxlKHVzZXJzLCAnYWN0aXZlJyksICd1c2VyJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRDYWxsYmFjayhwcmVkaWNhdGUsIHRoaXNBcmcsIDMpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIG9mIHRoZSBwcm92aWRlZCBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzEsIDJdLCBbNCwgMl0sIFsyLCAxXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDRdXG4gICAgICovXG4gICAgdmFyIHVuaW9uID0gcmVzdFBhcmFtKGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgZmFsc2UsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIGFuIGFycmF5LCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cmVuY2Ugb2YgZWFjaCBlbGVtZW50XG4gICAgICogaXMga2VwdC4gUHJvdmlkaW5nIGB0cnVlYCBmb3IgYGlzU29ydGVkYCBwZXJmb3JtcyBhIGZhc3RlciBzZWFyY2ggYWxnb3JpdGhtXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuIElmIGFuIGl0ZXJhdGVlIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIGl0IGlzIGludm9rZWQgZm9yXG4gICAgICogZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheSB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoIHVuaXF1ZW5lc3NcbiAgICAgKiBpcyBjb21wdXRlZC4gVGhlIGBpdGVyYXRlZWAgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGl0ZXJhdGVlYCB0aGUgY3JlYXRlZCBgXy5wcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGEgdmFsdWUgaXMgYWxzbyBwcm92aWRlZCBmb3IgYHRoaXNBcmdgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNQcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIGEgbWF0Y2hpbmcgcHJvcGVydHlcbiAgICAgKiB2YWx1ZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgaXRlcmF0ZWVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyB1bmlxdWVcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1NvcnRlZF0gU3BlY2lmeSB0aGUgYXJyYXkgaXMgc29ydGVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2l0ZXJhdGVlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZS12YWx1ZS1mcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzIsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIGBpc1NvcnRlZGBcbiAgICAgKiBfLnVuaXEoWzEsIDEsIDJdLCB0cnVlKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIGFuIGl0ZXJhdGVlIGZ1bmN0aW9uXG4gICAgICogXy51bmlxKFsxLCAyLjUsIDEuNSwgMl0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiB0aGlzLmZsb29yKG4pO1xuICAgICAqIH0sIE1hdGgpO1xuICAgICAqIC8vID0+IFsxLCAyLjVdXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8udW5pcShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSwgaXNTb3J0ZWQsIGl0ZXJhdGVlLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzU29ydGVkICE9IG51bGwgJiYgdHlwZW9mIGlzU29ydGVkICE9ICdib29sZWFuJykge1xuICAgICAgICB0aGlzQXJnID0gaXRlcmF0ZWU7XG4gICAgICAgIGl0ZXJhdGVlID0gaXNJdGVyYXRlZUNhbGwoYXJyYXksIGlzU29ydGVkLCB0aGlzQXJnKSA/IHVuZGVmaW5lZCA6IGlzU29ydGVkO1xuICAgICAgICBpc1NvcnRlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGNhbGxiYWNrID0gZ2V0Q2FsbGJhY2soKTtcbiAgICAgIGlmICghKGl0ZXJhdGVlID09IG51bGwgJiYgY2FsbGJhY2sgPT09IGJhc2VDYWxsYmFjaykpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSBjYWxsYmFjayhpdGVyYXRlZSwgdGhpc0FyZywgMyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKGlzU29ydGVkICYmIGdldEluZGV4T2YoKSA9PSBiYXNlSW5kZXhPZilcbiAgICAgICAgPyBzb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSlcbiAgICAgICAgOiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydmcmVkJywgJ2Jhcm5leSddLCBbMzAsIDQwXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snZnJlZCcsIDMwLCB0cnVlXSwgWydiYXJuZXknLCA0MCwgZmFsc2VdXVxuICAgICAqXG4gICAgICogXy51bnppcCh6aXBwZWQpO1xuICAgICAqIC8vID0+IFtbJ2ZyZWQnLCAnYmFybmV5J10sIFszMCwgNDBdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICAgIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShncm91cCkpIHtcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoZ3JvdXAubGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5TWFwKGFycmF5LCBiYXNlUHJvcGVydHkoaW5kZXgpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBpdGVyYXRlZSB0byBzcGVjaWZ5XG4gICAgICogaG93IHJlZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgYGl0ZXJhdGVlYCBpcyBib3VuZCB0byBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIHJlZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSk7XG4gICAgICogLy8gPT4gW1sxLCAxMCwgMTAwXSwgWzIsIDIwLCAyMDBdXVxuICAgICAqXG4gICAgICogXy51bnppcFdpdGgoemlwcGVkLCBfLmFkZCk7XG4gICAgICogLy8gPT4gWzMsIDMwLCAzMDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXBXaXRoKGFycmF5LCBpdGVyYXRlZSwgdGhpc0FyZykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaXRlcmF0ZWUgPSBiaW5kQ2FsbGJhY2soaXRlcmF0ZWUsIHRoaXNBcmcsIDQpO1xuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKGdyb3VwLCBpdGVyYXRlZSwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBwcm92aWRlZCB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWx0ZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzEsIDIsIDEsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKi9cbiAgICB2YXIgd2l0aG91dCA9IHJlc3RQYXJhbShmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2UoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGlzIHRoZSBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBwcm92aWRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMSwgMl0sIFs0LCAyXSk7XG4gICAgICogLy8gPT4gWzEsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24geG9yKCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGFycmF5KSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSByZXN1bHRcbiAgICAgICAgICAgID8gYXJyYXlQdXNoKGJhc2VEaWZmZXJlbmNlKHJlc3VsdCwgYXJyYXkpLCBiYXNlRGlmZmVyZW5jZShhcnJheSwgcmVzdWx0KSlcbiAgICAgICAgICAgIDogYXJyYXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgPyBiYXNlVW5pcShyZXN1bHQpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLCB0aGUgZmlyc3Qgb2Ygd2hpY2ggY29udGFpbnMgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgdGhlIHNlY29uZCBvZiB3aGljaCBjb250YWlucyB0aGUgc2Vjb25kIGVsZW1lbnRzXG4gICAgICogb2YgdGhlIGdpdmVuIGFycmF5cywgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwKFsnZnJlZCcsICdiYXJuZXknXSwgWzMwLCA0MF0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2ZyZWQnLCAzMCwgdHJ1ZV0sIFsnYmFybmV5JywgNDAsIGZhbHNlXV1cbiAgICAgKi9cbiAgICB2YXIgemlwID0gcmVzdFBhcmFtKHVuemlwKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnBhaXJzYDsgdGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWQgZnJvbSBhcnJheXNcbiAgICAgKiBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgdmFsdWVzLiBQcm92aWRlIGVpdGhlciBhIHNpbmdsZSB0d28gZGltZW5zaW9uYWwgYXJyYXksXG4gICAgICogZS5nLiBgW1trZXkxLCB2YWx1ZTFdLCBba2V5MiwgdmFsdWUyXV1gIG9yIHR3byBhcnJheXMsIG9uZSBvZiBwcm9wZXJ0eSBuYW1lc1xuICAgICAqIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgb2JqZWN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoW1snZnJlZCcsIDMwXSwgWydiYXJuZXknLCA0MF1dKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogMzAsICdiYXJuZXknOiA0MCB9XG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2ZyZWQnLCAnYmFybmV5J10sIFszMCwgNDBdKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogMzAsICdiYXJuZXknOiA0MCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0KHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzID8gcHJvcHMubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgaWYgKGxlbmd0aCAmJiAhdmFsdWVzICYmICFpc0FycmF5KHByb3BzWzBdKSkge1xuICAgICAgICB2YWx1ZXMgPSBbXTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5KSB7XG4gICAgICAgICAgcmVzdWx0W2tleVswXV0gPSBrZXlbMV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gaXRlcmF0ZWUgdG8gc3BlY2lmeVxuICAgICAqIGhvdyBncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBgaXRlcmF0ZWVgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYFxuICAgICAqIGFuZCBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6IChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgXy5hZGQpO1xuICAgICAqIC8vID0+IFsxMTEsIDIyMl1cbiAgICAgKi9cbiAgICB2YXIgemlwV2l0aCA9IHJlc3RQYXJhbShmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMiA/IGFycmF5c1tsZW5ndGggLSAyXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICB0aGlzQXJnID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGxlbmd0aCA+IDIgJiYgdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbGVuZ3RoIC09IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRlZSA9IChsZW5ndGggPiAxICYmIHR5cGVvZiB0aGlzQXJnID09ICdmdW5jdGlvbicpID8gKC0tbGVuZ3RoLCB0aGlzQXJnKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpc0FyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFycmF5cy5sZW5ndGggPSBsZW5ndGg7XG4gICAgICByZXR1cm4gdW56aXBXaXRoKGFycmF5cywgaXRlcmF0ZWUsIHRoaXNBcmcpO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbmluZyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENoYWluXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHlvdW5nZXN0ID0gXy5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKGNocikge1xuICAgICAqICAgICByZXR1cm4gY2hyLnVzZXIgKyAnIGlzICcgKyBjaHIuYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5maXJzdCgpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcyBpcyAxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoKHZhbHVlKTtcbiAgICAgIHJlc3VsdC5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIGBpbnRlcmNlcHRvcmAgYW5kIHJldHVybnMgYHZhbHVlYC4gVGhlIGludGVyY2VwdG9yIGlzXG4gICAgICogYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZlxuICAgICAqIHRoaXMgbWV0aG9kIGlzIHRvIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBpbiBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnNcbiAgICAgKiBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENoYWluXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICBhcnJheS5wb3AoKTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnJldmVyc2UoKVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yLCB0aGlzQXJnKSB7XG4gICAgICBpbnRlcmNlcHRvci5jYWxsKHRoaXNBcmcsIHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnRhcGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvciwgdGhpc0FyZykge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yLmNhbGwodGhpc0FyZywgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgZXhwbGljaXQgbWV0aG9kIGNoYWluaW5nIG9uIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZ1xuICAgICAqIF8odXNlcnMpLmZpcnN0KCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gd2l0aCBleHBsaWNpdCBjaGFpbmluZ1xuICAgICAqIF8odXNlcnMpLmNoYWluKClcbiAgICAgKiAgIC5maXJzdCgpXG4gICAgICogICAucGljaygndXNlcicpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDaGFpbigpIHtcbiAgICAgIHJldHVybiBjaGFpbih0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW5lZCBzZXF1ZW5jZSBhbmQgcmV0dXJucyB0aGUgd3JhcHBlZCByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjb21taXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDaGFpblxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcnJheSBqb2luaW5nIGEgd3JhcHBlZCBhcnJheSB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjb25jYXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDaGFpblxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb25jYXRlbmF0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxXTtcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oYXJyYXkpLmNvbmNhdCgyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKHdyYXBwZWQudmFsdWUoKSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckNvbmNhdCA9IHJlc3RQYXJhbShmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgIHZhbHVlcyA9IGJhc2VGbGF0dGVuKHZhbHVlcyk7XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBhcnJheUNvbmNhdChpc0FycmF5KGFycmF5KSA/IGFycmF5IDogW3RvT2JqZWN0KGFycmF5KV0sIHZhbHVlcyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgY2hhaW5lZCBzZXF1ZW5jZSBwbGFudGluZyBgdmFsdWVgIGFzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgcGxhbnRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDaGFpblxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBNYXRoLnBvdyh2YWx1ZSwgMik7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXIgPSBbMywgNF07XG4gICAgICogdmFyIG90aGVyV3JhcHBlZCA9IHdyYXBwZWQucGxhbnQob3RoZXIpO1xuICAgICAqXG4gICAgICogb3RoZXJXcmFwcGVkLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIHRoZSB3cmFwcGVkIGFycmF5IHNvIHRoZSBmaXJzdCBlbGVtZW50IGJlY29tZXMgdGhlIGxhc3QsIHRoZVxuICAgICAqIHNlY29uZCBlbGVtZW50IGJlY29tZXMgdGhlIHNlY29uZCB0byBsYXN0LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDaGFpblxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfKGFycmF5KS5yZXZlcnNlKCkudmFsdWUoKVxuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJSZXZlcnNlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXztcblxuICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICh3cmFwcGVkICYmIHdyYXBwZWQuX19kaXJfXyA8IDApID8gdmFsdWUgOiB2YWx1ZS5yZXZlcnNlKCk7XG4gICAgICB9O1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgdmFyIHdyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoKSB7XG4gICAgICAgICAgd3JhcHBlZCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVkID0gd3JhcHBlZC5yZXZlcnNlKCk7XG4gICAgICAgIHdyYXBwZWQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZWQsIHRoaXMuX19jaGFpbl9fKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIHRoZSByZXN1bHQgb2YgY29lcmNpbmcgdGhlIHVud3JhcHBlZCB2YWx1ZSB0byBhIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBuYW1lIHRvU3RyaW5nXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb2VyY2VkIHN0cmluZyB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnRvU3RyaW5nKCk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJUb1N0cmluZygpIHtcbiAgICAgIHJldHVybiAodGhpcy52YWx1ZSgpICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbmVkIHNlcXVlbmNlIHRvIGV4dHJhY3QgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgcnVuLCB0b0pTT04sIHZhbHVlT2ZcbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIGtleXMsIG9yIGluZGV4ZXMsXG4gICAgICogb2YgYGNvbGxlY3Rpb25gLiBLZXlzIG1heSBiZSBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBhcmd1bWVudHMgb3IgYXMgYXJyYXlzXG4gICAgICogb2Yga2V5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW118c3RyaW5nfHN0cmluZ1tdKX0gW3Byb3BzXSBUaGUgcHJvcGVydHkgbmFtZXNcbiAgICAgKiAgb3IgaW5kZXhlcyBvZiBlbGVtZW50cyB0byBwaWNrLCBzcGVjaWZpZWQgaW5kaXZpZHVhbGx5IG9yIGluIGFycmF5cy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwaWNrZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYXQoWydhJywgJ2InLCAnYyddLCBbMCwgMl0pO1xuICAgICAqIC8vID0+IFsnYScsICdjJ11cbiAgICAgKlxuICAgICAqIF8uYXQoWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ10sIDAsIDIpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIHZhciBhdCA9IHJlc3RQYXJhbShmdW5jdGlvbihjb2xsZWN0aW9uLCBwcm9wcykge1xuICAgICAgcmV0dXJuIGJhc2VBdChjb2xsZWN0aW9uLCBiYXNlRmxhdHRlbihwcm9wcykpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJvdWdoIGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlXG4gICAgICogb2YgZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSBgaXRlcmF0ZWVgLlxuICAgICAqIFRoZSBgaXRlcmF0ZWVgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGl0ZXJhdGVlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzQuMywgNi4xLCA2LjRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gTWF0aC5mbG9vcihuKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICc0JzogMSwgJzYnOiAyIH1cbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNC4zLCA2LjEsIDYuNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiB0aGlzLmZsb29yKG4pO1xuICAgICAqIH0sIE1hdGgpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkgPyArK3Jlc3VsdFtrZXldIDogKHJlc3VsdFtrZXldID0gMSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYWxsKiogZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIFRoZSBwcmVkaWNhdGUgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGFsbFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYHByZWRpY2F0ZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ldmVyeShbdHJ1ZSwgMSwgbnVsbCwgJ3llcyddLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJywgZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5wcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5ldmVyeSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUV2ZXJ5IDogYmFzZUV2ZXJ5O1xuICAgICAgaWYgKHRoaXNBcmcgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCB0aGlzQXJnKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nIHx8IHRoaXNBcmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcmVkaWNhdGUgPSBnZXRDYWxsYmFjayhwcmVkaWNhdGUsIHRoaXNBcmcsIDMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgcHJlZGljYXRlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgcHJlZGljYXRlYCB0aGUgY3JlYXRlZCBgXy5wcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGEgdmFsdWUgaXMgYWxzbyBwcm92aWRlZCBmb3IgYHRoaXNBcmdgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNQcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIGEgbWF0Y2hpbmcgcHJvcGVydHlcbiAgICAgKiB2YWx1ZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgcHJlZGljYXRlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgc2VsZWN0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgcHJlZGljYXRlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzQsIDUsIDZdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbNCwgNl1cbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzYCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSksICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScsIGZhbHNlKSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8uZmlsdGVyKHVzZXJzLCAnYWN0aXZlJyksICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHByZWRpY2F0ZSA9IGdldENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMyk7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZFxuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGRldGVjdFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYHByZWRpY2F0ZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKGNocikge1xuICAgICAqICAgcmV0dXJuIGNoci5hZ2UgPCA0MDtcbiAgICAgKiB9KSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucmVzdWx0KF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSksICd1c2VyJyk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnJlc3VsdChfLmZpbmQodXNlcnMsICdhY3RpdmUnLCBmYWxzZSksICd1c2VyJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucmVzdWx0KF8uZmluZCh1c2VycywgJ2FjdGl2ZScpLCAndXNlcicpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGJhc2VFYWNoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChiYXNlRWFjaFJpZ2h0LCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCBhbmQgdGhlXG4gICAgICogc291cmNlIG9iamVjdCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaGFzIGVxdWl2YWxlbnQgcHJvcGVydHlcbiAgICAgKiB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYm9vbGVhbnMsIGBEYXRlYCBvYmplY3RzLFxuICAgICAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIGFuZCBzdHJpbmdzLiBPYmplY3RzIGFyZSBjb21wYXJlZCBieVxuICAgICAqIHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGb3IgY29tcGFyaW5nIGEgc2luZ2xlXG4gICAgICogb3duIG9yIGluaGVyaXRlZCBwcm9wZXJ0eSB2YWx1ZSBzZWUgYF8ubWF0Y2hlc1Byb3BlcnR5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KF8uZmluZFdoZXJlKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSksICd1c2VyJyk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KF8uZmluZFdoZXJlKHVzZXJzLCB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0pLCAndXNlcicpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRXaGVyZShjb2xsZWN0aW9uLCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBmaW5kKGNvbGxlY3Rpb24sIGJhc2VNYXRjaGVzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGludm9raW5nIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKiBUaGUgYGl0ZXJhdGVlYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5XG4gICAgICogYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiIHByb3BlcnR5XG4gICAgICogYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIGBfLmZvckluYCBvciBgXy5mb3JPd25gXG4gICAgICogbWF5IGJlIHVzZWQgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fHN0cmluZ30gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDJdKS5mb3JFYWNoKGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKG4pO1xuICAgICAqIH0pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gbG9ncyBlYWNoIHZhbHVlIGZyb20gbGVmdCB0byByaWdodCBhbmQgcmV0dXJucyB0aGUgYXJyYXlcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKG4sIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2cobiwga2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBsb2dzIGVhY2ggdmFsdWUta2V5IHBhaXIgYW5kIHJldHVybnMgdGhlIG9iamVjdCAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciBmb3JFYWNoID0gY3JlYXRlRm9yRWFjaChhcnJheUVhY2gsIGJhc2VFYWNoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R8c3RyaW5nfSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMl0pLmZvckVhY2hSaWdodChmdW5jdGlvbihuKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhuKTtcbiAgICAgKiB9KS52YWx1ZSgpO1xuICAgICAqIC8vID0+IGxvZ3MgZWFjaCB2YWx1ZSBmcm9tIHJpZ2h0IHRvIGxlZnQgYW5kIHJldHVybnMgdGhlIGFycmF5XG4gICAgICovXG4gICAgdmFyIGZvckVhY2hSaWdodCA9IGNyZWF0ZUZvckVhY2goYXJyYXlFYWNoUmlnaHQsIGJhc2VFYWNoUmlnaHQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJvdWdoIGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlXG4gICAgICogb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgdGhlIGVsZW1lbnRzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuXG4gICAgICogVGhlIGBpdGVyYXRlZWAgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGl0ZXJhdGVlYCB0aGUgY3JlYXRlZCBgXy5wcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGEgdmFsdWUgaXMgYWxzbyBwcm92aWRlZCBmb3IgYHRoaXNBcmdgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNQcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIGEgbWF0Y2hpbmcgcHJvcGVydHlcbiAgICAgKiB2YWx1ZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgaXRlcmF0ZWVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNC4yLCA2LjEsIDYuNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBNYXRoLmZsb29yKG4pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjRdIH1cbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNC4yLCA2LjEsIDYuNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiB0aGlzLmZsb29yKG4pO1xuICAgICAqIH0sIE1hdGgpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjRdIH1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5wcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBbdmFsdWVdO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gYGNvbGxlY3Rpb25gIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCBpcyB1c2VkIGFzIHRoZSBvZmZzZXRcbiAgICAgKiBmcm9tIHRoZSBlbmQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGNvbnRhaW5zLCBpbmNsdWRlXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBtYXRjaGluZyBlbGVtZW50IGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoeyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH0sICdmcmVkJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygncGViYmxlcycsICdlYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB0YXJnZXQsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uID8gZ2V0TGVuZ3RoKGNvbGxlY3Rpb24pIDogMDtcbiAgICAgIGlmICghaXNMZW5ndGgobGVuZ3RoKSkge1xuICAgICAgICBjb2xsZWN0aW9uID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZnJvbUluZGV4ICE9ICdudW1iZXInIHx8IChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbCh0YXJnZXQsIGZyb21JbmRleCwgZ3VhcmQpKSkge1xuICAgICAgICBmcm9tSW5kZXggPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnJvbUluZGV4ID0gZnJvbUluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApIDogKGZyb21JbmRleCB8fCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAodHlwZW9mIGNvbGxlY3Rpb24gPT0gJ3N0cmluZycgfHwgIWlzQXJyYXkoY29sbGVjdGlvbikgJiYgaXNTdHJpbmcoY29sbGVjdGlvbikpXG4gICAgICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHRhcmdldCwgZnJvbUluZGV4KSA+IC0xKVxuICAgICAgICA6ICghIWxlbmd0aCAmJiBnZXRJbmRleE9mKGNvbGxlY3Rpb24sIHRhcmdldCwgZnJvbUluZGV4KSA+IC0xKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocm91Z2ggYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVcbiAgICAgKiBvZiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGZ1bmN0aW9uIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGl0ZXJhdGVlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIga2V5RGF0YSA9IFtcbiAgICAgKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICAgICAqICAgeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmluZGV4Qnkoa2V5RGF0YSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICpcbiAgICAgKiBfLmluZGV4Qnkoa2V5RGF0YSwgZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICogICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvYmplY3QuY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5pbmRleEJ5KGtleURhdGEsIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAqICAgcmV0dXJuIHRoaXMuZnJvbUNoYXJDb2RlKG9iamVjdC5jb2RlKTtcbiAgICAgKiB9LCBTdHJpbmcpO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKi9cbiAgICB2YXIgaW5kZXhCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYG1ldGhvZE5hbWVgIGlzIGEgZnVuY3Rpb24gaXQgaXNcbiAgICAgKiBpbnZva2VkIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvclxuICAgICAqICB0aGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2UoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlID0gcmVzdFBhcmFtKGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgaXNQcm9wID0gaXNLZXkocGF0aCksXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0Z1bmMgPyBwYXRoIDogKChpc1Byb3AgJiYgdmFsdWUgIT0gbnVsbCkgPyB2YWx1ZVtwYXRoXSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGZ1bmMgPyBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKSA6IGludm9rZVBhdGgodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocm91Z2hcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgYGl0ZXJhdGVlYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgaXRlcmF0ZWVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXJ5YCwgYGNhbGxiYWNrYCwgYGNodW5rYCwgYGNsb25lYCwgYGNyZWF0ZWAsIGBjdXJyeWAsIGBjdXJyeVJpZ2h0YCxcbiAgICAgKiBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLCBgZmlsbGAsIGBmbGF0dGVuYCwgYGludmVydGAsIGBtYXhgLCBgbWluYCxcbiAgICAgKiBgcGFyc2VJbnRgLCBgc2xpY2VgLCBgc29ydEJ5YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCwgYHRlbXBsYXRlYCwgYHRyaW1gLFxuICAgICAqIGB0cmltTGVmdGAsIGB0cmltUmlnaHRgLCBgdHJ1bmNgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHNhbXBsZWAsIGBzb21lYCxcbiAgICAgKiBgc3VtYCwgYHVuaXFgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGNvbGxlY3RcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHRpbWVzVGhyZWUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWFwKFsxLCAyXSwgdGltZXNUaHJlZSk7XG4gICAgICogLy8gPT4gWzMsIDZdXG4gICAgICpcbiAgICAgKiBfLm1hcCh7ICdhJzogMSwgJ2InOiAyIH0sIHRpbWVzVGhyZWUpO1xuICAgICAqIC8vID0+IFszLCA2XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLm1hcCh1c2VycywgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIHRoaXNBcmcpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0Q2FsbGJhY2soaXRlcmF0ZWUsIHRoaXNBcmcsIDMpO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byB0d28gZ3JvdXBzLCB0aGUgZmlyc3Qgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IsIHdoaWxlIHRoZSBzZWNvbmQgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgYm91bmRcbiAgICAgKiB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgcHJlZGljYXRlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFydGl0aW9uKFsxLCAyLCAzXSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFtbMSwgM10sIFsyXV1cbiAgICAgKlxuICAgICAqIF8ucGFydGl0aW9uKFsxLjIsIDIuMywgMy40XSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIHRoaXMuZmxvb3IobikgJSAyO1xuICAgICAqIH0sIE1hdGgpO1xuICAgICAqIC8vID0+IFtbMS4yLCAzLjRdLCBbMi4zXV1cbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciBtYXBwZXIgPSBmdW5jdGlvbihhcnJheSkge1xuICAgICAqICAgcmV0dXJuIF8ucGx1Y2soYXJyYXksICd1c2VyJyk7XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzYCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLm1hcChfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pLCBtYXBwZXIpO1xuICAgICAqIC8vID0+IFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5tYXAoXy5wYXJ0aXRpb24odXNlcnMsICdhY3RpdmUnLCBmYWxzZSksIG1hcHBlcik7XG4gICAgICogLy8gPT4gW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ubWFwKF8ucGFydGl0aW9uKHVzZXJzLCAnYWN0aXZlJyksIG1hcHBlcik7XG4gICAgICogLy8gPT4gW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICovXG4gICAgdmFyIHBhcnRpdGlvbiA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRba2V5ID8gMCA6IDFdLnB1c2godmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uKCkgeyByZXR1cm4gW1tdLCBbXV07IH0pO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgYHBhdGhgIGZyb20gYWxsIGVsZW1lbnRzIGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcGx1Y2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucGx1Y2sodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiB2YXIgdXNlckluZGV4ID0gXy5pbmRleEJ5KHVzZXJzLCAndXNlcicpO1xuICAgICAqIF8ucGx1Y2sodXNlckluZGV4LCAnYWdlJyk7XG4gICAgICogLy8gPT4gWzM2LCA0MF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwbHVjayhjb2xsZWN0aW9uLCBwYXRoKSB7XG4gICAgICByZXR1cm4gbWFwKGNvbGxlY3Rpb24sIHByb3BlcnR5KHBhdGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhyb3VnaCBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gICAgICogaXMgbm90IHByb3ZpZGVkIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBgaXRlcmF0ZWVgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICAgICAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgc29ydEJ5QWxsYCxcbiAgICAgKiBhbmQgYHNvcnRCeU9yZGVyYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGZvbGRsLCBpbmplY3RcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZWR1Y2UoWzEsIDJdLCBmdW5jdGlvbih0b3RhbCwgbikge1xuICAgICAqICAgcmV0dXJuIHRvdGFsICsgbjtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHJlc3VsdCwgbiwga2V5KSB7XG4gICAgICogICByZXN1bHRba2V5XSA9IG4gKiAzO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnYSc6IDMsICdiJzogNiB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHJlZHVjZSA9IGNyZWF0ZVJlZHVjZShhcnJheVJlZHVjZSwgYmFzZUVhY2gpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGZvbGRyXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgdmFyIHJlZHVjZVJpZ2h0ID0gY3JlYXRlUmVkdWNlKGFycmF5UmVkdWNlUmlnaHQsIGJhc2VFYWNoUmlnaHQpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmZpbHRlcmA7IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYFxuICAgICAqIHRoYXQgYHByZWRpY2F0ZWAgZG9lcyAqKm5vdCoqIHJldHVybiB0cnV0aHkgZm9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgcHJlZGljYXRlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZWplY3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzYCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8ucmVqZWN0KHVzZXJzLCB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSksICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScsIGZhbHNlKSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8ucmVqZWN0KHVzZXJzLCAnYWN0aXZlJyksICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlamVjdChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHByZWRpY2F0ZSA9IGdldENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMyk7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBvciBgbmAgcmFuZG9tIGVsZW1lbnRzIGZyb20gYSBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbl0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBzYW1wbGUocykuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSA6IG4gPT0gbnVsbCkge1xuICAgICAgICBjb2xsZWN0aW9uID0gdG9JdGVyYWJsZShjb2xsZWN0aW9uKTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgICByZXR1cm4gbGVuZ3RoID4gMCA/IGNvbGxlY3Rpb25bYmFzZVJhbmRvbSgwLCBsZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSB0b0FycmF5KGNvbGxlY3Rpb24pLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgbiA9IG5hdGl2ZU1pbihuIDwgMCA/IDAgOiAoK24gfHwgMCksIGxlbmd0aCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgdmFyIHJhbmQgPSBiYXNlUmFuZG9tKGluZGV4LCBsYXN0SW5kZXgpLFxuICAgICAgICAgICAgdmFsdWUgPSByZXN1bHRbcmFuZF07XG5cbiAgICAgICAgcmVzdWx0W3JhbmRdID0gcmVzdWx0W2luZGV4XTtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlXG4gICAgICogW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNodWZmbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiBbNCwgMSwgMywgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzYW1wbGUoY29sbGVjdGlvbiwgUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBmb3Igb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc2l6ZSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSgncGViYmxlcycpO1xuICAgICAqIC8vID0+IDdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uID8gZ2V0TGVuZ3RoKGNvbGxlY3Rpb24pIDogMDtcbiAgICAgIHJldHVybiBpc0xlbmd0aChsZW5ndGgpID8gbGVuZ3RoIDoga2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIFRoZSBmdW5jdGlvbiByZXR1cm5zIGFzIHNvb24gYXMgaXQgZmluZHMgYSBwYXNzaW5nIHZhbHVlIGFuZCBkb2VzIG5vdCBpdGVyYXRlXG4gICAgICogb3ZlciB0aGUgZW50aXJlIGNvbGxlY3Rpb24uIFRoZSBwcmVkaWNhdGUgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGFueVxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYHByZWRpY2F0ZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29tZShbbnVsbCwgMCwgJ3llcycsIGZhbHNlXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc2AgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5zb21lKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJywgZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5wcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNvbWUgOiBiYXNlU29tZTtcbiAgICAgIGlmICh0aGlzQXJnICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgdGhpc0FyZykpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJyB8fCB0aGlzQXJnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJlZGljYXRlID0gZ2V0Q2FsbGJhY2socHJlZGljYXRlLCB0aGlzQXJnLCAzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJvdWdoIGBpdGVyYXRlZWAuIFRoaXMgbWV0aG9kIHBlcmZvcm1zXG4gICAgICogYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mIGVxdWFsIGVsZW1lbnRzLlxuICAgICAqIFRoZSBgaXRlcmF0ZWVgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGl0ZXJhdGVlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KFsxLCAyLCAzXSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIE1hdGguc2luKG4pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFszLCAxLCAyXVxuICAgICAqXG4gICAgICogXy5zb3J0QnkoWzEsIDIsIDNdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gdGhpcy5zaW4obik7XG4gICAgICogfSwgTWF0aCk7XG4gICAgICogLy8gPT4gWzMsIDEsIDJdXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucGx1Y2soXy5zb3J0QnkodXNlcnMsICd1c2VyJyksICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0QnkoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIHRoaXNBcmcpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXNBcmcgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIHRoaXNBcmcpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICBpdGVyYXRlZSA9IGdldENhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCAzKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBjb21wYXJlQXNjZW5kaW5nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgY2FuIHNvcnQgYnkgbXVsdGlwbGUgaXRlcmF0ZWVzXG4gICAgICogb3IgcHJvcGVydHkgbmFtZXMuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGFuIGl0ZXJhdGVlIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBhbiBpdGVyYXRlZSB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXXxPYmplY3R8T2JqZWN0W118c3RyaW5nfHN0cmluZ1tdKX0gaXRlcmF0ZWVzXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieSwgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgdmFsdWVzIG9yIGFycmF5cyBvZiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQyIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5QWxsKHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pLCBfLnZhbHVlcyk7XG4gICAgICogLy8gPT4gW1snYmFybmV5JywgMzRdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgNDJdLCBbJ2ZyZWQnLCA0OF1dXG4gICAgICpcbiAgICAgKiBfLm1hcChfLnNvcnRCeUFsbCh1c2VycywgJ3VzZXInLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBNYXRoLmZsb29yKGNoci5hZ2UgLyAxMCk7XG4gICAgICogfSksIF8udmFsdWVzKTtcbiAgICAgKiAvLyA9PiBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQyXV1cbiAgICAgKi9cbiAgICB2YXIgc29ydEJ5QWxsID0gcmVzdFBhcmFtKGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlcykge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgZ3VhcmQgPSBpdGVyYXRlZXNbMl07XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICBpdGVyYXRlZXMubGVuZ3RoID0gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydEJ5T3JkZXIoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0QnlBbGxgIGV4Y2VwdCB0aGF0IGl0IGFsbG93cyBzcGVjaWZ5aW5nIHRoZVxuICAgICAqIHNvcnQgb3JkZXJzIG9mIHRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS4gSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbFxuICAgICAqIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLCBhIHZhbHVlIGlzIHNvcnRlZCBpblxuICAgICAqIGFzY2VuZGluZyBvcmRlciBpZiBpdHMgY29ycmVzcG9uZGluZyBvcmRlciBpcyBcImFzY1wiLCBhbmQgZGVzY2VuZGluZyBpZiBcImRlc2NcIi5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYW4gaXRlcmF0ZWUgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGFuIGl0ZXJhdGVlIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFuW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDIgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gc29ydCBieSBgdXNlcmAgaW4gYXNjZW5kaW5nIG9yZGVyIGFuZCBieSBgYWdlYCBpbiBkZXNjZW5kaW5nIG9yZGVyXG4gICAgICogXy5tYXAoXy5zb3J0QnlPcmRlcih1c2VycywgWyd1c2VyJywgJ2FnZSddLCBbJ2FzYycsICdkZXNjJ10pLCBfLnZhbHVlcyk7XG4gICAgICogLy8gPT4gW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0Ml1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydEJ5T3JkZXIoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMsIGd1YXJkKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpKSB7XG4gICAgICAgIG9yZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBcnJheShpdGVyYXRlZXMpKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGl0ZXJhdGVlcyA9PSBudWxsID8gW10gOiBbaXRlcmF0ZWVzXTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydEJ5T3JkZXIoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCBhbmQgdGhlXG4gICAgICogc291cmNlIG9iamVjdCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50cyB0aGF0IGhhdmUgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBib29sZWFucywgYERhdGVgIG9iamVjdHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgYW5kIHN0cmluZ3MuIE9iamVjdHMgYXJlIGNvbXBhcmVkIGJ5XG4gICAgICogdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZvciBjb21wYXJpbmcgYSBzaW5nbGVcbiAgICAgKiBvd24gb3IgaW5oZXJpdGVkIHByb3BlcnR5IHZhbHVlIHNlZSBgXy5tYXRjaGVzUHJvcGVydHlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UsICdwZXRzJzogWydob3BweSddIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUsICdwZXRzJzogWydiYWJ5IHB1c3MnLCAnZGlubyddIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wbHVjayhfLndoZXJlKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0pLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIF8ucGx1Y2soXy53aGVyZSh1c2VycywgeyAncGV0cyc6IFsnZGlubyddIH0pLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gd2hlcmUoY29sbGVjdGlvbiwgc291cmNlKSB7XG4gICAgICByZXR1cm4gZmlsdGVyKGNvbGxlY3Rpb24sIGJhc2VNYXRjaGVzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIFVuaXggZXBvY2hcbiAgICAgKiAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBEYXRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gICAgICogfSwgXy5ub3coKSk7XG4gICAgICogLy8gPT4gbG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgZnVuY3Rpb24gdG8gYmUgaW52b2tlZFxuICAgICAqL1xuICAgIHZhciBub3cgPSBuYXRpdmVOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgfTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5iZWZvcmVgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogYGZ1bmNgIG9uY2UgaXQgaXMgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IGxvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFmdGVyKG4sIGZ1bmMpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbiA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIHRlbXAgPSBuO1xuICAgICAgICAgIG4gPSBmdW5jO1xuICAgICAgICAgIGZ1bmMgPSB0ZW1wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbiA9IG5hdGl2ZUlzRmluaXRlKG4gPSArbikgPyBuIDogMDtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gYG5gIGFyZ3VtZW50cyBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IGNhcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy5hcnkocGFyc2VJbnQsIDEpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJ5KGZ1bmMsIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoZnVuYywgbiwgZ3VhcmQpKSB7XG4gICAgICAgIG4gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbmF0aXZlTWF4KCtuIHx8IDAsIDApO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXBwZXIoZnVuYywgQVJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHNcbiAgICAgKiBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hpbGUgaXQgaXMgY2FsbGVkIGxlc3MgdGhhbiBgbmAgdGltZXMuIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYXQgd2hpY2ggYGZ1bmNgIGlzIG5vIGxvbmdlciBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGpRdWVyeSgnI2FkZCcpLm9uKCdjbGljaycsIF8uYmVmb3JlKDUsIGFkZENvbnRhY3RUb0xpc3QpKTtcbiAgICAgKiAvLyA9PiBhbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbiA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIHRlbXAgPSBuO1xuICAgICAgICAgIG4gPSBmdW5jO1xuICAgICAgICAgIGZ1bmMgPSB0ZW1wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgICAgZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgcHJlcGVuZHMgYW55IGFkZGl0aW9uYWwgYF8uYmluZGAgYXJndW1lbnRzIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgIHRoaXMgbWV0aG9kIGRvZXMgbm90IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBwbGFjZWhvbGRlcnNcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmQgPSByZXN0UGFyYW0oZnVuY3Rpb24oZnVuYywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBiaW5kLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgYml0bWFzayB8PSBQQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcHBlcihmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLiBNZXRob2QgbmFtZXMgbWF5IGJlIHNwZWNpZmllZCBhcyBpbmRpdmlkdWFsIGFyZ3VtZW50cyBvciBhcyBhcnJheXNcbiAgICAgKiBvZiBtZXRob2QgbmFtZXMuIElmIG5vIG1ldGhvZCBuYW1lcyBhcmUgcHJvdmlkZWQgYWxsIGVudW1lcmFibGUgZnVuY3Rpb25cbiAgICAgKiBwcm9wZXJ0aWVzLCBvd24gYW5kIGluaGVyaXRlZCwgb2YgYG9iamVjdGAgYXJlIGJvdW5kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFttZXRob2ROYW1lc10gVGhlIG9iamVjdCBtZXRob2QgbmFtZXMgdG8gYmluZCxcbiAgICAgKiAgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgbWV0aG9kIG5hbWVzIG9yIGFycmF5cyBvZiBtZXRob2QgbmFtZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnb25DbGljayc6IGZ1bmN0aW9uKCkge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnY2xpY2tlZCAnICsgdGhpcy5sYWJlbCk7XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uYmluZEFsbCh2aWV3KTtcbiAgICAgKiBqUXVlcnkoJyNkb2NzJykub24oJ2NsaWNrJywgdmlldy5vbkNsaWNrKTtcbiAgICAgKiAvLyA9PiBsb2dzICdjbGlja2VkIGRvY3MnIHdoZW4gdGhlIGVsZW1lbnQgaXMgY2xpY2tlZFxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gcmVzdFBhcmFtKGZ1bmN0aW9uKG9iamVjdCwgbWV0aG9kTmFtZXMpIHtcbiAgICAgIG1ldGhvZE5hbWVzID0gbWV0aG9kTmFtZXMubGVuZ3RoID8gYmFzZUZsYXR0ZW4obWV0aG9kTmFtZXMpIDogZnVuY3Rpb25zKG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG1ldGhvZE5hbWVzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IG1ldGhvZE5hbWVzW2luZGV4XTtcbiAgICAgICAgb2JqZWN0W2tleV0gPSBjcmVhdGVXcmFwcGVyKG9iamVjdFtrZXldLCBCSU5EX0ZMQUcsIG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgYW5kIHByZXBlbmRzXG4gICAgICogYW55IGFkZGl0aW9uYWwgYF8uYmluZEtleWAgYXJndW1lbnRzIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBib3VuZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgXy5iaW5kYCBieSBhbGxvd2luZyBib3VuZCBmdW5jdGlvbnMgdG8gcmVmZXJlbmNlXG4gICAgICogbWV0aG9kcyB0aGF0IG1heSBiZSByZWRlZmluZWQgb3IgZG9uJ3QgeWV0IGV4aXN0LlxuICAgICAqIFNlZSBbUGV0ZXIgTWljaGF1eCdzIGFydGljbGVdKGh0dHA6Ly9wZXRlci5taWNoYXV4LmNhL2FydGljbGVzL2xhenktZnVuY3Rpb24tZGVmaW5pdGlvbi1wYXR0ZXJuKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZEtleS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdGhlIG1ldGhvZCBiZWxvbmdzIHRvLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ3VzZXInOiAnZnJlZCcsXG4gICAgICogICAnZ3JlZXQnOiBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogb2JqZWN0LmdyZWV0ID0gZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAneWEgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgcGxhY2Vob2xkZXJzXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZEtleSA9IHJlc3RQYXJhbShmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gQklORF9GTEFHIHwgQklORF9LRVlfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgYmluZEtleS5wbGFjZWhvbGRlcik7XG4gICAgICAgIGJpdG1hc2sgfD0gUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXBwZXIoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgb25lIG9yIG1vcmUgYXJndW1lbnRzIG9mIGBmdW5jYCB0aGF0IHdoZW5cbiAgICAgKiBjYWxsZWQgZWl0aGVyIGludm9rZXMgYGZ1bmNgIHJldHVybmluZyBpdHMgcmVzdWx0LCBpZiBhbGwgYGZ1bmNgIGFyZ3VtZW50c1xuICAgICAqIGhhdmUgYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBvbmUgb3IgbW9yZSBvZiB0aGVcbiAgICAgKiByZW1haW5pbmcgYGZ1bmNgIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIG1heSBiZSBzcGVjaWZpZWRcbiAgICAgKiBpZiBgZnVuYy5sZW5ndGhgIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHBsYWNlaG9sZGVyc1xuICAgICAqIGN1cnJpZWQoMSkoXywgMykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgdmFyIGN1cnJ5ID0gY3JlYXRlQ3VycnkoQ1VSUllfRkxBRyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lcyBub3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5UmlnaHQoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMykoMikoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDIsIDMpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHBsYWNlaG9sZGVyc1xuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgdmFyIGN1cnJ5UmlnaHQgPSBjcmVhdGVDdXJyeShDVVJSWV9SSUdIVF9GTEFHKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGludm9jYXRpb25zLiBQcm92aWRlIGFuIG9wdGlvbnMgb2JqZWN0IHRvIGluZGljYXRlIHRoYXQgYGZ1bmNgXG4gICAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdFxuICAgICAqIGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBpc1xuICAgICAqIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwOi8vZHJ1cGFsbW90aW9uLmNvbS9hcnRpY2xlL2RlYm91bmNlLWFuZC10aHJvdHRsZS12aXN1YWwtZXhwbGFuYXRpb24pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmdcbiAgICAgKiAgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF0gVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZVxuICAgICAqICBkZWxheWVkIGJlZm9yZSBpdCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV0gU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmdcbiAgICAgKiAgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIGF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXhcbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICAgICAqXG4gICAgICogLy8gaW52b2tlIGBzZW5kTWFpbGAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxsc1xuICAgICAqIGpRdWVyeSgnI3Bvc3Rib3gnKS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gZW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxsc1xuICAgICAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAgICAgKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwge1xuICAgICAqICAgJ21heFdhaXQnOiAxMDAwXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gY2FuY2VsIGEgZGVib3VuY2VkIGNhbGxcbiAgICAgKiB2YXIgdG9kb0NoYW5nZXMgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAxMDAwKTtcbiAgICAgKiBPYmplY3Qub2JzZXJ2ZShtb2RlbHMudG9kbywgdG9kb0NoYW5nZXMpO1xuICAgICAqXG4gICAgICogT2JqZWN0Lm9ic2VydmUobW9kZWxzLCBmdW5jdGlvbihjaGFuZ2VzKSB7XG4gICAgICogICBpZiAoXy5maW5kKGNoYW5nZXMsIHsgJ3VzZXInOiAndG9kbycsICd0eXBlJzogJ2RlbGV0ZSd9KSkge1xuICAgICAqICAgICB0b2RvQ2hhbmdlcy5jYW5jZWwoKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9LCBbJ2RlbGV0ZSddKTtcbiAgICAgKlxuICAgICAqIC8vIC4uLmF0IHNvbWUgcG9pbnQgYG1vZGVscy50b2RvYCBpcyBjaGFuZ2VkXG4gICAgICogbW9kZWxzLnRvZG8uY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgKlxuICAgICAqIC8vIC4uLmJlZm9yZSAxIHNlY29uZCBoYXMgcGFzc2VkIGBtb2RlbHMudG9kb2AgaXMgZGVsZXRlZFxuICAgICAqIC8vIHdoaWNoIGNhbmNlbHMgdGhlIGRlYm91bmNlZCBgdG9kb0NoYW5nZXNgIGNhbGxcbiAgICAgKiBkZWxldGUgbW9kZWxzLnRvZG87XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MsXG4gICAgICAgICAgbWF4VGltZW91dElkLFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBzdGFtcCxcbiAgICAgICAgICB0aGlzQXJnLFxuICAgICAgICAgIHRpbWVvdXRJZCxcbiAgICAgICAgICB0cmFpbGluZ0NhbGwsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDAsXG4gICAgICAgICAgbWF4V2FpdCA9IGZhbHNlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgd2FpdCA9IHdhaXQgPCAwID8gMCA6ICgrd2FpdCB8fCAwKTtcbiAgICAgIGlmIChvcHRpb25zID09PSB0cnVlKSB7XG4gICAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZTtcbiAgICAgICAgdHJhaWxpbmcgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgICAgICBtYXhXYWl0ID0gJ21heFdhaXQnIGluIG9wdGlvbnMgJiYgbmF0aXZlTWF4KCtvcHRpb25zLm1heFdhaXQgfHwgMCwgd2FpdCk7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVvdXRJZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQobWF4VGltZW91dElkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0Q2FsbGVkID0gMDtcbiAgICAgICAgbWF4VGltZW91dElkID0gdGltZW91dElkID0gdHJhaWxpbmdDYWxsID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjb21wbGV0ZShpc0NhbGxlZCwgaWQpIHtcbiAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhUaW1lb3V0SWQgPSB0aW1lb3V0SWQgPSB0cmFpbGluZ0NhbGwgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChpc0NhbGxlZCkge1xuICAgICAgICAgIGxhc3RDYWxsZWQgPSBub3coKTtcbiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgIGlmICghdGltZW91dElkICYmICFtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgIGFyZ3MgPSB0aGlzQXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZWxheWVkKCkge1xuICAgICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3coKSAtIHN0YW1wKTtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA8PSAwIHx8IHJlbWFpbmluZyA+IHdhaXQpIHtcbiAgICAgICAgICBjb21wbGV0ZSh0cmFpbGluZ0NhbGwsIG1heFRpbWVvdXRJZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChkZWxheWVkLCByZW1haW5pbmcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1heERlbGF5ZWQoKSB7XG4gICAgICAgIGNvbXBsZXRlKHRyYWlsaW5nLCB0aW1lb3V0SWQpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN0YW1wID0gbm93KCk7XG4gICAgICAgIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICB0cmFpbGluZ0NhbGwgPSB0cmFpbGluZyAmJiAodGltZW91dElkIHx8ICFsZWFkaW5nKTtcblxuICAgICAgICBpZiAobWF4V2FpdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB2YXIgbGVhZGluZ0NhbGwgPSBsZWFkaW5nICYmICF0aW1lb3V0SWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFtYXhUaW1lb3V0SWQgJiYgIWxlYWRpbmcpIHtcbiAgICAgICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlbWFpbmluZyA9IG1heFdhaXQgLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKSxcbiAgICAgICAgICAgICAgaXNDYWxsZWQgPSByZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiBtYXhXYWl0O1xuXG4gICAgICAgICAgaWYgKGlzQ2FsbGVkKSB7XG4gICAgICAgICAgICBpZiAobWF4VGltZW91dElkKSB7XG4gICAgICAgICAgICAgIG1heFRpbWVvdXRJZCA9IGNsZWFyVGltZW91dChtYXhUaW1lb3V0SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoIW1heFRpbWVvdXRJZCkge1xuICAgICAgICAgICAgbWF4VGltZW91dElkID0gc2V0VGltZW91dChtYXhEZWxheWVkLCByZW1haW5pbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDYWxsZWQgJiYgdGltZW91dElkKSB7XG4gICAgICAgICAgdGltZW91dElkID0gY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRpbWVvdXRJZCAmJiB3YWl0ICE9PSBtYXhXYWl0KSB7XG4gICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChkZWxheWVkLCB3YWl0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVhZGluZ0NhbGwpIHtcbiAgICAgICAgICBpc0NhbGxlZCA9IHRydWU7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDYWxsZWQgJiYgIXRpbWVvdXRJZCAmJiAhbWF4VGltZW91dElkKSB7XG4gICAgICAgICAgYXJncyA9IHRoaXNBcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICByZXR1cm4gZGVib3VuY2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmVycyBpbnZva2luZyB0aGUgYGZ1bmNgIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuIEFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCBpcyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIGZ1bmN0aW9uIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgJ2RlZmVycmVkJyk7XG4gICAgICogLy8gbG9ncyAnZGVmZXJyZWQnIGFmdGVyIG9uZSBvciBtb3JlIG1pbGxpc2Vjb25kc1xuICAgICAqL1xuICAgIHZhciBkZWZlciA9IHJlc3RQYXJhbShmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIDEsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyBgZnVuY2AgYWZ0ZXIgYHdhaXRgIG1pbGxpc2Vjb25kcy4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0IGlzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IGxvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kXG4gICAgICovXG4gICAgdmFyIGRlbGF5ID0gcmVzdFBhcmFtKGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIHByb3ZpZGVkXG4gICAgICogZnVuY3Rpb25zIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoXG4gICAgICogc3VjY2Vzc2l2ZSBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gW2Z1bmNzXSBGdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coXy5hZGQsIHNxdWFyZSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBwcm92aWRlZCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGJhY2tmbG93LCBjb21wb3NlXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gW2Z1bmNzXSBGdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChzcXVhcmUsIF8uYWRkKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAgICAgKiBwcm92aWRlZCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAgICAgKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgY29lcmNlZCB0byBhIHN0cmluZyBhbmQgdXNlZCBhcyB0aGVcbiAgICAgKiBjYWNoZSBrZXkuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAgICAgKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAgICAgKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZSBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemluZyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVwcGVyQ2FzZSA9IF8ubWVtb2l6ZShmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBzdHJpbmcudG9VcHBlckNhc2UoKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHVwcGVyQ2FzZSgnZnJlZCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqXG4gICAgICogLy8gbW9kaWZ5aW5nIHRoZSByZXN1bHQgY2FjaGVcbiAgICAgKiB1cHBlckNhc2UuY2FjaGUuc2V0KCdmcmVkJywgJ0JBUk5FWScpO1xuICAgICAqIHVwcGVyQ2FzZSgnZnJlZCcpO1xuICAgICAqIC8vID0+ICdCQVJORVknXG4gICAgICpcbiAgICAgKiAvLyByZXBsYWNpbmcgYF8ubWVtb2l6ZS5DYWNoZWBcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJyB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ3VzZXInOiAnYmFybmV5JyB9O1xuICAgICAqIHZhciBpZGVudGl0eSA9IF8ubWVtb2l6ZShfLmlkZW50aXR5KTtcbiAgICAgKlxuICAgICAqIGlkZW50aXR5KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogaWRlbnRpdHkob3RoZXIpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqXG4gICAgICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAgICAgKiB2YXIgaWRlbnRpdHkgPSBfLm1lbW9pemUoXy5pZGVudGl0eSk7XG4gICAgICpcbiAgICAgKiBpZGVudGl0eShvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqIGlkZW50aXR5KG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IG1lbW9pemUuQ2FjaGU7XG4gICAgICByZXR1cm4gbWVtb2l6ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcnVucyBlYWNoIGFyZ3VtZW50IHRocm91Z2ggYSBjb3JyZXNwb25kaW5nXG4gICAgICogdHJhbnNmb3JtIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXNdIFRoZSBmdW5jdGlvbnMgdG8gdHJhbnNmb3JtXG4gICAgICogYXJndW1lbnRzLCBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBmdW5jdGlvbnMgb3IgYXJyYXlzIG9mIGZ1bmN0aW9ucy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgbW9kZGVkID0gXy5tb2RBcmdzKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiBbeCwgeV07XG4gICAgICogfSwgc3F1YXJlLCBkb3VibGVkKTtcbiAgICAgKlxuICAgICAqIG1vZGRlZCgxLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgNF1cbiAgICAgKlxuICAgICAqIG1vZGRlZCg1LCAxMCk7XG4gICAgICogLy8gPT4gWzI1LCAyMF1cbiAgICAgKi9cbiAgICB2YXIgbW9kQXJncyA9IHJlc3RQYXJhbShmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB0cmFuc2Zvcm1zID0gYmFzZUZsYXR0ZW4odHJhbnNmb3Jtcyk7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAhYXJyYXlFdmVyeSh0cmFuc2Zvcm1zLCBiYXNlSXNGdW5jdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIHJlc3RQYXJhbShmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IHRyYW5zZm9ybXNbaW5kZXhdKGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbmVnYXRlcyB0aGUgcmVzdWx0IG9mIHRoZSBwcmVkaWNhdGUgYGZ1bmNgLiBUaGVcbiAgICAgKiBgZnVuY2AgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBwcmVkaWNhdGUgdG8gbmVnYXRlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXMgcmVzdHJpY3RlZCB0byBpbnZva2luZyBgZnVuY2Agb25jZS4gUmVwZWF0IGNhbGxzXG4gICAgICogdG8gdGhlIGZ1bmN0aW9uIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGNhbGwuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgaW5pdGlhbGl6ZSA9IF8ub25jZShjcmVhdGVBcHBsaWNhdGlvbik7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiAvLyBgaW5pdGlhbGl6ZWAgaW52b2tlcyBgY3JlYXRlQXBwbGljYXRpb25gIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBgcGFydGlhbGAgYXJndW1lbnRzIHByZXBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBuZXcgZnVuY3Rpb24uIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYmluZGAgZXhjZXB0XG4gICAgICogaXQgZG9lcyAqKm5vdCoqIGFsdGVyIHRoZSBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWwoZ3JlZXQsICdoZWxsbycpO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHBsYWNlaG9sZGVyc1xuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWwoZ3JlZXQsIF8sICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsID0gY3JlYXRlUGFydGlhbChQQVJUSUFMX0ZMQUcpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wYXJ0aWFsYCBleGNlcHQgdGhhdCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHNcbiAgICAgKiBhcmUgYXBwZW5kZWQgdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsUmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgcGxhY2Vob2xkZXJzXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2hlbGxvJywgXyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsUmlnaHQgPSBjcmVhdGVQYXJ0aWFsKFBBUlRJQUxfUklHSFRfRkxBRyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBmaXJzdCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBzZWNvbmQgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcmd1bWVudCBpbmRleGVzLFxuICAgICAqICBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBpbmRleGVzIG9yIGFycmF5cyBvZiBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcmVhcmdlZCA9IF8ucmVhcmcoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9LCAyLCAwLCAxKTtcbiAgICAgKlxuICAgICAqIHJlYXJnZWQoJ2InLCAnYycsICdhJylcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIHZhciBtYXAgPSBfLnJlYXJnKF8ubWFwLCBbMSwgMF0pO1xuICAgICAqIG1hcChmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDM7XG4gICAgICogfSwgWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMywgNiwgOV1cbiAgICAgKi9cbiAgICB2YXIgcmVhcmcgPSByZXN0UGFyYW0oZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXBwZXIoZnVuYywgUkVBUkdfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYmFzZUZsYXR0ZW4oaW5kZXhlcykpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiBhbmQgYXJndW1lbnRzIGZyb20gYHN0YXJ0YCBhbmQgYmV5b25kIHByb3ZpZGVkIGFzIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZSBbcmVzdCBwYXJhbWV0ZXJdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0Z1bmN0aW9ucy9yZXN0X3BhcmFtZXRlcnMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnJlc3RQYXJhbShmdW5jdGlvbih3aGF0LCBuYW1lcykge1xuICAgICAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICAgICAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3RQYXJhbShmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogKCtzdGFydCB8fCAwKSwgMCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgICAgIHJlc3QgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdFtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoc3RhcnQpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpcywgcmVzdCk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIGFyZ3NbMF0sIHJlc3QpO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdLCByZXN0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gcmVzdDtcbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbiBhbmQgYW4gYXJyYXkgb2YgYXJndW1lbnRzIG11Y2ggbGlrZSBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMy40LjMpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZSBbc3ByZWFkIG9wZXJhdG9yXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvU3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8uc3ByZWFkKGZ1bmN0aW9uKHdobywgd2hhdCkge1xuICAgICAqICAgcmV0dXJuIHdobyArICcgc2F5cyAnICsgd2hhdDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheShbJ2ZyZWQnLCAnaGVsbG8nXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQgc2F5cyBoZWxsbydcbiAgICAgKlxuICAgICAqIC8vIHdpdGggYSBQcm9taXNlXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihhcnJheSkge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcnJheSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBpbnZvY2F0aW9ucy4gUHJvdmlkZSBhbiBvcHRpb25zIG9iamVjdCB0byBpbmRpY2F0ZVxuICAgICAqIHRoYXQgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZVxuICAgICAqIGB3YWl0YCB0aW1lb3V0LiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICAgICAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgY2FsbC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gaXNcbiAgICAgKiBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cDovL2RydXBhbG1vdGlvbi5jb20vYXJ0aWNsZS9kZWJvdW5jZS1hbmQtdGhyb3R0bGUtdmlzdWFsLWV4cGxhbmF0aW9uKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmdcbiAgICAgKiAgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nXG4gICAgICogIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBhdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgICAqXG4gICAgICogLy8gaW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXNcbiAgICAgKiBqUXVlcnkoJy5pbnRlcmFjdGl2ZScpLm9uKCdjbGljaycsIF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7XG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIGNhbmNlbCBhIHRyYWlsaW5nIHRocm90dGxlZCBjYWxsXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgIGxlYWRpbmcgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHsgJ2xlYWRpbmcnOiBsZWFkaW5nLCAnbWF4V2FpdCc6ICt3YWl0LCAndHJhaWxpbmcnOiB0cmFpbGluZyB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIHRoZSB3cmFwcGVyIGZ1bmN0aW9uIGFzIGl0c1xuICAgICAqIGZpcnN0IGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZVxuICAgICAqIGFwcGVuZGVkIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSB3cmFwcGVyIGZ1bmN0aW9uLiBUaGUgd3JhcHBlciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIHdyYXBwZXIgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBwID0gXy53cmFwKF8uZXNjYXBlLCBmdW5jdGlvbihmdW5jLCB0ZXh0KSB7XG4gICAgICogICByZXR1cm4gJzxwPicgKyBmdW5jKHRleHQpICsgJzwvcD4nO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogcCgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnPHA+ZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzPC9wPidcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlLCB3cmFwcGVyKSB7XG4gICAgICB3cmFwcGVyID0gd3JhcHBlciA9PSBudWxsID8gaWRlbnRpdHkgOiB3cmFwcGVyO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXBwZXIod3JhcHBlciwgUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIFt2YWx1ZV0sIFtdKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHZhbHVlYC4gSWYgYGlzRGVlcGAgaXMgYHRydWVgIG5lc3RlZCBvYmplY3RzIGFyZSBjbG9uZWQsXG4gICAgICogb3RoZXJ3aXNlIHRoZXkgYXJlIGFzc2lnbmVkIGJ5IHJlZmVyZW5jZS4gSWYgYGN1c3RvbWl6ZXJgIGlzIHByb3ZpZGVkIGl0IGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgYm91bmQgdG9cbiAgICAgKiBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnQ7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdF0pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmZyYXN0cnVjdHVyZS5odG1sI2ludGVybmFsLXN0cnVjdHVyZWQtY2xvbmluZy1hbGdvcml0aG0pLlxuICAgICAqIFRoZSBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhbmQgb2JqZWN0cyBjcmVhdGVkIGJ5XG4gICAgICogY29uc3RydWN0b3JzIG90aGVyIHRoYW4gYE9iamVjdGAgYXJlIGNsb25lZCB0byBwbGFpbiBgT2JqZWN0YCBvYmplY3RzLiBBblxuICAgICAqIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2ggYXMgZnVuY3Rpb25zLCBET00gbm9kZXMsXG4gICAgICogTWFwcywgU2V0cywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY3VzdG9taXplcmAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKHVzZXJzKTtcbiAgICAgKiBzaGFsbG93WzBdID09PSB1c2Vyc1swXTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmUodXNlcnMsIHRydWUpO1xuICAgICAqIGRlZXBbMF0gPT09IHVzZXJzWzBdO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBhIGN1c3RvbWl6ZXIgY2FsbGJhY2tcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lKGRvY3VtZW50LmJvZHksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAqICAgfVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogZWwgPT09IGRvY3VtZW50LmJvZHlcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGVsLm5vZGVOYW1lXG4gICAgICogLy8gPT4gQk9EWVxuICAgICAqIGVsLmNoaWxkTm9kZXMubGVuZ3RoO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSwgaXNEZWVwLCBjdXN0b21pemVyLCB0aGlzQXJnKSB7XG4gICAgICBpZiAoaXNEZWVwICYmIHR5cGVvZiBpc0RlZXAgIT0gJ2Jvb2xlYW4nICYmIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpc0RlZXAsIGN1c3RvbWl6ZXIpKSB7XG4gICAgICAgIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodHlwZW9mIGlzRGVlcCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXNBcmcgPSBjdXN0b21pemVyO1xuICAgICAgICBjdXN0b21pemVyID0gaXNEZWVwO1xuICAgICAgICBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nXG4gICAgICAgID8gYmFzZUNsb25lKHZhbHVlLCBpc0RlZXAsIGJpbmRDYWxsYmFjayhjdXN0b21pemVyLCB0aGlzQXJnLCAxKSlcbiAgICAgICAgOiBiYXNlQ2xvbmUodmFsdWUsIGlzRGVlcCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRlZXAgY2xvbmUgb2YgYHZhbHVlYC4gSWYgYGN1c3RvbWl6ZXJgIGlzIHByb3ZpZGVkIGl0IGlzIGludm9rZWRcbiAgICAgKiB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCBjbG9uaW5nXG4gICAgICogaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgYm91bmQgdG8gYHRoaXNBcmdgXG4gICAgICogYW5kIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnQ7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdF0pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmZyYXN0cnVjdHVyZS5odG1sI2ludGVybmFsLXN0cnVjdHVyZWQtY2xvbmluZy1hbGdvcml0aG0pLlxuICAgICAqIFRoZSBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhbmQgb2JqZWN0cyBjcmVhdGVkIGJ5XG4gICAgICogY29uc3RydWN0b3JzIG90aGVyIHRoYW4gYE9iamVjdGAgYXJlIGNsb25lZCB0byBwbGFpbiBgT2JqZWN0YCBvYmplY3RzLiBBblxuICAgICAqIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2ggYXMgZnVuY3Rpb25zLCBET00gbm9kZXMsXG4gICAgICogTWFwcywgU2V0cywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBkZWVwIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY3VzdG9taXplcmAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKHVzZXJzKTtcbiAgICAgKiBkZWVwWzBdID09PSB1c2Vyc1swXTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgYSBjdXN0b21pemVyIGNhbGxiYWNrXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXAoZG9jdW1lbnQuYm9keSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGVsID09PSBkb2N1bWVudC5ib2R5XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBlbC5ub2RlTmFtZVxuICAgICAqIC8vID0+IEJPRFlcbiAgICAgKiBlbC5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSwgY3VzdG9taXplciwgdGhpc0FyZykge1xuICAgICAgcmV0dXJuIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbidcbiAgICAgICAgPyBiYXNlQ2xvbmUodmFsdWUsIHRydWUsIGJpbmRDYWxsYmFjayhjdXN0b21pemVyLCB0aGlzQXJnLCAxKSlcbiAgICAgICAgOiBiYXNlQ2xvbmUodmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ3QodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPiBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ3RlKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID49IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmIG9ialRvU3RyaW5nLmNhbGwodmFsdWUpID09IGFycmF5VGFnO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHwgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqVG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBEYXRlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKG5ldyBEYXRlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZSgnTW9uIEFwcmlsIDIzIDIwMTInKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqVG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KCc8Ym9keT4nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuICEhdmFsdWUgJiYgdmFsdWUubm9kZVR5cGUgPT09IDEgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZW1wdHkuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBlbXB0eSB1bmxlc3MgaXQgaXMgYW5cbiAgICAgKiBgYXJndW1lbnRzYCBvYmplY3QsIGFycmF5LCBzdHJpbmcsIG9yIGpRdWVyeS1saWtlIGNvbGxlY3Rpb24gd2l0aCBhIGxlbmd0aFxuICAgICAqIGdyZWF0ZXIgdGhhbiBgMGAgb3IgYW4gb2JqZWN0IHdpdGggb3duIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBlbXB0eSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHRydWUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSgxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmIChpc0FycmF5KHZhbHVlKSB8fCBpc1N0cmluZyh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNGdW5jdGlvbih2YWx1ZS5zcGxpY2UpKSkpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gIWtleXModmFsdWUpLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC4gSWYgYGN1c3RvbWl6ZXJgIGlzIHByb3ZpZGVkIGl0IGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAgY29tcGFyaXNvbnMgYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZFxuICAgICAqIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgb3RoZXIgWywgaW5kZXh8a2V5XSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYm9vbGVhbnMsIGBEYXRlYCBvYmplY3RzLFxuICAgICAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIGFuZCBzdHJpbmdzLiBPYmplY3RzIGFyZSBjb21wYXJlZCBieVxuICAgICAqIHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTSBub2Rlc1xuICAgICAqIGFyZSAqKm5vdCoqIHN1cHBvcnRlZC4gUHJvdmlkZSBhIGN1c3RvbWl6ZXIgZnVuY3Rpb24gdG8gZXh0ZW5kIHN1cHBvcnRcbiAgICAgKiBmb3IgY29tcGFyaW5nIG90aGVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBlcVxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY3VzdG9taXplcmAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiBvYmplY3QgPT0gb3RoZXI7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBhIGN1c3RvbWl6ZXIgY2FsbGJhY2tcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2hlbGxvJywgJ2dvb2RieWUnXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBbJ2hpJywgJ2dvb2RieWUnXTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChhcnJheSwgb3RoZXIsIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAqICAgaWYgKF8uZXZlcnkoW3ZhbHVlLCBvdGhlcl0sIFJlZ0V4cC5wcm90b3R5cGUudGVzdCwgL15oKD86aXxlbGxvKSQvKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIsIHRoaXNBcmcpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gYmluZENhbGxiYWNrKGN1c3RvbWl6ZXIsIHRoaXNBcmcsIDMpIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBjdXN0b21pemVyKSA6ICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGBFcnJvcmAsIGBFdmFsRXJyb3JgLCBgUmFuZ2VFcnJvcmAsIGBSZWZlcmVuY2VFcnJvcmAsXG4gICAgICogYFN5bnRheEVycm9yYCwgYFR5cGVFcnJvcmAsIG9yIGBVUklFcnJvcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBlcnJvciBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKG5ldyBFcnJvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKEVycm9yKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXJyb3IodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHR5cGVvZiB2YWx1ZS5tZXNzYWdlID09ICdzdHJpbmcnICYmIG9ialRvU3RyaW5nLmNhbGwodmFsdWUpID09IGVycm9yVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gW2BOdW1iZXIuaXNGaW5pdGVgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1udW1iZXIuaXNmaW5pdGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgxMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgnMTAnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSh0cnVlKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShPYmplY3QoMTApKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiBuYXRpdmVJc0Zpbml0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oXyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAgICAgLy8gaW4gb2xkZXIgdmVyc2lvbnMgb2YgQ2hyb21lIGFuZCBTYWZhcmkgd2hpY2ggcmV0dXJuICdmdW5jdGlvbicgZm9yIHJlZ2V4ZXNcbiAgICAgIC8vIGFuZCBTYWZhcmkgOCBlcXVpdmFsZW50cyB3aGljaCByZXR1cm4gJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9ycy5cbiAgICAgIHJldHVybiBpc09iamVjdCh2YWx1ZSkgJiYgb2JqVG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gZnVuY1RhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGUgW2xhbmd1YWdlIHR5cGVdKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDgpIG9mIGBPYmplY3RgLlxuICAgICAqIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgICAgLy8gQXZvaWQgYSBWOCBKSVQgYnVnIGluIENocm9tZSAxOS0yMC5cbiAgICAgIC8vIFNlZSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYG9iamVjdGAgYW5kIGBzb3VyY2VgIHRvIGRldGVybWluZSBpZlxuICAgICAqIGBvYmplY3RgIGNvbnRhaW5zIGVxdWl2YWxlbnQgcHJvcGVydHkgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgaXMgcHJvdmlkZWRcbiAgICAgKiBpdCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIGNvbXBhcmlzb25zIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBib3VuZFxuICAgICAqIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBvdGhlciwgaW5kZXh8a2V5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgcHJvcGVydGllcyBvZiBhcnJheXMsIGJvb2xlYW5zLFxuICAgICAqIGBEYXRlYCBvYmplY3RzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBhbmQgc3RyaW5ncy4gRnVuY3Rpb25zXG4gICAgICogYW5kIERPTSBub2RlcyBhcmUgKipub3QqKiBzdXBwb3J0ZWQuIFByb3ZpZGUgYSBjdXN0b21pemVyIGZ1bmN0aW9uIHRvIGV4dGVuZFxuICAgICAqIHN1cHBvcnQgZm9yIGNvbXBhcmluZyBvdGhlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjdXN0b21pemVyYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdhZ2UnOiA0MCB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdhZ2UnOiAzNiB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgYSBjdXN0b21pemVyIGNhbGxiYWNrXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gXy5ldmVyeShbdmFsdWUsIG90aGVyXSwgUmVnRXhwLnByb3RvdHlwZS50ZXN0LCAvXmgoPzppfGVsbG8pJC8pIHx8IHVuZGVmaW5lZDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplciwgdGhpc0FyZykge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBiaW5kQ2FsbGJhY2soY3VzdG9taXplciwgdGhpc0FyZywgMykgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUlzTWF0Y2gob2JqZWN0LCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbm90IHRoZSBzYW1lIGFzIFtgaXNOYU5gXShodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuNClcbiAgICAgKiB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3IgYHVuZGVmaW5lZGAgYW5kIG90aGVyIG5vbi1udW1lcmljIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lIGhvc3Qgb2JqZWN0cyBpbiBJRS5cbiAgICAgIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgdmFsdWUgIT0gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gcmVJc05hdGl2ZS50ZXN0KGZuVG9TdHJpbmcuY2FsbCh2YWx1ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgcmVJc0hvc3RDdG9yLnRlc3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZSBjbGFzc2lmaWVkXG4gICAgICogYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDguNCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoJzguNCcpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHwgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqVG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFzc3VtZXMgb2JqZWN0cyBjcmVhdGVkIGJ5IHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3RvclxuICAgICAqIGhhdmUgbm8gaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yO1xuXG4gICAgICAvLyBFeGl0IGVhcmx5IGZvciBub24gYE9iamVjdGAgb2JqZWN0cy5cbiAgICAgIGlmICghKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqVG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gb2JqZWN0VGFnICYmICFpc0FyZ3VtZW50cyh2YWx1ZSkpIHx8XG4gICAgICAgICAgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY29uc3RydWN0b3InKSAmJiAoQ3RvciA9IHZhbHVlLmNvbnN0cnVjdG9yLCB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmICEoQ3RvciBpbnN0YW5jZW9mIEN0b3IpKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gSUUgPCA5IGl0ZXJhdGVzIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGJlZm9yZSBvd24gcHJvcGVydGllcy4gSWYgdGhlIGZpcnN0XG4gICAgICAvLyBpdGVyYXRlZCBwcm9wZXJ0eSBpcyBhbiBvYmplY3QncyBvd24gcHJvcGVydHkgdGhlbiB0aGVyZSBhcmUgbm8gaW5oZXJpdGVkXG4gICAgICAvLyBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgLy8gSW4gbW9zdCBlbnZpcm9ubWVudHMgYW4gb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMgYXJlIGl0ZXJhdGVkIGJlZm9yZVxuICAgICAgLy8gaXRzIGluaGVyaXRlZCBwcm9wZXJ0aWVzLiBJZiB0aGUgbGFzdCBpdGVyYXRlZCBwcm9wZXJ0eSBpcyBhbiBvYmplY3Qnc1xuICAgICAgLy8gb3duIHByb3BlcnR5IHRoZW4gdGhlcmUgYXJlIG5vIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICBiYXNlRm9ySW4odmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgcmVzdWx0ID0ga2V5O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNSZWdFeHAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdCh2YWx1ZSkgJiYgb2JqVG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gcmVnZXhwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqVG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tvYmpUb1N0cmluZy5jYWxsKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdCgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbHQodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPCBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbHRlKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDw9IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKS5zbGljZSgxKTtcbiAgICAgKiB9KDEsIDIsIDMpKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWUgPyBnZXRMZW5ndGgodmFsdWUpIDogMDtcbiAgICAgIGlmICghaXNMZW5ndGgobGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gdmFsdWVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheUNvcHkodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZVxuICAgICAqIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ29weSh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgbWVyZ2VzIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgdGhlIHNvdXJjZSBvYmplY3QocyksIHRoYXRcbiAgICAgKiBkb24ndCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGludG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4gU3Vic2VxdWVudCBzb3VyY2VzXG4gICAgICogb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuIElmIGBjdXN0b21pemVyYCBpc1xuICAgICAqIHByb3ZpZGVkIGl0IGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kXG4gICAgICogc291cmNlIHByb3BlcnRpZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgIG1lcmdpbmcgaXMgaGFuZGxlZFxuICAgICAqIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWRcbiAgICAgKiB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqZWN0VmFsdWUsIHNvdXJjZVZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY3VzdG9taXplcmAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2RhdGEnOiBbeyAndXNlcic6ICdiYXJuZXknIH0sIHsgJ3VzZXInOiAnZnJlZCcgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGFnZXMgPSB7XG4gICAgICogICAnZGF0YSc6IFt7ICdhZ2UnOiAzNiB9LCB7ICdhZ2UnOiA0MCB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlKHVzZXJzLCBhZ2VzKTtcbiAgICAgKiAvLyA9PiB7ICdkYXRhJzogW3sgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sIHsgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XSB9XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBhIGN1c3RvbWl6ZXIgY2FsbGJhY2tcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2ZydWl0cyc6IFsnYXBwbGUnXSxcbiAgICAgKiAgICd2ZWdldGFibGVzJzogWydiZWV0J11cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0ge1xuICAgICAqICAgJ2ZydWl0cyc6IFsnYmFuYW5hJ10sXG4gICAgICogICAndmVnZXRhYmxlcyc6IFsnY2Fycm90J11cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShvYmplY3QsIG90aGVyLCBmdW5jdGlvbihhLCBiKSB7XG4gICAgICogICBpZiAoXy5pc0FycmF5KGEpKSB7XG4gICAgICogICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcnVpdHMnOiBbJ2FwcGxlJywgJ2JhbmFuYSddLCAndmVnZXRhYmxlcyc6IFsnYmVldCcsICdjYXJyb3QnXSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoYmFzZU1lcmdlKTtcblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0KHMpIHRvIHRoZSBkZXN0aW5hdGlvblxuICAgICAqIG9iamVjdC4gU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqIElmIGBjdXN0b21pemVyYCBpcyBwcm92aWRlZCBpdCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOlxuICAgICAqIChvYmplY3RWYWx1ZSwgc291cmNlVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BPYmplY3QuYXNzaWduYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LmFzc2lnbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjdXN0b21pemVyYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICd1c2VyJzogJ2Jhcm5leScgfSwgeyAnYWdlJzogNDAgfSwgeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgYSBjdXN0b21pemVyIGNhbGxiYWNrXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ24sIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQodmFsdWUpID8gb3RoZXIgOiB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ3VzZXInOiAnYmFybmV5JyB9LCB7ICdhZ2UnOiAzNiB9LCB7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHJldHVybiBjdXN0b21pemVyXG4gICAgICAgID8gYXNzaWduV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcilcbiAgICAgICAgOiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgZ2l2ZW4gYHByb3RvdHlwZWAgb2JqZWN0LiBJZiBhXG4gICAgICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBwcm92aWRlZCBpdHMgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBhcmUgYXNzaWduZWRcbiAgICAgKiB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7XG4gICAgICogICAnY29uc3RydWN0b3InOiBDaXJjbGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcywgZ3VhcmQpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwocHJvdG90eXBlLCBwcm9wZXJ0aWVzLCBndWFyZCkpIHtcbiAgICAgICAgcHJvcGVydGllcyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID8gYmFzZUFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0KHMpIHRvIHRoZSBkZXN0aW5hdGlvblxuICAgICAqIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBPbmNlIGFcbiAgICAgKiBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHMoeyAndXNlcic6ICdiYXJuZXknIH0sIHsgJ2FnZSc6IDM2IH0sIHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IGNyZWF0ZURlZmF1bHRzKGFzc2lnbiwgYXNzaWduRGVmYXVsdHMpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICAgICAqIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzRGVlcCh7ICd1c2VyJzogeyAnbmFtZSc6ICdiYXJuZXknIH0gfSwgeyAndXNlcic6IHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiAzNiB9IH0pO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9IH1cbiAgICAgKlxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0c0RlZXAgPSBjcmVhdGVEZWZhdWx0cyhtZXJnZSwgbWVyZ2VEZWZhdWx0cyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIGZ1bmN0aW9uKGNocikge1xuICAgICAqICAgcmV0dXJuIGNoci5hZ2UgPCA0MDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZEtleSh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmRLZXkgPSBjcmVhdGVGaW5kS2V5KGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kS2V5YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYSBjb2xsZWN0aW9uIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBjaHIuYWdlIDwgNDA7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gcmV0dXJucyBgcGViYmxlc2AgYXNzdW1pbmcgYF8uZmluZEtleWAgcmV0dXJucyBgYmFybmV5YFxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5wcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIHZhciBmaW5kTGFzdEtleSA9IGNyZWF0ZUZpbmRLZXkoYmFzZUZvck93blJpZ2h0KTtcblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBpbnZva2luZ1xuICAgICAqIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBgaXRlcmF0ZWVgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IGxvZ3MgJ2EnLCAnYicsIGFuZCAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgZm9ySW4gPSBjcmVhdGVGb3JJbihiYXNlRm9yKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBsb2dzICdjJywgJ2InLCBhbmQgJ2EnIGFzc3VtaW5nIGBfLmZvckluIGAgbG9ncyAnYScsICdiJywgYW5kICdjJ1xuICAgICAqL1xuICAgIHZhciBmb3JJblJpZ2h0ID0gY3JlYXRlRm9ySW4oYmFzZUZvclJpZ2h0KTtcblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgaW52b2tpbmcgYGl0ZXJhdGVlYFxuICAgICAqIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgYGl0ZXJhdGVlYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gbG9ncyAnYScgYW5kICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciBmb3JPd24gPSBjcmVhdGVGb3JPd24oYmFzZUZvck93bik7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvck93bmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBsb2dzICdiJyBhbmQgJ2EnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnYScgYW5kICdiJ1xuICAgICAqL1xuICAgIHZhciBmb3JPd25SaWdodCA9IGNyZWF0ZUZvck93bihiYXNlRm9yT3duUmlnaHQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIGFsbCBlbnVtZXJhYmxlIHByb3BlcnRpZXMsXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQsIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIG1ldGhvZHNcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKF8pO1xuICAgICAqIC8vID0+IFsnYWZ0ZXInLCAnYXJ5JywgJ2Fzc2lnbicsIC4uLl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICAgICAqIGB1bmRlZmluZWRgIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyB1c2VkIGluIGl0cyBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYHVuZGVmaW5lZGAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgdG9QYXRoKHBhdGgpLCBwYXRoICsgJycpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogeyAnYyc6IDMgfSB9IH07XG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHBhdGgpO1xuICAgICAgaWYgKCFyZXN1bHQgJiYgIWlzS2V5KHBhdGgpKSB7XG4gICAgICAgIHBhdGggPSB0b1BhdGgocGF0aCk7XG4gICAgICAgIG9iamVjdCA9IHBhdGgubGVuZ3RoID09IDEgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBwYXRoID0gbGFzdChwYXRoKTtcbiAgICAgICAgcmVzdWx0ID0gaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHBhdGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdCB8fCAoaXNMZW5ndGgob2JqZWN0Lmxlbmd0aCkgJiYgaXNJbmRleChwYXRoLCBvYmplY3QubGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgaW52ZXJ0ZWQga2V5cyBhbmQgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqIElmIGBvYmplY3RgIGNvbnRhaW5zIGR1cGxpY2F0ZSB2YWx1ZXMsIHN1YnNlcXVlbnQgdmFsdWVzIG92ZXJ3cml0ZSBwcm9wZXJ0eVxuICAgICAqIGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHZhbHVlcyB1bmxlc3MgYG11bHRpVmFsdWVgIGlzIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW211bHRpVmFsdWVdIEFsbG93IG11bHRpcGxlIHZhbHVlcyBwZXIga2V5LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6ICdjJywgJzInOiAnYicgfVxuICAgICAqXG4gICAgICogLy8gd2l0aCBgbXVsdGlWYWx1ZWBcbiAgICAgKiBfLmludmVydChvYmplY3QsIHRydWUpO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnZlcnQob2JqZWN0LCBtdWx0aVZhbHVlLCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKG9iamVjdCwgbXVsdGlWYWx1ZSwgZ3VhcmQpKSB7XG4gICAgICAgIG11bHRpVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBwcm9wcyA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIGlmIChtdWx0aVZhbHVlKSB7XG4gICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJlc3VsdFt2YWx1ZV0ucHVzaChrZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRbdmFsdWVdID0gW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJlc3VsdFt2YWx1ZV0gPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICAgICAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8ua2V5cygnaGknKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMSddXG4gICAgICovXG4gICAgdmFyIGtleXMgPSAhbmF0aXZlS2V5cyA/IHNoaW1LZXlzIDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgaWYgKCh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlID09PSBvYmplY3QpIHx8XG4gICAgICAgICAgKHR5cGVvZiBvYmplY3QgIT0gJ2Z1bmN0aW9uJyAmJiBpc0FycmF5TGlrZShvYmplY3QpKSkge1xuICAgICAgICByZXR1cm4gc2hpbUtleXMob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc09iamVjdChvYmplY3QpID8gbmF0aXZlS2V5cyhvYmplY3QpIDogW107XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5c0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDtcbiAgICAgIGxlbmd0aCA9IChsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpICYmIGxlbmd0aCkgfHwgMDtcblxuICAgICAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc1Byb3RvID0gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSA9PT0gb2JqZWN0LFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgc2tpcEluZGV4ZXMgPSBsZW5ndGggPiAwO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gKGluZGV4ICsgJycpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAoIShza2lwSW5kZXhlcyAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSkgJiZcbiAgICAgICAgICAgICEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAgICAgKiBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJvdWdoIGBpdGVyYXRlZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgbWFwS2V5cyA9IGNyZWF0ZU9iamVjdE1hcHBlcih0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZCBieVxuICAgICAqIHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJvdWdoIGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGZ1bmN0aW9uIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGl0ZXJhdGVlYCB0aGUgY3JlYXRlZCBgXy5wcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGEgdmFsdWUgaXMgYWxzbyBwcm92aWRlZCBmb3IgYHRoaXNBcmdgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNQcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIGEgbWF0Y2hpbmcgcHJvcGVydHlcbiAgICAgKiB2YWx1ZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgaXRlcmF0ZWVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwVmFsdWVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gKiAzO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAzLCAnYic6IDYgfVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciBtYXBWYWx1ZXMgPSBjcmVhdGVPYmplY3RNYXBwZXIoKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnwuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3ByZWRpY2F0ZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyXG4gICAgICogIGl0ZXJhdGlvbiBvciBwcm9wZXJ0eSBuYW1lcyB0byBvbWl0LCBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBwcm9wZXJ0eVxuICAgICAqICBuYW1lcyBvciBhcnJheXMgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqL1xuICAgIHZhciBvbWl0ID0gcmVzdFBhcmFtKGZ1bmN0aW9uKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHByb3BzWzBdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIHByb3BzID0gYXJyYXlNYXAoYmFzZUZsYXR0ZW4ocHJvcHMpLCBTdHJpbmcpO1xuICAgICAgICByZXR1cm4gcGlja0J5QXJyYXkob2JqZWN0LCBiYXNlRGlmZmVyZW5jZShrZXlzSW4ob2JqZWN0KSwgcHJvcHMpKTtcbiAgICAgIH1cbiAgICAgIHZhciBwcmVkaWNhdGUgPSBiaW5kQ2FsbGJhY2socHJvcHNbMF0sIHByb3BzWzFdLCAzKTtcbiAgICAgIHJldHVybiBwaWNrQnlDYWxsYmFjayhvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gIXByZWRpY2F0ZSh2YWx1ZSwga2V5LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdHdvIGRpbWVuc2lvbmFsIGFycmF5IG9mIHRoZSBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgLFxuICAgICAqIGUuZy4gYFtba2V5MSwgdmFsdWUxXSwgW2tleTIsIHZhbHVlMl1dYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhaXJzKHsgJ2Jhcm5leSc6IDM2LCAnZnJlZCc6IDQwIH0pO1xuICAgICAqIC8vID0+IFtbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgNDBdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhaXJzKG9iamVjdCkge1xuICAgICAgb2JqZWN0ID0gdG9PYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcHJvcHMgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy4gUHJvcGVydHlcbiAgICAgKiBuYW1lcyBtYXkgYmUgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzIG9yIGFzIGFycmF5cyBvZiBwcm9wZXJ0eVxuICAgICAqIG5hbWVzLiBJZiBgcHJlZGljYXRlYCBpcyBwcm92aWRlZCBpdCBpcyBpbnZva2VkIGZvciBlYWNoIHByb3BlcnR5IG9mIGBvYmplY3RgXG4gICAgICogcGlja2luZyB0aGUgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnwuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3ByZWRpY2F0ZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyXG4gICAgICogIGl0ZXJhdGlvbiBvciBwcm9wZXJ0eSBuYW1lcyB0byBwaWNrLCBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBwcm9wZXJ0eVxuICAgICAqICBuYW1lcyBvciBhcnJheXMgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfTtcbiAgICAgKlxuICAgICAqIF8ucGljayhvYmplY3QsICd1c2VyJyk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdmcmVkJyB9XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCBfLmlzU3RyaW5nKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKi9cbiAgICB2YXIgcGljayA9IHJlc3RQYXJhbShmdW5jdGlvbihvYmplY3QsIHByb3BzKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiBwcm9wc1swXSA9PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGlja0J5Q2FsbGJhY2sob2JqZWN0LCBiaW5kQ2FsbGJhY2socHJvcHNbMF0sIHByb3BzWzFdLCAzKSlcbiAgICAgICAgOiBwaWNrQnlBcnJheShvYmplY3QsIGJhc2VGbGF0dGVuKHByb3BzKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmdldGAgZXhjZXB0IHRoYXQgaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGEgZnVuY3Rpb25cbiAgICAgKiBpdCBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGl0cyBwYXJlbnQgb2JqZWN0IGFuZCBpdHMgcmVzdWx0XG4gICAgICogaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjMSc6IDMsICdjMic6IF8uY29uc3RhbnQoNCkgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMxJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMyJyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYS5iLmMnLCBfLmNvbnN0YW50KCdkZWZhdWx0JykpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W3BhdGhdO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChvYmplY3QgIT0gbnVsbCAmJiAhaXNLZXkocGF0aCwgb2JqZWN0KSkge1xuICAgICAgICAgIHBhdGggPSB0b1BhdGgocGF0aCk7XG4gICAgICAgICAgb2JqZWN0ID0gcGF0aC5sZW5ndGggPT0gMSA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICAgICAgICByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtsYXN0KHBhdGgpXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0Z1bmN0aW9uKHJlc3VsdCkgPyByZXN1bHQuY2FsbChvYmplY3QpIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIGBwYXRoYCBvbiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYFxuICAgICAqIGRvZXMgbm90IGV4aXN0IGl0IGlzIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGF1Z21lbnQuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsICd4WzBdLnkueicsIDUpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHZhciBwYXRoS2V5ID0gKHBhdGggKyAnJyk7XG4gICAgICBwYXRoID0gKG9iamVjdFtwYXRoS2V5XSAhPSBudWxsIHx8IGlzS2V5KHBhdGgsIG9iamVjdCkpID8gW3BhdGhLZXldIDogdG9QYXRoKHBhdGgpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHBhdGhbaW5kZXhdO1xuICAgICAgICBpZiAoaXNPYmplY3QobmVzdGVkKSkge1xuICAgICAgICAgIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgIG5lc3RlZFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChuZXN0ZWRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBuZXN0ZWRba2V5XSA9IGlzSW5kZXgocGF0aFtpbmRleCArIDFdKSA/IFtdIDoge307XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93biBlbnVtZXJhYmxlXG4gICAgICogcHJvcGVydGllcyB0aHJvdWdoIGBpdGVyYXRlZWAsIHdpdGggZWFjaCBpbnZvY2F0aW9uIHBvdGVudGlhbGx5IG11dGF0aW5nXG4gICAgICogdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBUaGUgYGl0ZXJhdGVlYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWRcbiAgICAgKiB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9uc1xuICAgICAqIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICAgICAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFs0LCA5XVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbihyZXN1bHQsIG4sIGtleSkge1xuICAgICAqICAgcmVzdWx0W2tleV0gPSBuICogMztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMywgJ2InOiA2IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0Q2FsbGJhY2soaXRlcmF0ZWUsIHRoaXNBcmcsIDQpO1xuXG4gICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICAgIGlmIChpc0Fycikge1xuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0FycmF5KG9iamVjdCkgPyBuZXcgQ3RvciA6IFtdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGJhc2VDcmVhdGUoaXNGdW5jdGlvbihDdG9yKSA/IEN0b3IucHJvdG90eXBlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKGlzQXJyID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWydoJywgJ2knXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHZhbHVlc1xuICAgICAqIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlVmFsdWVzKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgbmAgaXMgYmV0d2VlbiBgc3RhcnRgIGFuZCB1cCB0byBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gICAgICogYGVuZGAgaXMgbm90IHNwZWNpZmllZCBpdCBpcyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBuYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCA4KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgyLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDEuMiwgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDUuMiwgNCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpblJhbmdlKHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9ICtzdGFydCB8fCAwO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSArZW5kIHx8IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIHZhbHVlIDwgbmF0aXZlTWF4KHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIGBtaW5gIGFuZCBgbWF4YCAoaW5jbHVzaXZlKS4gSWYgb25seSBvbmVcbiAgICAgKiBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlciBpcyByZXR1cm5lZC5cbiAgICAgKiBJZiBgZmxvYXRpbmdgIGlzIGB0cnVlYCwgb3IgZWl0aGVyIGBtaW5gIG9yIGBtYXhgIGFyZSBmbG9hdHMsIGEgZmxvYXRpbmctcG9pbnRcbiAgICAgKiBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWluPTBdIFRoZSBtaW5pbXVtIHBvc3NpYmxlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4PTFdIFRoZSBtYXhpbXVtIHBvc3NpYmxlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgwLCA1KTtcbiAgICAgKiAvLyA9PiBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSk7XG4gICAgICogLy8gPT4gYWxzbyBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAxLjIgYW5kIDUuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCwgZmxvYXRpbmcpIHtcbiAgICAgIGlmIChmbG9hdGluZyAmJiBpc0l0ZXJhdGVlQ2FsbChtaW4sIG1heCwgZmxvYXRpbmcpKSB7XG4gICAgICAgIG1heCA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIG5vTWluID0gbWluID09IG51bGwsXG4gICAgICAgICAgbm9NYXggPSBtYXggPT0gbnVsbDtcblxuICAgICAgaWYgKGZsb2F0aW5nID09IG51bGwpIHtcbiAgICAgICAgaWYgKG5vTWF4ICYmIHR5cGVvZiBtaW4gPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBtaW47XG4gICAgICAgICAgbWluID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbWF4ID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbWF4O1xuICAgICAgICAgIG5vTWF4ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG5vTWluICYmIG5vTWF4KSB7XG4gICAgICAgIG1heCA9IDE7XG4gICAgICAgIG5vTWF4ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBtaW4gPSArbWluIHx8IDA7XG4gICAgICBpZiAobm9NYXgpIHtcbiAgICAgICAgbWF4ID0gbWluO1xuICAgICAgICBtaW4gPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF4ID0gK21heCB8fCAwO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nIHx8IG1pbiAlIDEgfHwgbWF4ICUgMSkge1xuICAgICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlTWluKG1pbiArIChyYW5kICogKG1heCAtIG1pbiArIHBhcnNlRmxvYXQoJzFlLScgKyAoKHJhbmQgKyAnJykubGVuZ3RoIC0gMSkpKSksIG1heCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShtaW4sIG1heCk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKi9cbiAgICB2YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICh3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKSkgOiB3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENhcGl0YWxpemVzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FwaXRhbGl6ZSgnZnJlZCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSBiYXNlVG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiBzdHJpbmcgJiYgKHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nIFtsYXRpbi0xIHN1cHBsZW1lbnRhcnkgbGV0dGVyc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gICAgICogdG8gYmFzaWMgbGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmcgW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gICAgICogLy8gPT4gJ2RlamEgdnUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gYmFzZVRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4xLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBlbmRzIHdpdGggYHRhcmdldGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2MnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IGJhc2VUb1N0cmluZyhzdHJpbmcpO1xuICAgICAgdGFyZ2V0ID0gKHRhcmdldCArICcnKTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBsZW5ndGhcbiAgICAgICAgOiBuYXRpdmVNaW4ocG9zaXRpb24gPCAwID8gMCA6ICgrcG9zaXRpb24gfHwgMCksIGxlbmd0aCk7XG5cbiAgICAgIHBvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuaW5kZXhPZih0YXJnZXQsIHBvc2l0aW9uKSA9PSBwb3NpdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBcIidcIiwgYW5kIFwiXFxgXCIsIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsIGNoYXJhY3RlcnNcbiAgICAgKiB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gICAgICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAgICAgKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgKiBTZWUgW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICAgICAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQmFja3RpY2tzIGFyZSBlc2NhcGVkIGJlY2F1c2UgaW4gSW50ZXJuZXQgRXhwbG9yZXIgPCA5LCB0aGV5IGNhbiBicmVhayBvdXRcbiAgICAgKiBvZiBhdHRyaWJ1dGUgdmFsdWVzIG9yIEhUTUwgY29tbWVudHMuIFNlZSBbIzU5XShodHRwczovL2h0bWw1c2VjLm9yZy8jNTkpLFxuICAgICAqIFsjMTAyXShodHRwczovL2h0bWw1c2VjLm9yZy8jMTAyKSwgWyMxMDhdKGh0dHBzOi8vaHRtbDVzZWMub3JnLyMxMDgpLCBhbmRcbiAgICAgKiBbIzEzM10oaHR0cHM6Ly9odG1sNXNlYy5vcmcvIzEzMykgb2YgdGhlIFtIVE1MNSBTZWN1cml0eSBDaGVhdHNoZWV0XShodHRwczovL2h0bWw1c2VjLm9yZy8pXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXMgW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKVxuICAgICAqIHRvIHJlZHVjZSBYU1MgdmVjdG9ycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgLy8gUmVzZXQgYGxhc3RJbmRleGAgYmVjYXVzZSBpbiBJRSA8IDkgYFN0cmluZyNyZXBsYWNlYCBkb2VzIG5vdC5cbiAgICAgIHN0cmluZyA9IGJhc2VUb1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIHRoZSBgUmVnRXhwYCBzcGVjaWFsIGNoYXJhY3RlcnMgXCJcXFwiLCBcIi9cIiwgXCJeXCIsIFwiJFwiLCBcIi5cIiwgXCJ8XCIsIFwiP1wiLFxuICAgICAqIFwiKlwiLCBcIitcIiwgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJdXCIsIFwie1wiIGFuZCBcIn1cIiBpbiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICAgICAqIC8vID0+ICdcXFtsb2Rhc2hcXF1cXChodHRwczpcXC9cXC9sb2Rhc2hcXC5jb21cXC9cXCknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gYmFzZVRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXJzLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVJlZ0V4cENoYXJzLCBlc2NhcGVSZWdFeHBDaGFyKVxuICAgICAgICA6IChzdHJpbmcgfHwgJyg/OiknKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBba2ViYWIgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3BlY2lhbF9jYXNlX3N0eWxlcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKi9cbiAgICB2YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZXMgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuXG4gICAgICogUGFkZGluZyBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBjYW4ndCBiZSBldmVubHkgZGl2aWRlZCBieSBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCk7XG4gICAgICogLy8gPT4gJyAgYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgsICdfLScpO1xuICAgICAqIC8vID0+ICdfLWFiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IGJhc2VUb1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gK2xlbmd0aDtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBpZiAoc3RyTGVuZ3RoID49IGxlbmd0aCB8fCAhbmF0aXZlSXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG1pZCA9IChsZW5ndGggLSBzdHJMZW5ndGgpIC8gMixcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gbmF0aXZlRmxvb3IobWlkKSxcbiAgICAgICAgICByaWdodExlbmd0aCA9IG5hdGl2ZUNlaWwobWlkKTtcblxuICAgICAgY2hhcnMgPSBjcmVhdGVQYWRkaW5nKCcnLCByaWdodExlbmd0aCwgY2hhcnMpO1xuICAgICAgcmV0dXJuIGNoYXJzLnNsaWNlKDAsIGxlZnRMZW5ndGgpICsgc3RyaW5nICsgY2hhcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkTGVmdCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJyAgIGFiYydcbiAgICAgKlxuICAgICAqIF8ucGFkTGVmdCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tX2FiYydcbiAgICAgKlxuICAgICAqIF8ucGFkTGVmdCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICB2YXIgcGFkTGVmdCA9IGNyZWF0ZVBhZERpcigpO1xuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgcmlnaHQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZFJpZ2h0KCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWRSaWdodCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkUmlnaHQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgdmFyIHBhZFJpZ2h0ID0gY3JlYXRlUGFkRGlyKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIHJhZGl4LiBJZiBgcmFkaXhgIGlzXG4gICAgICogYHVuZGVmaW5lZGAgb3IgYDBgLCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyBgdmFsdWVgIGlzIGEgaGV4YWRlY2ltYWwsXG4gICAgICogaW4gd2hpY2ggY2FzZSBhIGByYWRpeGAgb2YgYDE2YCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFsaWducyB3aXRoIHRoZSBbRVM1IGltcGxlbWVudGF0aW9uXShodHRwczovL2VzNS5naXRodWIuaW8vI0UpXG4gICAgICogb2YgYHBhcnNlSW50YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl4XSBUaGUgcmFkaXggdG8gaW50ZXJwcmV0IGB2YWx1ZWAgYnkuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFyc2VJbnQoJzA4Jyk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzA4JywgJzEwJ10sIF8ucGFyc2VJbnQpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4LCBndWFyZCkge1xuICAgICAgLy8gRmlyZWZveCA8IDIxIGFuZCBPcGVyYSA8IDE1IGZvbGxvdyBFUzMgZm9yIGBwYXJzZUludGAuXG4gICAgICAvLyBDaHJvbWUgZmFpbHMgdG8gdHJpbSBsZWFkaW5nIDxCT00+IHdoaXRlc3BhY2UgY2hhcmFjdGVycy5cbiAgICAgIC8vIFNlZSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzEwOSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgaWYgKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIDogcmFkaXggPT0gbnVsbCkge1xuICAgICAgICByYWRpeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgIHJhZGl4ID0gK3JhZGl4O1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdHJpbShzdHJpbmcpO1xuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHN0cmluZywgcmFkaXggfHwgKHJlSGFzSGV4UHJlZml4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRzIHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCcqJywgMyk7XG4gICAgICogLy8gPT4gJyoqKidcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAyKTtcbiAgICAgKiAvLyA9PiAnYWJjYWJjJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDApO1xuICAgICAqIC8vID0+ICcnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgc3RyaW5nID0gYmFzZVRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBuID0gK247XG4gICAgICBpZiAobiA8IDEgfHwgIXN0cmluZyB8fCAhbmF0aXZlSXNGaW5pdGUobikpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIHN0cmluZyArPSBzdHJpbmc7XG4gICAgICB9IHdoaWxlIChuKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICovXG4gICAgdmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtzdGFydCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTdHlsaXN0aWNfb3Jfc3BlY2lhbGlzZWRfdXNhZ2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RhcnQgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKi9cbiAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgKHdvcmQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnNsaWNlKDEpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPTBdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggYHRhcmdldGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gYmFzZVRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09IG51bGxcbiAgICAgICAgPyAwXG4gICAgICAgIDogbmF0aXZlTWluKHBvc2l0aW9uIDwgMCA/IDAgOiAoK3Bvc2l0aW9uIHx8IDApLCBzdHJpbmcubGVuZ3RoKTtcblxuICAgICAgcmV0dXJuIHN0cmluZy5sYXN0SW5kZXhPZih0YXJnZXQsIHBvc2l0aW9uKSA9PSBwb3NpdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gICAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICAgKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAgICAgKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICAgICAqIG9iamVjdCBpcyBwcm92aWRlZCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICAgKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAgICAgKiBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gICAgICogW2xvZGFzaCdzIGN1c3RvbSBidWlsZHMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHMpLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gICAgICogW0Nocm9tZSdzIGV4dGVuc2lvbnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHRlbXBsYXRlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlXSBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGVdIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzXSBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZV0gVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNvdXJjZVVSTF0gVGhlIHNvdXJjZVVSTCBvZiB0aGUgdGVtcGxhdGUncyBjb21waWxlZCBzb3VyY2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlXSBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtvdGhlck9wdGlvbnNdIEVuYWJsZXMgdGhlIGxlZ2FjeSBgb3B0aW9uc2AgcGFyYW0gc2lnbmF0dXJlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXNcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUxcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnNcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBFUyBkZWxpbWl0ZXIgYXMgYW4gYWx0ZXJuYXRpdmUgdG8gdGhlIGRlZmF1bHQgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlclxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzISdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXG4gICAgICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHRcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnaWdub3JlZCcgfSk7XG4gICAgICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgXG4gICAgICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKHRleHQsIHsgJ2ltcG9ydHMnOiB7ICdqcSc6IGpRdWVyeSB9IH0pO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IGZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3JcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZVxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICAgICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqIC8vICAgcmV0dXJuIF9fcDtcbiAgICAgKiAvLyB9XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bFxuICAgICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgYSBzdGFjayB0cmFjZVxuICAgICAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKGN3ZCwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIG90aGVyT3B0aW9ucykge1xuICAgICAgLy8gQmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvbiAoaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy8pXG4gICAgICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuXG4gICAgICBpZiAob3RoZXJPcHRpb25zICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgb3RoZXJPcHRpb25zKSkge1xuICAgICAgICBvcHRpb25zID0gb3RoZXJPcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gYmFzZVRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBvcHRpb25zID0gYXNzaWduV2l0aChiYXNlQXNzaWduKHt9LCBvdGhlck9wdGlvbnMgfHwgb3B0aW9ucyksIHNldHRpbmdzLCBhc3NpZ25Pd25EZWZhdWx0cyk7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gYXNzaWduV2l0aChiYXNlQXNzaWduKHt9LCBvcHRpb25zLmltcG9ydHMpLCBzZXR0aW5ncy5pbXBvcnRzLCBhc3NpZ25Pd25EZWZhdWx0cyksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICAgICAgdmFyIGlzRXNjYXBpbmcsXG4gICAgICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cChcbiAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgICAgICwgJ2cnKTtcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoJ3NvdXJjZVVSTCcgaW4gb3B0aW9uc1xuICAgICAgICAgID8gb3B0aW9ucy5zb3VyY2VVUkxcbiAgICAgICAgICA6ICgnbG9kYXNoLnRlbXBsYXRlU291cmNlc1snICsgKCsrdGVtcGxhdGVDb3VudGVyKSArICddJylcbiAgICAgICAgKSArICdcXG4nO1xuXG4gICAgICBzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW4ndCBiZSBpbmNsdWRlZCBpbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICAgIHNvdXJjZSArPSBzdHJpbmcuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShyZVVuZXNjYXBlZFN0cmluZywgZXNjYXBlU3RyaW5nQ2hhcik7XG5cbiAgICAgICAgLy8gUmVwbGFjZSBkZWxpbWl0ZXJzIHdpdGggc25pcHBldHMuXG4gICAgICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICAgIC8vIFRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgcmVxdWlyZXMgcmV0dXJuaW5nIHRoZSBgbWF0Y2hgXG4gICAgICAgIC8vIHN0cmluZyBpbiBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcblxuICAgICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgICAgLy8gSWYgYHZhcmlhYmxlYCBpcyBub3Qgc3BlY2lmaWVkIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAgICAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluLlxuICAgICAgdmFyIHZhcmlhYmxlID0gb3B0aW9ucy52YXJpYWJsZTtcbiAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gICAgICB9XG4gICAgICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgICAgICh2YXJpYWJsZVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgICAgICAoaXNFc2NhcGluZ1xuICAgICAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgICAgICA6ICcnXG4gICAgICAgICkgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKS5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAgICAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgdmFyIHZhbHVlID0gc3RyaW5nO1xuICAgICAgc3RyaW5nID0gYmFzZVRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoIXN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgaWYgKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGNoYXJzLCBndWFyZCkgOiBjaGFycyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UodHJpbW1lZExlZnRJbmRleChzdHJpbmcpLCB0cmltbWVkUmlnaHRJbmRleChzdHJpbmcpICsgMSk7XG4gICAgICB9XG4gICAgICBjaGFycyA9IChjaGFycyArICcnKTtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UoY2hhcnNMZWZ0SW5kZXgoc3RyaW5nLCBjaGFycyksIGNoYXJzUmlnaHRJbmRleChzdHJpbmcsIGNoYXJzKSArIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUxlZnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1MZWZ0KCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjLV8tJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1MZWZ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHJpbmc7XG4gICAgICBzdHJpbmcgPSBiYXNlVG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmICghc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICBpZiAoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgY2hhcnMsIGd1YXJkKSA6IGNoYXJzID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5zbGljZSh0cmltbWVkTGVmdEluZGV4KHN0cmluZykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZShjaGFyc0xlZnRJbmRleChzdHJpbmcsIChjaGFycyArICcnKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1SaWdodCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbVJpZ2h0KCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1SaWdodChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgdmFyIHZhbHVlID0gc3RyaW5nO1xuICAgICAgc3RyaW5nID0gYmFzZVRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoIXN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgaWYgKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGNoYXJzLCBndWFyZCkgOiBjaGFycyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UoMCwgdHJpbW1lZFJpZ2h0SW5kZXgoc3RyaW5nKSArIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZSgwLCBjaGFyc1JpZ2h0SW5kZXgoc3RyaW5nLCAoY2hhcnMgKyAnJykpICsgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fG51bWJlcn0gW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdCBvciBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuYygnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywgMjQpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG4uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuYygnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuYygnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuYyhzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChvcHRpb25zICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gKCtvcHRpb25zLmxlbmd0aCB8fCAwKSA6IGxlbmd0aDtcbiAgICAgICAgICBvbWlzc2lvbiA9ICdvbWlzc2lvbicgaW4gb3B0aW9ucyA/IGJhc2VUb1N0cmluZyhvcHRpb25zLm9taXNzaW9uKSA6IG9taXNzaW9uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxlbmd0aCA9ICtvcHRpb25zIHx8IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IGJhc2VUb1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgZW5kID0gbGVuZ3RoIC0gb21pc3Npb24ubGVuZ3RoO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgbmV3RW5kLFxuICAgICAgICAgICAgICBzdWJzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIChyZUZsYWdzLmV4ZWMoc2VwYXJhdG9yKSB8fCAnJykgKyAnZycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZXBhcmF0b3IubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3Vic3RyaW5nKSkpIHtcbiAgICAgICAgICAgIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09IG51bGwgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKHNlcGFyYXRvciwgZW5kKSAhPSBlbmQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gcmVzdWx0Lmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLmVzY2FwZWA7IHRoaXMgbWV0aG9kIGNvbnZlcnRzIHRoZSBIVE1MIGVudGl0aWVzXG4gICAgICogYCZhbXA7YCwgYCZsdDtgLCBgJmd0O2AsIGAmcXVvdDtgLCBgJiMzOTtgLCBhbmQgYCYjOTY7YCBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgY2hhcmFjdGVycy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBIVE1MIGVudGl0aWVzIGFyZSB1bmVzY2FwZWQuIFRvIHVuZXNjYXBlIGFkZGl0aW9uYWwgSFRNTFxuICAgICAqIGVudGl0aWVzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB1bmVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuZXNjYXBlKCdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5lc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSBiYXNlVG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJywgL1teLCBdKy9nKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJyYnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gd29yZHMoc3RyaW5nLCBwYXR0ZXJuLCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpKSB7XG4gICAgICAgIHBhdHRlcm4gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSBiYXNlVG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybiB8fCByZVdvcmRzKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCBpcyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhdHRlbXB0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBgZnVuY2AgcmVzdWx0IG9yIGVycm9yIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gYXZvaWQgdGhyb3dpbmcgZXJyb3JzIGZvciBpbnZhbGlkIHNlbGVjdG9yc1xuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IHJlc3RQYXJhbShmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUgdGhlXG4gICAgICogY3JlYXRlZCBjYWxsYmFjayByZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBmb3IgYSBnaXZlbiBlbGVtZW50LiBJZiBgZnVuY2BcbiAgICAgKiBpcyBhbiBvYmplY3QgdGhlIGNyZWF0ZWQgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpblxuICAgICAqIHRoZSBlcXVpdmFsZW50IG9iamVjdCBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGl0ZXJhdGVlXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB3cmFwIHRvIGNyZWF0ZSBjdXN0b20gY2FsbGJhY2sgc2hvcnRoYW5kc1xuICAgICAqIF8uY2FsbGJhY2sgPSBfLndyYXAoXy5jYWxsYmFjaywgZnVuY3Rpb24oY2FsbGJhY2ssIGZ1bmMsIHRoaXNBcmcpIHtcbiAgICAgKiAgIHZhciBtYXRjaCA9IC9eKC4rPylfXyhbZ2xddCkoLispJC8uZXhlYyhmdW5jKTtcbiAgICAgKiAgIGlmICghbWF0Y2gpIHtcbiAgICAgKiAgICAgcmV0dXJuIGNhbGxiYWNrKGZ1bmMsIHRoaXNBcmcpO1xuICAgICAqICAgfVxuICAgICAqICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAqICAgICByZXR1cm4gbWF0Y2hbMl0gPT0gJ2d0J1xuICAgICAqICAgICAgID8gb2JqZWN0W21hdGNoWzFdXSA+IG1hdGNoWzNdXG4gICAgICogICAgICAgOiBvYmplY3RbbWF0Y2hbMV1dIDwgbWF0Y2hbM107XG4gICAgICogICB9O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIodXNlcnMsICdhZ2VfX2d0MzYnKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FsbGJhY2soZnVuYywgdGhpc0FyZywgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChmdW5jLCB0aGlzQXJnLCBndWFyZCkpIHtcbiAgICAgICAgdGhpc0FyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc09iamVjdExpa2UoZnVuYylcbiAgICAgICAgPyBtYXRjaGVzKGZ1bmMpXG4gICAgICAgIDogYmFzZUNhbGxiYWNrKGZ1bmMsIHRoaXNBcmcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXR5XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKiB2YXIgZ2V0dGVyID0gXy5jb25zdGFudChvYmplY3QpO1xuICAgICAqXG4gICAgICogZ2V0dGVyKCkgPT09IG9iamVjdDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBwcm92aWRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXR5XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0O1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlbiBvYmplY3RcbiAgICAgKiBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudCBwcm9wZXJ0eVxuICAgICAqIHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGJvb2xlYW5zLCBgRGF0ZWAgb2JqZWN0cyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBhbmQgc3RyaW5ncy4gT2JqZWN0cyBhcmUgY29tcGFyZWQgYnlcbiAgICAgKiB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRm9yIGNvbXBhcmluZyBhIHNpbmdsZVxuICAgICAqIG93biBvciBpbmhlcml0ZWQgcHJvcGVydHkgdmFsdWUgc2VlIGBfLm1hdGNoZXNQcm9wZXJ0eWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0eVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLm1hdGNoZXMoeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9KSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlcyhiYXNlQ2xvbmUoc291cmNlLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY29tcGFyZXMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIGBwYXRoYCBvbiBhIGdpdmVuXG4gICAgICogb2JqZWN0IHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYm9vbGVhbnMsIGBEYXRlYCBvYmplY3RzLFxuICAgICAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIGFuZCBzdHJpbmdzLiBPYmplY3RzIGFyZSBjb21wYXJlZCBieVxuICAgICAqIHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIF8ubWF0Y2hlc1Byb3BlcnR5KCd1c2VyJywgJ2ZyZWQnKSk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdmcmVkJyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBiYXNlQ2xvbmUoc3JjVmFsdWUsIHRydWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9uIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiB7ICdjJzogXy5jb25zdGFudCgyKSB9IH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogeyAnYyc6IF8uY29uc3RhbnQoMSkgfSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYi5jJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5pbnZva2UoXy5zb3J0Qnkob2JqZWN0cywgXy5tZXRob2QoWydhJywgJ2InLCAnYyddKSksICdhLmIuYycpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIHZhciBtZXRob2QgPSByZXN0UGFyYW0oZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaW52b2tlUGF0aChvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb24gYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0eVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IF8udGltZXMoMywgXy5jb25zdGFudCksXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kT2YgPSByZXN0UGFyYW0oZnVuY3Rpb24ob2JqZWN0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gaW52b2tlUGF0aChvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsIG93biBlbnVtZXJhYmxlIGZ1bmN0aW9uIHByb3BlcnRpZXMgb2YgYSBzb3VyY2Ugb2JqZWN0IHRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gSWYgYG9iamVjdGAgaXMgYSBmdW5jdGlvbiB0aGVuIG1ldGhvZHMgYXJlIGFkZGVkIHRvXG4gICAgICogaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgdGhlIGZ1bmN0aW9ucyBhZGRlZFxuICAgICAqICBhcmUgY2hhaW5hYmxlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHZvd2VscyhzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBfLmZpbHRlcihzdHJpbmcsIGZ1bmN0aW9uKHYpIHtcbiAgICAgKiAgICAgcmV0dXJuIC9bYWVpb3VdL2kudGVzdCh2KTtcbiAgICAgKiAgIH0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0pO1xuICAgICAqIF8udm93ZWxzKCdmcmVkJyk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9LCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1peGluKG9iamVjdCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgIHZhciBpc09iaiA9IGlzT2JqZWN0KHNvdXJjZSksXG4gICAgICAgICAgICBwcm9wcyA9IGlzT2JqID8ga2V5cyhzb3VyY2UpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbWV0aG9kTmFtZXMgPSAocHJvcHMgJiYgcHJvcHMubGVuZ3RoKSA/IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKCEobWV0aG9kTmFtZXMgPyBtZXRob2ROYW1lcy5sZW5ndGggOiBpc09iaikpIHtcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGZhbHNlO1xuICAgICAgICAgIG9wdGlvbnMgPSBzb3VyY2U7XG4gICAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICAgIG9iamVjdCA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghbWV0aG9kTmFtZXMpIHtcbiAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGFpbiA9IHRydWUsXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gbWV0aG9kTmFtZXMubGVuZ3RoO1xuXG4gICAgICBpZiAob3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgY2hhaW4gPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NoYWluJyBpbiBvcHRpb25zKSB7XG4gICAgICAgIGNoYWluID0gb3B0aW9ucy5jaGFpbjtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBtZXRob2ROYW1lID0gbWV0aG9kTmFtZXNbaW5kZXhdLFxuICAgICAgICAgICAgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcblxuICAgICAgICBvYmplY3RbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICBpZiAoaXNGdW5jKSB7XG4gICAgICAgICAgb2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSA9IChmdW5jdGlvbihmdW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgICBpZiAoY2hhaW4gfHwgY2hhaW5BbGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0KHRoaXMuX193cmFwcGVkX18pLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gYXJyYXlDb3B5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHsgJ2Z1bmMnOiBmdW5jLCAnYXJncyc6IGFyZ3VtZW50cywgJ3RoaXNBcmcnOiBvYmplY3QgfSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IGNoYWluQWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqZWN0LCBhcnJheVB1c2goW3RoaXMudmFsdWUoKV0sIGFyZ3VtZW50cykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KGZ1bmMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnRzIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzIHByZXZpb3VzIHZhbHVlIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvXG4gICAgICogdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgbG9kYXNoID0gXy5ub0NvbmZsaWN0KCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIG5vLW9wZXJhdGlvbiBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHVuZGVmaW5lZGAgcmVnYXJkbGVzcyBvZiB0aGVcbiAgICAgKiBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0eVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJyB9O1xuICAgICAqXG4gICAgICogXy5ub29wKG9iamVjdCkgPT09IHVuZGVmaW5lZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgYXQgYHBhdGhgIG9uIGFcbiAgICAgKiBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0eVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiB7ICdjJzogMiB9IH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogeyAnYyc6IDEgfSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iLmMnKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLnBsdWNrKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InLCAnYyddKSksICdhLmIuYycpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgICAgIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eShwYXRoKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSBwcm9wZXJ0eSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb24gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0eVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHRvUGF0aChwYXRoKSwgcGF0aCArICcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQgaXQgaXNcbiAgICAgKiBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLiBJZiBgZW5kYCBpcyBsZXNzIHRoYW4gYHN0YXJ0YFxuICAgICAqIGEgemVyby1sZW5ndGggcmFuZ2UgaXMgY3JlYXRlZCB1bmxlc3MgYSBuZWdhdGl2ZSBgc3RlcGAgaXMgc3BlY2lmaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgbnVtYmVycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5nZShzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgICBpZiAoc3RlcCAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSArc3RhcnQgfHwgMDtcbiAgICAgIHN0ZXAgPSBzdGVwID09IG51bGwgPyAxIDogKCtzdGVwIHx8IDApO1xuXG4gICAgICBpZiAoZW5kID09IG51bGwpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9ICtlbmQgfHwgMDtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBgQXJyYXkobGVuZ3RoKWAgc28gZW5naW5lcyBsaWtlIENoYWtyYSBhbmQgVjggYXZvaWQgc2xvd2VyIG1vZGVzLlxuICAgICAgLy8gU2VlIGh0dHBzOi8veW91dHUuYmUvWEFxSXBHVThaWmsjdD0xN20yNXMgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgZnVuY3Rpb24gYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHNcbiAgICAgKiBvZiBlYWNoIGludm9jYXRpb24uIFRoZSBgaXRlcmF0ZWVgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoXG4gICAgICogb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGRpY2VSb2xscyA9IF8udGltZXMoMywgXy5wYXJ0aWFsKF8ucmFuZG9tLCAxLCA2LCBmYWxzZSkpO1xuICAgICAqIC8vID0+IFszLCA2LCA0XVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBmdW5jdGlvbihuKSB7XG4gICAgICogICBtYWdlLmNhc3RTcGVsbChuKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBpbnZva2VzIGBtYWdlLmNhc3RTcGVsbChuKWAgdGhyZWUgdGltZXMgd2l0aCBgbmAgb2YgYDBgLCBgMWAsIGFuZCBgMmBcbiAgICAgKlxuICAgICAqIF8udGltZXMoMywgZnVuY3Rpb24obikge1xuICAgICAqICAgdGhpcy5jYXN0KG4pO1xuICAgICAqIH0sIG1hZ2UpO1xuICAgICAqIC8vID0+IGFsc28gaW52b2tlcyBgbWFnZS5jYXN0U3BlbGwobilgIHRocmVlIHRpbWVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUsIHRoaXNBcmcpIHtcbiAgICAgIG4gPSBuYXRpdmVGbG9vcihuKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSB0byBhdm9pZCBhIEpTQyBKSVQgYnVnIGluIFNhZmFyaSA4XG4gICAgICAvLyB3aGVyZSBgQXJyYXkoMClgIGlzIHRyZWF0ZWQgYXMgYEFycmF5KDEpYC5cbiAgICAgIGlmIChuIDwgMSB8fCAhbmF0aXZlSXNGaW5pdGUobikpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpKTtcblxuICAgICAgaXRlcmF0ZWUgPSBiaW5kQ2FsbGJhY2soaXRlcmF0ZWUsIHRoaXNBcmcsIDEpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGlmIChpbmRleCA8IE1BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIHByb3ZpZGVkIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXR5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXhdIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gYmFzZVRvU3RyaW5nKHByZWZpeCkgKyBpZDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXVnZW5kIFRoZSBmaXJzdCBudW1iZXIgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgdG8gYWRkLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5hZGQoNiwgNCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGQoYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiAoK2F1Z2VuZCB8fCAwKSArICgrYWRkZW5kIHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgYG5gIHJvdW5kZWQgdXAgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgdG8gcm91bmQgdXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIHVwIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jZWlsKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiBfLmNlaWwoNi4wMDQsIDIpO1xuICAgICAqIC8vID0+IDYuMDFcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2MDQwLCAtMik7XG4gICAgICogLy8gPT4gNjEwMFxuICAgICAqL1xuICAgIHZhciBjZWlsID0gY3JlYXRlUm91bmQoJ2NlaWwnKTtcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgYG5gIHJvdW5kZWQgZG93biB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciB0byByb3VuZCBkb3duLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgZG93biB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIGRvd24gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDAuMDQ2LCAyKTtcbiAgICAgKiAvLyA9PiAwLjA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MDAwXG4gICAgICovXG4gICAgdmFyIGZsb29yID0gY3JlYXRlUm91bmQoJ2Zsb29yJyk7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGVtcHR5IG9yIGZhbHNleVxuICAgICAqIGAtSW5maW5pdHlgIGlzIHJldHVybmVkLiBJZiBhbiBpdGVyYXRlZSBmdW5jdGlvbiBpcyBwcm92aWRlZCBpdCBpcyBpbnZva2VkXG4gICAgICogZm9yIGVhY2ggdmFsdWUgaW4gYGNvbGxlY3Rpb25gIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2ggdGhlIHZhbHVlXG4gICAgICogaXMgcmFua2VkLiBUaGUgYGl0ZXJhdGVlYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGl0ZXJhdGVlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbaXRlcmF0ZWVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IC1JbmZpbml0eVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXgodXNlcnMsIGZ1bmN0aW9uKGNocikge1xuICAgICAqICAgcmV0dXJuIGNoci5hZ2U7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5wcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5tYXgodXNlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfVxuICAgICAqL1xuICAgIHZhciBtYXggPSBjcmVhdGVFeHRyZW11bShndCwgTkVHQVRJVkVfSU5GSU5JVFkpO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWluaW11bSB2YWx1ZSBvZiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBlbXB0eSBvciBmYWxzZXlcbiAgICAgKiBgSW5maW5pdHlgIGlzIHJldHVybmVkLiBJZiBhbiBpdGVyYXRlZSBmdW5jdGlvbiBpcyBwcm92aWRlZCBpdCBpcyBpbnZva2VkXG4gICAgICogZm9yIGVhY2ggdmFsdWUgaW4gYGNvbGxlY3Rpb25gIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2ggdGhlIHZhbHVlXG4gICAgICogaXMgcmFua2VkLiBUaGUgYGl0ZXJhdGVlYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGl0ZXJhdGVlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbaXRlcmF0ZWVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IEluZmluaXR5XG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1pbih1c2VycywgZnVuY3Rpb24oY2hyKSB7XG4gICAgICogICByZXR1cm4gY2hyLmFnZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ubWluKHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqL1xuICAgIHZhciBtaW4gPSBjcmVhdGVFeHRyZW11bShsdCwgUE9TSVRJVkVfSU5GSU5JVFkpO1xuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyBgbmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbaXRlcmF0ZWVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1bShbNCwgNl0pO1xuICAgICAqIC8vID0+IDEwXG4gICAgICpcbiAgICAgKiBfLnN1bSh7ICdhJzogNCwgJ2InOiA2IH0pO1xuICAgICAqIC8vID0+IDEwXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ24nOiA0IH0sXG4gICAgICogICB7ICduJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uc3VtKG9iamVjdHMsIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAqICAgcmV0dXJuIG9iamVjdC5uO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDEwXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uc3VtKG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oY29sbGVjdGlvbiwgaXRlcmF0ZWUsIHRoaXNBcmcpIHtcbiAgICAgIGlmICh0aGlzQXJnICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCB0aGlzQXJnKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGl0ZXJhdGVlID0gZ2V0Q2FsbGJhY2soaXRlcmF0ZWUsIHRoaXNBcmcsIDMpO1xuICAgICAgcmV0dXJuIGl0ZXJhdGVlLmxlbmd0aCA9PSAxXG4gICAgICAgID8gYXJyYXlTdW0oaXNBcnJheShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB0b0l0ZXJhYmxlKGNvbGxlY3Rpb24pLCBpdGVyYXRlZSlcbiAgICAgICAgOiBiYXNlU3VtKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBFbnN1cmUgd3JhcHBlcnMgYXJlIGluc3RhbmNlcyBvZiBgYmFzZUxvZGFzaGAuXG4gICAgbG9kYXNoLnByb3RvdHlwZSA9IGJhc2VMb2Rhc2gucHJvdG90eXBlO1xuXG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXp5V3JhcHBlcjtcblxuICAgIC8vIEFkZCBmdW5jdGlvbnMgdG8gdGhlIGBNYXBgIGNhY2hlLlxuICAgIE1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcEdldDtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwSGFzO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBTZXQ7XG5cbiAgICAvLyBBZGQgZnVuY3Rpb25zIHRvIHRoZSBgU2V0YCBjYWNoZS5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IGNhY2hlUHVzaDtcblxuICAgIC8vIEFzc2lnbiBjYWNoZSB0byBgXy5tZW1vaXplYC5cbiAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbiAgICAvLyBBZGQgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIHdyYXBwZWQgdmFsdWVzIHdoZW4gY2hhaW5pbmcuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZHJvcCA9IGRyb3A7XG4gICAgbG9kYXNoLmRyb3BSaWdodCA9IGRyb3BSaWdodDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0V2hpbGUgPSBkcm9wUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2guZHJvcFdoaWxlID0gZHJvcFdoaWxlO1xuICAgIGxvZGFzaC5maWxsID0gZmlsbDtcbiAgICBsb2Rhc2guZmlsdGVyID0gZmlsdGVyO1xuICAgIGxvZGFzaC5mbGF0dGVuID0gZmxhdHRlbjtcbiAgICBsb2Rhc2guZmxhdHRlbkRlZXAgPSBmbGF0dGVuRGVlcDtcbiAgICBsb2Rhc2guZmxvdyA9IGZsb3c7XG4gICAgbG9kYXNoLmZsb3dSaWdodCA9IGZsb3dSaWdodDtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5kZXhCeSA9IGluZGV4Qnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm1vZEFyZ3MgPSBtb2RBcmdzO1xuICAgIGxvZGFzaC5uZWdhdGUgPSBuZWdhdGU7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gucGFpcnMgPSBwYWlycztcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGx1Y2sgPSBwbHVjaztcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmVzdFBhcmFtID0gcmVzdFBhcmFtO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNodWZmbGUgPSBzaHVmZmxlO1xuICAgIGxvZGFzaC5zbGljZSA9IHNsaWNlO1xuICAgIGxvZGFzaC5zb3J0QnkgPSBzb3J0Qnk7XG4gICAgbG9kYXNoLnNvcnRCeUFsbCA9IHNvcnRCeUFsbDtcbiAgICBsb2Rhc2guc29ydEJ5T3JkZXIgPSBzb3J0QnlPcmRlcjtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRpbWVzID0gdGltZXM7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW56aXAgPSB1bnppcDtcbiAgICBsb2Rhc2gudW56aXBXaXRoID0gdW56aXBXaXRoO1xuICAgIGxvZGFzaC52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgbG9kYXNoLnZhbHVlc0luID0gdmFsdWVzSW47XG4gICAgbG9kYXNoLndoZXJlID0gd2hlcmU7XG4gICAgbG9kYXNoLndpdGhvdXQgPSB3aXRob3V0O1xuICAgIGxvZGFzaC53cmFwID0gd3JhcDtcbiAgICBsb2Rhc2gueG9yID0geG9yO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guYmFja2Zsb3cgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmNvbGxlY3QgPSBtYXA7XG4gICAgbG9kYXNoLmNvbXBvc2UgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbjtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBjYWxsYmFjaztcbiAgICBsb2Rhc2gubWV0aG9kcyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2gub2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC5zZWxlY3QgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLnRhaWwgPSByZXN0O1xuICAgIGxvZGFzaC51bmlxdWUgPSB1bmlxO1xuXG4gICAgLy8gQWRkIGZ1bmN0aW9ucyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB1bndyYXBwZWQgdmFsdWVzIHdoZW4gY2hhaW5pbmcuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmRlYnVyciA9IGRlYnVycjtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmluZFdoZXJlID0gZmluZFdoZXJlO1xuICAgIGxvZGFzaC5maXJzdCA9IGZpcnN0O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5pZGVudGl0eSA9IGlkZW50aXR5O1xuICAgIGxvZGFzaC5pbmNsdWRlcyA9IGluY2x1ZGVzO1xuICAgIGxvZGFzaC5pbmRleE9mID0gaW5kZXhPZjtcbiAgICBsb2Rhc2guaW5SYW5nZSA9IGluUmFuZ2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgbG9kYXNoLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBsb2Rhc2guaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuICAgIGxvZGFzaC5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICBsb2Rhc2guaXNFcXVhbCA9IGlzRXF1YWw7XG4gICAgbG9kYXNoLmlzRXJyb3IgPSBpc0Vycm9yO1xuICAgIGxvZGFzaC5pc0Zpbml0ZSA9IGlzRmluaXRlO1xuICAgIGxvZGFzaC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubm9Db25mbGljdCA9IG5vQ29uZmxpY3Q7XG4gICAgbG9kYXNoLm5vb3AgPSBub29wO1xuICAgIGxvZGFzaC5ub3cgPSBub3c7XG4gICAgbG9kYXNoLnBhZCA9IHBhZDtcbiAgICBsb2Rhc2gucGFkTGVmdCA9IHBhZExlZnQ7XG4gICAgbG9kYXNoLnBhZFJpZ2h0ID0gcGFkUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4ID0gc29ydGVkTGFzdEluZGV4O1xuICAgIGxvZGFzaC5zdGFydENhc2UgPSBzdGFydENhc2U7XG4gICAgbG9kYXNoLnN0YXJ0c1dpdGggPSBzdGFydHNXaXRoO1xuICAgIGxvZGFzaC5zdW0gPSBzdW07XG4gICAgbG9kYXNoLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltTGVmdCA9IHRyaW1MZWZ0O1xuICAgIGxvZGFzaC50cmltUmlnaHQgPSB0cmltUmlnaHQ7XG4gICAgbG9kYXNoLnRydW5jID0gdHJ1bmM7XG4gICAgbG9kYXNoLnVuZXNjYXBlID0gdW5lc2NhcGU7XG4gICAgbG9kYXNoLnVuaXF1ZUlkID0gdW5pcXVlSWQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guYWxsID0gZXZlcnk7XG4gICAgbG9kYXNoLmFueSA9IHNvbWU7XG4gICAgbG9kYXNoLmNvbnRhaW5zID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmVxID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guZGV0ZWN0ID0gZmluZDtcbiAgICBsb2Rhc2guZm9sZGwgPSByZWR1Y2U7XG4gICAgbG9kYXNoLmZvbGRyID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLmhlYWQgPSBmaXJzdDtcbiAgICBsb2Rhc2guaW5jbHVkZSA9IGluY2x1ZGVzO1xuICAgIGxvZGFzaC5pbmplY3QgPSByZWR1Y2U7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCBmYWxzZSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgZnVuY3Rpb25zIGNhcGFibGUgb2YgcmV0dXJuaW5nIHdyYXBwZWQgYW5kIHVud3JhcHBlZCB2YWx1ZXMgd2hlbiBjaGFpbmluZy5cbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5zYW1wbGUgPSBmdW5jdGlvbihuKSB7XG4gICAgICBpZiAoIXRoaXMuX19jaGFpbl9fICYmIG4gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc2FtcGxlKHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBzYW1wbGUodmFsdWUsIG4pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHZhciBmaWx0ZXJlZCA9IHRoaXMuX19maWx0ZXJlZF9fO1xuICAgICAgICBpZiAoZmlsdGVyZWQgJiYgIWluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBuID0gbiA9PSBudWxsID8gMSA6IG5hdGl2ZU1heChuYXRpdmVGbG9vcihuKSB8fCAwLCAwKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBpZiAoZmlsdGVyZWQpIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihyZXN1bHQuX190YWtlQ291bnRfXywgbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHsgJ3NpemUnOiBuLCAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKSB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSAhPSBMQVpZX01BUF9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSwgdGhpc0FyZykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHsgJ2l0ZXJhdGVlJzogZ2V0Q2FsbGJhY2soaXRlcmF0ZWUsIHRoaXNBcmcsIDEpLCAndHlwZSc6IHR5cGUgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmZpcnN0YCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnZmlyc3QnLCAnbGFzdCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHRha2VOYW1lID0gJ3Rha2UnICsgKGluZGV4ID8gJ1JpZ2h0JyA6ICcnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3Rha2VOYW1lXSgxKS52YWx1ZSgpWzBdO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmluaXRpYWxgIGFuZCBgXy5yZXN0YC5cbiAgICBhcnJheUVhY2goWydpbml0aWFsJywgJ3Jlc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciBkcm9wTmFtZSA9ICdkcm9wJyArIChpbmRleCA/ICcnIDogJ1JpZ2h0Jyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2ZpbHRlcmVkX18gPyBuZXcgTGF6eVdyYXBwZXIodGhpcykgOiB0aGlzW2Ryb3BOYW1lXSgxKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5wbHVja2AgYW5kIGBfLndoZXJlYC5cbiAgICBhcnJheUVhY2goWydwbHVjaycsICd3aGVyZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIG9wZXJhdGlvbk5hbWUgPSBpbmRleCA/ICdmaWx0ZXInIDogJ21hcCcsXG4gICAgICAgICAgY3JlYXRlQ2FsbGJhY2sgPSBpbmRleCA/IGJhc2VNYXRjaGVzIDogcHJvcGVydHk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzW29wZXJhdGlvbk5hbWVdKGNyZWF0ZUNhbGxiYWNrKHZhbHVlKSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICAgIHByZWRpY2F0ZSA9IGdldENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMSk7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUodmFsdWUpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiAoK3N0YXJ0IHx8IDApO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSAoK2VuZCB8fCAwKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlLCB0aGlzQXJnKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKFBPU0lUSVZFX0lORklOSVRZKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8bWFwfHJlamVjdCl8V2hpbGUkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86Zmlyc3R8bGFzdCkkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbcmV0VW53cmFwcGVkID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV07XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gcmV0VW53cmFwcGVkID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIGlmICh1c2VMYXp5ICYmIGNoZWNrSXRlcmF0ZWUgJiYgdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgJiYgaXRlcmF0ZWUubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgICAvLyBBdm9pZCBsYXp5IHVzZSBpZiB0aGUgaXRlcmF0ZWUgaGFzIGEgXCJsZW5ndGhcIiB2YWx1ZSBvdGhlciB0aGFuIGAxYC5cbiAgICAgICAgICBpc0xhenkgPSB1c2VMYXp5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gKHJldFVud3JhcHBlZCAmJiBjaGFpbkFsbClcbiAgICAgICAgICAgID8gbG9kYXNoRnVuYyh2YWx1ZSwgMSlbMF1cbiAgICAgICAgICAgIDogbG9kYXNoRnVuYy5hcHBseSh1bmRlZmluZWQsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGFjdGlvbiA9IHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0sXG4gICAgICAgICAgICBvbmx5TGF6eSA9IGlzTGF6eSAmJiAhaXNIeWJyaWQ7XG5cbiAgICAgICAgaWYgKHJldFVud3JhcHBlZCAmJiAhY2hhaW5BbGwpIHtcbiAgICAgICAgICBpZiAob25seUxhenkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuY2xvbmUoKTtcbiAgICAgICAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goYWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jLmNhbGwodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbG9kYXNoRnVuYy5jYWxsKHVuZGVmaW5lZCwgdGhpcy52YWx1ZSgpKVswXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaChhY3Rpb24pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYXJyYXlFYWNoKFsnam9pbicsICdwb3AnLCAncHVzaCcsICdyZXBsYWNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3NwbGl0JywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSAoL14oPzpyZXBsYWNlfHNwbGl0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyBzdHJpbmdQcm90byA6IGFycmF5UHJvdG8pW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86am9pbnxwb3B8cmVwbGFjZXxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMudmFsdWUoKSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gTWFwIG1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IGxvZGFzaEZ1bmMubmFtZSxcbiAgICAgICAgICAgIG5hbWVzID0gcmVhbE5hbWVzW2tleV0gfHwgKHJlYWxOYW1lc1trZXldID0gW10pO1xuXG4gICAgICAgIG5hbWVzLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWRXcmFwcGVyKHVuZGVmaW5lZCwgQklORF9LRVlfRkxBRykubmFtZV0gPSBbeyAnbmFtZSc6ICd3cmFwcGVyJywgJ2Z1bmMnOiB1bmRlZmluZWQgfV07XG5cbiAgICAvLyBBZGQgZnVuY3Rpb25zIHRvIHRoZSBsYXp5IHdyYXBwZXIuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluaW5nIGZ1bmN0aW9ucyB0byB0aGUgYGxvZGFzaGAgd3JhcHBlci5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbmNhdCA9IHdyYXBwZXJDb25jYXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvU3RyaW5nID0gd3JhcHBlclRvU3RyaW5nO1xuICAgIGxvZGFzaC5wcm90b3R5cGUucnVuID0gbG9kYXNoLnByb3RvdHlwZS50b0pTT04gPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlT2YgPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlID0gd3JhcHBlclZhbHVlO1xuXG4gICAgLy8gQWRkIGZ1bmN0aW9uIGFsaWFzZXMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb2xsZWN0ID0gbG9kYXNoLnByb3RvdHlwZS5tYXA7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5oZWFkID0gbG9kYXNoLnByb3RvdHlwZS5maXJzdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnNlbGVjdCA9IGxvZGFzaC5wcm90b3R5cGUuZmlsdGVyO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudGFpbCA9IGxvZGFzaC5wcm90b3R5cGUucmVzdDtcblxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvLyBFeHBvcnQgbG9kYXNoLlxuICB2YXIgXyA9IHJ1bkluQ29udGV4dCgpO1xuXG4gIC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMgbGlrZSByLmpzIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZSB0aGUgZm9sbG93aW5nOlxuICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBFeHBvc2UgbG9kYXNoIHRvIHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gYW4gQU1EIGxvYWRlciBpcyBwcmVzZW50IHRvIGF2b2lkXG4gICAgLy8gZXJyb3JzIGluIGNhc2VzIHdoZXJlIGxvZGFzaCBpcyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGFuZCBub3QgaW50ZW5kZWRcbiAgICAvLyBhcyBhbiBBTUQgbW9kdWxlLiBTZWUgaHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9lcnJvcnMuaHRtbCNtaXNtYXRjaCBmb3JcbiAgICAvLyBtb3JlIGRldGFpbHMuXG4gICAgcm9vdC5fID0gXztcblxuICAgIC8vIERlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlIHNvLCB0aHJvdWdoIHBhdGggbWFwcGluZywgaXQgY2FuIGJlXG4gICAgLy8gcmVmZXJlbmNlZCBhcyB0aGUgXCJ1bmRlcnNjb3JlXCIgbW9kdWxlLlxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG4gIC8vIENoZWNrIGZvciBgZXhwb3J0c2AgYWZ0ZXIgYGRlZmluZWAgaW4gY2FzZSBhIGJ1aWxkIG9wdGltaXplciBhZGRzIGFuIGBleHBvcnRzYCBvYmplY3QuXG4gIGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMgb3IgUmluZ29KUy5cbiAgICBpZiAobW9kdWxlRXhwb3J0cykge1xuICAgICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIH1cbiAgICAvLyBFeHBvcnQgZm9yIFJoaW5vIHdpdGggQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBlbHNlIHtcbiAgICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgZm9yIGEgYnJvd3NlciBvciBSaGluby5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcbn0se31dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL0NhbmNlbGxhdGlvbi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogUmVwcmVzZW50cyBhIGNhbmNlbGxhdGlvbiBjYXVzZWQgYnkgbmF2aWdhdGluZyBhd2F5XG4gKiBiZWZvcmUgdGhlIHByZXZpb3VzIHRyYW5zaXRpb24gaGFzIGZ1bGx5IHJlc29sdmVkLlxuICovXG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gQ2FuY2VsbGF0aW9uKCkge31cblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxsYXRpb247XG59LHt9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9IaXN0b3J5LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgncmVhY3QvbGliL2ludmFyaWFudCcpO1xudmFyIGNhblVzZURPTSA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpLmNhblVzZURPTTtcblxudmFyIEhpc3RvcnkgPSB7XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IG51bWJlciBvZiBlbnRyaWVzIGluIHRoZSBoaXN0b3J5LlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIHByb3BlcnR5IGlzIHJlYWQtb25seS5cbiAgICovXG4gIGxlbmd0aDogMSxcblxuICAvKipcbiAgICogU2VuZHMgdGhlIGJyb3dzZXIgYmFjayBvbmUgZW50cnkgaW4gdGhlIGhpc3RvcnkuXG4gICAqL1xuICBiYWNrOiBmdW5jdGlvbiBiYWNrKCkge1xuICAgIGludmFyaWFudChjYW5Vc2VET00sICdDYW5ub3QgdXNlIEhpc3RvcnkuYmFjayB3aXRob3V0IGEgRE9NJyk7XG5cbiAgICAvLyBEbyB0aGlzIGZpcnN0IHNvIHRoYXQgSGlzdG9yeS5sZW5ndGggd2lsbFxuICAgIC8vIGJlIGFjY3VyYXRlIGluIGxvY2F0aW9uIGNoYW5nZSBsaXN0ZW5lcnMuXG4gICAgSGlzdG9yeS5sZW5ndGggLT0gMTtcblxuICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhpc3Rvcnk7XG59LHtcInJlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanNcIixcInJlYWN0L2xpYi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvTWF0Y2guanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbi8qIGpzaGludCAtVzA4NCAqL1xudmFyIFBhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbmZ1bmN0aW9uIGRlZXBTZWFyY2gocm91dGUsIHBhdGhuYW1lLCBxdWVyeSkge1xuICAvLyBDaGVjayB0aGUgc3VidHJlZSBmaXJzdCB0byBmaW5kIHRoZSBtb3N0IGRlZXBseS1uZXN0ZWQgbWF0Y2guXG4gIHZhciBjaGlsZFJvdXRlcyA9IHJvdXRlLmNoaWxkUm91dGVzO1xuICBpZiAoY2hpbGRSb3V0ZXMpIHtcbiAgICB2YXIgbWF0Y2gsIGNoaWxkUm91dGU7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNoaWxkUm91dGVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBjaGlsZFJvdXRlID0gY2hpbGRSb3V0ZXNbaV07XG5cbiAgICAgIGlmIChjaGlsZFJvdXRlLmlzRGVmYXVsdCB8fCBjaGlsZFJvdXRlLmlzTm90Rm91bmQpIGNvbnRpbnVlOyAvLyBDaGVjayB0aGVzZSBpbiBvcmRlciBsYXRlci5cblxuICAgICAgaWYgKG1hdGNoID0gZGVlcFNlYXJjaChjaGlsZFJvdXRlLCBwYXRobmFtZSwgcXVlcnkpKSB7XG4gICAgICAgIC8vIEEgcm91dGUgaW4gdGhlIHN1YnRyZWUgbWF0Y2hlZCEgQWRkIHRoaXMgcm91dGUgYW5kIHdlJ3JlIGRvbmUuXG4gICAgICAgIG1hdGNoLnJvdXRlcy51bnNoaWZ0KHJvdXRlKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIE5vIGNoaWxkIHJvdXRlcyBtYXRjaGVkOyB0cnkgdGhlIGRlZmF1bHQgcm91dGUuXG4gIHZhciBkZWZhdWx0Um91dGUgPSByb3V0ZS5kZWZhdWx0Um91dGU7XG4gIGlmIChkZWZhdWx0Um91dGUgJiYgKHBhcmFtcyA9IFBhdGhVdGlscy5leHRyYWN0UGFyYW1zKGRlZmF1bHRSb3V0ZS5wYXRoLCBwYXRobmFtZSkpKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRjaChwYXRobmFtZSwgcGFyYW1zLCBxdWVyeSwgW3JvdXRlLCBkZWZhdWx0Um91dGVdKTtcbiAgfSAvLyBEb2VzIHRoZSBcIm5vdCBmb3VuZFwiIHJvdXRlIG1hdGNoP1xuICB2YXIgbm90Rm91bmRSb3V0ZSA9IHJvdXRlLm5vdEZvdW5kUm91dGU7XG4gIGlmIChub3RGb3VuZFJvdXRlICYmIChwYXJhbXMgPSBQYXRoVXRpbHMuZXh0cmFjdFBhcmFtcyhub3RGb3VuZFJvdXRlLnBhdGgsIHBhdGhuYW1lKSkpIHtcbiAgICByZXR1cm4gbmV3IE1hdGNoKHBhdGhuYW1lLCBwYXJhbXMsIHF1ZXJ5LCBbcm91dGUsIG5vdEZvdW5kUm91dGVdKTtcbiAgfSAvLyBMYXN0IGF0dGVtcHQ6IGNoZWNrIHRoaXMgcm91dGUuXG4gIHZhciBwYXJhbXMgPSBQYXRoVXRpbHMuZXh0cmFjdFBhcmFtcyhyb3V0ZS5wYXRoLCBwYXRobmFtZSk7XG4gIGlmIChwYXJhbXMpIHtcbiAgICByZXR1cm4gbmV3IE1hdGNoKHBhdGhuYW1lLCBwYXJhbXMsIHF1ZXJ5LCBbcm91dGVdKTtcbiAgfXJldHVybiBudWxsO1xufVxuXG52YXIgTWF0Y2ggPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNYXRjaChwYXRobmFtZSwgcGFyYW1zLCBxdWVyeSwgcm91dGVzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hdGNoKTtcblxuICAgIHRoaXMucGF0aG5hbWUgPSBwYXRobmFtZTtcbiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgdGhpcy5yb3V0ZXMgPSByb3V0ZXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTWF0Y2gsIG51bGwsIFt7XG4gICAga2V5OiAnZmluZE1hdGNoJyxcblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIG1hdGNoIGRlcHRoLWZpcnN0IGEgcm91dGUgaW4gdGhlIGdpdmVuIHJvdXRlJ3NcbiAgICAgKiBzdWJ0cmVlIGFnYWluc3QgdGhlIGdpdmVuIHBhdGggYW5kIHJldHVybnMgdGhlIG1hdGNoIGlmIGl0XG4gICAgICogc3VjY2VlZHMsIG51bGwgaWYgbm8gbWF0Y2ggY2FuIGJlIG1hZGUuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRNYXRjaChyb3V0ZXMsIHBhdGgpIHtcbiAgICAgIHZhciBwYXRobmFtZSA9IFBhdGhVdGlscy53aXRob3V0UXVlcnkocGF0aCk7XG4gICAgICB2YXIgcXVlcnkgPSBQYXRoVXRpbHMuZXh0cmFjdFF1ZXJ5KHBhdGgpO1xuICAgICAgdmFyIG1hdGNoID0gbnVsbDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJvdXRlcy5sZW5ndGg7IG1hdGNoID09IG51bGwgJiYgaSA8IGxlbjsgKytpKSBtYXRjaCA9IGRlZXBTZWFyY2gocm91dGVzW2ldLCBwYXRobmFtZSwgcXVlcnkpO1xuXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1hdGNoO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRjaDtcbn0se1wiLi9QYXRoVXRpbHNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9QYXRoVXRpbHMuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL05hdmlnYXRpb24uanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCcuL1Byb3BUeXBlcycpO1xuXG4vKipcbiAqIEEgbWl4aW4gZm9yIGNvbXBvbmVudHMgdGhhdCBtb2RpZnkgdGhlIFVSTC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgdmFyIE15TGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgICBtaXhpbnM6IFsgUm91dGVyLk5hdmlnYXRpb24gXSxcbiAqICAgICBoYW5kbGVDbGljayhldmVudCkge1xuICogICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAqICAgICAgIHRoaXMudHJhbnNpdGlvblRvKCdhUm91dGUnLCB7IHRoZTogJ3BhcmFtcycgfSwgeyB0aGU6ICdxdWVyeScgfSk7XG4gKiAgICAgfSxcbiAqICAgICByZW5kZXIoKSB7XG4gKiAgICAgICByZXR1cm4gKFxuICogICAgICAgICA8YSBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5DbGljayBtZSE8L2E+XG4gKiAgICAgICApO1xuICogICAgIH1cbiAqICAgfSk7XG4gKi9cbnZhciBOYXZpZ2F0aW9uID0ge1xuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIHJvdXRlcjogUHJvcFR5cGVzLnJvdXRlci5pc1JlcXVpcmVkXG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYWJzb2x1dGUgVVJMIHBhdGggY3JlYXRlZCBmcm9tIHRoZSBnaXZlbiByb3V0ZVxuICAgKiBuYW1lLCBVUkwgcGFyYW1ldGVycywgYW5kIHF1ZXJ5IHZhbHVlcy5cbiAgICovXG4gIG1ha2VQYXRoOiBmdW5jdGlvbiBtYWtlUGF0aCh0bywgcGFyYW1zLCBxdWVyeSkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQucm91dGVyLm1ha2VQYXRoKHRvLCBwYXJhbXMsIHF1ZXJ5KTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyB0aGF0IG1heSBzYWZlbHkgYmUgdXNlZCBhcyB0aGUgaHJlZiBvZiBhXG4gICAqIGxpbmsgdG8gdGhlIHJvdXRlIHdpdGggdGhlIGdpdmVuIG5hbWUuXG4gICAqL1xuICBtYWtlSHJlZjogZnVuY3Rpb24gbWFrZUhyZWYodG8sIHBhcmFtcywgcXVlcnkpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlci5tYWtlSHJlZih0bywgcGFyYW1zLCBxdWVyeSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYW5zaXRpb25zIHRvIHRoZSBVUkwgc3BlY2lmaWVkIGluIHRoZSBhcmd1bWVudHMgYnkgcHVzaGluZ1xuICAgKiBhIG5ldyBVUkwgb250byB0aGUgaGlzdG9yeSBzdGFjay5cbiAgICovXG4gIHRyYW5zaXRpb25UbzogZnVuY3Rpb24gdHJhbnNpdGlvblRvKHRvLCBwYXJhbXMsIHF1ZXJ5KSB7XG4gICAgdGhpcy5jb250ZXh0LnJvdXRlci50cmFuc2l0aW9uVG8odG8sIHBhcmFtcywgcXVlcnkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmFuc2l0aW9ucyB0byB0aGUgVVJMIHNwZWNpZmllZCBpbiB0aGUgYXJndW1lbnRzIGJ5IHJlcGxhY2luZ1xuICAgKiB0aGUgY3VycmVudCBVUkwgaW4gdGhlIGhpc3Rvcnkgc3RhY2suXG4gICAqL1xuICByZXBsYWNlV2l0aDogZnVuY3Rpb24gcmVwbGFjZVdpdGgodG8sIHBhcmFtcywgcXVlcnkpIHtcbiAgICB0aGlzLmNvbnRleHQucm91dGVyLnJlcGxhY2VXaXRoKHRvLCBwYXJhbXMsIHF1ZXJ5KTtcbiAgfSxcblxuICAvKipcbiAgICogVHJhbnNpdGlvbnMgdG8gdGhlIHByZXZpb3VzIFVSTC5cbiAgICovXG4gIGdvQmFjazogZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQucm91dGVyLmdvQmFjaygpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTmF2aWdhdGlvbjtcbn0se1wiLi9Qcm9wVHlwZXNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9Qcm9wVHlwZXMuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1BhdGhVdGlscy5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9pbnZhcmlhbnQnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG52YXIgcXMgPSByZXF1aXJlKCdxcycpO1xuXG52YXIgcGFyYW1Db21waWxlTWF0Y2hlciA9IC86KFthLXpBLVpfJF1bYS16QS1aMC05XyRdKil8WyouKClcXFtcXF1cXFxcK3x7fV4kXS9nO1xudmFyIHBhcmFtSW5qZWN0TWF0Y2hlciA9IC86KFthLXpBLVpfJF1bYS16QS1aMC05XyQ/XSpbP10/KXxbKl0vZztcbnZhciBwYXJhbUluamVjdFRyYWlsaW5nU2xhc2hNYXRjaGVyID0gL1xcL1xcL1xcP3xcXC9cXD9cXC98XFwvXFw/L2c7XG52YXIgcXVlcnlNYXRjaGVyID0gL1xcPyguKikkLztcblxudmFyIF9jb21waWxlZFBhdHRlcm5zID0ge307XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXR0ZXJuKHBhdHRlcm4pIHtcbiAgaWYgKCEocGF0dGVybiBpbiBfY29tcGlsZWRQYXR0ZXJucykpIHtcbiAgICB2YXIgcGFyYW1OYW1lcyA9IFtdO1xuICAgIHZhciBzb3VyY2UgPSBwYXR0ZXJuLnJlcGxhY2UocGFyYW1Db21waWxlTWF0Y2hlciwgZnVuY3Rpb24gKG1hdGNoLCBwYXJhbU5hbWUpIHtcbiAgICAgIGlmIChwYXJhbU5hbWUpIHtcbiAgICAgICAgcGFyYW1OYW1lcy5wdXNoKHBhcmFtTmFtZSk7XG4gICAgICAgIHJldHVybiAnKFteLz8jXSspJztcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2ggPT09ICcqJykge1xuICAgICAgICBwYXJhbU5hbWVzLnB1c2goJ3NwbGF0Jyk7XG4gICAgICAgIHJldHVybiAnKC4qPyknO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdcXFxcJyArIG1hdGNoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2NvbXBpbGVkUGF0dGVybnNbcGF0dGVybl0gPSB7XG4gICAgICBtYXRjaGVyOiBuZXcgUmVnRXhwKCdeJyArIHNvdXJjZSArICckJywgJ2knKSxcbiAgICAgIHBhcmFtTmFtZXM6IHBhcmFtTmFtZXNcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9jb21waWxlZFBhdHRlcm5zW3BhdHRlcm5dO1xufVxuXG52YXIgUGF0aFV0aWxzID0ge1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHBhdGggaXMgYWJzb2x1dGUuXG4gICAqL1xuICBpc0Fic29sdXRlOiBmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfSxcblxuICAvKipcbiAgICogSm9pbnMgdHdvIFVSTCBwYXRocyB0b2dldGhlci5cbiAgICovXG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oYSwgYikge1xuICAgIHJldHVybiBhLnJlcGxhY2UoL1xcLyokLywgJy8nKSArIGI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgdGhlIG5hbWVzIG9mIGFsbCBwYXJhbWV0ZXJzIGluIHRoZSBnaXZlbiBwYXR0ZXJuLlxuICAgKi9cbiAgZXh0cmFjdFBhcmFtTmFtZXM6IGZ1bmN0aW9uIGV4dHJhY3RQYXJhbU5hbWVzKHBhdHRlcm4pIHtcbiAgICByZXR1cm4gY29tcGlsZVBhdHRlcm4ocGF0dGVybikucGFyYW1OYW1lcztcbiAgfSxcblxuICAvKipcbiAgICogRXh0cmFjdHMgdGhlIHBvcnRpb25zIG9mIHRoZSBnaXZlbiBVUkwgcGF0aCB0aGF0IG1hdGNoIHRoZSBnaXZlbiBwYXR0ZXJuXG4gICAqIGFuZCByZXR1cm5zIGFuIG9iamVjdCBvZiBwYXJhbSBuYW1lID0+IHZhbHVlIHBhaXJzLiBSZXR1cm5zIG51bGwgaWYgdGhlXG4gICAqIHBhdHRlcm4gZG9lcyBub3QgbWF0Y2ggdGhlIGdpdmVuIHBhdGguXG4gICAqL1xuICBleHRyYWN0UGFyYW1zOiBmdW5jdGlvbiBleHRyYWN0UGFyYW1zKHBhdHRlcm4sIHBhdGgpIHtcbiAgICB2YXIgX2NvbXBpbGVQYXR0ZXJuID0gY29tcGlsZVBhdHRlcm4ocGF0dGVybik7XG5cbiAgICB2YXIgbWF0Y2hlciA9IF9jb21waWxlUGF0dGVybi5tYXRjaGVyO1xuICAgIHZhciBwYXJhbU5hbWVzID0gX2NvbXBpbGVQYXR0ZXJuLnBhcmFtTmFtZXM7XG5cbiAgICB2YXIgbWF0Y2ggPSBwYXRoLm1hdGNoKG1hdGNoZXIpO1xuXG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfXZhciBwYXJhbXMgPSB7fTtcblxuICAgIHBhcmFtTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW1OYW1lLCBpbmRleCkge1xuICAgICAgcGFyYW1zW3BhcmFtTmFtZV0gPSBtYXRjaFtpbmRleCArIDFdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhIHZlcnNpb24gb2YgdGhlIGdpdmVuIHJvdXRlIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLiBUaHJvd3NcbiAgICogaWYgdGhlcmUgaXMgYSBkeW5hbWljIHNlZ21lbnQgb2YgdGhlIHJvdXRlIHBhdGggZm9yIHdoaWNoIHRoZXJlIGlzIG5vIHBhcmFtLlxuICAgKi9cbiAgaW5qZWN0UGFyYW1zOiBmdW5jdGlvbiBpbmplY3RQYXJhbXMocGF0dGVybiwgcGFyYW1zKSB7XG4gICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuXG4gICAgdmFyIHNwbGF0SW5kZXggPSAwO1xuXG4gICAgcmV0dXJuIHBhdHRlcm4ucmVwbGFjZShwYXJhbUluamVjdE1hdGNoZXIsIGZ1bmN0aW9uIChtYXRjaCwgcGFyYW1OYW1lKSB7XG4gICAgICBwYXJhbU5hbWUgPSBwYXJhbU5hbWUgfHwgJ3NwbGF0JztcblxuICAgICAgLy8gSWYgcGFyYW0gaXMgb3B0aW9uYWwgZG9uJ3QgY2hlY2sgZm9yIGV4aXN0ZW5jZVxuICAgICAgaWYgKHBhcmFtTmFtZS5zbGljZSgtMSkgPT09ICc/Jykge1xuICAgICAgICBwYXJhbU5hbWUgPSBwYXJhbU5hbWUuc2xpY2UoMCwgLTEpO1xuXG4gICAgICAgIGlmIChwYXJhbXNbcGFyYW1OYW1lXSA9PSBudWxsKSByZXR1cm4gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnZhcmlhbnQocGFyYW1zW3BhcmFtTmFtZV0gIT0gbnVsbCwgJ01pc3NpbmcgXCIlc1wiIHBhcmFtZXRlciBmb3IgcGF0aCBcIiVzXCInLCBwYXJhbU5hbWUsIHBhdHRlcm4pO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VnbWVudDtcbiAgICAgIGlmIChwYXJhbU5hbWUgPT09ICdzcGxhdCcgJiYgQXJyYXkuaXNBcnJheShwYXJhbXNbcGFyYW1OYW1lXSkpIHtcbiAgICAgICAgc2VnbWVudCA9IHBhcmFtc1twYXJhbU5hbWVdW3NwbGF0SW5kZXgrK107XG5cbiAgICAgICAgaW52YXJpYW50KHNlZ21lbnQgIT0gbnVsbCwgJ01pc3Npbmcgc3BsYXQgIyAlcyBmb3IgcGF0aCBcIiVzXCInLCBzcGxhdEluZGV4LCBwYXR0ZXJuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlZ21lbnQgPSBwYXJhbXNbcGFyYW1OYW1lXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlZ21lbnQ7XG4gICAgfSkucmVwbGFjZShwYXJhbUluamVjdFRyYWlsaW5nU2xhc2hNYXRjaGVyLCAnLycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGlzIHRoZSByZXN1bHQgb2YgcGFyc2luZyBhbnkgcXVlcnkgc3RyaW5nIGNvbnRhaW5lZFxuICAgKiBpbiB0aGUgZ2l2ZW4gcGF0aCwgbnVsbCBpZiB0aGUgcGF0aCBjb250YWlucyBubyBxdWVyeSBzdHJpbmcuXG4gICAqL1xuICBleHRyYWN0UXVlcnk6IGZ1bmN0aW9uIGV4dHJhY3RRdWVyeShwYXRoKSB7XG4gICAgdmFyIG1hdGNoID0gcGF0aC5tYXRjaChxdWVyeU1hdGNoZXIpO1xuICAgIHJldHVybiBtYXRjaCAmJiBxcy5wYXJzZShtYXRjaFsxXSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB2ZXJzaW9uIG9mIHRoZSBnaXZlbiBwYXRoIHdpdGhvdXQgdGhlIHF1ZXJ5IHN0cmluZy5cbiAgICovXG4gIHdpdGhvdXRRdWVyeTogZnVuY3Rpb24gd2l0aG91dFF1ZXJ5KHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aC5yZXBsYWNlKHF1ZXJ5TWF0Y2hlciwgJycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgdmVyc2lvbiBvZiB0aGUgZ2l2ZW4gcGF0aCB3aXRoIHRoZSBwYXJhbWV0ZXJzIGluIHRoZSBnaXZlblxuICAgKiBxdWVyeSBtZXJnZWQgaW50byB0aGUgcXVlcnkgc3RyaW5nLlxuICAgKi9cbiAgd2l0aFF1ZXJ5OiBmdW5jdGlvbiB3aXRoUXVlcnkocGF0aCwgcXVlcnkpIHtcbiAgICB2YXIgZXhpc3RpbmdRdWVyeSA9IFBhdGhVdGlscy5leHRyYWN0UXVlcnkocGF0aCk7XG5cbiAgICBpZiAoZXhpc3RpbmdRdWVyeSkgcXVlcnkgPSBxdWVyeSA/IGFzc2lnbihleGlzdGluZ1F1ZXJ5LCBxdWVyeSkgOiBleGlzdGluZ1F1ZXJ5O1xuXG4gICAgdmFyIHF1ZXJ5U3RyaW5nID0gcXMuc3RyaW5naWZ5KHF1ZXJ5LCB7IGFycmF5Rm9ybWF0OiAnYnJhY2tldHMnIH0pO1xuXG4gICAgaWYgKHF1ZXJ5U3RyaW5nKSB7XG4gICAgICByZXR1cm4gUGF0aFV0aWxzLndpdGhvdXRRdWVyeShwYXRoKSArICc/JyArIHF1ZXJ5U3RyaW5nO1xuICAgIH1yZXR1cm4gUGF0aFV0aWxzLndpdGhvdXRRdWVyeShwYXRoKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhdGhVdGlscztcbn0se1wib2JqZWN0LWFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanNcIixcInFzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcXMvaW5kZXguanNcIixcInJlYWN0L2xpYi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvUHJvcFR5cGVzLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgncmVhY3QvbGliL09iamVjdC5hc3NpZ24nKTtcbnZhciBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJ3JlYWN0JykuUHJvcFR5cGVzO1xudmFyIFJvdXRlID0gcmVxdWlyZSgnLi9Sb3V0ZScpO1xuXG52YXIgUHJvcFR5cGVzID0gYXNzaWduKHt9LCBSZWFjdFByb3BUeXBlcywge1xuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhhdCBhIHByb3Agc2hvdWxkIGJlIGZhbHN5LlxuICAgKi9cbiAgZmFsc3k6IGZ1bmN0aW9uIGZhbHN5KHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0pIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJzwnICsgY29tcG9uZW50TmFtZSArICc+IHNob3VsZCBub3QgaGF2ZSBhIFwiJyArIHByb3BOYW1lICsgJ1wiIHByb3AnKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGF0IGEgcHJvcCBzaG91bGQgYmUgYSBSb3V0ZSBvYmplY3QuXG4gICAqL1xuICByb3V0ZTogUmVhY3RQcm9wVHlwZXMuaW5zdGFuY2VPZihSb3V0ZSksXG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGF0IGEgcHJvcCBzaG91bGQgYmUgYSBSb3V0ZXIgb2JqZWN0LlxuICAgKi9cbiAgLy9yb3V0ZXI6IFJlYWN0UHJvcFR5cGVzLmluc3RhbmNlT2YoUm91dGVyKSAvLyBUT0RPXG4gIHJvdXRlcjogUmVhY3RQcm9wVHlwZXMuZnVuY1xuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9wVHlwZXM7XG59LHtcIi4vUm91dGVcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9Sb3V0ZS5qc1wiLFwicmVhY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIixcInJlYWN0L2xpYi9PYmplY3QuYXNzaWduXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9PYmplY3QuYXNzaWduLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9SZWRpcmVjdC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogRW5jYXBzdWxhdGVzIGEgcmVkaXJlY3QgdG8gdGhlIGdpdmVuIHJvdXRlLlxuICovXG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gUmVkaXJlY3QodG8sIHBhcmFtcywgcXVlcnkpIHtcbiAgdGhpcy50byA9IHRvO1xuICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZGlyZWN0O1xufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvUm91dGUuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCdyZWFjdC9saWIvT2JqZWN0LmFzc2lnbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgncmVhY3QvbGliL3dhcm5pbmcnKTtcbnZhciBQYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX2N1cnJlbnRSb3V0ZTtcblxudmFyIFJvdXRlID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUm91dGUobmFtZSwgcGF0aCwgaWdub3JlU2Nyb2xsQmVoYXZpb3IsIGlzRGVmYXVsdCwgaXNOb3RGb3VuZCwgb25FbnRlciwgb25MZWF2ZSwgaGFuZGxlcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgdGhpcy5wYXJhbU5hbWVzID0gUGF0aFV0aWxzLmV4dHJhY3RQYXJhbU5hbWVzKHRoaXMucGF0aCk7XG4gICAgdGhpcy5pZ25vcmVTY3JvbGxCZWhhdmlvciA9ICEhaWdub3JlU2Nyb2xsQmVoYXZpb3I7XG4gICAgdGhpcy5pc0RlZmF1bHQgPSAhIWlzRGVmYXVsdDtcbiAgICB0aGlzLmlzTm90Rm91bmQgPSAhIWlzTm90Rm91bmQ7XG4gICAgdGhpcy5vbkVudGVyID0gb25FbnRlcjtcbiAgICB0aGlzLm9uTGVhdmUgPSBvbkxlYXZlO1xuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUm91dGUsIFt7XG4gICAga2V5OiAnYXBwZW5kQ2hpbGQnLFxuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyB0aGUgZ2l2ZW4gcm91dGUgdG8gdGhpcyByb3V0ZSdzIGNoaWxkIHJvdXRlcy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kQ2hpbGQocm91dGUpIHtcbiAgICAgIGludmFyaWFudChyb3V0ZSBpbnN0YW5jZW9mIFJvdXRlLCAncm91dGUuYXBwZW5kQ2hpbGQgbXVzdCB1c2UgYSB2YWxpZCBSb3V0ZScpO1xuXG4gICAgICBpZiAoIXRoaXMuY2hpbGRSb3V0ZXMpIHRoaXMuY2hpbGRSb3V0ZXMgPSBbXTtcblxuICAgICAgdGhpcy5jaGlsZFJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgdmFyIHN0cmluZyA9ICc8Um91dGUnO1xuXG4gICAgICBpZiAodGhpcy5uYW1lKSBzdHJpbmcgKz0gJyBuYW1lPVwiJyArIHRoaXMubmFtZSArICdcIic7XG5cbiAgICAgIHN0cmluZyArPSAnIHBhdGg9XCInICsgdGhpcy5wYXRoICsgJ1wiPic7XG5cbiAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6ICdjcmVhdGVSb3V0ZScsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IHJvdXRlLiBPcHRpb25zIG1heSBiZSBhIFVSTCBwYXRobmFtZSBzdHJpbmdcbiAgICAgKiB3aXRoIHBsYWNlaG9sZGVycyBmb3IgbmFtZWQgcGFyYW1zIG9yIGFuIG9iamVjdCB3aXRoIGFueSBvZiB0aGUgZm9sbG93aW5nXG4gICAgICogcHJvcGVydGllczpcbiAgICAgKlxuICAgICAqIC0gbmFtZSAgICAgICAgICAgICAgICAgICAgIFRoZSBuYW1lIG9mIHRoZSByb3V0ZS4gVGhpcyBpcyB1c2VkIHRvIGxvb2t1cCBhXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGUgcmVsYXRpdmUgdG8gaXRzIHBhcmVudCByb3V0ZSBhbmQgc2hvdWxkIGJlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pcXVlIGFtb25nIGFsbCBjaGlsZCByb3V0ZXMgb2YgdGhlIHNhbWUgcGFyZW50XG4gICAgICogLSBwYXRoICAgICAgICAgICAgICAgICAgICAgQSBVUkwgcGF0aG5hbWUgc3RyaW5nIHdpdGggb3B0aW9uYWwgcGxhY2Vob2xkZXJzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBzcGVjaWZ5IHRoZSBuYW1lcyBvZiBwYXJhbXMgdG8gZXh0cmFjdCBmcm9tXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFVSTCB3aGVuIHRoZSBwYXRoIG1hdGNoZXMuIERlZmF1bHRzIHRvIGAvJHtuYW1lfWBcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZXJlIGlzIGEgbmFtZSBnaXZlbiwgb3IgdGhlIHBhdGggb2YgdGhlIHBhcmVudFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlLCBvciAvXG4gICAgICogLSBpZ25vcmVTY3JvbGxCZWhhdmlvciAgICAgVHJ1ZSB0byBtYWtlIHRoaXMgcm91dGUgKGFuZCBhbGwgZGVzY2VuZGFudHMpIGlnbm9yZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzY3JvbGwgYmVoYXZpb3Igb2YgdGhlIHJvdXRlclxuICAgICAqIC0gaXNEZWZhdWx0ICAgICAgICAgICAgICAgIFRydWUgdG8gbWFrZSB0aGlzIHJvdXRlIHRoZSBkZWZhdWx0IHJvdXRlIGFtb25nIGFsbFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0cyBzaWJsaW5nc1xuICAgICAqIC0gaXNOb3RGb3VuZCAgICAgICAgICAgICAgIFRydWUgdG8gbWFrZSB0aGlzIHJvdXRlIHRoZSBcIm5vdCBmb3VuZFwiIHJvdXRlIGFtb25nXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsIGl0cyBzaWJsaW5nc1xuICAgICAqIC0gb25FbnRlciAgICAgICAgICAgICAgICAgIEEgdHJhbnNpdGlvbiBob29rIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXIgaXMgZ29pbmcgdG8gZW50ZXIgdGhpcyByb3V0ZVxuICAgICAqIC0gb25MZWF2ZSAgICAgICAgICAgICAgICAgIEEgdHJhbnNpdGlvbiBob29rIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXIgaXMgZ29pbmcgdG8gbGVhdmUgdGhpcyByb3V0ZVxuICAgICAqIC0gaGFuZGxlciAgICAgICAgICAgICAgICAgIEEgUmVhY3QgY29tcG9uZW50IHRoYXQgd2lsbCBiZSByZW5kZXJlZCB3aGVuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyByb3V0ZSBpcyBhY3RpdmVcbiAgICAgKiAtIHBhcmVudFJvdXRlICAgICAgICAgICAgICBUaGUgcGFyZW50IHJvdXRlIHRvIHVzZSBmb3IgdGhpcyByb3V0ZS4gVGhpcyBvcHRpb25cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBhdXRvbWF0aWNhbGx5IHN1cHBsaWVkIHdoZW4gY3JlYXRpbmcgcm91dGVzIGluc2lkZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjYWxsYmFjayB0byBhbm90aGVyIGludm9jYXRpb24gb2YgY3JlYXRlUm91dGUuIFlvdVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ubHkgZXZlciBuZWVkIHRvIHVzZSB0aGlzIHdoZW4gZGVjbGFyaW5nIHJvdXRlc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVwZW5kZW50bHkgb2Ygb25lIGFub3RoZXIgdG8gbWFudWFsbHkgcGllY2UgdG9nZXRoZXJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcm91dGUgaGllcmFyY2h5XG4gICAgICpcbiAgICAgKiBUaGUgY2FsbGJhY2sgbWF5IGJlIHVzZWQgdG8gc3RydWN0dXJlIHlvdXIgcm91dGUgaGllcmFyY2h5LiBBbnkgY2FsbCB0b1xuICAgICAqIGNyZWF0ZVJvdXRlLCBjcmVhdGVEZWZhdWx0Um91dGUsIGNyZWF0ZU5vdEZvdW5kUm91dGUsIG9yIGNyZWF0ZVJlZGlyZWN0XG4gICAgICogaW5zaWRlIHRoZSBjYWxsYmFjayBhdXRvbWF0aWNhbGx5IHVzZXMgdGhpcyByb3V0ZSBhcyBpdHMgcGFyZW50LlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVSb3V0ZShvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIG9wdGlvbnMgPSB7IHBhdGg6IG9wdGlvbnMgfTtcblxuICAgICAgdmFyIHBhcmVudFJvdXRlID0gX2N1cnJlbnRSb3V0ZTtcblxuICAgICAgaWYgKHBhcmVudFJvdXRlKSB7XG4gICAgICAgIHdhcm5pbmcob3B0aW9ucy5wYXJlbnRSb3V0ZSA9PSBudWxsIHx8IG9wdGlvbnMucGFyZW50Um91dGUgPT09IHBhcmVudFJvdXRlLCAnWW91IHNob3VsZCBub3QgdXNlIHBhcmVudFJvdXRlIHdpdGggY3JlYXRlUm91dGUgaW5zaWRlIGFub3RoZXIgcm91dGVcXCdzIGNoaWxkIGNhbGxiYWNrOyBpdCBpcyBpZ25vcmVkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRSb3V0ZSA9IG9wdGlvbnMucGFyZW50Um91dGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lO1xuICAgICAgdmFyIHBhdGggPSBvcHRpb25zLnBhdGggfHwgbmFtZTtcblxuICAgICAgaWYgKHBhdGggJiYgIShvcHRpb25zLmlzRGVmYXVsdCB8fCBvcHRpb25zLmlzTm90Rm91bmQpKSB7XG4gICAgICAgIGlmIChQYXRoVXRpbHMuaXNBYnNvbHV0ZShwYXRoKSkge1xuICAgICAgICAgIGlmIChwYXJlbnRSb3V0ZSkge1xuICAgICAgICAgICAgaW52YXJpYW50KHBhdGggPT09IHBhcmVudFJvdXRlLnBhdGggfHwgcGFyZW50Um91dGUucGFyYW1OYW1lcy5sZW5ndGggPT09IDAsICdZb3UgY2Fubm90IG5lc3QgcGF0aCBcIiVzXCIgaW5zaWRlIFwiJXNcIjsgdGhlIHBhcmVudCByZXF1aXJlcyBVUkwgcGFyYW1ldGVycycsIHBhdGgsIHBhcmVudFJvdXRlLnBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwYXJlbnRSb3V0ZSkge1xuICAgICAgICAgIC8vIFJlbGF0aXZlIHBhdGhzIGV4dGVuZCB0aGVpciBwYXJlbnQuXG4gICAgICAgICAgcGF0aCA9IFBhdGhVdGlscy5qb2luKHBhcmVudFJvdXRlLnBhdGgsIHBhdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhdGggPSAnLycgKyBwYXRoO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXRoID0gcGFyZW50Um91dGUgPyBwYXJlbnRSb3V0ZS5wYXRoIDogJy8nO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5pc05vdEZvdW5kICYmICEvXFwqJC8udGVzdChwYXRoKSkgcGF0aCArPSAnKic7IC8vIEF1dG8tYXBwZW5kICogdG8gdGhlIHBhdGggb2Ygbm90IGZvdW5kIHJvdXRlcy5cblxuICAgICAgdmFyIHJvdXRlID0gbmV3IFJvdXRlKG5hbWUsIHBhdGgsIG9wdGlvbnMuaWdub3JlU2Nyb2xsQmVoYXZpb3IsIG9wdGlvbnMuaXNEZWZhdWx0LCBvcHRpb25zLmlzTm90Rm91bmQsIG9wdGlvbnMub25FbnRlciwgb3B0aW9ucy5vbkxlYXZlLCBvcHRpb25zLmhhbmRsZXIpO1xuXG4gICAgICBpZiAocGFyZW50Um91dGUpIHtcbiAgICAgICAgaWYgKHJvdXRlLmlzRGVmYXVsdCkge1xuICAgICAgICAgIGludmFyaWFudChwYXJlbnRSb3V0ZS5kZWZhdWx0Um91dGUgPT0gbnVsbCwgJyVzIG1heSBub3QgaGF2ZSBtb3JlIHRoYW4gb25lIGRlZmF1bHQgcm91dGUnLCBwYXJlbnRSb3V0ZSk7XG5cbiAgICAgICAgICBwYXJlbnRSb3V0ZS5kZWZhdWx0Um91dGUgPSByb3V0ZTtcbiAgICAgICAgfSBlbHNlIGlmIChyb3V0ZS5pc05vdEZvdW5kKSB7XG4gICAgICAgICAgaW52YXJpYW50KHBhcmVudFJvdXRlLm5vdEZvdW5kUm91dGUgPT0gbnVsbCwgJyVzIG1heSBub3QgaGF2ZSBtb3JlIHRoYW4gb25lIG5vdCBmb3VuZCByb3V0ZScsIHBhcmVudFJvdXRlKTtcblxuICAgICAgICAgIHBhcmVudFJvdXRlLm5vdEZvdW5kUm91dGUgPSByb3V0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudFJvdXRlLmFwcGVuZENoaWxkKHJvdXRlKTtcbiAgICAgIH1cblxuICAgICAgLy8gQW55IHJvdXRlcyBjcmVhdGVkIGluIHRoZSBjYWxsYmFja1xuICAgICAgLy8gdXNlIHRoaXMgcm91dGUgYXMgdGhlaXIgcGFyZW50LlxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgY3VycmVudFJvdXRlID0gX2N1cnJlbnRSb3V0ZTtcbiAgICAgICAgX2N1cnJlbnRSb3V0ZSA9IHJvdXRlO1xuICAgICAgICBjYWxsYmFjay5jYWxsKHJvdXRlLCByb3V0ZSk7XG4gICAgICAgIF9jdXJyZW50Um91dGUgPSBjdXJyZW50Um91dGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByb3V0ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVEZWZhdWx0Um91dGUnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIHJvdXRlIHRoYXQgaXMgcmVuZGVyZWQgd2hlbiBpdHMgcGFyZW50IG1hdGNoZXNcbiAgICAgKiB0aGUgY3VycmVudCBVUkwuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRSb3V0ZShvcHRpb25zKSB7XG4gICAgICByZXR1cm4gUm91dGUuY3JlYXRlUm91dGUoYXNzaWduKHt9LCBvcHRpb25zLCB7IGlzRGVmYXVsdDogdHJ1ZSB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlTm90Rm91bmRSb3V0ZScsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgcm91dGUgdGhhdCBpcyByZW5kZXJlZCB3aGVuIGl0cyBwYXJlbnQgbWF0Y2hlc1xuICAgICAqIHRoZSBjdXJyZW50IFVSTCBidXQgbm9uZSBvZiBpdHMgc2libGluZ3MgZG8uXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZU5vdEZvdW5kUm91dGUob3B0aW9ucykge1xuICAgICAgcmV0dXJuIFJvdXRlLmNyZWF0ZVJvdXRlKGFzc2lnbih7fSwgb3B0aW9ucywgeyBpc05vdEZvdW5kOiB0cnVlIH0pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVSZWRpcmVjdCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgcm91dGUgdGhhdCBhdXRvbWF0aWNhbGx5IHJlZGlyZWN0cyB0aGUgdHJhbnNpdGlvblxuICAgICAqIHRvIGFub3RoZXIgcm91dGUuIEluIGFkZGl0aW9uIHRvIHRoZSBub3JtYWwgb3B0aW9ucyB0byBjcmVhdGVSb3V0ZSwgdGhpc1xuICAgICAqIGZ1bmN0aW9uIGFjY2VwdHMgdGhlIGZvbGxvd2luZyBvcHRpb25zOlxuICAgICAqXG4gICAgICogLSBmcm9tICAgICAgICAgQW4gYWxpYXMgZm9yIHRoZSBgcGF0aGAgb3B0aW9uLiBEZWZhdWx0cyB0byAqXG4gICAgICogLSB0byAgICAgICAgICAgVGhlIHBhdGgvcm91dGUvcm91dGUgbmFtZSB0byByZWRpcmVjdCB0b1xuICAgICAqIC0gcGFyYW1zICAgICAgIFRoZSBwYXJhbXMgdG8gdXNlIGluIHRoZSByZWRpcmVjdCBVUkwuIERlZmF1bHRzXG4gICAgICogICAgICAgICAgICAgICAgdG8gdXNpbmcgdGhlIGN1cnJlbnQgcGFyYW1zXG4gICAgICogLSBxdWVyeSAgICAgICAgVGhlIHF1ZXJ5IHRvIHVzZSBpbiB0aGUgcmVkaXJlY3QgVVJMLiBEZWZhdWx0c1xuICAgICAqICAgICAgICAgICAgICAgIHRvIHVzaW5nIHRoZSBjdXJyZW50IHF1ZXJ5XG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVJlZGlyZWN0KG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBSb3V0ZS5jcmVhdGVSb3V0ZShhc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICAgICAgcGF0aDogb3B0aW9ucy5wYXRoIHx8IG9wdGlvbnMuZnJvbSB8fCAnKicsXG4gICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uIG9uRW50ZXIodHJhbnNpdGlvbiwgcGFyYW1zLCBxdWVyeSkge1xuICAgICAgICAgIHRyYW5zaXRpb24ucmVkaXJlY3Qob3B0aW9ucy50bywgb3B0aW9ucy5wYXJhbXMgfHwgcGFyYW1zLCBvcHRpb25zLnF1ZXJ5IHx8IHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSb3V0ZTtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUm91dGU7XG59LHtcIi4vUGF0aFV0aWxzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvUGF0aFV0aWxzLmpzXCIsXCJyZWFjdC9saWIvT2JqZWN0LmFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1wiLFwicmVhY3QvbGliL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCJyZWFjdC9saWIvd2FybmluZ1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvd2FybmluZy5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvU2Nyb2xsSGlzdG9yeS5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9pbnZhcmlhbnQnKTtcbnZhciBjYW5Vc2VET00gPSByZXF1aXJlKCdyZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKS5jYW5Vc2VET007XG52YXIgZ2V0V2luZG93U2Nyb2xsUG9zaXRpb24gPSByZXF1aXJlKCcuL2dldFdpbmRvd1Njcm9sbFBvc2l0aW9uJyk7XG5cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVNjcm9sbChzdGF0ZSwgcHJldlN0YXRlKSB7XG4gIGlmICghcHJldlN0YXRlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gRG9uJ3QgdXBkYXRlIHNjcm9sbCBwb3NpdGlvbiB3aGVuIG9ubHkgdGhlIHF1ZXJ5IGhhcyBjaGFuZ2VkLlxuICBpZiAoc3RhdGUucGF0aG5hbWUgPT09IHByZXZTdGF0ZS5wYXRobmFtZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfXZhciByb3V0ZXMgPSBzdGF0ZS5yb3V0ZXM7XG4gIHZhciBwcmV2Um91dGVzID0gcHJldlN0YXRlLnJvdXRlcztcblxuICB2YXIgc2hhcmVkQW5jZXN0b3JSb3V0ZXMgPSByb3V0ZXMuZmlsdGVyKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIHJldHVybiBwcmV2Um91dGVzLmluZGV4T2Yocm91dGUpICE9PSAtMTtcbiAgfSk7XG5cbiAgcmV0dXJuICFzaGFyZWRBbmNlc3RvclJvdXRlcy5zb21lKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIHJldHVybiByb3V0ZS5pZ25vcmVTY3JvbGxCZWhhdmlvcjtcbiAgfSk7XG59XG5cbi8qKlxuICogUHJvdmlkZXMgdGhlIHJvdXRlciB3aXRoIHRoZSBhYmlsaXR5IHRvIG1hbmFnZSB3aW5kb3cgc2Nyb2xsIHBvc2l0aW9uXG4gKiBhY2NvcmRpbmcgdG8gaXRzIHNjcm9sbCBiZWhhdmlvci5cbiAqL1xudmFyIFNjcm9sbEhpc3RvcnkgPSB7XG5cbiAgc3RhdGljczoge1xuXG4gICAgLyoqXG4gICAgICogUmVjb3JkcyBjdXJlbnQgc2Nyb2xsIHBvc2l0aW9uIGFzIHRoZSBsYXN0IGtub3duIHBvc2l0aW9uIGZvciB0aGUgZ2l2ZW4gVVJMIHBhdGguXG4gICAgICovXG4gICAgcmVjb3JkU2Nyb2xsUG9zaXRpb246IGZ1bmN0aW9uIHJlY29yZFNjcm9sbFBvc2l0aW9uKHBhdGgpIHtcbiAgICAgIGlmICghdGhpcy5zY3JvbGxIaXN0b3J5KSB0aGlzLnNjcm9sbEhpc3RvcnkgPSB7fTtcblxuICAgICAgdGhpcy5zY3JvbGxIaXN0b3J5W3BhdGhdID0gZ2V0V2luZG93U2Nyb2xsUG9zaXRpb24oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGFzdCBrbm93biBzY3JvbGwgcG9zaXRpb24gZm9yIHRoZSBnaXZlbiBVUkwgcGF0aC5cbiAgICAgKi9cbiAgICBnZXRTY3JvbGxQb3NpdGlvbjogZnVuY3Rpb24gZ2V0U2Nyb2xsUG9zaXRpb24ocGF0aCkge1xuICAgICAgaWYgKCF0aGlzLnNjcm9sbEhpc3RvcnkpIHRoaXMuc2Nyb2xsSGlzdG9yeSA9IHt9O1xuXG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGxIaXN0b3J5W3BhdGhdIHx8IG51bGw7XG4gICAgfVxuXG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29uc3RydWN0b3IuZ2V0U2Nyb2xsQmVoYXZpb3IoKSA9PSBudWxsIHx8IGNhblVzZURPTSwgJ0Nhbm5vdCB1c2Ugc2Nyb2xsIGJlaGF2aW9yIHdpdGhvdXQgYSBET00nKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fdXBkYXRlU2Nyb2xsKCk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICB0aGlzLl91cGRhdGVTY3JvbGwocHJldlN0YXRlKTtcbiAgfSxcblxuICBfdXBkYXRlU2Nyb2xsOiBmdW5jdGlvbiBfdXBkYXRlU2Nyb2xsKHByZXZTdGF0ZSkge1xuICAgIGlmICghc2hvdWxkVXBkYXRlU2Nyb2xsKHRoaXMuc3RhdGUsIHByZXZTdGF0ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9dmFyIHNjcm9sbEJlaGF2aW9yID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXRTY3JvbGxCZWhhdmlvcigpO1xuXG4gICAgaWYgKHNjcm9sbEJlaGF2aW9yKSBzY3JvbGxCZWhhdmlvci51cGRhdGVTY3JvbGxQb3NpdGlvbih0aGlzLmNvbnN0cnVjdG9yLmdldFNjcm9sbFBvc2l0aW9uKHRoaXMuc3RhdGUucGF0aCksIHRoaXMuc3RhdGUuYWN0aW9uKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNjcm9sbEhpc3Rvcnk7XG59LHtcIi4vZ2V0V2luZG93U2Nyb2xsUG9zaXRpb25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9nZXRXaW5kb3dTY3JvbGxQb3NpdGlvbi5qc1wiLFwicmVhY3QvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qc1wiLFwicmVhY3QvbGliL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9TdGF0ZS5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJy4vUHJvcFR5cGVzJyk7XG5cbi8qKlxuICogQSBtaXhpbiBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8ga25vdyB0aGUgcGF0aCwgcm91dGVzLCBVUkxcbiAqIHBhcmFtcyBhbmQgcXVlcnkgdGhhdCBhcmUgY3VycmVudGx5IGFjdGl2ZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgdmFyIEFib3V0TGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgICBtaXhpbnM6IFsgUm91dGVyLlN0YXRlIF0sXG4gKiAgICAgcmVuZGVyKCkge1xuICogICAgICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMucHJvcHMuY2xhc3NOYW1lO1xuICpcbiAqICAgICAgIGlmICh0aGlzLmlzQWN0aXZlKCdhYm91dCcpKVxuICogICAgICAgICBjbGFzc05hbWUgKz0gJyBpcy1hY3RpdmUnO1xuICpcbiAqICAgICAgIHJldHVybiBSZWFjdC5ET00uYSh7IGNsYXNzTmFtZTogY2xhc3NOYW1lIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICogICAgIH1cbiAqICAgfSk7XG4gKi9cbnZhciBTdGF0ZSA9IHtcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICByb3V0ZXI6IFByb3BUeXBlcy5yb3V0ZXIuaXNSZXF1aXJlZFxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IFVSTCBwYXRoLlxuICAgKi9cbiAgZ2V0UGF0aDogZnVuY3Rpb24gZ2V0UGF0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlci5nZXRDdXJyZW50UGF0aCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IFVSTCBwYXRoIHdpdGhvdXQgdGhlIHF1ZXJ5IHN0cmluZy5cbiAgICovXG4gIGdldFBhdGhuYW1lOiBmdW5jdGlvbiBnZXRQYXRobmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlci5nZXRDdXJyZW50UGF0aG5hbWUoKTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3Qgb2YgdGhlIFVSTCBwYXJhbXMgdGhhdCBhcmUgY3VycmVudGx5IGFjdGl2ZS5cbiAgICovXG4gIGdldFBhcmFtczogZnVuY3Rpb24gZ2V0UGFyYW1zKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQucm91dGVyLmdldEN1cnJlbnRQYXJhbXMoKTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3Qgb2YgdGhlIHF1ZXJ5IHBhcmFtcyB0aGF0IGFyZSBjdXJyZW50bHkgYWN0aXZlLlxuICAgKi9cbiAgZ2V0UXVlcnk6IGZ1bmN0aW9uIGdldFF1ZXJ5KCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQucm91dGVyLmdldEN1cnJlbnRRdWVyeSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByb3V0ZXMgdGhhdCBhcmUgY3VycmVudGx5IGFjdGl2ZS5cbiAgICovXG4gIGdldFJvdXRlczogZnVuY3Rpb24gZ2V0Um91dGVzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQucm91dGVyLmdldEN1cnJlbnRSb3V0ZXMoKTtcbiAgfSxcblxuICAvKipcbiAgICogQSBoZWxwZXIgbWV0aG9kIHRvIGRldGVybWluZSBpZiBhIGdpdmVuIHJvdXRlLCBwYXJhbXMsIGFuZCBxdWVyeVxuICAgKiBhcmUgYWN0aXZlLlxuICAgKi9cbiAgaXNBY3RpdmU6IGZ1bmN0aW9uIGlzQWN0aXZlKHRvLCBwYXJhbXMsIHF1ZXJ5KSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5yb3V0ZXIuaXNBY3RpdmUodG8sIHBhcmFtcywgcXVlcnkpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhdGU7XG59LHtcIi4vUHJvcFR5cGVzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvUHJvcFR5cGVzLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9UcmFuc2l0aW9uLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoganNoaW50IC1XMDU4ICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbGxhdGlvbiA9IHJlcXVpcmUoJy4vQ2FuY2VsbGF0aW9uJyk7XG52YXIgUmVkaXJlY3QgPSByZXF1aXJlKCcuL1JlZGlyZWN0Jyk7XG5cbi8qKlxuICogRW5jYXBzdWxhdGVzIGEgdHJhbnNpdGlvbiB0byBhIGdpdmVuIHBhdGguXG4gKlxuICogVGhlIHdpbGxUcmFuc2l0aW9uVG8gYW5kIHdpbGxUcmFuc2l0aW9uRnJvbSBoYW5kbGVycyByZWNlaXZlXG4gKiBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGFzIHRoZWlyIGZpcnN0IGFyZ3VtZW50LlxuICovXG5mdW5jdGlvbiBUcmFuc2l0aW9uKHBhdGgsIHJldHJ5KSB7XG4gIHRoaXMucGF0aCA9IHBhdGg7XG4gIHRoaXMuYWJvcnRSZWFzb24gPSBudWxsO1xuICAvLyBUT0RPOiBDaGFuZ2UgdGhpcyB0byByb3V0ZXIucmV0cnlUcmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gIHRoaXMucmV0cnkgPSByZXRyeS5iaW5kKHRoaXMpO1xufVxuXG5UcmFuc2l0aW9uLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgaWYgKHRoaXMuYWJvcnRSZWFzb24gPT0gbnVsbCkgdGhpcy5hYm9ydFJlYXNvbiA9IHJlYXNvbiB8fCAnQUJPUlQnO1xufTtcblxuVHJhbnNpdGlvbi5wcm90b3R5cGUucmVkaXJlY3QgPSBmdW5jdGlvbiAodG8sIHBhcmFtcywgcXVlcnkpIHtcbiAgdGhpcy5hYm9ydChuZXcgUmVkaXJlY3QodG8sIHBhcmFtcywgcXVlcnkpKTtcbn07XG5cblRyYW5zaXRpb24ucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hYm9ydChuZXcgQ2FuY2VsbGF0aW9uKCkpO1xufTtcblxuVHJhbnNpdGlvbi5mcm9tID0gZnVuY3Rpb24gKHRyYW5zaXRpb24sIHJvdXRlcywgY29tcG9uZW50cywgY2FsbGJhY2spIHtcbiAgcm91dGVzLnJlZHVjZShmdW5jdGlvbiAoY2FsbGJhY2ssIHJvdXRlLCBpbmRleCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciB8fCB0cmFuc2l0aW9uLmFib3J0UmVhc29uKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgIH0gZWxzZSBpZiAocm91dGUub25MZWF2ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJvdXRlLm9uTGVhdmUodHJhbnNpdGlvbiwgY29tcG9uZW50c1tpbmRleF0sIGNhbGxiYWNrKTtcblxuICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGNhbGxiYWNrIGluIHRoZSBhcmd1bWVudCBsaXN0LCBjYWxsIGl0IGF1dG9tYXRpY2FsbHkuXG4gICAgICAgICAgaWYgKHJvdXRlLm9uTGVhdmUubGVuZ3RoIDwgMykgY2FsbGJhY2soKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNhbGxiYWNrKGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIGNhbGxiYWNrKSgpO1xufTtcblxuVHJhbnNpdGlvbi50byA9IGZ1bmN0aW9uICh0cmFuc2l0aW9uLCByb3V0ZXMsIHBhcmFtcywgcXVlcnksIGNhbGxiYWNrKSB7XG4gIHJvdXRlcy5yZWR1Y2VSaWdodChmdW5jdGlvbiAoY2FsbGJhY2ssIHJvdXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgaWYgKGVycm9yIHx8IHRyYW5zaXRpb24uYWJvcnRSZWFzb24pIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgfSBlbHNlIGlmIChyb3V0ZS5vbkVudGVyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcm91dGUub25FbnRlcih0cmFuc2l0aW9uLCBwYXJhbXMsIHF1ZXJ5LCBjYWxsYmFjayk7XG5cbiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBjYWxsYmFjayBpbiB0aGUgYXJndW1lbnQgbGlzdCwgY2FsbCBpdCBhdXRvbWF0aWNhbGx5LlxuICAgICAgICAgIGlmIChyb3V0ZS5vbkVudGVyLmxlbmd0aCA8IDQpIGNhbGxiYWNrKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjYWxsYmFjayhlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBjYWxsYmFjaykoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNpdGlvbjtcbn0se1wiLi9DYW5jZWxsYXRpb25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9DYW5jZWxsYXRpb24uanNcIixcIi4vUmVkaXJlY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9SZWRpcmVjdC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvYWN0aW9ucy9Mb2NhdGlvbkFjdGlvbnMuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEFjdGlvbnMgdGhhdCBtb2RpZnkgdGhlIFVSTC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTG9jYXRpb25BY3Rpb25zID0ge1xuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgYSBuZXcgbG9jYXRpb24gaXMgYmVpbmcgcHVzaGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrLlxuICAgKi9cbiAgUFVTSDogJ3B1c2gnLFxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gc2hvdWxkIGJlIHJlcGxhY2VkLlxuICAgKi9cbiAgUkVQTEFDRTogJ3JlcGxhY2UnLFxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhlIG1vc3QgcmVjZW50IGVudHJ5IHNob3VsZCBiZSByZW1vdmVkIGZyb20gdGhlIGhpc3Rvcnkgc3RhY2suXG4gICAqL1xuICBQT1A6ICdwb3AnXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTG9jYXRpb25BY3Rpb25zO1xufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvYmVoYXZpb3JzL0ltaXRhdGVCcm93c2VyQmVoYXZpb3IuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBMb2NhdGlvbkFjdGlvbnMgPSByZXF1aXJlKCcuLi9hY3Rpb25zL0xvY2F0aW9uQWN0aW9ucycpO1xuXG4vKipcbiAqIEEgc2Nyb2xsIGJlaGF2aW9yIHRoYXQgYXR0ZW1wdHMgdG8gaW1pdGF0ZSB0aGUgZGVmYXVsdCBiZWhhdmlvclxuICogb2YgbW9kZXJuIGJyb3dzZXJzLlxuICovXG52YXIgSW1pdGF0ZUJyb3dzZXJCZWhhdmlvciA9IHtcblxuICB1cGRhdGVTY3JvbGxQb3NpdGlvbjogZnVuY3Rpb24gdXBkYXRlU2Nyb2xsUG9zaXRpb24ocG9zaXRpb24sIGFjdGlvblR5cGUpIHtcbiAgICBzd2l0Y2ggKGFjdGlvblR5cGUpIHtcbiAgICAgIGNhc2UgTG9jYXRpb25BY3Rpb25zLlBVU0g6XG4gICAgICBjYXNlIExvY2F0aW9uQWN0aW9ucy5SRVBMQUNFOlxuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2NhdGlvbkFjdGlvbnMuUE9QOlxuICAgICAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEltaXRhdGVCcm93c2VyQmVoYXZpb3I7XG59LHtcIi4uL2FjdGlvbnMvTG9jYXRpb25BY3Rpb25zXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvYWN0aW9ucy9Mb2NhdGlvbkFjdGlvbnMuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2JlaGF2aW9ycy9TY3JvbGxUb1RvcEJlaGF2aW9yLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBBIHNjcm9sbCBiZWhhdmlvciB0aGF0IGFsd2F5cyBzY3JvbGxzIHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2VcbiAqIGFmdGVyIGEgdHJhbnNpdGlvbi5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBTY3JvbGxUb1RvcEJlaGF2aW9yID0ge1xuXG4gIHVwZGF0ZVNjcm9sbFBvc2l0aW9uOiBmdW5jdGlvbiB1cGRhdGVTY3JvbGxQb3NpdGlvbigpIHtcbiAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTY3JvbGxUb1RvcEJlaGF2aW9yO1xufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9Db250ZXh0V3JhcHBlci5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9pbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH07XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgaXMgbmVjZXNzYXJ5IHRvIGdldCBhcm91bmQgYSBjb250ZXh0IHdhcm5pbmdcbiAqIHByZXNlbnQgaW4gUmVhY3QgMC4xMy4wLiBJdCBzb3ZsZXMgdGhpcyBieSBwcm92aWRpbmcgYSBzZXBhcmF0aW9uXG4gKiBiZXR3ZWVuIHRoZSBcIm93bmVyXCIgYW5kIFwicGFyZW50XCIgY29udGV4dHMuXG4gKi9cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIENvbnRleHRXcmFwcGVyID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIENvbnRleHRXcmFwcGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb250ZXh0V3JhcHBlcik7XG5cbiAgICBpZiAoX1JlYWN0JENvbXBvbmVudCAhPSBudWxsKSB7XG4gICAgICBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgX2luaGVyaXRzKENvbnRleHRXcmFwcGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBfY3JlYXRlQ2xhc3MoQ29udGV4dFdyYXBwZXIsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbnRleHRXcmFwcGVyO1xufSkoUmVhY3QuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb250ZXh0V3JhcHBlcjtcbn0se1wicmVhY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2NvbXBvbmVudHMvRGVmYXVsdFJvdXRlLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9O1xuXG52YXIgX2luaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfTtcblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJy4uL1Byb3BUeXBlcycpO1xudmFyIFJvdXRlSGFuZGxlciA9IHJlcXVpcmUoJy4vUm91dGVIYW5kbGVyJyk7XG52YXIgUm91dGUgPSByZXF1aXJlKCcuL1JvdXRlJyk7XG5cbi8qKlxuICogQSA8RGVmYXVsdFJvdXRlPiBjb21wb25lbnQgaXMgYSBzcGVjaWFsIGtpbmQgb2YgPFJvdXRlPiB0aGF0XG4gKiByZW5kZXJzIHdoZW4gaXRzIHBhcmVudCBtYXRjaGVzIGJ1dCBub25lIG9mIGl0cyBzaWJsaW5ncyBkby5cbiAqIE9ubHkgb25lIHN1Y2ggcm91dGUgbWF5IGJlIHVzZWQgYXQgYW55IGdpdmVuIGxldmVsIGluIHRoZVxuICogcm91dGUgaGllcmFyY2h5LlxuICovXG5cbnZhciBEZWZhdWx0Um91dGUgPSAoZnVuY3Rpb24gKF9Sb3V0ZSkge1xuICBmdW5jdGlvbiBEZWZhdWx0Um91dGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlZmF1bHRSb3V0ZSk7XG5cbiAgICBpZiAoX1JvdXRlICE9IG51bGwpIHtcbiAgICAgIF9Sb3V0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIF9pbmhlcml0cyhEZWZhdWx0Um91dGUsIF9Sb3V0ZSk7XG5cbiAgcmV0dXJuIERlZmF1bHRSb3V0ZTtcbn0pKFJvdXRlKTtcblxuLy8gVE9ETzogSW5jbHVkZSB0aGVzZSBpbiB0aGUgYWJvdmUgY2xhc3MgZGVmaW5pdGlvblxuLy8gb25jZSB3ZSBjYW4gdXNlIEVTNyBwcm9wZXJ0eSBpbml0aWFsaXplcnMuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmFiZWwvYmFiZWwvaXNzdWVzLzYxOVxuXG5EZWZhdWx0Um91dGUucHJvcFR5cGVzID0ge1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBwYXRoOiBQcm9wVHlwZXMuZmFsc3ksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZmFsc3ksXG4gIGhhbmRsZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn07XG5cbkRlZmF1bHRSb3V0ZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGhhbmRsZXI6IFJvdXRlSGFuZGxlclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWZhdWx0Um91dGU7XG59LHtcIi4uL1Byb3BUeXBlc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1Byb3BUeXBlcy5qc1wiLFwiLi9Sb3V0ZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2NvbXBvbmVudHMvUm91dGUuanNcIixcIi4vUm91dGVIYW5kbGVyXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9Sb3V0ZUhhbmRsZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2NvbXBvbmVudHMvTGluay5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9pbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH07XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgncmVhY3QvbGliL09iamVjdC5hc3NpZ24nKTtcbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCcuLi9Qcm9wVHlwZXMnKTtcblxuZnVuY3Rpb24gaXNMZWZ0Q2xpY2tFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuYnV0dG9uID09PSAwO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG4vKipcbiAqIDxMaW5rPiBjb21wb25lbnRzIGFyZSB1c2VkIHRvIGNyZWF0ZSBhbiA8YT4gZWxlbWVudCB0aGF0IGxpbmtzIHRvIGEgcm91dGUuXG4gKiBXaGVuIHRoYXQgcm91dGUgaXMgYWN0aXZlLCB0aGUgbGluayBnZXRzIGFuIFwiYWN0aXZlXCIgY2xhc3MgbmFtZSAob3IgdGhlXG4gKiB2YWx1ZSBvZiBpdHMgYGFjdGl2ZUNsYXNzTmFtZWAgcHJvcCkuXG4gKlxuICogRm9yIGV4YW1wbGUsIGFzc3VtaW5nIHlvdSBoYXZlIHRoZSBmb2xsb3dpbmcgcm91dGU6XG4gKlxuICogICA8Um91dGUgbmFtZT1cInNob3dQb3N0XCIgcGF0aD1cIi9wb3N0cy86cG9zdElEXCIgaGFuZGxlcj17UG9zdH0vPlxuICpcbiAqIFlvdSBjb3VsZCB1c2UgdGhlIGZvbGxvd2luZyBjb21wb25lbnQgdG8gbGluayB0byB0aGF0IHJvdXRlOlxuICpcbiAqICAgPExpbmsgdG89XCJzaG93UG9zdFwiIHBhcmFtcz17eyBwb3N0SUQ6IFwiMTIzXCIgfX0gLz5cbiAqXG4gKiBJbiBhZGRpdGlvbiB0byBwYXJhbXMsIGxpbmtzIG1heSBwYXNzIGFsb25nIHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXJzXG4gKiB1c2luZyB0aGUgYHF1ZXJ5YCBwcm9wLlxuICpcbiAqICAgPExpbmsgdG89XCJzaG93UG9zdFwiIHBhcmFtcz17eyBwb3N0SUQ6IFwiMTIzXCIgfX0gcXVlcnk9e3sgc2hvdzp0cnVlIH19Lz5cbiAqL1xuXG52YXIgTGluayA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBmdW5jdGlvbiBMaW5rKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIGlmIChfUmVhY3QkQ29tcG9uZW50ICE9IG51bGwpIHtcbiAgICAgIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBfaW5oZXJpdHMoTGluaywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgX2NyZWF0ZUNsYXNzKExpbmssIFt7XG4gICAga2V5OiAnaGFuZGxlQ2xpY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgICAgdmFyIGFsbG93VHJhbnNpdGlvbiA9IHRydWU7XG4gICAgICB2YXIgY2xpY2tSZXN1bHQ7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2spIGNsaWNrUmVzdWx0ID0gdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcblxuICAgICAgaWYgKGlzTW9kaWZpZWRFdmVudChldmVudCkgfHwgIWlzTGVmdENsaWNrRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1pZiAoY2xpY2tSZXN1bHQgPT09IGZhbHNlIHx8IGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPT09IHRydWUpIGFsbG93VHJhbnNpdGlvbiA9IGZhbHNlO1xuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAoYWxsb3dUcmFuc2l0aW9uKSB0aGlzLmNvbnRleHQucm91dGVyLnRyYW5zaXRpb25Ubyh0aGlzLnByb3BzLnRvLCB0aGlzLnByb3BzLnBhcmFtcywgdGhpcy5wcm9wcy5xdWVyeSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0SHJlZicsXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgXCJocmVmXCIgYXR0cmlidXRlIHRvIHVzZSBvbiB0aGUgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEhyZWYoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlci5tYWtlSHJlZih0aGlzLnByb3BzLnRvLCB0aGlzLnByb3BzLnBhcmFtcywgdGhpcy5wcm9wcy5xdWVyeSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q2xhc3NOYW1lJyxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBcImNsYXNzXCIgYXR0cmlidXRlIHRvIHVzZSBvbiB0aGUgRE9NIGVsZW1lbnQsIHdoaWNoIGNvbnRhaW5zXG4gICAgICogdGhlIHZhbHVlIG9mIHRoZSBhY3RpdmVDbGFzc05hbWUgcHJvcGVydHkgd2hlbiB0aGlzIDxMaW5rPiBpcyBhY3RpdmUuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENsYXNzTmFtZSgpIHtcbiAgICAgIHZhciBjbGFzc05hbWUgPSB0aGlzLnByb3BzLmNsYXNzTmFtZTtcblxuICAgICAgaWYgKHRoaXMuZ2V0QWN0aXZlU3RhdGUoKSkgY2xhc3NOYW1lICs9ICcgJyArIHRoaXMucHJvcHMuYWN0aXZlQ2xhc3NOYW1lO1xuXG4gICAgICByZXR1cm4gY2xhc3NOYW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEFjdGl2ZVN0YXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWN0aXZlU3RhdGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlci5pc0FjdGl2ZSh0aGlzLnByb3BzLnRvLCB0aGlzLnByb3BzLnBhcmFtcywgdGhpcy5wcm9wcy5xdWVyeSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHByb3BzID0gYXNzaWduKHt9LCB0aGlzLnByb3BzLCB7XG4gICAgICAgIGhyZWY6IHRoaXMuZ2V0SHJlZigpLFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0Q2xhc3NOYW1lKCksXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChwcm9wcy5hY3RpdmVTdHlsZSAmJiB0aGlzLmdldEFjdGl2ZVN0YXRlKCkpIHByb3BzLnN0eWxlID0gcHJvcHMuYWN0aXZlU3R5bGU7XG5cbiAgICAgIHJldHVybiBSZWFjdC5ET00uYShwcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExpbms7XG59KShSZWFjdC5Db21wb25lbnQpO1xuXG4vLyBUT0RPOiBJbmNsdWRlIHRoZXNlIGluIHRoZSBhYm92ZSBjbGFzcyBkZWZpbml0aW9uXG4vLyBvbmNlIHdlIGNhbiB1c2UgRVM3IHByb3BlcnR5IGluaXRpYWxpemVycy5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iYWJlbC9iYWJlbC9pc3N1ZXMvNjE5XG5cbkxpbmsuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5yb3V0ZXIuaXNSZXF1aXJlZFxufTtcblxuTGluay5wcm9wVHlwZXMgPSB7XG4gIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLnJvdXRlXSkuaXNSZXF1aXJlZCxcbiAgcGFyYW1zOiBQcm9wVHlwZXMub2JqZWN0LFxuICBxdWVyeTogUHJvcFR5cGVzLm9iamVjdCxcbiAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jXG59O1xuXG5MaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlQ2xhc3NOYW1lOiAnYWN0aXZlJyxcbiAgY2xhc3NOYW1lOiAnJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5rO1xufSx7XCIuLi9Qcm9wVHlwZXNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9Qcm9wVHlwZXMuanNcIixcInJlYWN0XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L3JlYWN0LmpzXCIsXCJyZWFjdC9saWIvT2JqZWN0LmFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9Ob3RGb3VuZFJvdXRlLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9O1xuXG52YXIgX2luaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfTtcblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJy4uL1Byb3BUeXBlcycpO1xudmFyIFJvdXRlSGFuZGxlciA9IHJlcXVpcmUoJy4vUm91dGVIYW5kbGVyJyk7XG52YXIgUm91dGUgPSByZXF1aXJlKCcuL1JvdXRlJyk7XG5cbi8qKlxuICogQSA8Tm90Rm91bmRSb3V0ZT4gaXMgYSBzcGVjaWFsIGtpbmQgb2YgPFJvdXRlPiB0aGF0XG4gKiByZW5kZXJzIHdoZW4gdGhlIGJlZ2lubmluZyBvZiBpdHMgcGFyZW50J3MgcGF0aCBtYXRjaGVzXG4gKiBidXQgbm9uZSBvZiBpdHMgc2libGluZ3MgZG8sIGluY2x1ZGluZyBhbnkgPERlZmF1bHRSb3V0ZT4uXG4gKiBPbmx5IG9uZSBzdWNoIHJvdXRlIG1heSBiZSB1c2VkIGF0IGFueSBnaXZlbiBsZXZlbCBpbiB0aGVcbiAqIHJvdXRlIGhpZXJhcmNoeS5cbiAqL1xuXG52YXIgTm90Rm91bmRSb3V0ZSA9IChmdW5jdGlvbiAoX1JvdXRlKSB7XG4gIGZ1bmN0aW9uIE5vdEZvdW5kUm91dGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vdEZvdW5kUm91dGUpO1xuXG4gICAgaWYgKF9Sb3V0ZSAhPSBudWxsKSB7XG4gICAgICBfUm91dGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBfaW5oZXJpdHMoTm90Rm91bmRSb3V0ZSwgX1JvdXRlKTtcblxuICByZXR1cm4gTm90Rm91bmRSb3V0ZTtcbn0pKFJvdXRlKTtcblxuLy8gVE9ETzogSW5jbHVkZSB0aGVzZSBpbiB0aGUgYWJvdmUgY2xhc3MgZGVmaW5pdGlvblxuLy8gb25jZSB3ZSBjYW4gdXNlIEVTNyBwcm9wZXJ0eSBpbml0aWFsaXplcnMuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmFiZWwvYmFiZWwvaXNzdWVzLzYxOVxuXG5Ob3RGb3VuZFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcGF0aDogUHJvcFR5cGVzLmZhbHN5LFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmZhbHN5LFxuICBoYW5kbGVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59O1xuXG5Ob3RGb3VuZFJvdXRlLmRlZmF1bHRQcm9wcyA9IHtcbiAgaGFuZGxlcjogUm91dGVIYW5kbGVyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5vdEZvdW5kUm91dGU7XG59LHtcIi4uL1Byb3BUeXBlc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1Byb3BUeXBlcy5qc1wiLFwiLi9Sb3V0ZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2NvbXBvbmVudHMvUm91dGUuanNcIixcIi4vUm91dGVIYW5kbGVyXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9Sb3V0ZUhhbmRsZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2NvbXBvbmVudHMvUmVkaXJlY3QuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH07XG5cbnZhciBfaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9O1xuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgnLi4vUHJvcFR5cGVzJyk7XG52YXIgUm91dGUgPSByZXF1aXJlKCcuL1JvdXRlJyk7XG5cbi8qKlxuICogQSA8UmVkaXJlY3Q+IGNvbXBvbmVudCBpcyBhIHNwZWNpYWwga2luZCBvZiA8Um91dGU+IHRoYXQgYWx3YXlzXG4gKiByZWRpcmVjdHMgdG8gYW5vdGhlciByb3V0ZSB3aGVuIGl0IG1hdGNoZXMuXG4gKi9cblxudmFyIFJlZGlyZWN0ID0gKGZ1bmN0aW9uIChfUm91dGUpIHtcbiAgZnVuY3Rpb24gUmVkaXJlY3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZGlyZWN0KTtcblxuICAgIGlmIChfUm91dGUgIT0gbnVsbCkge1xuICAgICAgX1JvdXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgX2luaGVyaXRzKFJlZGlyZWN0LCBfUm91dGUpO1xuXG4gIHJldHVybiBSZWRpcmVjdDtcbn0pKFJvdXRlKTtcblxuLy8gVE9ETzogSW5jbHVkZSB0aGVzZSBpbiB0aGUgYWJvdmUgY2xhc3MgZGVmaW5pdGlvblxuLy8gb25jZSB3ZSBjYW4gdXNlIEVTNyBwcm9wZXJ0eSBpbml0aWFsaXplcnMuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmFiZWwvYmFiZWwvaXNzdWVzLzYxOVxuXG5SZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gIHBhdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZyb206IFByb3BUeXBlcy5zdHJpbmcsIC8vIEFsaWFzIGZvciBwYXRoLlxuICB0bzogUHJvcFR5cGVzLnN0cmluZyxcbiAgaGFuZGxlcjogUHJvcFR5cGVzLmZhbHN5XG59O1xuXG4vLyBSZWRpcmVjdHMgc2hvdWxkIG5vdCBoYXZlIGEgZGVmYXVsdCBoYW5kbGVyXG5SZWRpcmVjdC5kZWZhdWx0UHJvcHMgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWRpcmVjdDtcbn0se1wiLi4vUHJvcFR5cGVzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvUHJvcFR5cGVzLmpzXCIsXCIuL1JvdXRlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9Sb3V0ZS5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9Sb3V0ZS5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9pbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH07XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgncmVhY3QvbGliL2ludmFyaWFudCcpO1xudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJy4uL1Byb3BUeXBlcycpO1xudmFyIFJvdXRlSGFuZGxlciA9IHJlcXVpcmUoJy4vUm91dGVIYW5kbGVyJyk7XG5cbi8qKlxuICogPFJvdXRlPiBjb21wb25lbnRzIHNwZWNpZnkgY29tcG9uZW50cyB0aGF0IGFyZSByZW5kZXJlZCB0byB0aGUgcGFnZSB3aGVuIHRoZVxuICogVVJMIG1hdGNoZXMgYSBnaXZlbiBwYXR0ZXJuLlxuICpcbiAqIFJvdXRlcyBhcmUgYXJyYW5nZWQgaW4gYSBuZXN0ZWQgdHJlZSBzdHJ1Y3R1cmUuIFdoZW4gYSBuZXcgVVJMIGlzIHJlcXVlc3RlZCxcbiAqIHRoZSB0cmVlIGlzIHNlYXJjaGVkIGRlcHRoLWZpcnN0IHRvIGZpbmQgYSByb3V0ZSB3aG9zZSBwYXRoIG1hdGNoZXMgdGhlIFVSTC5cbiAqIFdoZW4gb25lIGlzIGZvdW5kLCBhbGwgcm91dGVzIGluIHRoZSB0cmVlIHRoYXQgbGVhZCB0byBpdCBhcmUgY29uc2lkZXJlZFxuICogXCJhY3RpdmVcIiBhbmQgdGhlaXIgY29tcG9uZW50cyBhcmUgcmVuZGVyZWQgaW50byB0aGUgRE9NLCBuZXN0ZWQgaW4gdGhlIHNhbWVcbiAqIG9yZGVyIGFzIHRoZXkgYXJlIGluIHRoZSB0cmVlLlxuICpcbiAqIFRoZSBwcmVmZXJyZWQgd2F5IHRvIGNvbmZpZ3VyZSBhIHJvdXRlciBpcyB1c2luZyBKU1guIFRoZSBYTUwtbGlrZSBzeW50YXggaXNcbiAqIGEgZ3JlYXQgd2F5IHRvIHZpc3VhbGl6ZSBob3cgcm91dGVzIGFyZSBsYWlkIG91dCBpbiBhbiBhcHBsaWNhdGlvbi5cbiAqXG4gKiAgIHZhciByb3V0ZXMgPSBbXG4gKiAgICAgPFJvdXRlIGhhbmRsZXI9e0FwcH0+XG4gKiAgICAgICA8Um91dGUgbmFtZT1cImxvZ2luXCIgaGFuZGxlcj17TG9naW59Lz5cbiAqICAgICAgIDxSb3V0ZSBuYW1lPVwibG9nb3V0XCIgaGFuZGxlcj17TG9nb3V0fS8+XG4gKiAgICAgICA8Um91dGUgbmFtZT1cImFib3V0XCIgaGFuZGxlcj17QWJvdXR9Lz5cbiAqICAgICA8L1JvdXRlPlxuICogICBdO1xuICogICBcbiAqICAgUm91dGVyLnJ1bihyb3V0ZXMsIGZ1bmN0aW9uIChIYW5kbGVyKSB7XG4gKiAgICAgUmVhY3QucmVuZGVyKDxIYW5kbGVyLz4sIGRvY3VtZW50LmJvZHkpO1xuICogICB9KTtcbiAqXG4gKiBIYW5kbGVycyBmb3IgUm91dGUgY29tcG9uZW50cyB0aGF0IGNvbnRhaW4gY2hpbGRyZW4gY2FuIHJlbmRlciB0aGVpciBhY3RpdmVcbiAqIGNoaWxkIHJvdXRlIHVzaW5nIGEgPFJvdXRlSGFuZGxlcj4gZWxlbWVudC5cbiAqXG4gKiAgIHZhciBBcHAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gKiAgICAgICByZXR1cm4gKFxuICogICAgICAgICA8ZGl2IGNsYXNzPVwiYXBwbGljYXRpb25cIj5cbiAqICAgICAgICAgICA8Um91dGVIYW5kbGVyLz5cbiAqICAgICAgICAgPC9kaXY+XG4gKiAgICAgICApO1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogSWYgbm8gaGFuZGxlciBpcyBwcm92aWRlZCBmb3IgdGhlIHJvdXRlLCBpdCB3aWxsIHJlbmRlciBhIG1hdGNoZWQgY2hpbGQgcm91dGUuXG4gKi9cblxudmFyIFJvdXRlID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICBpZiAoX1JlYWN0JENvbXBvbmVudCAhPSBudWxsKSB7XG4gICAgICBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgX2luaGVyaXRzKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBfY3JlYXRlQ2xhc3MoUm91dGUsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgaW52YXJpYW50KGZhbHNlLCAnJXMgZWxlbWVudHMgYXJlIGZvciByb3V0ZXIgY29uZmlndXJhdGlvbiBvbmx5IGFuZCBzaG91bGQgbm90IGJlIHJlbmRlcmVkJywgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUm91dGU7XG59KShSZWFjdC5Db21wb25lbnQpO1xuXG4vLyBUT0RPOiBJbmNsdWRlIHRoZXNlIGluIHRoZSBhYm92ZSBjbGFzcyBkZWZpbml0aW9uXG4vLyBvbmNlIHdlIGNhbiB1c2UgRVM3IHByb3BlcnR5IGluaXRpYWxpemVycy5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iYWJlbC9iYWJlbC9pc3N1ZXMvNjE5XG5cblJvdXRlLnByb3BUeXBlcyA9IHtcbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcGF0aDogUHJvcFR5cGVzLnN0cmluZyxcbiAgaGFuZGxlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGlnbm9yZVNjcm9sbEJlaGF2aW9yOiBQcm9wVHlwZXMuYm9vbFxufTtcblxuUm91dGUuZGVmYXVsdFByb3BzID0ge1xuICBoYW5kbGVyOiBSb3V0ZUhhbmRsZXJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUm91dGU7XG59LHtcIi4uL1Byb3BUeXBlc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1Byb3BUeXBlcy5qc1wiLFwiLi9Sb3V0ZUhhbmRsZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9jb21wb25lbnRzL1JvdXRlSGFuZGxlci5qc1wiLFwicmVhY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIixcInJlYWN0L2xpYi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9Sb3V0ZUhhbmRsZXIuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbnZhciBfaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9O1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIENvbnRleHRXcmFwcGVyID0gcmVxdWlyZSgnLi9Db250ZXh0V3JhcHBlcicpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9PYmplY3QuYXNzaWduJyk7XG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgnLi4vUHJvcFR5cGVzJyk7XG5cbnZhciBSRUZfTkFNRSA9ICdfX3JvdXRlSGFuZGxlcl9fJztcblxuLyoqXG4gKiBBIDxSb3V0ZUhhbmRsZXI+IGNvbXBvbmVudCByZW5kZXJzIHRoZSBhY3RpdmUgY2hpbGQgcm91dGUgaGFuZGxlclxuICogd2hlbiByb3V0ZXMgYXJlIG5lc3RlZC5cbiAqL1xuXG52YXIgUm91dGVIYW5kbGVyID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIFJvdXRlSGFuZGxlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGVIYW5kbGVyKTtcblxuICAgIGlmIChfUmVhY3QkQ29tcG9uZW50ICE9IG51bGwpIHtcbiAgICAgIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBfaW5oZXJpdHMoUm91dGVIYW5kbGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBfY3JlYXRlQ2xhc3MoUm91dGVIYW5kbGVyLCBbe1xuICAgIGtleTogJ2dldENoaWxkQ29udGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJvdXRlRGVwdGg6IHRoaXMuY29udGV4dC5yb3V0ZURlcHRoICsgMVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5fdXBkYXRlUm91dGVDb21wb25lbnQodGhpcy5yZWZzW1JFRl9OQU1FXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdGhpcy5fdXBkYXRlUm91dGVDb21wb25lbnQodGhpcy5yZWZzW1JFRl9OQU1FXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZVJvdXRlQ29tcG9uZW50KG51bGwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ191cGRhdGVSb3V0ZUNvbXBvbmVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVSb3V0ZUNvbXBvbmVudChjb21wb25lbnQpIHtcbiAgICAgIHRoaXMuY29udGV4dC5yb3V0ZXIuc2V0Um91dGVDb21wb25lbnRBdERlcHRoKHRoaXMuZ2V0Um91dGVEZXB0aCgpLCBjb21wb25lbnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFJvdXRlRGVwdGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSb3V0ZURlcHRoKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5yb3V0ZURlcHRoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZUNoaWxkUm91dGVIYW5kbGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQ2hpbGRSb3V0ZUhhbmRsZXIocHJvcHMpIHtcbiAgICAgIHZhciByb3V0ZSA9IHRoaXMuY29udGV4dC5yb3V0ZXIuZ2V0Um91dGVBdERlcHRoKHRoaXMuZ2V0Um91dGVEZXB0aCgpKTtcblxuICAgICAgaWYgKHJvdXRlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9dmFyIGNoaWxkUHJvcHMgPSBhc3NpZ24oe30sIHByb3BzIHx8IHRoaXMucHJvcHMsIHtcbiAgICAgICAgcmVmOiBSRUZfTkFNRSxcbiAgICAgICAgcGFyYW1zOiB0aGlzLmNvbnRleHQucm91dGVyLmdldEN1cnJlbnRQYXJhbXMoKSxcbiAgICAgICAgcXVlcnk6IHRoaXMuY29udGV4dC5yb3V0ZXIuZ2V0Q3VycmVudFF1ZXJ5KClcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5oYW5kbGVyLCBjaGlsZFByb3BzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IHRoaXMuY3JlYXRlQ2hpbGRSb3V0ZUhhbmRsZXIoKTtcbiAgICAgIC8vIDxzY3JpcHQvPiBmb3IgdGhpbmdzIGxpa2UgPENTU1RyYW5zaXRpb25Hcm91cC8+IHRoYXQgZG9uJ3QgbGlrZSBudWxsXG4gICAgICByZXR1cm4gaGFuZGxlciA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIENvbnRleHRXcmFwcGVyLFxuICAgICAgICBudWxsLFxuICAgICAgICBoYW5kbGVyXG4gICAgICApIDogUmVhY3QuY3JlYXRlRWxlbWVudCgnc2NyaXB0JywgbnVsbCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJvdXRlSGFuZGxlcjtcbn0pKFJlYWN0LkNvbXBvbmVudCk7XG5cbi8vIFRPRE86IEluY2x1ZGUgdGhlc2UgaW4gdGhlIGFib3ZlIGNsYXNzIGRlZmluaXRpb25cbi8vIG9uY2Ugd2UgY2FuIHVzZSBFUzcgcHJvcGVydHkgaW5pdGlhbGl6ZXJzLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2JhYmVsL2JhYmVsL2lzc3Vlcy82MTlcblxuUm91dGVIYW5kbGVyLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVEZXB0aDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICByb3V0ZXI6IFByb3BUeXBlcy5yb3V0ZXIuaXNSZXF1aXJlZFxufTtcblxuUm91dGVIYW5kbGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZURlcHRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUm91dGVIYW5kbGVyO1xufSx7XCIuLi9Qcm9wVHlwZXNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9Qcm9wVHlwZXMuanNcIixcIi4vQ29udGV4dFdyYXBwZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9jb21wb25lbnRzL0NvbnRleHRXcmFwcGVyLmpzXCIsXCJyZWFjdFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiLFwicmVhY3QvbGliL09iamVjdC5hc3NpZ25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2NyZWF0ZVJvdXRlci5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKiBqc2hpbnQgLVcwNTggKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgncmVhY3QvbGliL3dhcm5pbmcnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdyZWFjdC9saWIvaW52YXJpYW50Jyk7XG52YXIgY2FuVXNlRE9NID0gcmVxdWlyZSgncmVhY3QvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50JykuY2FuVXNlRE9NO1xudmFyIExvY2F0aW9uQWN0aW9ucyA9IHJlcXVpcmUoJy4vYWN0aW9ucy9Mb2NhdGlvbkFjdGlvbnMnKTtcbnZhciBJbWl0YXRlQnJvd3NlckJlaGF2aW9yID0gcmVxdWlyZSgnLi9iZWhhdmlvcnMvSW1pdGF0ZUJyb3dzZXJCZWhhdmlvcicpO1xudmFyIEhhc2hMb2NhdGlvbiA9IHJlcXVpcmUoJy4vbG9jYXRpb25zL0hhc2hMb2NhdGlvbicpO1xudmFyIEhpc3RvcnlMb2NhdGlvbiA9IHJlcXVpcmUoJy4vbG9jYXRpb25zL0hpc3RvcnlMb2NhdGlvbicpO1xudmFyIFJlZnJlc2hMb2NhdGlvbiA9IHJlcXVpcmUoJy4vbG9jYXRpb25zL1JlZnJlc2hMb2NhdGlvbicpO1xudmFyIFN0YXRpY0xvY2F0aW9uID0gcmVxdWlyZSgnLi9sb2NhdGlvbnMvU3RhdGljTG9jYXRpb24nKTtcbnZhciBTY3JvbGxIaXN0b3J5ID0gcmVxdWlyZSgnLi9TY3JvbGxIaXN0b3J5Jyk7XG52YXIgY3JlYXRlUm91dGVzRnJvbVJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKCcuL2NyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuJyk7XG52YXIgaXNSZWFjdENoaWxkcmVuID0gcmVxdWlyZSgnLi9pc1JlYWN0Q2hpbGRyZW4nKTtcbnZhciBUcmFuc2l0aW9uID0gcmVxdWlyZSgnLi9UcmFuc2l0aW9uJyk7XG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgnLi9Qcm9wVHlwZXMnKTtcbnZhciBSZWRpcmVjdCA9IHJlcXVpcmUoJy4vUmVkaXJlY3QnKTtcbnZhciBIaXN0b3J5ID0gcmVxdWlyZSgnLi9IaXN0b3J5Jyk7XG52YXIgQ2FuY2VsbGF0aW9uID0gcmVxdWlyZSgnLi9DYW5jZWxsYXRpb24nKTtcbnZhciBNYXRjaCA9IHJlcXVpcmUoJy4vTWF0Y2gnKTtcbnZhciBSb3V0ZSA9IHJlcXVpcmUoJy4vUm91dGUnKTtcbnZhciBzdXBwb3J0c0hpc3RvcnkgPSByZXF1aXJlKCcuL3N1cHBvcnRzSGlzdG9yeScpO1xudmFyIFBhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgbG9jYXRpb24gZm9yIG5ldyByb3V0ZXJzLlxuICovXG52YXIgREVGQVVMVF9MT0NBVElPTiA9IGNhblVzZURPTSA/IEhhc2hMb2NhdGlvbiA6ICcvJztcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBzY3JvbGwgYmVoYXZpb3IgZm9yIG5ldyByb3V0ZXJzLlxuICovXG52YXIgREVGQVVMVF9TQ1JPTExfQkVIQVZJT1IgPSBjYW5Vc2VET00gPyBJbWl0YXRlQnJvd3NlckJlaGF2aW9yIDogbnVsbDtcblxuZnVuY3Rpb24gaGFzUHJvcGVydGllcyhvYmplY3QsIHByb3BlcnRpZXMpIHtcbiAgZm9yICh2YXIgcHJvcGVydHlOYW1lIGluIHByb3BlcnRpZXMpIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkgJiYgb2JqZWN0W3Byb3BlcnR5TmFtZV0gIT09IHByb3BlcnRpZXNbcHJvcGVydHlOYW1lXSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfXJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBoYXNNYXRjaChyb3V0ZXMsIHJvdXRlLCBwcmV2UGFyYW1zLCBuZXh0UGFyYW1zLCBwcmV2UXVlcnksIG5leHRRdWVyeSkge1xuICByZXR1cm4gcm91dGVzLnNvbWUoZnVuY3Rpb24gKHIpIHtcbiAgICBpZiAociAhPT0gcm91dGUpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBwYXJhbU5hbWVzID0gcm91dGUucGFyYW1OYW1lcztcbiAgICB2YXIgcGFyYW1OYW1lO1xuXG4gICAgLy8gRW5zdXJlIHRoYXQgYWxsIHBhcmFtcyB0aGUgcm91dGUgY2FyZXMgYWJvdXQgZGlkIG5vdCBjaGFuZ2UuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBhcmFtTmFtZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHBhcmFtTmFtZSA9IHBhcmFtTmFtZXNbaV07XG5cbiAgICAgIGlmIChuZXh0UGFyYW1zW3BhcmFtTmFtZV0gIT09IHByZXZQYXJhbXNbcGFyYW1OYW1lXSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSB0aGUgcXVlcnkgaGFzbid0IGNoYW5nZWQuXG4gICAgcmV0dXJuIGhhc1Byb3BlcnRpZXMocHJldlF1ZXJ5LCBuZXh0UXVlcnkpICYmIGhhc1Byb3BlcnRpZXMobmV4dFF1ZXJ5LCBwcmV2UXVlcnkpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkUm91dGVzVG9OYW1lZFJvdXRlcyhyb3V0ZXMsIG5hbWVkUm91dGVzKSB7XG4gIHZhciByb3V0ZTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJvdXRlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHJvdXRlID0gcm91dGVzW2ldO1xuXG4gICAgaWYgKHJvdXRlLm5hbWUpIHtcbiAgICAgIGludmFyaWFudChuYW1lZFJvdXRlc1tyb3V0ZS5uYW1lXSA9PSBudWxsLCAnWW91IG1heSBub3QgaGF2ZSBtb3JlIHRoYW4gb25lIHJvdXRlIG5hbWVkIFwiJXNcIicsIHJvdXRlLm5hbWUpO1xuXG4gICAgICBuYW1lZFJvdXRlc1tyb3V0ZS5uYW1lXSA9IHJvdXRlO1xuICAgIH1cblxuICAgIGlmIChyb3V0ZS5jaGlsZFJvdXRlcykgYWRkUm91dGVzVG9OYW1lZFJvdXRlcyhyb3V0ZS5jaGlsZFJvdXRlcywgbmFtZWRSb3V0ZXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJvdXRlSXNBY3RpdmUoYWN0aXZlUm91dGVzLCByb3V0ZU5hbWUpIHtcbiAgcmV0dXJuIGFjdGl2ZVJvdXRlcy5zb21lKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIHJldHVybiByb3V0ZS5uYW1lID09PSByb3V0ZU5hbWU7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJhbXNBcmVBY3RpdmUoYWN0aXZlUGFyYW1zLCBwYXJhbXMpIHtcbiAgZm9yICh2YXIgcHJvcGVydHkgaW4gcGFyYW1zKSBpZiAoU3RyaW5nKGFjdGl2ZVBhcmFtc1twcm9wZXJ0eV0pICE9PSBTdHJpbmcocGFyYW1zW3Byb3BlcnR5XSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1yZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcXVlcnlJc0FjdGl2ZShhY3RpdmVRdWVyeSwgcXVlcnkpIHtcbiAgZm9yICh2YXIgcHJvcGVydHkgaW4gcXVlcnkpIGlmIChTdHJpbmcoYWN0aXZlUXVlcnlbcHJvcGVydHldKSAhPT0gU3RyaW5nKHF1ZXJ5W3Byb3BlcnR5XSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1yZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IHJvdXRlciB1c2luZyB0aGUgZ2l2ZW4gb3B0aW9ucy4gQSByb3V0ZXJcbiAqIGlzIGEgUmVhY3RDb21wb25lbnQgY2xhc3MgdGhhdCBrbm93cyBob3cgdG8gcmVhY3QgdG8gY2hhbmdlcyBpbiB0aGVcbiAqIFVSTCBhbmQga2VlcCB0aGUgY29udGVudHMgb2YgdGhlIHBhZ2UgaW4gc3luYy5cbiAqXG4gKiBPcHRpb25zIG1heSBiZSBhbnkgb2YgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAtIHJvdXRlcyAgICAgICAgICAgKHJlcXVpcmVkKSBUaGUgcm91dGUgY29uZmlnXG4gKiAtIGxvY2F0aW9uICAgICAgICAgVGhlIGxvY2F0aW9uIHRvIHVzZS4gRGVmYXVsdHMgdG8gSGFzaExvY2F0aW9uIHdoZW5cbiAqICAgICAgICAgICAgICAgICAgICB0aGUgRE9NIGlzIGF2YWlsYWJsZSwgXCIvXCIgb3RoZXJ3aXNlXG4gKiAtIHNjcm9sbEJlaGF2aW9yICAgVGhlIHNjcm9sbCBiZWhhdmlvciB0byB1c2UuIERlZmF1bHRzIHRvIEltaXRhdGVCcm93c2VyQmVoYXZpb3JcbiAqICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSBET00gaXMgYXZhaWxhYmxlLCBudWxsIG90aGVyd2lzZVxuICogLSBvbkVycm9yICAgICAgICAgIEEgZnVuY3Rpb24gdGhhdCBpcyB1c2VkIHRvIGhhbmRsZSBlcnJvcnNcbiAqIC0gb25BYm9ydCAgICAgICAgICBBIGZ1bmN0aW9uIHRoYXQgaXMgdXNlZCB0byBoYW5kbGUgYWJvcnRlZCB0cmFuc2l0aW9uc1xuICpcbiAqIFdoZW4gcmVuZGVyaW5nIGluIGEgc2VydmVyLXNpZGUgZW52aXJvbm1lbnQsIHRoZSBsb2NhdGlvbiBzaG91bGQgc2ltcGx5XG4gKiBiZSB0aGUgVVJMIHBhdGggdGhhdCB3YXMgdXNlZCBpbiB0aGUgcmVxdWVzdCwgaW5jbHVkaW5nIHRoZSBxdWVyeSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmIChpc1JlYWN0Q2hpbGRyZW4ob3B0aW9ucykpIG9wdGlvbnMgPSB7IHJvdXRlczogb3B0aW9ucyB9O1xuXG4gIHZhciBtb3VudGVkQ29tcG9uZW50cyA9IFtdO1xuICB2YXIgbG9jYXRpb24gPSBvcHRpb25zLmxvY2F0aW9uIHx8IERFRkFVTFRfTE9DQVRJT047XG4gIHZhciBzY3JvbGxCZWhhdmlvciA9IG9wdGlvbnMuc2Nyb2xsQmVoYXZpb3IgfHwgREVGQVVMVF9TQ1JPTExfQkVIQVZJT1I7XG4gIHZhciBzdGF0ZSA9IHt9O1xuICB2YXIgbmV4dFN0YXRlID0ge307XG4gIHZhciBwZW5kaW5nVHJhbnNpdGlvbiA9IG51bGw7XG4gIHZhciBkaXNwYXRjaEhhbmRsZXIgPSBudWxsO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnKSBsb2NhdGlvbiA9IG5ldyBTdGF0aWNMb2NhdGlvbihsb2NhdGlvbik7XG5cbiAgaWYgKGxvY2F0aW9uIGluc3RhbmNlb2YgU3RhdGljTG9jYXRpb24pIHtcbiAgICB3YXJuaW5nKCFjYW5Vc2VET00gfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JywgJ1lvdSBzaG91bGQgbm90IHVzZSBhIHN0YXRpYyBsb2NhdGlvbiBpbiBhIERPTSBlbnZpcm9ubWVudCBiZWNhdXNlICcgKyAndGhlIHJvdXRlciB3aWxsIG5vdCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgY3VycmVudCBVUkwnKTtcbiAgfSBlbHNlIHtcbiAgICBpbnZhcmlhbnQoY2FuVXNlRE9NIHx8IGxvY2F0aW9uLm5lZWRzRE9NID09PSBmYWxzZSwgJ1lvdSBjYW5ub3QgdXNlICVzIHdpdGhvdXQgYSBET00nLCBsb2NhdGlvbik7XG4gIH1cblxuICAvLyBBdXRvbWF0aWNhbGx5IGZhbGwgYmFjayB0byBmdWxsIHBhZ2UgcmVmcmVzaGVzIGluXG4gIC8vIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCB0aGUgSFRNTCBoaXN0b3J5IEFQSS5cbiAgaWYgKGxvY2F0aW9uID09PSBIaXN0b3J5TG9jYXRpb24gJiYgIXN1cHBvcnRzSGlzdG9yeSgpKSBsb2NhdGlvbiA9IFJlZnJlc2hMb2NhdGlvbjtcblxuICB2YXIgUm91dGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gICAgZGlzcGxheU5hbWU6ICdSb3V0ZXInLFxuXG4gICAgc3RhdGljczoge1xuXG4gICAgICBpc1J1bm5pbmc6IGZhbHNlLFxuXG4gICAgICBjYW5jZWxQZW5kaW5nVHJhbnNpdGlvbjogZnVuY3Rpb24gY2FuY2VsUGVuZGluZ1RyYW5zaXRpb24oKSB7XG4gICAgICAgIGlmIChwZW5kaW5nVHJhbnNpdGlvbikge1xuICAgICAgICAgIHBlbmRpbmdUcmFuc2l0aW9uLmNhbmNlbCgpO1xuICAgICAgICAgIHBlbmRpbmdUcmFuc2l0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgY2xlYXJBbGxSb3V0ZXM6IGZ1bmN0aW9uIGNsZWFyQWxsUm91dGVzKCkge1xuICAgICAgICBSb3V0ZXIuY2FuY2VsUGVuZGluZ1RyYW5zaXRpb24oKTtcbiAgICAgICAgUm91dGVyLm5hbWVkUm91dGVzID0ge307XG4gICAgICAgIFJvdXRlci5yb3V0ZXMgPSBbXTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQWRkcyByb3V0ZXMgdG8gdGhpcyByb3V0ZXIgZnJvbSB0aGUgZ2l2ZW4gY2hpbGRyZW4gb2JqZWN0IChzZWUgUmVhY3RDaGlsZHJlbikuXG4gICAgICAgKi9cbiAgICAgIGFkZFJvdXRlczogZnVuY3Rpb24gYWRkUm91dGVzKHJvdXRlcykge1xuICAgICAgICBpZiAoaXNSZWFjdENoaWxkcmVuKHJvdXRlcykpIHJvdXRlcyA9IGNyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuKHJvdXRlcyk7XG5cbiAgICAgICAgYWRkUm91dGVzVG9OYW1lZFJvdXRlcyhyb3V0ZXMsIFJvdXRlci5uYW1lZFJvdXRlcyk7XG5cbiAgICAgICAgUm91dGVyLnJvdXRlcy5wdXNoLmFwcGx5KFJvdXRlci5yb3V0ZXMsIHJvdXRlcyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJlcGxhY2VzIHJvdXRlcyBvZiB0aGlzIHJvdXRlciBmcm9tIHRoZSBnaXZlbiBjaGlsZHJlbiBvYmplY3QgKHNlZSBSZWFjdENoaWxkcmVuKS5cbiAgICAgICAqL1xuICAgICAgcmVwbGFjZVJvdXRlczogZnVuY3Rpb24gcmVwbGFjZVJvdXRlcyhyb3V0ZXMpIHtcbiAgICAgICAgUm91dGVyLmNsZWFyQWxsUm91dGVzKCk7XG4gICAgICAgIFJvdXRlci5hZGRSb3V0ZXMocm91dGVzKTtcbiAgICAgICAgUm91dGVyLnJlZnJlc2goKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUGVyZm9ybXMgYSBtYXRjaCBvZiB0aGUgZ2l2ZW4gcGF0aCBhZ2FpbnN0IHRoaXMgcm91dGVyIGFuZCByZXR1cm5zIGFuIG9iamVjdFxuICAgICAgICogd2l0aCB0aGUgeyByb3V0ZXMsIHBhcmFtcywgcGF0aG5hbWUsIHF1ZXJ5IH0gdGhhdCBtYXRjaC4gUmV0dXJucyBudWxsIGlmIG5vXG4gICAgICAgKiBtYXRjaCBjYW4gYmUgbWFkZS5cbiAgICAgICAqL1xuICAgICAgbWF0Y2g6IGZ1bmN0aW9uIG1hdGNoKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGNoLmZpbmRNYXRjaChSb3V0ZXIucm91dGVzLCBwYXRoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyBhbiBhYnNvbHV0ZSBVUkwgcGF0aCBjcmVhdGVkIGZyb20gdGhlIGdpdmVuIHJvdXRlXG4gICAgICAgKiBuYW1lLCBVUkwgcGFyYW1ldGVycywgYW5kIHF1ZXJ5LlxuICAgICAgICovXG4gICAgICBtYWtlUGF0aDogZnVuY3Rpb24gbWFrZVBhdGgodG8sIHBhcmFtcywgcXVlcnkpIHtcbiAgICAgICAgdmFyIHBhdGg7XG4gICAgICAgIGlmIChQYXRoVXRpbHMuaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAgICAgICBwYXRoID0gdG87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHJvdXRlID0gdG8gaW5zdGFuY2VvZiBSb3V0ZSA/IHRvIDogUm91dGVyLm5hbWVkUm91dGVzW3RvXTtcblxuICAgICAgICAgIGludmFyaWFudChyb3V0ZSBpbnN0YW5jZW9mIFJvdXRlLCAnQ2Fubm90IGZpbmQgYSByb3V0ZSBuYW1lZCBcIiVzXCInLCB0byk7XG5cbiAgICAgICAgICBwYXRoID0gcm91dGUucGF0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQYXRoVXRpbHMud2l0aFF1ZXJ5KFBhdGhVdGlscy5pbmplY3RQYXJhbXMocGF0aCwgcGFyYW1zKSwgcXVlcnkpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgbWF5IHNhZmVseSBiZSB1c2VkIGFzIHRoZSBocmVmIG9mIGEgbGlua1xuICAgICAgICogdG8gdGhlIHJvdXRlIHdpdGggdGhlIGdpdmVuIG5hbWUsIFVSTCBwYXJhbWV0ZXJzLCBhbmQgcXVlcnkuXG4gICAgICAgKi9cbiAgICAgIG1ha2VIcmVmOiBmdW5jdGlvbiBtYWtlSHJlZih0bywgcGFyYW1zLCBxdWVyeSkge1xuICAgICAgICB2YXIgcGF0aCA9IFJvdXRlci5tYWtlUGF0aCh0bywgcGFyYW1zLCBxdWVyeSk7XG4gICAgICAgIHJldHVybiBsb2NhdGlvbiA9PT0gSGFzaExvY2F0aW9uID8gJyMnICsgcGF0aCA6IHBhdGg7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRyYW5zaXRpb25zIHRvIHRoZSBVUkwgc3BlY2lmaWVkIGluIHRoZSBhcmd1bWVudHMgYnkgcHVzaGluZ1xuICAgICAgICogYSBuZXcgVVJMIG9udG8gdGhlIGhpc3Rvcnkgc3RhY2suXG4gICAgICAgKi9cbiAgICAgIHRyYW5zaXRpb25UbzogZnVuY3Rpb24gdHJhbnNpdGlvblRvKHRvLCBwYXJhbXMsIHF1ZXJ5KSB7XG4gICAgICAgIHZhciBwYXRoID0gUm91dGVyLm1ha2VQYXRoKHRvLCBwYXJhbXMsIHF1ZXJ5KTtcblxuICAgICAgICBpZiAocGVuZGluZ1RyYW5zaXRpb24pIHtcbiAgICAgICAgICAvLyBSZXBsYWNlIHNvIHBlbmRpbmcgbG9jYXRpb24gZG9lcyBub3Qgc3RheSBpbiBoaXN0b3J5LlxuICAgICAgICAgIGxvY2F0aW9uLnJlcGxhY2UocGF0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9jYXRpb24ucHVzaChwYXRoKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUcmFuc2l0aW9ucyB0byB0aGUgVVJMIHNwZWNpZmllZCBpbiB0aGUgYXJndW1lbnRzIGJ5IHJlcGxhY2luZ1xuICAgICAgICogdGhlIGN1cnJlbnQgVVJMIGluIHRoZSBoaXN0b3J5IHN0YWNrLlxuICAgICAgICovXG4gICAgICByZXBsYWNlV2l0aDogZnVuY3Rpb24gcmVwbGFjZVdpdGgodG8sIHBhcmFtcywgcXVlcnkpIHtcbiAgICAgICAgbG9jYXRpb24ucmVwbGFjZShSb3V0ZXIubWFrZVBhdGgodG8sIHBhcmFtcywgcXVlcnkpKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVHJhbnNpdGlvbnMgdG8gdGhlIHByZXZpb3VzIFVSTCBpZiBvbmUgaXMgYXZhaWxhYmxlLiBSZXR1cm5zIHRydWUgaWYgdGhlXG4gICAgICAgKiByb3V0ZXIgd2FzIGFibGUgdG8gZ28gYmFjaywgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAgICpcbiAgICAgICAqIE5vdGU6IFRoZSByb3V0ZXIgb25seSB0cmFja3MgaGlzdG9yeSBlbnRyaWVzIGluIHlvdXIgYXBwbGljYXRpb24sIG5vdCB0aGVcbiAgICAgICAqIGN1cnJlbnQgYnJvd3NlciBzZXNzaW9uLCBzbyB5b3UgY2FuIHNhZmVseSBjYWxsIHRoaXMgZnVuY3Rpb24gd2l0aG91dCBndWFyZGluZ1xuICAgICAgICogYWdhaW5zdCBzZW5kaW5nIHRoZSB1c2VyIGJhY2sgdG8gc29tZSBvdGhlciBzaXRlLiBIb3dldmVyLCB3aGVuIHVzaW5nXG4gICAgICAgKiBSZWZyZXNoTG9jYXRpb24gKHdoaWNoIGlzIHRoZSBmYWxsYmFjayBmb3IgSGlzdG9yeUxvY2F0aW9uIGluIGJyb3dzZXJzIHRoYXRcbiAgICAgICAqIGRvbid0IHN1cHBvcnQgSFRNTDUgaGlzdG9yeSkgdGhpcyBtZXRob2Qgd2lsbCAqYWx3YXlzKiBzZW5kIHRoZSBjbGllbnQgYmFja1xuICAgICAgICogYmVjYXVzZSB3ZSBjYW5ub3QgcmVsaWFibHkgdHJhY2sgaGlzdG9yeSBsZW5ndGguXG4gICAgICAgKi9cbiAgICAgIGdvQmFjazogZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgICAgICBpZiAoSGlzdG9yeS5sZW5ndGggPiAxIHx8IGxvY2F0aW9uID09PSBSZWZyZXNoTG9jYXRpb24pIHtcbiAgICAgICAgICBsb2NhdGlvbi5wb3AoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdnb0JhY2soKSB3YXMgaWdub3JlZCBiZWNhdXNlIHRoZXJlIGlzIG5vIHJvdXRlciBoaXN0b3J5Jyk7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSxcblxuICAgICAgaGFuZGxlQWJvcnQ6IG9wdGlvbnMub25BYm9ydCB8fCBmdW5jdGlvbiAoYWJvcnRSZWFzb24pIHtcbiAgICAgICAgaWYgKGxvY2F0aW9uIGluc3RhbmNlb2YgU3RhdGljTG9jYXRpb24pIHRocm93IG5ldyBFcnJvcignVW5oYW5kbGVkIGFib3J0ZWQgdHJhbnNpdGlvbiEgUmVhc29uOiAnICsgYWJvcnRSZWFzb24pO1xuXG4gICAgICAgIGlmIChhYm9ydFJlYXNvbiBpbnN0YW5jZW9mIENhbmNlbGxhdGlvbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChhYm9ydFJlYXNvbiBpbnN0YW5jZW9mIFJlZGlyZWN0KSB7XG4gICAgICAgICAgbG9jYXRpb24ucmVwbGFjZShSb3V0ZXIubWFrZVBhdGgoYWJvcnRSZWFzb24udG8sIGFib3J0UmVhc29uLnBhcmFtcywgYWJvcnRSZWFzb24ucXVlcnkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2NhdGlvbi5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgaGFuZGxlRXJyb3I6IG9wdGlvbnMub25FcnJvciB8fCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgLy8gVGhyb3cgc28gd2UgZG9uJ3Qgc2lsZW50bHkgc3dhbGxvdyBhc3luYyBlcnJvcnMuXG4gICAgICAgIHRocm93IGVycm9yOyAvLyBUaGlzIGVycm9yIHByb2JhYmx5IG9yaWdpbmF0ZWQgaW4gYSB0cmFuc2l0aW9uIGhvb2suXG4gICAgICB9LFxuXG4gICAgICBoYW5kbGVMb2NhdGlvbkNoYW5nZTogZnVuY3Rpb24gaGFuZGxlTG9jYXRpb25DaGFuZ2UoY2hhbmdlKSB7XG4gICAgICAgIFJvdXRlci5kaXNwYXRjaChjaGFuZ2UucGF0aCwgY2hhbmdlLnR5cGUpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQZXJmb3JtcyBhIHRyYW5zaXRpb24gdG8gdGhlIGdpdmVuIHBhdGggYW5kIGNhbGxzIGNhbGxiYWNrKGVycm9yLCBhYm9ydFJlYXNvbilcbiAgICAgICAqIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgZmluaXNoZWQuIElmIGJvdGggYXJndW1lbnRzIGFyZSBudWxsIHRoZSByb3V0ZXIncyBzdGF0ZVxuICAgICAgICogd2FzIHVwZGF0ZWQuIE90aGVyd2lzZSB0aGUgdHJhbnNpdGlvbiBkaWQgbm90IGNvbXBsZXRlLlxuICAgICAgICpcbiAgICAgICAqIEluIGEgdHJhbnNpdGlvbiwgYSByb3V0ZXIgZmlyc3QgZGV0ZXJtaW5lcyB3aGljaCByb3V0ZXMgYXJlIGludm9sdmVkIGJ5IGJlZ2lubmluZ1xuICAgICAgICogd2l0aCB0aGUgY3VycmVudCByb3V0ZSwgdXAgdGhlIHJvdXRlIHRyZWUgdG8gdGhlIGZpcnN0IHBhcmVudCByb3V0ZSB0aGF0IGlzIHNoYXJlZFxuICAgICAgICogd2l0aCB0aGUgZGVzdGluYXRpb24gcm91dGUsIGFuZCBiYWNrIGRvd24gdGhlIHRyZWUgdG8gdGhlIGRlc3RpbmF0aW9uIHJvdXRlLiBUaGVcbiAgICAgICAqIHdpbGxUcmFuc2l0aW9uRnJvbSBob29rIGlzIGludm9rZWQgb24gYWxsIHJvdXRlIGhhbmRsZXJzIHdlJ3JlIHRyYW5zaXRpb25pbmcgYXdheVxuICAgICAgICogZnJvbSwgaW4gcmV2ZXJzZSBuZXN0aW5nIG9yZGVyLiBMaWtld2lzZSwgdGhlIHdpbGxUcmFuc2l0aW9uVG8gaG9vayBpcyBpbnZva2VkIG9uXG4gICAgICAgKiBhbGwgcm91dGUgaGFuZGxlcnMgd2UncmUgdHJhbnNpdGlvbmluZyB0by5cbiAgICAgICAqXG4gICAgICAgKiBCb3RoIHdpbGxUcmFuc2l0aW9uRnJvbSBhbmQgd2lsbFRyYW5zaXRpb25UbyBob29rcyBtYXkgZWl0aGVyIGFib3J0IG9yIHJlZGlyZWN0IHRoZVxuICAgICAgICogdHJhbnNpdGlvbi4gVG8gcmVzb2x2ZSBhc3luY2hyb25vdXNseSwgdGhleSBtYXkgdXNlIHRoZSBjYWxsYmFjayBhcmd1bWVudC4gSWYgbm9cbiAgICAgICAqIGhvb2tzIHdhaXQsIHRoZSB0cmFuc2l0aW9uIGlzIGZ1bGx5IHN5bmNocm9ub3VzLlxuICAgICAgICovXG4gICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2gocGF0aCwgYWN0aW9uKSB7XG4gICAgICAgIFJvdXRlci5jYW5jZWxQZW5kaW5nVHJhbnNpdGlvbigpO1xuXG4gICAgICAgIHZhciBwcmV2UGF0aCA9IHN0YXRlLnBhdGg7XG4gICAgICAgIHZhciBpc1JlZnJlc2hpbmcgPSBhY3Rpb24gPT0gbnVsbDtcblxuICAgICAgICBpZiAocHJldlBhdGggPT09IHBhdGggJiYgIWlzUmVmcmVzaGluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBOb3RoaW5nIHRvIGRvIVxuXG4gICAgICAgIC8vIFJlY29yZCB0aGUgc2Nyb2xsIHBvc2l0aW9uIGFzIGVhcmx5IGFzIHBvc3NpYmxlIHRvXG4gICAgICAgIC8vIGdldCBpdCBiZWZvcmUgYnJvd3NlcnMgdHJ5IHVwZGF0ZSBpdCBhdXRvbWF0aWNhbGx5LlxuICAgICAgICBpZiAocHJldlBhdGggJiYgYWN0aW9uID09PSBMb2NhdGlvbkFjdGlvbnMuUFVTSCkgUm91dGVyLnJlY29yZFNjcm9sbFBvc2l0aW9uKHByZXZQYXRoKTtcblxuICAgICAgICB2YXIgbWF0Y2ggPSBSb3V0ZXIubWF0Y2gocGF0aCk7XG5cbiAgICAgICAgd2FybmluZyhtYXRjaCAhPSBudWxsLCAnTm8gcm91dGUgbWF0Y2hlcyBwYXRoIFwiJXNcIi4gTWFrZSBzdXJlIHlvdSBoYXZlIDxSb3V0ZSBwYXRoPVwiJXNcIj4gc29tZXdoZXJlIGluIHlvdXIgcm91dGVzJywgcGF0aCwgcGF0aCk7XG5cbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwpIG1hdGNoID0ge307XG5cbiAgICAgICAgdmFyIHByZXZSb3V0ZXMgPSBzdGF0ZS5yb3V0ZXMgfHwgW107XG4gICAgICAgIHZhciBwcmV2UGFyYW1zID0gc3RhdGUucGFyYW1zIHx8IHt9O1xuICAgICAgICB2YXIgcHJldlF1ZXJ5ID0gc3RhdGUucXVlcnkgfHwge307XG5cbiAgICAgICAgdmFyIG5leHRSb3V0ZXMgPSBtYXRjaC5yb3V0ZXMgfHwgW107XG4gICAgICAgIHZhciBuZXh0UGFyYW1zID0gbWF0Y2gucGFyYW1zIHx8IHt9O1xuICAgICAgICB2YXIgbmV4dFF1ZXJ5ID0gbWF0Y2gucXVlcnkgfHwge307XG5cbiAgICAgICAgdmFyIGZyb21Sb3V0ZXMsIHRvUm91dGVzO1xuICAgICAgICBpZiAocHJldlJvdXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICBmcm9tUm91dGVzID0gcHJldlJvdXRlcy5maWx0ZXIoZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gIWhhc01hdGNoKG5leHRSb3V0ZXMsIHJvdXRlLCBwcmV2UGFyYW1zLCBuZXh0UGFyYW1zLCBwcmV2UXVlcnksIG5leHRRdWVyeSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB0b1JvdXRlcyA9IG5leHRSb3V0ZXMuZmlsdGVyKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICAgICAgcmV0dXJuICFoYXNNYXRjaChwcmV2Um91dGVzLCByb3V0ZSwgcHJldlBhcmFtcywgbmV4dFBhcmFtcywgcHJldlF1ZXJ5LCBuZXh0UXVlcnkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZyb21Sb3V0ZXMgPSBbXTtcbiAgICAgICAgICB0b1JvdXRlcyA9IG5leHRSb3V0ZXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHJhbnNpdGlvbiA9IG5ldyBUcmFuc2l0aW9uKHBhdGgsIFJvdXRlci5yZXBsYWNlV2l0aC5iaW5kKFJvdXRlciwgcGF0aCkpO1xuICAgICAgICBwZW5kaW5nVHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG5cbiAgICAgICAgdmFyIGZyb21Db21wb25lbnRzID0gbW91bnRlZENvbXBvbmVudHMuc2xpY2UocHJldlJvdXRlcy5sZW5ndGggLSBmcm9tUm91dGVzLmxlbmd0aCk7XG5cbiAgICAgICAgVHJhbnNpdGlvbi5mcm9tKHRyYW5zaXRpb24sIGZyb21Sb3V0ZXMsIGZyb21Db21wb25lbnRzLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoZXJyb3IgfHwgdHJhbnNpdGlvbi5hYm9ydFJlYXNvbikgcmV0dXJuIGRpc3BhdGNoSGFuZGxlci5jYWxsKFJvdXRlciwgZXJyb3IsIHRyYW5zaXRpb24pOyAvLyBObyBuZWVkIHRvIGNvbnRpbnVlLlxuXG4gICAgICAgICAgVHJhbnNpdGlvbi50byh0cmFuc2l0aW9uLCB0b1JvdXRlcywgbmV4dFBhcmFtcywgbmV4dFF1ZXJ5LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoSGFuZGxlci5jYWxsKFJvdXRlciwgZXJyb3IsIHRyYW5zaXRpb24sIHtcbiAgICAgICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICAgIHBhdGhuYW1lOiBtYXRjaC5wYXRobmFtZSxcbiAgICAgICAgICAgICAgcm91dGVzOiBuZXh0Um91dGVzLFxuICAgICAgICAgICAgICBwYXJhbXM6IG5leHRQYXJhbXMsXG4gICAgICAgICAgICAgIHF1ZXJ5OiBuZXh0UXVlcnlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogU3RhcnRzIHRoaXMgcm91dGVyIGFuZCBjYWxscyBjYWxsYmFjayhyb3V0ZXIsIHN0YXRlKSB3aGVuIHRoZSByb3V0ZSBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIElmIHRoZSByb3V0ZXIncyBsb2NhdGlvbiBpcyBzdGF0aWMgKGkuZS4gYSBVUkwgcGF0aCBpbiBhIHNlcnZlciBlbnZpcm9ubWVudClcbiAgICAgICAqIHRoZSBjYWxsYmFjayBpcyBjYWxsZWQgb25seSBvbmNlLiBPdGhlcndpc2UsIHRoZSBsb2NhdGlvbiBzaG91bGQgYmUgb25lIG9mIHRoZVxuICAgICAgICogUm91dGVyLipMb2NhdGlvbiBvYmplY3RzIChlLmcuIFJvdXRlci5IYXNoTG9jYXRpb24gb3IgUm91dGVyLkhpc3RvcnlMb2NhdGlvbikuXG4gICAgICAgKi9cbiAgICAgIHJ1bjogZnVuY3Rpb24gcnVuKGNhbGxiYWNrKSB7XG4gICAgICAgIGludmFyaWFudCghUm91dGVyLmlzUnVubmluZywgJ1JvdXRlciBpcyBhbHJlYWR5IHJ1bm5pbmcnKTtcblxuICAgICAgICBkaXNwYXRjaEhhbmRsZXIgPSBmdW5jdGlvbiAoZXJyb3IsIHRyYW5zaXRpb24sIG5ld1N0YXRlKSB7XG4gICAgICAgICAgaWYgKGVycm9yKSBSb3V0ZXIuaGFuZGxlRXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgaWYgKHBlbmRpbmdUcmFuc2l0aW9uICE9PSB0cmFuc2l0aW9uKSByZXR1cm47XG5cbiAgICAgICAgICBwZW5kaW5nVHJhbnNpdGlvbiA9IG51bGw7XG5cbiAgICAgICAgICBpZiAodHJhbnNpdGlvbi5hYm9ydFJlYXNvbikge1xuICAgICAgICAgICAgUm91dGVyLmhhbmRsZUFib3J0KHRyYW5zaXRpb24uYWJvcnRSZWFzb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKFJvdXRlciwgUm91dGVyLCBuZXh0U3RhdGUgPSBuZXdTdGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghKGxvY2F0aW9uIGluc3RhbmNlb2YgU3RhdGljTG9jYXRpb24pKSB7XG4gICAgICAgICAgaWYgKGxvY2F0aW9uLmFkZENoYW5nZUxpc3RlbmVyKSBsb2NhdGlvbi5hZGRDaGFuZ2VMaXN0ZW5lcihSb3V0ZXIuaGFuZGxlTG9jYXRpb25DaGFuZ2UpO1xuXG4gICAgICAgICAgUm91dGVyLmlzUnVubmluZyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCb290c3RyYXAgdXNpbmcgdGhlIGN1cnJlbnQgcGF0aC5cbiAgICAgICAgUm91dGVyLnJlZnJlc2goKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlZnJlc2g6IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICAgIFJvdXRlci5kaXNwYXRjaChsb2NhdGlvbi5nZXRDdXJyZW50UGF0aCgpLCBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIFJvdXRlci5jYW5jZWxQZW5kaW5nVHJhbnNpdGlvbigpO1xuXG4gICAgICAgIGlmIChsb2NhdGlvbi5yZW1vdmVDaGFuZ2VMaXN0ZW5lcikgbG9jYXRpb24ucmVtb3ZlQ2hhbmdlTGlzdGVuZXIoUm91dGVyLmhhbmRsZUxvY2F0aW9uQ2hhbmdlKTtcblxuICAgICAgICBSb3V0ZXIuaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICB9LFxuXG4gICAgICBnZXRMb2NhdGlvbjogZnVuY3Rpb24gZ2V0TG9jYXRpb24oKSB7XG4gICAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICAgIH0sXG5cbiAgICAgIGdldFNjcm9sbEJlaGF2aW9yOiBmdW5jdGlvbiBnZXRTY3JvbGxCZWhhdmlvcigpIHtcbiAgICAgICAgcmV0dXJuIHNjcm9sbEJlaGF2aW9yO1xuICAgICAgfSxcblxuICAgICAgZ2V0Um91dGVBdERlcHRoOiBmdW5jdGlvbiBnZXRSb3V0ZUF0RGVwdGgocm91dGVEZXB0aCkge1xuICAgICAgICB2YXIgcm91dGVzID0gc3RhdGUucm91dGVzO1xuICAgICAgICByZXR1cm4gcm91dGVzICYmIHJvdXRlc1tyb3V0ZURlcHRoXTtcbiAgICAgIH0sXG5cbiAgICAgIHNldFJvdXRlQ29tcG9uZW50QXREZXB0aDogZnVuY3Rpb24gc2V0Um91dGVDb21wb25lbnRBdERlcHRoKHJvdXRlRGVwdGgsIGNvbXBvbmVudCkge1xuICAgICAgICBtb3VudGVkQ29tcG9uZW50c1tyb3V0ZURlcHRoXSA9IGNvbXBvbmVudDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0aGUgY3VycmVudCBVUkwgcGF0aCArIHF1ZXJ5IHN0cmluZy5cbiAgICAgICAqL1xuICAgICAgZ2V0Q3VycmVudFBhdGg6IGZ1bmN0aW9uIGdldEN1cnJlbnRQYXRoKCkge1xuICAgICAgICByZXR1cm4gc3RhdGUucGF0aDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0aGUgY3VycmVudCBVUkwgcGF0aCB3aXRob3V0IHRoZSBxdWVyeSBzdHJpbmcuXG4gICAgICAgKi9cbiAgICAgIGdldEN1cnJlbnRQYXRobmFtZTogZnVuY3Rpb24gZ2V0Q3VycmVudFBhdGhuYW1lKCkge1xuICAgICAgICByZXR1cm4gc3RhdGUucGF0aG5hbWU7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgYW4gb2JqZWN0IG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIFVSTCBwYXJhbWV0ZXJzLlxuICAgICAgICovXG4gICAgICBnZXRDdXJyZW50UGFyYW1zOiBmdW5jdGlvbiBnZXRDdXJyZW50UGFyYW1zKCkge1xuICAgICAgICByZXR1cm4gc3RhdGUucGFyYW1zO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCBvZiB0aGUgY3VycmVudGx5IGFjdGl2ZSBxdWVyeSBwYXJhbWV0ZXJzLlxuICAgICAgICovXG4gICAgICBnZXRDdXJyZW50UXVlcnk6IGZ1bmN0aW9uIGdldEN1cnJlbnRRdWVyeSgpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLnF1ZXJ5O1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIHJvdXRlcy5cbiAgICAgICAqL1xuICAgICAgZ2V0Q3VycmVudFJvdXRlczogZnVuY3Rpb24gZ2V0Q3VycmVudFJvdXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLnJvdXRlcztcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiByb3V0ZSwgcGFyYW1zLCBhbmQgcXVlcnkgYXJlIGFjdGl2ZS5cbiAgICAgICAqL1xuICAgICAgaXNBY3RpdmU6IGZ1bmN0aW9uIGlzQWN0aXZlKHRvLCBwYXJhbXMsIHF1ZXJ5KSB7XG4gICAgICAgIGlmIChQYXRoVXRpbHMuaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAgICAgICByZXR1cm4gdG8gPT09IHN0YXRlLnBhdGg7XG4gICAgICAgIH1yZXR1cm4gcm91dGVJc0FjdGl2ZShzdGF0ZS5yb3V0ZXMsIHRvKSAmJiBwYXJhbXNBcmVBY3RpdmUoc3RhdGUucGFyYW1zLCBwYXJhbXMpICYmIChxdWVyeSA9PSBudWxsIHx8IHF1ZXJ5SXNBY3RpdmUoc3RhdGUucXVlcnksIHF1ZXJ5KSk7XG4gICAgICB9XG5cbiAgICB9LFxuXG4gICAgbWl4aW5zOiBbU2Nyb2xsSGlzdG9yeV0sXG5cbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuZmFsc3lcbiAgICB9LFxuXG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHtcbiAgICAgIHJvdXRlRGVwdGg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICAgIHJvdXRlcjogUHJvcFR5cGVzLnJvdXRlci5pc1JlcXVpcmVkXG4gICAgfSxcblxuICAgIGdldENoaWxkQ29udGV4dDogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcm91dGVEZXB0aDogMSxcbiAgICAgICAgcm91dGVyOiBSb3V0ZXJcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgICAgcmV0dXJuIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIH0sXG5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSA9IG5leHRTdGF0ZSk7XG4gICAgfSxcblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIFJvdXRlci5zdG9wKCk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHJvdXRlID0gUm91dGVyLmdldFJvdXRlQXREZXB0aCgwKTtcbiAgICAgIHJldHVybiByb3V0ZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuaGFuZGxlciwgdGhpcy5wcm9wcykgOiBudWxsO1xuICAgIH1cblxuICB9KTtcblxuICBSb3V0ZXIuY2xlYXJBbGxSb3V0ZXMoKTtcblxuICBpZiAob3B0aW9ucy5yb3V0ZXMpIFJvdXRlci5hZGRSb3V0ZXMob3B0aW9ucy5yb3V0ZXMpO1xuXG4gIHJldHVybiBSb3V0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUm91dGVyO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQ2FuY2VsbGF0aW9uXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvQ2FuY2VsbGF0aW9uLmpzXCIsXCIuL0hpc3RvcnlcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9IaXN0b3J5LmpzXCIsXCIuL01hdGNoXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvTWF0Y2guanNcIixcIi4vUGF0aFV0aWxzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvUGF0aFV0aWxzLmpzXCIsXCIuL1Byb3BUeXBlc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1Byb3BUeXBlcy5qc1wiLFwiLi9SZWRpcmVjdFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1JlZGlyZWN0LmpzXCIsXCIuL1JvdXRlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvUm91dGUuanNcIixcIi4vU2Nyb2xsSGlzdG9yeVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1Njcm9sbEhpc3RvcnkuanNcIixcIi4vVHJhbnNpdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1RyYW5zaXRpb24uanNcIixcIi4vYWN0aW9ucy9Mb2NhdGlvbkFjdGlvbnNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9hY3Rpb25zL0xvY2F0aW9uQWN0aW9ucy5qc1wiLFwiLi9iZWhhdmlvcnMvSW1pdGF0ZUJyb3dzZXJCZWhhdmlvclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2JlaGF2aW9ycy9JbWl0YXRlQnJvd3NlckJlaGF2aW9yLmpzXCIsXCIuL2NyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY3JlYXRlUm91dGVzRnJvbVJlYWN0Q2hpbGRyZW4uanNcIixcIi4vaXNSZWFjdENoaWxkcmVuXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvaXNSZWFjdENoaWxkcmVuLmpzXCIsXCIuL2xvY2F0aW9ucy9IYXNoTG9jYXRpb25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9sb2NhdGlvbnMvSGFzaExvY2F0aW9uLmpzXCIsXCIuL2xvY2F0aW9ucy9IaXN0b3J5TG9jYXRpb25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9sb2NhdGlvbnMvSGlzdG9yeUxvY2F0aW9uLmpzXCIsXCIuL2xvY2F0aW9ucy9SZWZyZXNoTG9jYXRpb25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9sb2NhdGlvbnMvUmVmcmVzaExvY2F0aW9uLmpzXCIsXCIuL2xvY2F0aW9ucy9TdGF0aWNMb2NhdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2xvY2F0aW9ucy9TdGF0aWNMb2NhdGlvbi5qc1wiLFwiLi9zdXBwb3J0c0hpc3RvcnlcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9zdXBwb3J0c0hpc3RvcnkuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wiLFwicmVhY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIixcInJlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanNcIixcInJlYWN0L2xpYi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwicmVhY3QvbGliL3dhcm5pbmdcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3dhcm5pbmcuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2NyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoganNoaW50IC1XMDg0ICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgncmVhY3QvbGliL09iamVjdC5hc3NpZ24nKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgncmVhY3QvbGliL3dhcm5pbmcnKTtcbnZhciBEZWZhdWx0Um91dGUgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvRGVmYXVsdFJvdXRlJyk7XG52YXIgTm90Rm91bmRSb3V0ZSA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9Ob3RGb3VuZFJvdXRlJyk7XG52YXIgUmVkaXJlY3QgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvUmVkaXJlY3QnKTtcbnZhciBSb3V0ZSA9IHJlcXVpcmUoJy4vUm91dGUnKTtcblxuZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXMoY29tcG9uZW50TmFtZSwgcHJvcFR5cGVzLCBwcm9wcykge1xuICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCAnVW5rbm93bkNvbXBvbmVudCc7XG5cbiAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcFR5cGVzKSB7XG4gICAgaWYgKHByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgIHZhciBlcnJvciA9IHByb3BUeXBlc1twcm9wTmFtZV0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKTtcblxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHdhcm5pbmcoZmFsc2UsIGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZU9wdGlvbnMocHJvcHMpIHtcbiAgdmFyIG9wdGlvbnMgPSBhc3NpZ24oe30sIHByb3BzKTtcbiAgdmFyIGhhbmRsZXIgPSBvcHRpb25zLmhhbmRsZXI7XG5cbiAgaWYgKGhhbmRsZXIpIHtcbiAgICBvcHRpb25zLm9uRW50ZXIgPSBoYW5kbGVyLndpbGxUcmFuc2l0aW9uVG87XG4gICAgb3B0aW9ucy5vbkxlYXZlID0gaGFuZGxlci53aWxsVHJhbnNpdGlvbkZyb207XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfXZhciB0eXBlID0gZWxlbWVudC50eXBlO1xuICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIHR5cGUuZGVmYXVsdFByb3BzLCBlbGVtZW50LnByb3BzKTtcblxuICBpZiAodHlwZS5wcm9wVHlwZXMpIGNoZWNrUHJvcFR5cGVzKHR5cGUuZGlzcGxheU5hbWUsIHR5cGUucHJvcFR5cGVzLCBwcm9wcyk7XG5cbiAgaWYgKHR5cGUgPT09IERlZmF1bHRSb3V0ZSkge1xuICAgIHJldHVybiBSb3V0ZS5jcmVhdGVEZWZhdWx0Um91dGUoY3JlYXRlUm91dGVPcHRpb25zKHByb3BzKSk7XG4gIH1pZiAodHlwZSA9PT0gTm90Rm91bmRSb3V0ZSkge1xuICAgIHJldHVybiBSb3V0ZS5jcmVhdGVOb3RGb3VuZFJvdXRlKGNyZWF0ZVJvdXRlT3B0aW9ucyhwcm9wcykpO1xuICB9aWYgKHR5cGUgPT09IFJlZGlyZWN0KSB7XG4gICAgcmV0dXJuIFJvdXRlLmNyZWF0ZVJlZGlyZWN0KGNyZWF0ZVJvdXRlT3B0aW9ucyhwcm9wcykpO1xuICB9cmV0dXJuIFJvdXRlLmNyZWF0ZVJvdXRlKGNyZWF0ZVJvdXRlT3B0aW9ucyhwcm9wcyksIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvcHMuY2hpbGRyZW4pIGNyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuKHByb3BzLmNoaWxkcmVuKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiByb3V0ZXMgY3JlYXRlZCBmcm9tIHRoZSBnaXZlblxuICogUmVhY3RDaGlsZHJlbiwgYWxsIG9mIHdoaWNoIHNob3VsZCBiZSBvbmUgb2YgPFJvdXRlPiwgPERlZmF1bHRSb3V0ZT4sXG4gKiA8Tm90Rm91bmRSb3V0ZT4sIG9yIDxSZWRpcmVjdD4sIGUuZy46XG4gKlxuICogICB2YXIgeyBjcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbiwgUm91dGUsIFJlZGlyZWN0IH0gPSByZXF1aXJlKCdyZWFjdC1yb3V0ZXInKTtcbiAqXG4gKiAgIHZhciByb3V0ZXMgPSBjcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbihcbiAqICAgICA8Um91dGUgcGF0aD1cIi9cIiBoYW5kbGVyPXtBcHB9PlxuICogICAgICAgPFJvdXRlIG5hbWU9XCJ1c2VyXCIgcGF0aD1cIi91c2VyLzp1c2VySWRcIiBoYW5kbGVyPXtVc2VyfT5cbiAqICAgICAgICAgPFJvdXRlIG5hbWU9XCJ0YXNrXCIgcGF0aD1cInRhc2tzLzp0YXNrSWRcIiBoYW5kbGVyPXtUYXNrfS8+XG4gKiAgICAgICAgIDxSZWRpcmVjdCBmcm9tPVwidG9kb3MvOnRhc2tJZFwiIHRvPVwidGFza1wiLz5cbiAqICAgICAgIDwvUm91dGU+XG4gKiAgICAgPC9Sb3V0ZT5cbiAqICAgKTtcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbVJlYWN0Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgdmFyIHJvdXRlcyA9IFtdO1xuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCA9IGNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudChjaGlsZCkpIHJvdXRlcy5wdXNoKGNoaWxkKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJvdXRlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbjtcbn0se1wiLi9Sb3V0ZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1JvdXRlLmpzXCIsXCIuL2NvbXBvbmVudHMvRGVmYXVsdFJvdXRlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9EZWZhdWx0Um91dGUuanNcIixcIi4vY29tcG9uZW50cy9Ob3RGb3VuZFJvdXRlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9Ob3RGb3VuZFJvdXRlLmpzXCIsXCIuL2NvbXBvbmVudHMvUmVkaXJlY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9jb21wb25lbnRzL1JlZGlyZWN0LmpzXCIsXCJyZWFjdFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiLFwicmVhY3QvbGliL09iamVjdC5hc3NpZ25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanNcIixcInJlYWN0L2xpYi93YXJuaW5nXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi93YXJuaW5nLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9nZXRXaW5kb3dTY3JvbGxQb3NpdGlvbi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9pbnZhcmlhbnQnKTtcbnZhciBjYW5Vc2VET00gPSByZXF1aXJlKCdyZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKS5jYW5Vc2VET007XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIHdpbmRvdyBhcyB7IHgsIHkgfS5cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsUG9zaXRpb24oKSB7XG4gIGludmFyaWFudChjYW5Vc2VET00sICdDYW5ub3QgZ2V0IGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIHdpdGhvdXQgYSBET00nKTtcblxuICByZXR1cm4ge1xuICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFdpbmRvd1Njcm9sbFBvc2l0aW9uO1xufSx7XCJyZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzXCIsXCJyZWFjdC9saWIvaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2luZGV4LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLkRlZmF1bHRSb3V0ZSA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9EZWZhdWx0Um91dGUnKTtcbmV4cG9ydHMuTGluayA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9MaW5rJyk7XG5leHBvcnRzLk5vdEZvdW5kUm91dGUgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvTm90Rm91bmRSb3V0ZScpO1xuZXhwb3J0cy5SZWRpcmVjdCA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9SZWRpcmVjdCcpO1xuZXhwb3J0cy5Sb3V0ZSA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9Sb3V0ZScpO1xuZXhwb3J0cy5BY3RpdmVIYW5kbGVyID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL1JvdXRlSGFuZGxlcicpO1xuZXhwb3J0cy5Sb3V0ZUhhbmRsZXIgPSBleHBvcnRzLkFjdGl2ZUhhbmRsZXI7XG5cbmV4cG9ydHMuSGFzaExvY2F0aW9uID0gcmVxdWlyZSgnLi9sb2NhdGlvbnMvSGFzaExvY2F0aW9uJyk7XG5leHBvcnRzLkhpc3RvcnlMb2NhdGlvbiA9IHJlcXVpcmUoJy4vbG9jYXRpb25zL0hpc3RvcnlMb2NhdGlvbicpO1xuZXhwb3J0cy5SZWZyZXNoTG9jYXRpb24gPSByZXF1aXJlKCcuL2xvY2F0aW9ucy9SZWZyZXNoTG9jYXRpb24nKTtcbmV4cG9ydHMuU3RhdGljTG9jYXRpb24gPSByZXF1aXJlKCcuL2xvY2F0aW9ucy9TdGF0aWNMb2NhdGlvbicpO1xuZXhwb3J0cy5UZXN0TG9jYXRpb24gPSByZXF1aXJlKCcuL2xvY2F0aW9ucy9UZXN0TG9jYXRpb24nKTtcblxuZXhwb3J0cy5JbWl0YXRlQnJvd3NlckJlaGF2aW9yID0gcmVxdWlyZSgnLi9iZWhhdmlvcnMvSW1pdGF0ZUJyb3dzZXJCZWhhdmlvcicpO1xuZXhwb3J0cy5TY3JvbGxUb1RvcEJlaGF2aW9yID0gcmVxdWlyZSgnLi9iZWhhdmlvcnMvU2Nyb2xsVG9Ub3BCZWhhdmlvcicpO1xuXG5leHBvcnRzLkhpc3RvcnkgPSByZXF1aXJlKCcuL0hpc3RvcnknKTtcbmV4cG9ydHMuTmF2aWdhdGlvbiA9IHJlcXVpcmUoJy4vTmF2aWdhdGlvbicpO1xuZXhwb3J0cy5TdGF0ZSA9IHJlcXVpcmUoJy4vU3RhdGUnKTtcblxuZXhwb3J0cy5jcmVhdGVSb3V0ZSA9IHJlcXVpcmUoJy4vUm91dGUnKS5jcmVhdGVSb3V0ZTtcbmV4cG9ydHMuY3JlYXRlRGVmYXVsdFJvdXRlID0gcmVxdWlyZSgnLi9Sb3V0ZScpLmNyZWF0ZURlZmF1bHRSb3V0ZTtcbmV4cG9ydHMuY3JlYXRlTm90Rm91bmRSb3V0ZSA9IHJlcXVpcmUoJy4vUm91dGUnKS5jcmVhdGVOb3RGb3VuZFJvdXRlO1xuZXhwb3J0cy5jcmVhdGVSZWRpcmVjdCA9IHJlcXVpcmUoJy4vUm91dGUnKS5jcmVhdGVSZWRpcmVjdDtcbmV4cG9ydHMuY3JlYXRlUm91dGVzRnJvbVJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKCcuL2NyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuJyk7XG5cbmV4cG9ydHMuY3JlYXRlID0gcmVxdWlyZSgnLi9jcmVhdGVSb3V0ZXInKTtcbmV4cG9ydHMucnVuID0gcmVxdWlyZSgnLi9ydW5Sb3V0ZXInKTtcbn0se1wiLi9IaXN0b3J5XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvSGlzdG9yeS5qc1wiLFwiLi9OYXZpZ2F0aW9uXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvTmF2aWdhdGlvbi5qc1wiLFwiLi9Sb3V0ZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1JvdXRlLmpzXCIsXCIuL1N0YXRlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvU3RhdGUuanNcIixcIi4vYmVoYXZpb3JzL0ltaXRhdGVCcm93c2VyQmVoYXZpb3JcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9iZWhhdmlvcnMvSW1pdGF0ZUJyb3dzZXJCZWhhdmlvci5qc1wiLFwiLi9iZWhhdmlvcnMvU2Nyb2xsVG9Ub3BCZWhhdmlvclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2JlaGF2aW9ycy9TY3JvbGxUb1RvcEJlaGF2aW9yLmpzXCIsXCIuL2NvbXBvbmVudHMvRGVmYXVsdFJvdXRlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9EZWZhdWx0Um91dGUuanNcIixcIi4vY29tcG9uZW50cy9MaW5rXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9MaW5rLmpzXCIsXCIuL2NvbXBvbmVudHMvTm90Rm91bmRSb3V0ZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2NvbXBvbmVudHMvTm90Rm91bmRSb3V0ZS5qc1wiLFwiLi9jb21wb25lbnRzL1JlZGlyZWN0XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9SZWRpcmVjdC5qc1wiLFwiLi9jb21wb25lbnRzL1JvdXRlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcG9uZW50cy9Sb3V0ZS5qc1wiLFwiLi9jb21wb25lbnRzL1JvdXRlSGFuZGxlclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2NvbXBvbmVudHMvUm91dGVIYW5kbGVyLmpzXCIsXCIuL2NyZWF0ZVJvdXRlclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2NyZWF0ZVJvdXRlci5qc1wiLFwiLi9jcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2NyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuLmpzXCIsXCIuL2xvY2F0aW9ucy9IYXNoTG9jYXRpb25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9sb2NhdGlvbnMvSGFzaExvY2F0aW9uLmpzXCIsXCIuL2xvY2F0aW9ucy9IaXN0b3J5TG9jYXRpb25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9sb2NhdGlvbnMvSGlzdG9yeUxvY2F0aW9uLmpzXCIsXCIuL2xvY2F0aW9ucy9SZWZyZXNoTG9jYXRpb25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9sb2NhdGlvbnMvUmVmcmVzaExvY2F0aW9uLmpzXCIsXCIuL2xvY2F0aW9ucy9TdGF0aWNMb2NhdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2xvY2F0aW9ucy9TdGF0aWNMb2NhdGlvbi5qc1wiLFwiLi9sb2NhdGlvbnMvVGVzdExvY2F0aW9uXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvbG9jYXRpb25zL1Rlc3RMb2NhdGlvbi5qc1wiLFwiLi9ydW5Sb3V0ZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9ydW5Sb3V0ZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2lzUmVhY3RDaGlsZHJlbi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuZnVuY3Rpb24gaXNWYWxpZENoaWxkKG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgfHwgUmVhY3QuaXNWYWxpZEVsZW1lbnQob2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gaXNSZWFjdENoaWxkcmVuKG9iamVjdCkge1xuICByZXR1cm4gaXNWYWxpZENoaWxkKG9iamVjdCkgfHwgQXJyYXkuaXNBcnJheShvYmplY3QpICYmIG9iamVjdC5ldmVyeShpc1ZhbGlkQ2hpbGQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUmVhY3RDaGlsZHJlbjtcbn0se1wicmVhY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2xvY2F0aW9ucy9IYXNoTG9jYXRpb24uanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBMb2NhdGlvbkFjdGlvbnMgPSByZXF1aXJlKCcuLi9hY3Rpb25zL0xvY2F0aW9uQWN0aW9ucycpO1xudmFyIEhpc3RvcnkgPSByZXF1aXJlKCcuLi9IaXN0b3J5Jyk7XG5cbnZhciBfbGlzdGVuZXJzID0gW107XG52YXIgX2lzTGlzdGVuaW5nID0gZmFsc2U7XG52YXIgX2FjdGlvblR5cGU7XG5cbmZ1bmN0aW9uIG5vdGlmeUNoYW5nZSh0eXBlKSB7XG4gIGlmICh0eXBlID09PSBMb2NhdGlvbkFjdGlvbnMuUFVTSCkgSGlzdG9yeS5sZW5ndGggKz0gMTtcblxuICB2YXIgY2hhbmdlID0ge1xuICAgIHBhdGg6IEhhc2hMb2NhdGlvbi5nZXRDdXJyZW50UGF0aCgpLFxuICAgIHR5cGU6IHR5cGVcbiAgfTtcblxuICBfbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgbGlzdGVuZXIuY2FsbChIYXNoTG9jYXRpb24sIGNoYW5nZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVTbGFzaCgpIHtcbiAgdmFyIHBhdGggPSBIYXNoTG9jYXRpb24uZ2V0Q3VycmVudFBhdGgoKTtcblxuICBpZiAocGF0aC5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9SGFzaExvY2F0aW9uLnJlcGxhY2UoJy8nICsgcGF0aCk7XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkhhc2hDaGFuZ2UoKSB7XG4gIGlmIChlbnN1cmVTbGFzaCgpKSB7XG4gICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhbiBfYWN0aW9uVHlwZSB0aGVuIGFsbCB3ZSBrbm93IGlzIHRoZSBoYXNoXG4gICAgLy8gY2hhbmdlZC4gSXQgd2FzIHByb2JhYmx5IGNhdXNlZCBieSB0aGUgdXNlciBjbGlja2luZyB0aGUgQmFja1xuICAgIC8vIGJ1dHRvbiwgYnV0IG1heSBoYXZlIGFsc28gYmVlbiB0aGUgRm9yd2FyZCBidXR0b24gb3IgbWFudWFsXG4gICAgLy8gbWFuaXB1bGF0aW9uLiBTbyBqdXN0IGd1ZXNzICdwb3AnLlxuICAgIHZhciBjdXJBY3Rpb25UeXBlID0gX2FjdGlvblR5cGU7XG4gICAgX2FjdGlvblR5cGUgPSBudWxsO1xuICAgIG5vdGlmeUNoYW5nZShjdXJBY3Rpb25UeXBlIHx8IExvY2F0aW9uQWN0aW9ucy5QT1ApO1xuICB9XG59XG5cbi8qKlxuICogQSBMb2NhdGlvbiB0aGF0IHVzZXMgYHdpbmRvdy5sb2NhdGlvbi5oYXNoYC5cbiAqL1xudmFyIEhhc2hMb2NhdGlvbiA9IHtcblxuICBhZGRDaGFuZ2VMaXN0ZW5lcjogZnVuY3Rpb24gYWRkQ2hhbmdlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICBfbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgLy8gRG8gdGhpcyBCRUZPUkUgbGlzdGVuaW5nIGZvciBoYXNoY2hhbmdlLlxuICAgIGVuc3VyZVNsYXNoKCk7XG5cbiAgICBpZiAoIV9pc0xpc3RlbmluZykge1xuICAgICAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgb25IYXNoQ2hhbmdlLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoJ29uaGFzaGNoYW5nZScsIG9uSGFzaENoYW5nZSk7XG4gICAgICB9XG5cbiAgICAgIF9pc0xpc3RlbmluZyA9IHRydWU7XG4gICAgfVxuICB9LFxuXG4gIHJlbW92ZUNoYW5nZUxpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVDaGFuZ2VMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIF9saXN0ZW5lcnMgPSBfbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAobCkge1xuICAgICAgcmV0dXJuIGwgIT09IGxpc3RlbmVyO1xuICAgIH0pO1xuXG4gICAgaWYgKF9saXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAod2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBvbkhhc2hDaGFuZ2UsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudCgnb25oYXNoY2hhbmdlJywgb25IYXNoQ2hhbmdlKTtcbiAgICAgIH1cblxuICAgICAgX2lzTGlzdGVuaW5nID0gZmFsc2U7XG4gICAgfVxuICB9LFxuXG4gIHB1c2g6IGZ1bmN0aW9uIHB1c2gocGF0aCkge1xuICAgIF9hY3Rpb25UeXBlID0gTG9jYXRpb25BY3Rpb25zLlBVU0g7XG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xuICB9LFxuXG4gIHJlcGxhY2U6IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCkge1xuICAgIF9hY3Rpb25UeXBlID0gTG9jYXRpb25BY3Rpb25zLlJFUExBQ0U7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArICcjJyArIHBhdGgpO1xuICB9LFxuXG4gIHBvcDogZnVuY3Rpb24gcG9wKCkge1xuICAgIF9hY3Rpb25UeXBlID0gTG9jYXRpb25BY3Rpb25zLlBPUDtcbiAgICBIaXN0b3J5LmJhY2soKTtcbiAgfSxcblxuICBnZXRDdXJyZW50UGF0aDogZnVuY3Rpb24gZ2V0Q3VycmVudFBhdGgoKSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSShcbiAgICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gICAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnIycpWzFdIHx8ICcnKTtcbiAgfSxcblxuICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICc8SGFzaExvY2F0aW9uPic7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoTG9jYXRpb247XG59LHtcIi4uL0hpc3RvcnlcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9IaXN0b3J5LmpzXCIsXCIuLi9hY3Rpb25zL0xvY2F0aW9uQWN0aW9uc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2FjdGlvbnMvTG9jYXRpb25BY3Rpb25zLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9sb2NhdGlvbnMvSGlzdG9yeUxvY2F0aW9uLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTG9jYXRpb25BY3Rpb25zID0gcmVxdWlyZSgnLi4vYWN0aW9ucy9Mb2NhdGlvbkFjdGlvbnMnKTtcbnZhciBIaXN0b3J5ID0gcmVxdWlyZSgnLi4vSGlzdG9yeScpO1xuXG52YXIgX2xpc3RlbmVycyA9IFtdO1xudmFyIF9pc0xpc3RlbmluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBub3RpZnlDaGFuZ2UodHlwZSkge1xuICB2YXIgY2hhbmdlID0ge1xuICAgIHBhdGg6IEhpc3RvcnlMb2NhdGlvbi5nZXRDdXJyZW50UGF0aCgpLFxuICAgIHR5cGU6IHR5cGVcbiAgfTtcblxuICBfbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgbGlzdGVuZXIuY2FsbChIaXN0b3J5TG9jYXRpb24sIGNoYW5nZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvblBvcFN0YXRlKGV2ZW50KSB7XG4gIGlmIChldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG5cbiAgbm90aWZ5Q2hhbmdlKExvY2F0aW9uQWN0aW9ucy5QT1ApO1xufVxuXG4vKipcbiAqIEEgTG9jYXRpb24gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cbnZhciBIaXN0b3J5TG9jYXRpb24gPSB7XG5cbiAgYWRkQ2hhbmdlTGlzdGVuZXI6IGZ1bmN0aW9uIGFkZENoYW5nZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIGlmICghX2lzTGlzdGVuaW5nKSB7XG4gICAgICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgb25Qb3BTdGF0ZSwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCdvbnBvcHN0YXRlJywgb25Qb3BTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIF9pc0xpc3RlbmluZyA9IHRydWU7XG4gICAgfVxuICB9LFxuXG4gIHJlbW92ZUNoYW5nZUxpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVDaGFuZ2VMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIF9saXN0ZW5lcnMgPSBfbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAobCkge1xuICAgICAgcmV0dXJuIGwgIT09IGxpc3RlbmVyO1xuICAgIH0pO1xuXG4gICAgaWYgKF9saXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgb25Qb3BTdGF0ZSwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50KCdvbnBvcHN0YXRlJywgb25Qb3BTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIF9pc0xpc3RlbmluZyA9IGZhbHNlO1xuICAgIH1cbiAgfSxcblxuICBwdXNoOiBmdW5jdGlvbiBwdXNoKHBhdGgpIHtcbiAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoeyBwYXRoOiBwYXRoIH0sICcnLCBwYXRoKTtcbiAgICBIaXN0b3J5Lmxlbmd0aCArPSAxO1xuICAgIG5vdGlmeUNoYW5nZShMb2NhdGlvbkFjdGlvbnMuUFVTSCk7XG4gIH0sXG5cbiAgcmVwbGFjZTogZnVuY3Rpb24gcmVwbGFjZShwYXRoKSB7XG4gICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHsgcGF0aDogcGF0aCB9LCAnJywgcGF0aCk7XG4gICAgbm90aWZ5Q2hhbmdlKExvY2F0aW9uQWN0aW9ucy5SRVBMQUNFKTtcbiAgfSxcblxuICBwb3A6IEhpc3RvcnkuYmFjayxcblxuICBnZXRDdXJyZW50UGF0aDogZnVuY3Rpb24gZ2V0Q3VycmVudFBhdGgoKSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSSh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgfSxcblxuICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICc8SGlzdG9yeUxvY2F0aW9uPic7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBIaXN0b3J5TG9jYXRpb247XG59LHtcIi4uL0hpc3RvcnlcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9IaXN0b3J5LmpzXCIsXCIuLi9hY3Rpb25zL0xvY2F0aW9uQWN0aW9uc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2FjdGlvbnMvTG9jYXRpb25BY3Rpb25zLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9sb2NhdGlvbnMvUmVmcmVzaExvY2F0aW9uLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgSGlzdG9yeUxvY2F0aW9uID0gcmVxdWlyZSgnLi9IaXN0b3J5TG9jYXRpb24nKTtcbnZhciBIaXN0b3J5ID0gcmVxdWlyZSgnLi4vSGlzdG9yeScpO1xuXG4vKipcbiAqIEEgTG9jYXRpb24gdGhhdCB1c2VzIGZ1bGwgcGFnZSByZWZyZXNoZXMuIFRoaXMgaXMgdXNlZCBhc1xuICogdGhlIGZhbGxiYWNrIGZvciBIaXN0b3J5TG9jYXRpb24gaW4gYnJvd3NlcnMgdGhhdCBkbyBub3RcbiAqIHN1cHBvcnQgdGhlIEhUTUw1IGhpc3RvcnkgQVBJLlxuICovXG52YXIgUmVmcmVzaExvY2F0aW9uID0ge1xuXG4gIHB1c2g6IGZ1bmN0aW9uIHB1c2gocGF0aCkge1xuICAgIHdpbmRvdy5sb2NhdGlvbiA9IHBhdGg7XG4gIH0sXG5cbiAgcmVwbGFjZTogZnVuY3Rpb24gcmVwbGFjZShwYXRoKSB7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UocGF0aCk7XG4gIH0sXG5cbiAgcG9wOiBIaXN0b3J5LmJhY2ssXG5cbiAgZ2V0Q3VycmVudFBhdGg6IEhpc3RvcnlMb2NhdGlvbi5nZXRDdXJyZW50UGF0aCxcblxuICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICc8UmVmcmVzaExvY2F0aW9uPic7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWZyZXNoTG9jYXRpb247XG59LHtcIi4uL0hpc3RvcnlcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9IaXN0b3J5LmpzXCIsXCIuL0hpc3RvcnlMb2NhdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2xvY2F0aW9ucy9IaXN0b3J5TG9jYXRpb24uanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2xvY2F0aW9ucy9TdGF0aWNMb2NhdGlvbi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9pbnZhcmlhbnQnKTtcblxuZnVuY3Rpb24gdGhyb3dDYW5ub3RNb2RpZnkoKSB7XG4gIGludmFyaWFudChmYWxzZSwgJ1lvdSBjYW5ub3QgbW9kaWZ5IGEgc3RhdGljIGxvY2F0aW9uJyk7XG59XG5cbi8qKlxuICogQSBsb2NhdGlvbiB0aGF0IG9ubHkgZXZlciBjb250YWlucyBhIHNpbmdsZSBwYXRoLiBVc2VmdWwgaW5cbiAqIHN0YXRlbGVzcyBlbnZpcm9ubWVudHMgbGlrZSBzZXJ2ZXJzIHdoZXJlIHRoZXJlIGlzIG5vIHBhdGggaGlzdG9yeSxcbiAqIG9ubHkgdGhlIHBhdGggdGhhdCB3YXMgdXNlZCBpbiB0aGUgcmVxdWVzdC5cbiAqL1xuXG52YXIgU3RhdGljTG9jYXRpb24gPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdGF0aWNMb2NhdGlvbihwYXRoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRpY0xvY2F0aW9uKTtcblxuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3RhdGljTG9jYXRpb24sIFt7XG4gICAga2V5OiAnZ2V0Q3VycmVudFBhdGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50UGF0aCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhdGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiAnPFN0YXRpY0xvY2F0aW9uIHBhdGg9XCInICsgdGhpcy5wYXRoICsgJ1wiPic7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0YXRpY0xvY2F0aW9uO1xufSkoKTtcblxuLy8gVE9ETzogSW5jbHVkZSB0aGVzZSBpbiB0aGUgYWJvdmUgY2xhc3MgZGVmaW5pdGlvblxuLy8gb25jZSB3ZSBjYW4gdXNlIEVTNyBwcm9wZXJ0eSBpbml0aWFsaXplcnMuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmFiZWwvYmFiZWwvaXNzdWVzLzYxOVxuXG5TdGF0aWNMb2NhdGlvbi5wcm90b3R5cGUucHVzaCA9IHRocm93Q2Fubm90TW9kaWZ5O1xuU3RhdGljTG9jYXRpb24ucHJvdG90eXBlLnJlcGxhY2UgPSB0aHJvd0Nhbm5vdE1vZGlmeTtcblN0YXRpY0xvY2F0aW9uLnByb3RvdHlwZS5wb3AgPSB0aHJvd0Nhbm5vdE1vZGlmeTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGF0aWNMb2NhdGlvbjtcbn0se1wicmVhY3QvbGliL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9sb2NhdGlvbnMvVGVzdExvY2F0aW9uLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgncmVhY3QvbGliL2ludmFyaWFudCcpO1xudmFyIExvY2F0aW9uQWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvTG9jYXRpb25BY3Rpb25zJyk7XG52YXIgSGlzdG9yeSA9IHJlcXVpcmUoJy4uL0hpc3RvcnknKTtcblxuLyoqXG4gKiBBIGxvY2F0aW9uIHRoYXQgaXMgY29udmVuaWVudCBmb3IgdGVzdGluZyBhbmQgZG9lcyBub3QgcmVxdWlyZSBhIERPTS5cbiAqL1xuXG52YXIgVGVzdExvY2F0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVGVzdExvY2F0aW9uKGhpc3RvcnkpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGVzdExvY2F0aW9uKTtcblxuICAgIHRoaXMuaGlzdG9yeSA9IGhpc3RvcnkgfHwgW107XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLl91cGRhdGVIaXN0b3J5TGVuZ3RoKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGVzdExvY2F0aW9uLCBbe1xuICAgIGtleTogJ25lZWRzRE9NJyxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfdXBkYXRlSGlzdG9yeUxlbmd0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVIaXN0b3J5TGVuZ3RoKCkge1xuICAgICAgSGlzdG9yeS5sZW5ndGggPSB0aGlzLmhpc3RvcnkubGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19ub3RpZnlDaGFuZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfbm90aWZ5Q2hhbmdlKHR5cGUpIHtcbiAgICAgIHZhciBjaGFuZ2UgPSB7XG4gICAgICAgIHBhdGg6IHRoaXMuZ2V0Q3VycmVudFBhdGgoKSxcbiAgICAgICAgdHlwZTogdHlwZVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB0aGlzLmxpc3RlbmVyc1tpXS5jYWxsKHRoaXMsIGNoYW5nZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYWRkQ2hhbmdlTGlzdGVuZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDaGFuZ2VMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlQ2hhbmdlTGlzdGVuZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVDaGFuZ2VMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgcmV0dXJuIGwgIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncHVzaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2gocGF0aCkge1xuICAgICAgdGhpcy5oaXN0b3J5LnB1c2gocGF0aCk7XG4gICAgICB0aGlzLl91cGRhdGVIaXN0b3J5TGVuZ3RoKCk7XG4gICAgICB0aGlzLl9ub3RpZnlDaGFuZ2UoTG9jYXRpb25BY3Rpb25zLlBVU0gpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlcGxhY2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXBsYWNlKHBhdGgpIHtcbiAgICAgIGludmFyaWFudCh0aGlzLmhpc3RvcnkubGVuZ3RoLCAnWW91IGNhbm5vdCByZXBsYWNlIHRoZSBjdXJyZW50IHBhdGggd2l0aCBubyBoaXN0b3J5Jyk7XG5cbiAgICAgIHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMV0gPSBwYXRoO1xuXG4gICAgICB0aGlzLl9ub3RpZnlDaGFuZ2UoTG9jYXRpb25BY3Rpb25zLlJFUExBQ0UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBvcCgpIHtcbiAgICAgIHRoaXMuaGlzdG9yeS5wb3AoKTtcbiAgICAgIHRoaXMuX3VwZGF0ZUhpc3RvcnlMZW5ndGgoKTtcbiAgICAgIHRoaXMuX25vdGlmeUNoYW5nZShMb2NhdGlvbkFjdGlvbnMuUE9QKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRDdXJyZW50UGF0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRQYXRoKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiAnPFRlc3RMb2NhdGlvbj4nO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUZXN0TG9jYXRpb247XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRlc3RMb2NhdGlvbjtcbn0se1wiLi4vSGlzdG9yeVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL0hpc3RvcnkuanNcIixcIi4uL2FjdGlvbnMvTG9jYXRpb25BY3Rpb25zXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvYWN0aW9ucy9Mb2NhdGlvbkFjdGlvbnMuanNcIixcInJlYWN0L2xpYi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvcnVuUm91dGVyLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlUm91dGVyID0gcmVxdWlyZSgnLi9jcmVhdGVSb3V0ZXInKTtcblxuLyoqXG4gKiBBIGhpZ2gtbGV2ZWwgY29udmVuaWVuY2UgbWV0aG9kIHRoYXQgY3JlYXRlcywgY29uZmlndXJlcywgYW5kXG4gKiBydW5zIGEgcm91dGVyIGluIG9uZSBzaG90LiBUaGUgbWV0aG9kIHNpZ25hdHVyZSBpczpcbiAqXG4gKiAgIFJvdXRlci5ydW4ocm91dGVzWywgbG9jYXRpb24gXSwgY2FsbGJhY2spO1xuICpcbiAqIFVzaW5nIGB3aW5kb3cubG9jYXRpb24uaGFzaGAgdG8gbWFuYWdlIHRoZSBVUkwsIHlvdSBjb3VsZCBkbzpcbiAqXG4gKiAgIFJvdXRlci5ydW4ocm91dGVzLCBmdW5jdGlvbiAoSGFuZGxlcikge1xuICogICAgIFJlYWN0LnJlbmRlcig8SGFuZGxlci8+LCBkb2N1bWVudC5ib2R5KTtcbiAqICAgfSk7XG4gKiBcbiAqIFVzaW5nIEhUTUw1IGhpc3RvcnkgYW5kIGEgY3VzdG9tIFwiY3Vyc29yXCIgcHJvcDpcbiAqIFxuICogICBSb3V0ZXIucnVuKHJvdXRlcywgUm91dGVyLkhpc3RvcnlMb2NhdGlvbiwgZnVuY3Rpb24gKEhhbmRsZXIpIHtcbiAqICAgICBSZWFjdC5yZW5kZXIoPEhhbmRsZXIgY3Vyc29yPXtjdXJzb3J9Lz4sIGRvY3VtZW50LmJvZHkpO1xuICogICB9KTtcbiAqXG4gKiBSZXR1cm5zIHRoZSBuZXdseSBjcmVhdGVkIHJvdXRlci5cbiAqXG4gKiBOb3RlOiBJZiB5b3UgbmVlZCB0byBzcGVjaWZ5IGZ1cnRoZXIgb3B0aW9ucyBmb3IgeW91ciByb3V0ZXIgc3VjaFxuICogYXMgZXJyb3IvYWJvcnQgaGFuZGxpbmcgb3IgY3VzdG9tIHNjcm9sbCBiZWhhdmlvciwgdXNlIFJvdXRlci5jcmVhdGVcbiAqIGluc3RlYWQuXG4gKlxuICogICB2YXIgcm91dGVyID0gUm91dGVyLmNyZWF0ZShvcHRpb25zKTtcbiAqICAgcm91dGVyLnJ1bihmdW5jdGlvbiAoSGFuZGxlcikge1xuICogICAgIC8vIC4uLlxuICogICB9KTtcbiAqL1xuZnVuY3Rpb24gcnVuUm91dGVyKHJvdXRlcywgbG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGxvY2F0aW9uO1xuICAgIGxvY2F0aW9uID0gbnVsbDtcbiAgfVxuXG4gIHZhciByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoe1xuICAgIHJvdXRlczogcm91dGVzLFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICB9KTtcblxuICByb3V0ZXIucnVuKGNhbGxiYWNrKTtcblxuICByZXR1cm4gcm91dGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJ1blJvdXRlcjtcbn0se1wiLi9jcmVhdGVSb3V0ZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9jcmVhdGVSb3V0ZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL3N1cHBvcnRzSGlzdG9yeS5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICAvKiEgdGFrZW4gZnJvbSBtb2Rlcm5penJcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICAgKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYWNrdC9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICAgKi9cbiAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdXBwb3J0c0hpc3Rvcnk7XG59LHt9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBUb09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIGtleXM7XG5cdHZhciB0byA9IFRvT2JqZWN0KHRhcmdldCk7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gYXJndW1lbnRzW3NdO1xuXHRcdGtleXMgPSBPYmplY3Qua2V5cyhPYmplY3QoZnJvbSkpO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0b1trZXlzW2ldXSA9IGZyb21ba2V5c1tpXV07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcXMvaW5kZXguanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliLycpO1xuXG59LHtcIi4vbGliL1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3FzL2xpYi9pbmRleC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcXMvbGliL2luZGV4LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gTG9hZCBtb2R1bGVzXG5cbnZhciBTdHJpbmdpZnkgPSByZXF1aXJlKCcuL3N0cmluZ2lmeScpO1xudmFyIFBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xuXG5cbi8vIERlY2xhcmUgaW50ZXJuYWxzXG5cbnZhciBpbnRlcm5hbHMgPSB7fTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBzdHJpbmdpZnk6IFN0cmluZ2lmeSxcbiAgICBwYXJzZTogUGFyc2Vcbn07XG5cbn0se1wiLi9wYXJzZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3FzL2xpYi9wYXJzZS5qc1wiLFwiLi9zdHJpbmdpZnlcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9xcy9saWIvc3RyaW5naWZ5LmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9xcy9saWIvcGFyc2UuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBMb2FkIG1vZHVsZXNcblxudmFyIFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5cbi8vIERlY2xhcmUgaW50ZXJuYWxzXG5cbnZhciBpbnRlcm5hbHMgPSB7XG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZGVwdGg6IDUsXG4gICAgYXJyYXlMaW1pdDogMjAsXG4gICAgcGFyYW1ldGVyTGltaXQ6IDEwMDBcbn07XG5cblxuaW50ZXJuYWxzLnBhcnNlVmFsdWVzID0gZnVuY3Rpb24gKHN0ciwgb3B0aW9ucykge1xuXG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIHZhciBwYXJ0cyA9IHN0ci5zcGxpdChvcHRpb25zLmRlbGltaXRlciwgb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA9PT0gSW5maW5pdHkgPyB1bmRlZmluZWQgOiBvcHRpb25zLnBhcmFtZXRlckxpbWl0KTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHBhcnRzLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcbiAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgdmFyIHBvcyA9IHBhcnQuaW5kZXhPZignXT0nKSA9PT0gLTEgPyBwYXJ0LmluZGV4T2YoJz0nKSA6IHBhcnQuaW5kZXhPZignXT0nKSArIDE7XG5cbiAgICAgICAgaWYgKHBvcyA9PT0gLTEpIHtcbiAgICAgICAgICAgIG9ialtVdGlscy5kZWNvZGUocGFydCldID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gVXRpbHMuZGVjb2RlKHBhcnQuc2xpY2UoMCwgcG9zKSk7XG4gICAgICAgICAgICB2YXIgdmFsID0gVXRpbHMuZGVjb2RlKHBhcnQuc2xpY2UocG9zICsgMSkpO1xuXG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9ialtrZXldID0gW10uY29uY2F0KG9ialtrZXldKS5jb25jYXQodmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG5cbmludGVybmFscy5wYXJzZU9iamVjdCA9IGZ1bmN0aW9uIChjaGFpbiwgdmFsLCBvcHRpb25zKSB7XG5cbiAgICBpZiAoIWNoYWluLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIHZhciByb290ID0gY2hhaW4uc2hpZnQoKTtcblxuICAgIHZhciBvYmogPSB7fTtcbiAgICBpZiAocm9vdCA9PT0gJ1tdJykge1xuICAgICAgICBvYmogPSBbXTtcbiAgICAgICAgb2JqID0gb2JqLmNvbmNhdChpbnRlcm5hbHMucGFyc2VPYmplY3QoY2hhaW4sIHZhbCwgb3B0aW9ucykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGNsZWFuUm9vdCA9IHJvb3RbMF0gPT09ICdbJyAmJiByb290W3Jvb3QubGVuZ3RoIC0gMV0gPT09ICddJyA/IHJvb3Quc2xpY2UoMSwgcm9vdC5sZW5ndGggLSAxKSA6IHJvb3Q7XG4gICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGNsZWFuUm9vdCwgMTApO1xuICAgICAgICB2YXIgaW5kZXhTdHJpbmcgPSAnJyArIGluZGV4O1xuICAgICAgICBpZiAoIWlzTmFOKGluZGV4KSAmJlxuICAgICAgICAgICAgcm9vdCAhPT0gY2xlYW5Sb290ICYmXG4gICAgICAgICAgICBpbmRleFN0cmluZyA9PT0gY2xlYW5Sb290ICYmXG4gICAgICAgICAgICBpbmRleCA+PSAwICYmXG4gICAgICAgICAgICBpbmRleCA8PSBvcHRpb25zLmFycmF5TGltaXQpIHtcblxuICAgICAgICAgICAgb2JqID0gW107XG4gICAgICAgICAgICBvYmpbaW5kZXhdID0gaW50ZXJuYWxzLnBhcnNlT2JqZWN0KGNoYWluLCB2YWwsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqW2NsZWFuUm9vdF0gPSBpbnRlcm5hbHMucGFyc2VPYmplY3QoY2hhaW4sIHZhbCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxuXG5pbnRlcm5hbHMucGFyc2VLZXlzID0gZnVuY3Rpb24gKGtleSwgdmFsLCBvcHRpb25zKSB7XG5cbiAgICBpZiAoIWtleSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVGhlIHJlZ2V4IGNodW5rc1xuXG4gICAgdmFyIHBhcmVudCA9IC9eKFteXFxbXFxdXSopLztcbiAgICB2YXIgY2hpbGQgPSAvKFxcW1teXFxbXFxdXSpcXF0pL2c7XG5cbiAgICAvLyBHZXQgdGhlIHBhcmVudFxuXG4gICAgdmFyIHNlZ21lbnQgPSBwYXJlbnQuZXhlYyhrZXkpO1xuXG4gICAgLy8gRG9uJ3QgYWxsb3cgdGhlbSB0byBvdmVyd3JpdGUgb2JqZWN0IHByb3RvdHlwZSBwcm9wZXJ0aWVzXG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShzZWdtZW50WzFdKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU3Rhc2ggdGhlIHBhcmVudCBpZiBpdCBleGlzdHNcblxuICAgIHZhciBrZXlzID0gW107XG4gICAgaWYgKHNlZ21lbnRbMV0pIHtcbiAgICAgICAga2V5cy5wdXNoKHNlZ21lbnRbMV0pO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCBjaGlsZHJlbiBhcHBlbmRpbmcgdG8gdGhlIGFycmF5IHVudGlsIHdlIGhpdCBkZXB0aFxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlICgoc2VnbWVudCA9IGNoaWxkLmV4ZWMoa2V5KSkgIT09IG51bGwgJiYgaSA8IG9wdGlvbnMuZGVwdGgpIHtcblxuICAgICAgICArK2k7XG4gICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShzZWdtZW50WzFdLnJlcGxhY2UoL1xcW3xcXF0vZywgJycpKSkge1xuICAgICAgICAgICAga2V5cy5wdXNoKHNlZ21lbnRbMV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUncyBhIHJlbWFpbmRlciwganVzdCBhZGQgd2hhdGV2ZXIgaXMgbGVmdFxuXG4gICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAga2V5cy5wdXNoKCdbJyArIGtleS5zbGljZShzZWdtZW50LmluZGV4KSArICddJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVybmFscy5wYXJzZU9iamVjdChrZXlzLCB2YWwsIG9wdGlvbnMpO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIsIG9wdGlvbnMpIHtcblxuICAgIGlmIChzdHIgPT09ICcnIHx8XG4gICAgICAgIHN0ciA9PT0gbnVsbCB8fFxuICAgICAgICB0eXBlb2Ygc3RyID09PSAndW5kZWZpbmVkJykge1xuXG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLmRlbGltaXRlciA9IHR5cGVvZiBvcHRpb25zLmRlbGltaXRlciA9PT0gJ3N0cmluZycgfHwgVXRpbHMuaXNSZWdFeHAob3B0aW9ucy5kZWxpbWl0ZXIpID8gb3B0aW9ucy5kZWxpbWl0ZXIgOiBpbnRlcm5hbHMuZGVsaW1pdGVyO1xuICAgIG9wdGlvbnMuZGVwdGggPSB0eXBlb2Ygb3B0aW9ucy5kZXB0aCA9PT0gJ251bWJlcicgPyBvcHRpb25zLmRlcHRoIDogaW50ZXJuYWxzLmRlcHRoO1xuICAgIG9wdGlvbnMuYXJyYXlMaW1pdCA9IHR5cGVvZiBvcHRpb25zLmFycmF5TGltaXQgPT09ICdudW1iZXInID8gb3B0aW9ucy5hcnJheUxpbWl0IDogaW50ZXJuYWxzLmFycmF5TGltaXQ7XG4gICAgb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA9IHR5cGVvZiBvcHRpb25zLnBhcmFtZXRlckxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdGlvbnMucGFyYW1ldGVyTGltaXQgOiBpbnRlcm5hbHMucGFyYW1ldGVyTGltaXQ7XG5cbiAgICB2YXIgdGVtcE9iaiA9IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gaW50ZXJuYWxzLnBhcnNlVmFsdWVzKHN0ciwgb3B0aW9ucykgOiBzdHI7XG4gICAgdmFyIG9iaiA9IHt9O1xuXG4gICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBrZXlzIGFuZCBzZXR1cCB0aGUgbmV3IG9iamVjdFxuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0ZW1wT2JqKTtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBrZXlzLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgIHZhciBuZXdPYmogPSBpbnRlcm5hbHMucGFyc2VLZXlzKGtleSwgdGVtcE9ialtrZXldLCBvcHRpb25zKTtcbiAgICAgICAgb2JqID0gVXRpbHMubWVyZ2Uob2JqLCBuZXdPYmopO1xuICAgIH1cblxuICAgIHJldHVybiBVdGlscy5jb21wYWN0KG9iaik7XG59O1xuXG59LHtcIi4vdXRpbHNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9xcy9saWIvdXRpbHMuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3FzL2xpYi9zdHJpbmdpZnkuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBMb2FkIG1vZHVsZXNcblxudmFyIFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5cbi8vIERlY2xhcmUgaW50ZXJuYWxzXG5cbnZhciBpbnRlcm5hbHMgPSB7XG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgYXJyYXlQcmVmaXhHZW5lcmF0b3JzOiB7XG4gICAgICAgIGJyYWNrZXRzOiBmdW5jdGlvbiAocHJlZml4LCBrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyAnW10nO1xuICAgICAgICB9LFxuICAgICAgICBpbmRpY2VzOiBmdW5jdGlvbiAocHJlZml4LCBrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyAnWycgKyBrZXkgKyAnXSc7XG4gICAgICAgIH0sXG4gICAgICAgIHJlcGVhdDogZnVuY3Rpb24gKHByZWZpeCwga2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG5pbnRlcm5hbHMuc3RyaW5naWZ5ID0gZnVuY3Rpb24gKG9iaiwgcHJlZml4LCBnZW5lcmF0ZUFycmF5UHJlZml4KSB7XG5cbiAgICBpZiAoVXRpbHMuaXNCdWZmZXIob2JqKSkge1xuICAgICAgICBvYmogPSBvYmoudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBvYmogPSBvYmoudG9JU09TdHJpbmcoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIG9iaiA9ICcnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyB8fFxuICAgICAgICB0eXBlb2Ygb2JqID09PSAnbnVtYmVyJyB8fFxuICAgICAgICB0eXBlb2Ygb2JqID09PSAnYm9vbGVhbicpIHtcblxuICAgICAgICByZXR1cm4gW2VuY29kZVVSSUNvbXBvbmVudChwcmVmaXgpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9iaildO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cblxuICAgIHZhciBvYmpLZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBvYmpLZXlzLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQoaW50ZXJuYWxzLnN0cmluZ2lmeShvYmpba2V5XSwgZ2VuZXJhdGVBcnJheVByZWZpeChwcmVmaXgsIGtleSksIGdlbmVyYXRlQXJyYXlQcmVmaXgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQoaW50ZXJuYWxzLnN0cmluZ2lmeShvYmpba2V5XSwgcHJlZml4ICsgJ1snICsga2V5ICsgJ10nLCBnZW5lcmF0ZUFycmF5UHJlZml4KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmosIG9wdGlvbnMpIHtcblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciBkZWxpbWl0ZXIgPSB0eXBlb2Ygb3B0aW9ucy5kZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gaW50ZXJuYWxzLmRlbGltaXRlciA6IG9wdGlvbnMuZGVsaW1pdGVyO1xuXG4gICAgdmFyIGtleXMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fFxuICAgICAgICBvYmogPT09IG51bGwpIHtcblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgdmFyIGFycmF5Rm9ybWF0O1xuICAgIGlmIChvcHRpb25zLmFycmF5Rm9ybWF0IGluIGludGVybmFscy5hcnJheVByZWZpeEdlbmVyYXRvcnMpIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRpb25zLmFycmF5Rm9ybWF0O1xuICAgIH1cbiAgICBlbHNlIGlmICgnaW5kaWNlcycgaW4gb3B0aW9ucykge1xuICAgICAgICBhcnJheUZvcm1hdCA9IG9wdGlvbnMuaW5kaWNlcyA/ICdpbmRpY2VzJyA6ICdyZXBlYXQnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSAnaW5kaWNlcyc7XG4gICAgfVxuXG4gICAgdmFyIGdlbmVyYXRlQXJyYXlQcmVmaXggPSBpbnRlcm5hbHMuYXJyYXlQcmVmaXhHZW5lcmF0b3JzW2FycmF5Rm9ybWF0XTtcblxuICAgIHZhciBvYmpLZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBvYmpLZXlzLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07XG4gICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChpbnRlcm5hbHMuc3RyaW5naWZ5KG9ialtrZXldLCBrZXksIGdlbmVyYXRlQXJyYXlQcmVmaXgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5cy5qb2luKGRlbGltaXRlcik7XG59O1xuXG59LHtcIi4vdXRpbHNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9xcy9saWIvdXRpbHMuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3FzL2xpYi91dGlscy5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIExvYWQgbW9kdWxlc1xuXG5cbi8vIERlY2xhcmUgaW50ZXJuYWxzXG5cbnZhciBpbnRlcm5hbHMgPSB7fTtcblxuXG5leHBvcnRzLmFycmF5VG9PYmplY3QgPSBmdW5jdGlvbiAoc291cmNlKSB7XG5cbiAgICB2YXIgb2JqID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gc291cmNlLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbaV0gIT09ICd1bmRlZmluZWQnKSB7XG5cbiAgICAgICAgICAgIG9ialtpXSA9IHNvdXJjZVtpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG5cbmV4cG9ydHMubWVyZ2UgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblxuICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRhcmdldC5wdXNoKHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRbc291cmNlXSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0YXJnZXQgPSBbdGFyZ2V0XS5jb25jYXQoc291cmNlKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmXG4gICAgICAgICFBcnJheS5pc0FycmF5KHNvdXJjZSkpIHtcblxuICAgICAgICB0YXJnZXQgPSBleHBvcnRzLmFycmF5VG9PYmplY3QodGFyZ2V0KTtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgZm9yICh2YXIgayA9IDAsIGtsID0ga2V5cy5sZW5ndGg7IGsgPCBrbDsgKytrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2tdO1xuICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgICBpZiAoIXRhcmdldFtrZXldKSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBleHBvcnRzLm1lcmdlKHRhcmdldFtrZXldLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcblxuXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcblxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufTtcblxuXG5leHBvcnRzLmNvbXBhY3QgPSBmdW5jdGlvbiAob2JqLCByZWZzKSB7XG5cbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgb2JqID09PSBudWxsKSB7XG5cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICByZWZzID0gcmVmcyB8fCBbXTtcbiAgICB2YXIgbG9va3VwID0gcmVmcy5pbmRleE9mKG9iaik7XG4gICAgaWYgKGxvb2t1cCAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHJlZnNbbG9va3VwXTtcbiAgICB9XG5cbiAgICByZWZzLnB1c2gob2JqKTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgdmFyIGNvbXBhY3RlZCA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IG9iai5sZW5ndGg7IGkgPCBpbDsgKytpKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9ialtpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjb21wYWN0ZWQucHVzaChvYmpbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbXBhY3RlZDtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgZm9yIChpID0gMCwgaWwgPSBrZXlzLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgIG9ialtrZXldID0gZXhwb3J0cy5jb21wYWN0KG9ialtrZXldLCByZWZzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxuXG5leHBvcnRzLmlzUmVnRXhwID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59O1xuXG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBmdW5jdGlvbiAob2JqKSB7XG5cbiAgICBpZiAob2JqID09PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAhIShvYmouY29uc3RydWN0b3IgJiZcbiAgICAgICAgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyICYmXG4gICAgICAgIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopKTtcbn07XG5cbn0se31dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvQXV0b0ZvY3VzTWl4aW4uanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQXV0b0ZvY3VzTWl4aW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9jdXNOb2RlID0gcmVxdWlyZShcIi4vZm9jdXNOb2RlXCIpO1xuXG52YXIgQXV0b0ZvY3VzTWl4aW4gPSB7XG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgIGZvY3VzTm9kZSh0aGlzLmdldERPTU5vZGUoKSk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1dG9Gb2N1c01peGluO1xuXG59LHtcIi4vZm9jdXNOb2RlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9mb2N1c05vZGUuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvQmVmb3JlSW5wdXRFdmVudFBsdWdpbi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xudmFyIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZSA9IHJlcXVpcmUoXCIuL0ZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZVwiKTtcbnZhciBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljQ29tcG9zaXRpb25FdmVudFwiKTtcbnZhciBTeW50aGV0aWNJbnB1dEV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljSW5wdXRFdmVudFwiKTtcblxudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG5cbnZhciBFTkRfS0VZQ09ERVMgPSBbOSwgMTMsIDI3LCAzMl07IC8vIFRhYiwgUmV0dXJuLCBFc2MsIFNwYWNlXG52YXIgU1RBUlRfS0VZQ09ERSA9IDIyOTtcblxudmFyIGNhblVzZUNvbXBvc2l0aW9uRXZlbnQgPSAoXG4gIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJlxuICAnQ29tcG9zaXRpb25FdmVudCcgaW4gd2luZG93XG4pO1xuXG52YXIgZG9jdW1lbnRNb2RlID0gbnVsbDtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQpIHtcbiAgZG9jdW1lbnRNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xufVxuXG4vLyBXZWJraXQgb2ZmZXJzIGEgdmVyeSB1c2VmdWwgYHRleHRJbnB1dGAgZXZlbnQgdGhhdCBjYW4gYmUgdXNlZCB0b1xuLy8gZGlyZWN0bHkgcmVwcmVzZW50IGBiZWZvcmVJbnB1dGAuIFRoZSBJRSBgdGV4dGlucHV0YCBldmVudCBpcyBub3QgYXNcbi8vIHVzZWZ1bCwgc28gd2UgZG9uJ3QgdXNlIGl0LlxudmFyIGNhblVzZVRleHRJbnB1dEV2ZW50ID0gKFxuICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiZcbiAgJ1RleHRFdmVudCcgaW4gd2luZG93ICYmXG4gICFkb2N1bWVudE1vZGUgJiZcbiAgIWlzUHJlc3RvKClcbik7XG5cbi8vIEluIElFOSssIHdlIGhhdmUgYWNjZXNzIHRvIGNvbXBvc2l0aW9uIGV2ZW50cywgYnV0IHRoZSBkYXRhIHN1cHBsaWVkXG4vLyBieSB0aGUgbmF0aXZlIGNvbXBvc2l0aW9uZW5kIGV2ZW50IG1heSBiZSBpbmNvcnJlY3QuIEphcGFuZXNlIGlkZW9ncmFwaGljXG4vLyBzcGFjZXMsIGZvciBpbnN0YW5jZSAoXFx1MzAwMCkgYXJlIG5vdCByZWNvcmRlZCBjb3JyZWN0bHkuXG52YXIgdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPSAoXG4gIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJlxuICAoXG4gICAgKCFjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IHx8IGRvY3VtZW50TW9kZSAmJiBkb2N1bWVudE1vZGUgPiA4ICYmIGRvY3VtZW50TW9kZSA8PSAxMSlcbiAgKVxuKTtcblxuLyoqXG4gKiBPcGVyYSA8PSAxMiBpbmNsdWRlcyBUZXh0RXZlbnQgaW4gd2luZG93LCBidXQgZG9lcyBub3QgZmlyZVxuICogdGV4dCBpbnB1dCBldmVudHMuIFJlbHkgb24ga2V5cHJlc3MgaW5zdGVhZC5cbiAqL1xuZnVuY3Rpb24gaXNQcmVzdG8oKSB7XG4gIHZhciBvcGVyYSA9IHdpbmRvdy5vcGVyYTtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygb3BlcmEgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIG9wZXJhLnZlcnNpb24gPT09ICdmdW5jdGlvbicgJiZcbiAgICBwYXJzZUludChvcGVyYS52ZXJzaW9uKCksIDEwKSA8PSAxMlxuICApO1xufVxuXG52YXIgU1BBQ0VCQVJfQ09ERSA9IDMyO1xudmFyIFNQQUNFQkFSX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFNQQUNFQkFSX0NPREUpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbi8vIEV2ZW50cyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSBuYW1lcy5cbnZhciBldmVudFR5cGVzID0ge1xuICBiZWZvcmVJbnB1dDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25CZWZvcmVJbnB1dDogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkJlZm9yZUlucHV0Q2FwdHVyZTogbnVsbH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BUZXh0SW5wdXQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlXG4gICAgXVxuICB9LFxuICBjb21wb3NpdGlvbkVuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Db21wb3NpdGlvbkVuZDogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZTogbnVsbH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duXG4gICAgXVxuICB9LFxuICBjb21wb3NpdGlvblN0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uU3RhcnQ6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZTogbnVsbH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25TdGFydCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5RG93bixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25cbiAgICBdXG4gIH0sXG4gIGNvbXBvc2l0aW9uVXBkYXRlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uVXBkYXRlOiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblVwZGF0ZSxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5RG93bixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25cbiAgICBdXG4gIH1cbn07XG5cbi8vIFRyYWNrIHdoZXRoZXIgd2UndmUgZXZlciBoYW5kbGVkIGEga2V5cHJlc3Mgb24gdGhlIHNwYWNlIGtleS5cbnZhciBoYXNTcGFjZUtleXByZXNzID0gZmFsc2U7XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgYSBuYXRpdmUga2V5cHJlc3MgZXZlbnQgaXMgYXNzdW1lZCB0byBiZSBhIGNvbW1hbmQuXG4gKiBUaGlzIGlzIHJlcXVpcmVkIGJlY2F1c2UgRmlyZWZveCBmaXJlcyBga2V5cHJlc3NgIGV2ZW50cyBmb3Iga2V5IGNvbW1hbmRzXG4gKiAoY3V0LCBjb3B5LCBzZWxlY3QtYWxsLCBldGMuKSBldmVuIHRob3VnaCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiAoXG4gICAgKG5hdGl2ZUV2ZW50LmN0cmxLZXkgfHwgbmF0aXZlRXZlbnQuYWx0S2V5IHx8IG5hdGl2ZUV2ZW50Lm1ldGFLZXkpICYmXG4gICAgLy8gY3RybEtleSAmJiBhbHRLZXkgaXMgZXF1aXZhbGVudCB0byBBbHRHciwgYW5kIGlzIG5vdCBhIGNvbW1hbmQuXG4gICAgIShuYXRpdmVFdmVudC5jdHJsS2V5ICYmIG5hdGl2ZUV2ZW50LmFsdEtleSlcbiAgKTtcbn1cblxuXG4vKipcbiAqIFRyYW5zbGF0ZSBuYXRpdmUgdG9wIGxldmVsIGV2ZW50cyBpbnRvIGV2ZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uU3RhcnQ6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblVwZGF0ZTpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uVXBkYXRlO1xuICB9XG59XG5cbi8qKlxuICogRG9lcyBvdXIgZmFsbGJhY2sgYmVzdC1ndWVzcyBtb2RlbCB0aGluayB0aGlzIGV2ZW50IHNpZ25pZmllcyB0aGF0XG4gKiBjb21wb3NpdGlvbiBoYXMgYmVndW4/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiAoXG4gICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24gJiZcbiAgICBuYXRpdmVFdmVudC5rZXlDb2RlID09PSBTVEFSVF9LRVlDT0RFXG4gICk7XG59XG5cbi8qKlxuICogRG9lcyBvdXIgZmFsbGJhY2sgbW9kZSB0aGluayB0aGF0IHRoaXMgZXZlbnQgaXMgdGhlIGVuZCBvZiBjb21wb3NpdGlvbj9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwOlxuICAgICAgLy8gQ29tbWFuZCBrZXlzIGluc2VydCBvciBjbGVhciBJTUUgaW5wdXQuXG4gICAgICByZXR1cm4gKEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpICE9PSAtMSk7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd246XG4gICAgICAvLyBFeHBlY3QgSU1FIGtleUNvZGUgb24gZWFjaCBrZXlkb3duLiBJZiB3ZSBnZXQgYW55IG90aGVyXG4gICAgICAvLyBjb2RlIHdlIG11c3QgaGF2ZSBleGl0ZWQgZWFybGllci5cbiAgICAgIHJldHVybiAobmF0aXZlRXZlbnQua2V5Q29kZSAhPT0gU1RBUlRfS0VZQ09ERSk7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICAvLyBFdmVudHMgYXJlIG5vdCBwb3NzaWJsZSB3aXRob3V0IGNhbmNlbGxpbmcgSU1FLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEdvb2dsZSBJbnB1dCBUb29scyBwcm92aWRlcyBjb21wb3NpdGlvbiBkYXRhIHZpYSBhIEN1c3RvbUV2ZW50LFxuICogd2l0aCB0aGUgYGRhdGFgIHByb3BlcnR5IHBvcHVsYXRlZCBpbiB0aGUgYGRldGFpbGAgb2JqZWN0LiBJZiB0aGlzXG4gKiBpcyBhdmFpbGFibGUgb24gdGhlIGV2ZW50IG9iamVjdCwgdXNlIGl0LiBJZiBub3QsIHRoaXMgaXMgYSBwbGFpblxuICogY29tcG9zaXRpb24gZXZlbnQgYW5kIHdlIGhhdmUgbm90aGluZyBzcGVjaWFsIHRvIGV4dHJhY3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBkZXRhaWwgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gIGlmICh0eXBlb2YgZGV0YWlsID09PSAnb2JqZWN0JyAmJiAnZGF0YScgaW4gZGV0YWlsKSB7XG4gICAgcmV0dXJuIGRldGFpbC5kYXRhO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vLyBUcmFjayB0aGUgY3VycmVudCBJTUUgY29tcG9zaXRpb24gZmFsbGJhY2sgb2JqZWN0LCBpZiBhbnkuXG52YXIgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P29iamVjdH0gQSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LlxuICovXG5mdW5jdGlvbiBleHRyYWN0Q29tcG9zaXRpb25FdmVudChcbiAgdG9wTGV2ZWxUeXBlLFxuICB0b3BMZXZlbFRhcmdldCxcbiAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgbmF0aXZlRXZlbnRcbikge1xuICB2YXIgZXZlbnRUeXBlO1xuICB2YXIgZmFsbGJhY2tEYXRhO1xuXG4gIGlmIChjYW5Vc2VDb21wb3NpdGlvbkV2ZW50KSB7XG4gICAgZXZlbnRUeXBlID0gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKTtcbiAgfSBlbHNlIGlmICghY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgaWYgKGlzRmFsbGJhY2tDb21wb3NpdGlvblN0YXJ0KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgICBldmVudFR5cGUgPSBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQ7XG4gIH1cblxuICBpZiAoIWV2ZW50VHlwZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhKSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgY29tcG9zaXRpb24gaXMgc3RvcmVkIHN0YXRpY2FsbHkgYW5kIG11c3Qgbm90IGJlXG4gICAgLy8gb3ZlcndyaXR0ZW4gd2hpbGUgY29tcG9zaXRpb24gY29udGludWVzLlxuICAgIGlmICghY3VycmVudENvbXBvc2l0aW9uICYmIGV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0KSB7XG4gICAgICBjdXJyZW50Q29tcG9zaXRpb24gPSBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUuZ2V0UG9vbGVkKHRvcExldmVsVGFyZ2V0KTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZCkge1xuICAgICAgaWYgKGN1cnJlbnRDb21wb3NpdGlvbikge1xuICAgICAgICBmYWxsYmFja0RhdGEgPSBjdXJyZW50Q29tcG9zaXRpb24uZ2V0RGF0YSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuZ2V0UG9vbGVkKFxuICAgIGV2ZW50VHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldElELFxuICAgIG5hdGl2ZUV2ZW50XG4gICk7XG5cbiAgaWYgKGZhbGxiYWNrRGF0YSkge1xuICAgIC8vIEluamVjdCBkYXRhIGdlbmVyYXRlZCBmcm9tIGZhbGxiYWNrIHBhdGggaW50byB0aGUgc3ludGhldGljIGV2ZW50LlxuICAgIC8vIFRoaXMgbWF0Y2hlcyB0aGUgcHJvcGVydHkgb2YgbmF0aXZlIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UuXG4gICAgZXZlbnQuZGF0YSA9IGZhbGxiYWNrRGF0YTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VzdG9tRGF0YSA9IGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGlmIChjdXN0b21EYXRhICE9PSBudWxsKSB7XG4gICAgICBldmVudC5kYXRhID0gY3VzdG9tRGF0YTtcbiAgICB9XG4gIH1cblxuICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIHN0cmluZyBjb3JyZXNwb25kaW5nIHRvIHRoaXMgYGJlZm9yZUlucHV0YCBldmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kOlxuICAgICAgcmV0dXJuIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgIC8qKlxuICAgICAgICogSWYgbmF0aXZlIGB0ZXh0SW5wdXRgIGV2ZW50cyBhcmUgYXZhaWxhYmxlLCBvdXIgZ29hbCBpcyB0byBtYWtlXG4gICAgICAgKiB1c2Ugb2YgdGhlbS4gSG93ZXZlciwgdGhlcmUgaXMgYSBzcGVjaWFsIGNhc2U6IHRoZSBzcGFjZWJhciBrZXkuXG4gICAgICAgKiBJbiBXZWJraXQsIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBhIHNwYWNlYmFyIGB0ZXh0SW5wdXRgIGV2ZW50XG4gICAgICAgKiBjYW5jZWxzIGNoYXJhY3RlciBpbnNlcnRpb24sIGJ1dCBpdCAqYWxzbyogY2F1c2VzIHRoZSBicm93c2VyXG4gICAgICAgKiB0byBmYWxsIGJhY2sgdG8gaXRzIGRlZmF1bHQgc3BhY2ViYXIgYmVoYXZpb3Igb2Ygc2Nyb2xsaW5nIHRoZVxuICAgICAgICogcGFnZS5cbiAgICAgICAqXG4gICAgICAgKiBUcmFja2luZyBhdDpcbiAgICAgICAqIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNTUxMDNcbiAgICAgICAqXG4gICAgICAgKiBUbyBhdm9pZCB0aGlzIGlzc3VlLCB1c2UgdGhlIGtleXByZXNzIGV2ZW50IGFzIGlmIG5vIGB0ZXh0SW5wdXRgXG4gICAgICAgKiBldmVudCBpcyBhdmFpbGFibGUuXG4gICAgICAgKi9cbiAgICAgIHZhciB3aGljaCA9IG5hdGl2ZUV2ZW50LndoaWNoO1xuICAgICAgaWYgKHdoaWNoICE9PSBTUEFDRUJBUl9DT0RFKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBoYXNTcGFjZUtleXByZXNzID0gdHJ1ZTtcbiAgICAgIHJldHVybiBTUEFDRUJBUl9DSEFSO1xuXG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRleHRJbnB1dDpcbiAgICAgIC8vIFJlY29yZCB0aGUgY2hhcmFjdGVycyB0byBiZSBhZGRlZCB0byB0aGUgRE9NLlxuICAgICAgdmFyIGNoYXJzID0gbmF0aXZlRXZlbnQuZGF0YTtcblxuICAgICAgLy8gSWYgaXQncyBhIHNwYWNlYmFyIGNoYXJhY3RlciwgYXNzdW1lIHRoYXQgd2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWRcbiAgICAgIC8vIGl0IGF0IHRoZSBrZXlwcmVzcyBsZXZlbCBhbmQgYmFpbCBpbW1lZGlhdGVseS4gQW5kcm9pZCBDaHJvbWVcbiAgICAgIC8vIGRvZXNuJ3QgZ2l2ZSB1cyBrZXljb2Rlcywgc28gd2UgbmVlZCB0byBibGFja2xpc3QgaXQuXG4gICAgICBpZiAoY2hhcnMgPT09IFNQQUNFQkFSX0NIQVIgJiYgaGFzU3BhY2VLZXlwcmVzcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoYXJzO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIEZvciBvdGhlciBuYXRpdmUgZXZlbnQgdHlwZXMsIGRvIG5vdGhpbmcuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEZvciBicm93c2VycyB0aGF0IGRvIG5vdCBwcm92aWRlIHRoZSBgdGV4dElucHV0YCBldmVudCwgZXh0cmFjdCB0aGVcbiAqIGFwcHJvcHJpYXRlIHN0cmluZyB0byB1c2UgZm9yIFN5bnRoZXRpY0lucHV0RXZlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIGZhbGxiYWNrIHN0cmluZyBmb3IgdGhpcyBgYmVmb3JlSW5wdXRgIGV2ZW50LlxuICovXG5mdW5jdGlvbiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGNvbXBvc2luZyAoSU1FKSBhbmQgdXNpbmcgYSBmYWxsYmFjayB0byBkbyBzbyxcbiAgLy8gdHJ5IHRvIGV4dHJhY3QgdGhlIGNvbXBvc2VkIGNoYXJhY3RlcnMgZnJvbSB0aGUgZmFsbGJhY2sgb2JqZWN0LlxuICBpZiAoY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgaWYgKFxuICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kIHx8XG4gICAgICBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudClcbiAgICApIHtcbiAgICAgIHZhciBjaGFycyA9IGN1cnJlbnRDb21wb3NpdGlvbi5nZXREYXRhKCk7XG4gICAgICBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUucmVsZWFzZShjdXJyZW50Q29tcG9zaXRpb24pO1xuICAgICAgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcbiAgICAgIHJldHVybiBjaGFycztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZTpcbiAgICAgIC8vIElmIGEgcGFzdGUgZXZlbnQgb2NjdXJzIGFmdGVyIGEga2V5cHJlc3MsIHRocm93IG91dCB0aGUgaW5wdXRcbiAgICAgIC8vIGNoYXJzLiBQYXN0ZSBldmVudHMgc2hvdWxkIG5vdCBsZWFkIHRvIEJlZm9yZUlucHV0IGV2ZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgIC8qKlxuICAgICAgICogQXMgb2YgdjI3LCBGaXJlZm94IG1heSBmaXJlIGtleXByZXNzIGV2ZW50cyBldmVuIHdoZW4gbm8gY2hhcmFjdGVyXG4gICAgICAgKiB3aWxsIGJlIGluc2VydGVkLiBBIGZldyBwb3NzaWJpbGl0aWVzOlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyBgMGAuIEFycm93IGtleXMsIEVzYyBrZXksIGV0Yy5cbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgdGhlIHByZXNzZWQga2V5IGNvZGUsIGJ1dCBubyBjaGFyIGlzIGF2YWlsYWJsZS5cbiAgICAgICAqICAgRXg6ICdBbHRHciArIGRgIGluIFBvbGlzaC4gVGhlcmUgaXMgbm8gbW9kaWZpZWQgY2hhcmFjdGVyIGZvclxuICAgICAgICogICB0aGlzIGtleSBjb21iaW5hdGlvbiBhbmQgbm8gY2hhcmFjdGVyIGlzIGluc2VydGVkIGludG8gdGhlXG4gICAgICAgKiAgIGRvY3VtZW50LCBidXQgRkYgZmlyZXMgdGhlIGtleXByZXNzIGZvciBjaGFyIGNvZGUgYDEwMGAgYW55d2F5LlxuICAgICAgICogICBObyBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgYSBjb21tYW5kIGNvbWJpbmF0aW9uIGlzXG4gICAgICAgKiAgIGJlaW5nIHVzZWQuIEV4OiBgQ21kK0NgLiBObyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQsIGFuZCBub1xuICAgICAgICogICBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKi9cbiAgICAgIGlmIChuYXRpdmVFdmVudC53aGljaCAmJiAhaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgIHJldHVybiB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSA/IG51bGwgOiBuYXRpdmVFdmVudC5kYXRhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEV4dHJhY3QgYSBTeW50aGV0aWNJbnB1dEV2ZW50IGZvciBgYmVmb3JlSW5wdXRgLCBiYXNlZCBvbiBlaXRoZXIgbmF0aXZlXG4gKiBgdGV4dElucHV0YCBvciBmYWxsYmFjayBiZWhhdmlvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P29iamVjdH0gQSBTeW50aGV0aWNJbnB1dEV2ZW50LlxuICovXG5mdW5jdGlvbiBleHRyYWN0QmVmb3JlSW5wdXRFdmVudChcbiAgdG9wTGV2ZWxUeXBlLFxuICB0b3BMZXZlbFRhcmdldCxcbiAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgbmF0aXZlRXZlbnRcbikge1xuICB2YXIgY2hhcnM7XG5cbiAgaWYgKGNhblVzZVRleHRJbnB1dEV2ZW50KSB7XG4gICAgY2hhcnMgPSBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICB9IGVsc2Uge1xuICAgIGNoYXJzID0gZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICB9XG5cbiAgLy8gSWYgbm8gY2hhcmFjdGVycyBhcmUgYmVpbmcgaW5zZXJ0ZWQsIG5vIEJlZm9yZUlucHV0IGV2ZW50IHNob3VsZFxuICAvLyBiZSBmaXJlZC5cbiAgaWYgKCFjaGFycykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGV2ZW50ID0gU3ludGhldGljSW5wdXRFdmVudC5nZXRQb29sZWQoXG4gICAgZXZlbnRUeXBlcy5iZWZvcmVJbnB1dCxcbiAgICB0b3BMZXZlbFRhcmdldElELFxuICAgIG5hdGl2ZUV2ZW50XG4gICk7XG5cbiAgZXZlbnQuZGF0YSA9IGNoYXJzO1xuICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGBvbkJlZm9yZUlucHV0YCBldmVudCB0byBtYXRjaFxuICogaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAxMzExMDUvI2V2ZW50cy1pbnB1dGV2ZW50cy5cbiAqXG4gKiBUaGlzIGV2ZW50IHBsdWdpbiBpcyBiYXNlZCBvbiB0aGUgbmF0aXZlIGB0ZXh0SW5wdXRgIGV2ZW50XG4gKiBhdmFpbGFibGUgaW4gQ2hyb21lLCBTYWZhcmksIE9wZXJhLCBhbmQgSUUuIFRoaXMgZXZlbnQgZmlyZXMgYWZ0ZXJcbiAqIGBvbktleVByZXNzYCBhbmQgYG9uQ29tcG9zaXRpb25FbmRgLCBidXQgYmVmb3JlIGBvbklucHV0YC5cbiAqXG4gKiBgYmVmb3JlSW5wdXRgIGlzIHNwZWMnZCBidXQgbm90IGltcGxlbWVudGVkIGluIGFueSBicm93c2VycywgYW5kXG4gKiB0aGUgYGlucHV0YCBldmVudCBkb2VzIG5vdCBwcm92aWRlIGFueSB1c2VmdWwgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBoYXNcbiAqIGFjdHVhbGx5IGJlZW4gYWRkZWQsIGNvbnRyYXJ5IHRvIHRoZSBzcGVjLiBUaHVzLCBgdGV4dElucHV0YCBpcyB0aGUgYmVzdFxuICogYXZhaWxhYmxlIGV2ZW50IHRvIGlkZW50aWZ5IHRoZSBjaGFyYWN0ZXJzIHRoYXQgaGF2ZSBhY3R1YWxseSBiZWVuIGluc2VydGVkXG4gKiBpbnRvIHRoZSB0YXJnZXQgbm9kZS5cbiAqXG4gKiBUaGlzIHBsdWdpbiBpcyBhbHNvIHJlc3BvbnNpYmxlIGZvciBlbWl0dGluZyBgY29tcG9zaXRpb25gIGV2ZW50cywgdGh1c1xuICogYWxsb3dpbmcgdXMgdG8gc2hhcmUgY29tcG9zaXRpb24gZmFsbGJhY2sgY29kZSBmb3IgYm90aCBgYmVmb3JlSW5wdXRgIGFuZFxuICogYGNvbXBvc2l0aW9uYCBldmVudCB0eXBlcy5cbiAqL1xudmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICBuYXRpdmVFdmVudFxuICApIHtcbiAgICByZXR1cm4gW1xuICAgICAgZXh0cmFjdENvbXBvc2l0aW9uRXZlbnQoXG4gICAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICApLFxuICAgICAgZXh0cmFjdEJlZm9yZUlucHV0RXZlbnQoXG4gICAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICApXG4gICAgXTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luO1xuXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50Q29uc3RhbnRzLmpzXCIsXCIuL0V2ZW50UHJvcGFnYXRvcnNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50UHJvcGFnYXRvcnMuanNcIixcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzXCIsXCIuL0ZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLmpzXCIsXCIuL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuanNcIixcIi4vU3ludGhldGljSW5wdXRFdmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljSW5wdXRFdmVudC5qc1wiLFwiLi9rZXlPZlwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIva2V5T2YuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvQ1NTUHJvcGVydHkuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ1NTUHJvcGVydHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ1NTIHByb3BlcnRpZXMgd2hpY2ggYWNjZXB0IG51bWJlcnMgYnV0IGFyZSBub3QgaW4gdW5pdHMgb2YgXCJweFwiLlxuICovXG52YXIgaXNVbml0bGVzc051bWJlciA9IHtcbiAgYm94RmxleDogdHJ1ZSxcbiAgYm94RmxleEdyb3VwOiB0cnVlLFxuICBjb2x1bW5Db3VudDogdHJ1ZSxcbiAgZmxleDogdHJ1ZSxcbiAgZmxleEdyb3c6IHRydWUsXG4gIGZsZXhQb3NpdGl2ZTogdHJ1ZSxcbiAgZmxleFNocmluazogdHJ1ZSxcbiAgZmxleE5lZ2F0aXZlOiB0cnVlLFxuICBmb250V2VpZ2h0OiB0cnVlLFxuICBsaW5lQ2xhbXA6IHRydWUsXG4gIGxpbmVIZWlnaHQ6IHRydWUsXG4gIG9wYWNpdHk6IHRydWUsXG4gIG9yZGVyOiB0cnVlLFxuICBvcnBoYW5zOiB0cnVlLFxuICB3aWRvd3M6IHRydWUsXG4gIHpJbmRleDogdHJ1ZSxcbiAgem9vbTogdHJ1ZSxcblxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICBzdHJva2VPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VXaWR0aDogdHJ1ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IHZlbmRvci1zcGVjaWZpYyBwcmVmaXgsIGVnOiBXZWJraXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgc3R5bGUgbmFtZSwgZWc6IHRyYW5zaXRpb25EdXJhdGlvblxuICogQHJldHVybiB7c3RyaW5nfSBzdHlsZSBuYW1lIHByZWZpeGVkIHdpdGggYHByZWZpeGAsIHByb3Blcmx5IGNhbWVsQ2FzZWQsIGVnOlxuICogV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHByZWZpeEtleShwcmVmaXgsIGtleSkge1xuICByZXR1cm4gcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHN0eWxlIG5hbWVzIHRoYXQgbWF5IGNvbWUgcGFzc2VkIGluIHByZWZpeGVkIGJ5IGFkZGluZyBwZXJtdXRhdGlvbnNcbiAqIG9mIHZlbmRvciBwcmVmaXhlcy5cbiAqL1xudmFyIHByZWZpeGVzID0gWydXZWJraXQnLCAnbXMnLCAnTW96JywgJ08nXTtcblxuLy8gVXNpbmcgT2JqZWN0LmtleXMgaGVyZSwgb3IgZWxzZSB0aGUgdmFuaWxsYSBmb3ItaW4gbG9vcCBtYWtlcyBJRTggZ28gaW50byBhblxuLy8gaW5maW5pdGUgbG9vcCwgYmVjYXVzZSBpdCBpdGVyYXRlcyBvdmVyIHRoZSBuZXdseSBhZGRlZCBwcm9wcyB0b28uXG5PYmplY3Qua2V5cyhpc1VuaXRsZXNzTnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgcHJlZml4ZXMuZm9yRWFjaChmdW5jdGlvbihwcmVmaXgpIHtcbiAgICBpc1VuaXRsZXNzTnVtYmVyW3ByZWZpeEtleShwcmVmaXgsIHByb3ApXSA9IGlzVW5pdGxlc3NOdW1iZXJbcHJvcF07XG4gIH0pO1xufSk7XG5cbi8qKlxuICogTW9zdCBzdHlsZSBwcm9wZXJ0aWVzIGNhbiBiZSB1bnNldCBieSBkb2luZyAuc3R5bGVbcHJvcF0gPSAnJyBidXQgSUU4XG4gKiBkb2Vzbid0IGxpa2UgZG9pbmcgdGhhdCB3aXRoIHNob3J0aGFuZCBwcm9wZXJ0aWVzIHNvIGZvciB0aGUgcHJvcGVydGllcyB0aGF0XG4gKiBJRTggYnJlYWtzIG9uLCB3aGljaCBhcmUgbGlzdGVkIGhlcmUsIHdlIGluc3RlYWQgdW5zZXQgZWFjaCBvZiB0aGVcbiAqIGluZGl2aWR1YWwgcHJvcGVydGllcy4gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzg1LlxuICogVGhlIDQtdmFsdWUgJ2Nsb2NrJyBwcm9wZXJ0aWVzIGxpa2UgbWFyZ2luLCBwYWRkaW5nLCBib3JkZXItd2lkdGggc2VlbSB0b1xuICogYmVoYXZlIHdpdGhvdXQgYW55IHByb2JsZW1zLiBDdXJpb3VzbHksIGxpc3Qtc3R5bGUgd29ya3MgdG9vIHdpdGhvdXQgYW55XG4gKiBzcGVjaWFsIHByb2RkaW5nLlxuICovXG52YXIgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zID0ge1xuICBiYWNrZ3JvdW5kOiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvbjogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUmVwZWF0OiB0cnVlLFxuICAgIGJhY2tncm91bmRDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXI6IHtcbiAgICBib3JkZXJXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJCb3R0b206IHtcbiAgICBib3JkZXJCb3R0b21XaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21TdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21Db2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJMZWZ0OiB7XG4gICAgYm9yZGVyTGVmdFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlckxlZnRTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJMZWZ0Q29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyUmlnaHQ6IHtcbiAgICBib3JkZXJSaWdodFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlclJpZ2h0U3R5bGU6IHRydWUsXG4gICAgYm9yZGVyUmlnaHRDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJUb3A6IHtcbiAgICBib3JkZXJUb3BXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJUb3BTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJUb3BDb2xvcjogdHJ1ZVxuICB9LFxuICBmb250OiB7XG4gICAgZm9udFN0eWxlOiB0cnVlLFxuICAgIGZvbnRWYXJpYW50OiB0cnVlLFxuICAgIGZvbnRXZWlnaHQ6IHRydWUsXG4gICAgZm9udFNpemU6IHRydWUsXG4gICAgbGluZUhlaWdodDogdHJ1ZSxcbiAgICBmb250RmFtaWx5OiB0cnVlXG4gIH1cbn07XG5cbnZhciBDU1NQcm9wZXJ0eSA9IHtcbiAgaXNVbml0bGVzc051bWJlcjogaXNVbml0bGVzc051bWJlcixcbiAgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zOiBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ1NTUHJvcGVydHk7XG5cbn0se31dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvQ1NTUHJvcGVydHlPcGVyYXRpb25zLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDU1NQcm9wZXJ0eU9wZXJhdGlvbnNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ1NTUHJvcGVydHkgPSByZXF1aXJlKFwiLi9DU1NQcm9wZXJ0eVwiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgY2FtZWxpemVTdHlsZU5hbWUgPSByZXF1aXJlKFwiLi9jYW1lbGl6ZVN0eWxlTmFtZVwiKTtcbnZhciBkYW5nZXJvdXNTdHlsZVZhbHVlID0gcmVxdWlyZShcIi4vZGFuZ2Vyb3VzU3R5bGVWYWx1ZVwiKTtcbnZhciBoeXBoZW5hdGVTdHlsZU5hbWUgPSByZXF1aXJlKFwiLi9oeXBoZW5hdGVTdHlsZU5hbWVcIik7XG52YXIgbWVtb2l6ZVN0cmluZ09ubHkgPSByZXF1aXJlKFwiLi9tZW1vaXplU3RyaW5nT25seVwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSBtZW1vaXplU3RyaW5nT25seShmdW5jdGlvbihzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHlsZU5hbWUpO1xufSk7XG5cbnZhciBzdHlsZUZsb2F0QWNjZXNzb3IgPSAnY3NzRmxvYXQnO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAvLyBJRTggb25seSBzdXBwb3J0cyBhY2Nlc3NpbmcgY3NzRmxvYXQgKHN0YW5kYXJkKSBhcyBzdHlsZUZsb2F0XG4gIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuY3NzRmxvYXQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0eWxlRmxvYXRBY2Nlc3NvciA9ICdzdHlsZUZsb2F0JztcbiAgfVxufVxuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIC8vICdtc1RyYW5zZm9ybScgaXMgY29ycmVjdCwgYnV0IHRoZSBvdGhlciBwcmVmaXhlcyBzaG91bGQgYmUgY2FwaXRhbGl6ZWRcbiAgdmFyIGJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybiA9IC9eKD86d2Via2l0fG1venxvKVtBLVpdLztcblxuICAvLyBzdHlsZSB2YWx1ZXMgc2hvdWxkbid0IGNvbnRhaW4gYSBzZW1pY29sb25cbiAgdmFyIGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiA9IC87XFxzKiQvO1xuXG4gIHZhciB3YXJuZWRTdHlsZU5hbWVzID0ge307XG4gIHZhciB3YXJuZWRTdHlsZVZhbHVlcyA9IHt9O1xuXG4gIHZhciB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgICdVbnN1cHBvcnRlZCBzdHlsZSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPycsXG4gICAgICBuYW1lLFxuICAgICAgY2FtZWxpemVTdHlsZU5hbWUobmFtZSlcbiAgICApIDogbnVsbCk7XG4gIH07XG5cbiAgdmFyIHdhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgICdVbnN1cHBvcnRlZCB2ZW5kb3ItcHJlZml4ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8nLFxuICAgICAgbmFtZSxcbiAgICAgIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpXG4gICAgKSA6IG51bGwpO1xuICB9O1xuXG4gIHZhciB3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24gPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh3YXJuZWRTdHlsZVZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgJiYgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdID0gdHJ1ZTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIGZhbHNlLFxuICAgICAgJ1N0eWxlIHByb3BlcnR5IHZhbHVlcyBzaG91bGRuXFwndCBjb250YWluIGEgc2VtaWNvbG9uLiAnICtcbiAgICAgICdUcnkgXCIlczogJXNcIiBpbnN0ZWFkLicsXG4gICAgICBuYW1lLFxuICAgICAgdmFsdWUucmVwbGFjZShiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4sICcnKVxuICAgICkgOiBudWxsKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKi9cbiAgdmFyIHdhcm5WYWxpZFN0eWxlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBpZiAobmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgd2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUobmFtZSk7XG4gICAgfSBlbHNlIGlmIChiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4udGVzdChuYW1lKSkge1xuICAgICAgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICB3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24obmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBPcGVyYXRpb25zIGZvciBkZWFsaW5nIHdpdGggQ1NTIHByb3BlcnRpZXMuXG4gKi9cbnZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMgPSB7XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgYSBtYXBwaW5nIG9mIHN0eWxlIHByb3BlcnRpZXMgZm9yIHVzZSBhcyBpbmxpbmUgc3R5bGVzOlxuICAgKlxuICAgKiAgID4gY3JlYXRlTWFya3VwRm9yU3R5bGVzKHt3aWR0aDogJzIwMHB4JywgaGVpZ2h0OiAwfSlcbiAgICogICBcIndpZHRoOjIwMHB4O2hlaWdodDowO1wiXG4gICAqXG4gICAqIFVuZGVmaW5lZCB2YWx1ZXMgYXJlIGlnbm9yZWQgc28gdGhhdCBkZWNsYXJhdGl2ZSBwcm9ncmFtbWluZyBpcyBlYXNpZXIuXG4gICAqIFRoZSByZXN1bHQgc2hvdWxkIGJlIEhUTUwtZXNjYXBlZCBiZWZvcmUgaW5zZXJ0aW9uIGludG8gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHN0eWxlc1xuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cbiAgY3JlYXRlTWFya3VwRm9yU3R5bGVzOiBmdW5jdGlvbihzdHlsZXMpIHtcbiAgICB2YXIgc2VyaWFsaXplZCA9ICcnO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgc3R5bGVWYWx1ZSA9IHN0eWxlc1tzdHlsZU5hbWVdO1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICB3YXJuVmFsaWRTdHlsZShzdHlsZU5hbWUsIHN0eWxlVmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN0eWxlVmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBzZXJpYWxpemVkICs9IHByb2Nlc3NTdHlsZU5hbWUoc3R5bGVOYW1lKSArICc6JztcbiAgICAgICAgc2VyaWFsaXplZCArPSBkYW5nZXJvdXNTdHlsZVZhbHVlKHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSkgKyAnOyc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVkIHx8IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIGZvciBtdWx0aXBsZSBzdHlsZXMgb24gYSBub2RlLiAgSWYgYSB2YWx1ZSBpcyBzcGVjaWZpZWQgYXNcbiAgICogJycgKGVtcHR5IHN0cmluZyksIHRoZSBjb3JyZXNwb25kaW5nIHN0eWxlIHByb3BlcnR5IHdpbGwgYmUgdW5zZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG4gICAqL1xuICBzZXRWYWx1ZUZvclN0eWxlczogZnVuY3Rpb24obm9kZSwgc3R5bGVzKSB7XG4gICAgdmFyIHN0eWxlID0gbm9kZS5zdHlsZTtcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICBpZiAoIXN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICB3YXJuVmFsaWRTdHlsZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdKTtcbiAgICAgIH1cbiAgICAgIHZhciBzdHlsZVZhbHVlID0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdKTtcbiAgICAgIGlmIChzdHlsZU5hbWUgPT09ICdmbG9hdCcpIHtcbiAgICAgICAgc3R5bGVOYW1lID0gc3R5bGVGbG9hdEFjY2Vzc29yO1xuICAgICAgfVxuICAgICAgaWYgKHN0eWxlVmFsdWUpIHtcbiAgICAgICAgc3R5bGVbc3R5bGVOYW1lXSA9IHN0eWxlVmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZXhwYW5zaW9uID0gQ1NTUHJvcGVydHkuc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zW3N0eWxlTmFtZV07XG4gICAgICAgIGlmIChleHBhbnNpb24pIHtcbiAgICAgICAgICAvLyBTaG9ydGhhbmQgcHJvcGVydHkgdGhhdCBJRTggd29uJ3QgbGlrZSB1bnNldHRpbmcsIHNvIHVuc2V0IGVhY2hcbiAgICAgICAgICAvLyBjb21wb25lbnQgdG8gcGxhY2F0ZSBpdFxuICAgICAgICAgIGZvciAodmFyIGluZGl2aWR1YWxTdHlsZU5hbWUgaW4gZXhwYW5zaW9uKSB7XG4gICAgICAgICAgICBzdHlsZVtpbmRpdmlkdWFsU3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHlsZVtzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDU1NQcm9wZXJ0eU9wZXJhdGlvbnM7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0NTU1Byb3BlcnR5XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DU1NQcm9wZXJ0eS5qc1wiLFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanNcIixcIi4vY2FtZWxpemVTdHlsZU5hbWVcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2NhbWVsaXplU3R5bGVOYW1lLmpzXCIsXCIuL2Rhbmdlcm91c1N0eWxlVmFsdWVcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2Rhbmdlcm91c1N0eWxlVmFsdWUuanNcIixcIi4vaHlwaGVuYXRlU3R5bGVOYW1lXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUuanNcIixcIi4vbWVtb2l6ZVN0cmluZ09ubHlcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL21lbW9pemVTdHJpbmdPbmx5LmpzXCIsXCIuL3dhcm5pbmdcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3dhcm5pbmcuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DYWxsYmFja1F1ZXVlLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDYWxsYmFja1F1ZXVlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgcHNldWRvLWV2ZW50IG1vZHVsZSB0byBoZWxwIGtlZXAgdHJhY2sgb2YgY29tcG9uZW50cyB3YWl0aW5nIHRvXG4gKiBiZSBub3RpZmllZCB3aGVuIHRoZWlyIERPTSByZXByZXNlbnRhdGlvbnMgYXJlIGF2YWlsYWJsZSBmb3IgdXNlLlxuICpcbiAqIFRoaXMgaW1wbGVtZW50cyBgUG9vbGVkQ2xhc3NgLCBzbyB5b3Ugc2hvdWxkIG5ldmVyIG5lZWQgdG8gaW5zdGFudGlhdGUgdGhpcy5cbiAqIEluc3RlYWQsIHVzZSBgQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKWAuXG4gKlxuICogQGNsYXNzIFJlYWN0TW91bnRSZWFkeVxuICogQGltcGxlbWVudHMgUG9vbGVkQ2xhc3NcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBDYWxsYmFja1F1ZXVlKCkge1xuICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG59XG5cbmFzc2lnbihDYWxsYmFja1F1ZXVlLnByb3RvdHlwZSwge1xuXG4gIC8qKlxuICAgKiBFbnF1ZXVlcyBhIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBgbm90aWZ5QWxsYCBpcyBpbnZva2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBJbnZva2VkIHdoZW4gYG5vdGlmeUFsbGAgaXMgaW52b2tlZC5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBjb250ZXh0IENvbnRleHQgdG8gY2FsbCBgY2FsbGJhY2tgIHdpdGguXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZTogZnVuY3Rpb24oY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwgW107XG4gICAgdGhpcy5fY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cyB8fCBbXTtcbiAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgdGhpcy5fY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlcyBhbGwgZW5xdWV1ZWQgY2FsbGJhY2tzIGFuZCBjbGVhcnMgdGhlIHF1ZXVlLiBUaGlzIGlzIGludm9rZWQgYWZ0ZXJcbiAgICogdGhlIERPTSByZXByZXNlbnRhdGlvbiBvZiBhIGNvbXBvbmVudCBoYXMgYmVlbiBjcmVhdGVkIG9yIHVwZGF0ZWQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbm90aWZ5QWxsOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzO1xuICAgIHZhciBjb250ZXh0cyA9IHRoaXMuX2NvbnRleHRzO1xuICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIGNhbGxiYWNrcy5sZW5ndGggPT09IGNvbnRleHRzLmxlbmd0aCxcbiAgICAgICAgJ01pc21hdGNoZWQgbGlzdCBvZiBjb250ZXh0cyBpbiBjYWxsYmFjayBxdWV1ZSdcbiAgICAgICkgOiBpbnZhcmlhbnQoY2FsbGJhY2tzLmxlbmd0aCA9PT0gY29udGV4dHMubGVuZ3RoKSk7XG4gICAgICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICAgICAgdGhpcy5fY29udGV4dHMgPSBudWxsO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNhbGxiYWNrc1tpXS5jYWxsKGNvbnRleHRzW2ldKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgICAgY29udGV4dHMubGVuZ3RoID0gMDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgaW50ZXJuYWwgcXVldWUuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gICAgdGhpcy5fY29udGV4dHMgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciB0aGlzLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oQ2FsbGJhY2tRdWV1ZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FsbGJhY2tRdWV1ZTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1wiLFwiLi9Qb29sZWRDbGFzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUG9vbGVkQ2xhc3MuanNcIixcIi4vaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DaGFuZ2VFdmVudFBsdWdpbi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDaGFuZ2VFdmVudFBsdWdpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpbkh1YlwiKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xuXG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIik7XG52YXIgaXNUZXh0SW5wdXRFbGVtZW50ID0gcmVxdWlyZShcIi4vaXNUZXh0SW5wdXRFbGVtZW50XCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGNoYW5nZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25DaGFuZ2U6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25DaGFuZ2VDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDaGFuZ2UsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENsaWNrLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wSW5wdXQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2VcbiAgICBdXG4gIH1cbn07XG5cbi8qKlxuICogRm9yIElFIHNoaW1zXG4gKi9cbnZhciBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudFZhbHVlUHJvcCA9IG51bGw7XG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjaGFuZ2VgIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVzZUNoYW5nZUV2ZW50KGVsZW0pIHtcbiAgcmV0dXJuIChcbiAgICBlbGVtLm5vZGVOYW1lID09PSAnU0VMRUNUJyB8fFxuICAgIChlbGVtLm5vZGVOYW1lID09PSAnSU5QVVQnICYmIGVsZW0udHlwZSA9PT0gJ2ZpbGUnKVxuICApO1xufVxuXG52YXIgZG9lc0NoYW5nZUV2ZW50QnViYmxlID0gZmFsc2U7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIFNlZSBgaGFuZGxlQ2hhbmdlYCBjb21tZW50IGJlbG93XG4gIGRvZXNDaGFuZ2VFdmVudEJ1YmJsZSA9IGlzRXZlbnRTdXBwb3J0ZWQoJ2NoYW5nZScpICYmIChcbiAgICAoISgnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOClcbiAgKTtcbn1cblxuZnVuY3Rpb24gbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudChuYXRpdmVFdmVudCkge1xuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG4gICAgZXZlbnRUeXBlcy5jaGFuZ2UsXG4gICAgYWN0aXZlRWxlbWVudElELFxuICAgIG5hdGl2ZUV2ZW50XG4gICk7XG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG5cbiAgLy8gSWYgY2hhbmdlIGFuZCBwcm9wZXJ0eWNoYW5nZSBidWJibGVkLCB3ZSdkIGp1c3QgYmluZCB0byBpdCBsaWtlIGFsbCB0aGVcbiAgLy8gb3RoZXIgZXZlbnRzIGFuZCBoYXZlIGl0IGdvIHRocm91Z2ggUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLiBTaW5jZSBpdFxuICAvLyBkb2Vzbid0LCB3ZSBtYW51YWxseSBsaXN0ZW4gZm9yIHRoZSBldmVudHMgYW5kIHNvIHdlIGhhdmUgdG8gZW5xdWV1ZSBhbmRcbiAgLy8gcHJvY2VzcyB0aGUgYWJzdHJhY3QgZXZlbnQgbWFudWFsbHkuXG4gIC8vXG4gIC8vIEJhdGNoaW5nIGlzIG5lY2Vzc2FyeSBoZXJlIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IGFsbCBldmVudCBoYW5kbGVycyBydW5cbiAgLy8gYmVmb3JlIHRoZSBuZXh0IHJlcmVuZGVyIChpbmNsdWRpbmcgZXZlbnQgaGFuZGxlcnMgYXR0YWNoZWQgdG8gYW5jZXN0b3JcbiAgLy8gZWxlbWVudHMgaW5zdGVhZCBvZiBkaXJlY3RseSBvbiB0aGUgaW5wdXQpLiBXaXRob3V0IHRoaXMsIGNvbnRyb2xsZWRcbiAgLy8gY29tcG9uZW50cyBkb24ndCB3b3JrIHByb3Blcmx5IGluIGNvbmp1bmN0aW9uIHdpdGggZXZlbnQgYnViYmxpbmcgYmVjYXVzZVxuICAvLyB0aGUgY29tcG9uZW50IGlzIHJlcmVuZGVyZWQgYW5kIHRoZSB2YWx1ZSByZXZlcnRlZCBiZWZvcmUgYWxsIHRoZSBldmVudFxuICAvLyBoYW5kbGVycyBjYW4gcnVuLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MDguXG4gIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhydW5FdmVudEluQmF0Y2gsIGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGV2ZW50KSB7XG4gIEV2ZW50UGx1Z2luSHViLmVucXVldWVFdmVudHMoZXZlbnQpO1xuICBFdmVudFBsdWdpbkh1Yi5wcm9jZXNzRXZlbnRRdWV1ZSgpO1xufVxuXG5mdW5jdGlvbiBzdGFydFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgodGFyZ2V0LCB0YXJnZXRJRCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SUQgPSB0YXJnZXRJRDtcbiAgYWN0aXZlRWxlbWVudC5hdHRhY2hFdmVudCgnb25jaGFuZ2UnLCBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KTtcbn1cblxuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbmNoYW5nZScsIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpO1xuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JDaGFuZ2VFdmVudChcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENoYW5nZSkge1xuICAgIHJldHVybiB0b3BMZXZlbFRhcmdldElEO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFOChcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzKSB7XG4gICAgLy8gc3RvcFdhdGNoaW5nKCkgc2hvdWxkIGJlIGEgbm9vcCBoZXJlIGJ1dCB3ZSBjYWxsIGl0IGp1c3QgaW4gY2FzZSB3ZVxuICAgIC8vIG1pc3NlZCBhIGJsdXIgZXZlbnQgc29tZWhvdy5cbiAgICBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpO1xuICAgIHN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCh0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCk7XG4gIH0gZWxzZSBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEJsdXIpIHtcbiAgICBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpO1xuICB9XG59XG5cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGlucHV0YCBldmVudFxuICovXG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gZmFsc2U7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIElFOSBjbGFpbXMgdG8gc3VwcG9ydCB0aGUgaW5wdXQgZXZlbnQgYnV0IGZhaWxzIHRvIHRyaWdnZXIgaXQgd2hlblxuICAvLyBkZWxldGluZyB0ZXh0LCBzbyB3ZSBpZ25vcmUgaXRzIGlucHV0IGV2ZW50c1xuICBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPSBpc0V2ZW50U3VwcG9ydGVkKCdpbnB1dCcpICYmIChcbiAgICAoISgnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOSlcbiAgKTtcbn1cblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFJlcGxhY2VtZW50IGdldHRlci9zZXR0ZXIgZm9yIHRoZSBgdmFsdWVgIHByb3BlcnR5IHRoYXQgZ2V0c1xuICogc2V0IG9uIHRoZSBhY3RpdmUgZWxlbWVudC5cbiAqL1xudmFyIG5ld1ZhbHVlUHJvcCA9ICB7XG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AuZ2V0LmNhbGwodGhpcyk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24odmFsKSB7XG4gICAgLy8gQ2FzdCB0byBhIHN0cmluZyBzbyB3ZSBjYW4gZG8gZXF1YWxpdHkgY2hlY2tzLlxuICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9ICcnICsgdmFsO1xuICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3Auc2V0LmNhbGwodGhpcywgdmFsKTtcbiAgfVxufTtcblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFN0YXJ0cyB0cmFja2luZyBwcm9wZXJ0eWNoYW5nZSBldmVudHMgb24gdGhlIHBhc3NlZC1pbiBlbGVtZW50XG4gKiBhbmQgb3ZlcnJpZGUgdGhlIHZhbHVlIHByb3BlcnR5IHNvIHRoYXQgd2UgY2FuIGRpc3Rpbmd1aXNoIHVzZXIgZXZlbnRzIGZyb21cbiAqIHZhbHVlIGNoYW5nZXMgaW4gSlMuXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0V2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSh0YXJnZXQsIHRhcmdldElEKSB7XG4gIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXQ7XG4gIGFjdGl2ZUVsZW1lbnRJRCA9IHRhcmdldElEO1xuICBhY3RpdmVFbGVtZW50VmFsdWUgPSB0YXJnZXQudmFsdWU7XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgIHRhcmdldC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsXG4gICAgJ3ZhbHVlJ1xuICApO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY3RpdmVFbGVtZW50LCAndmFsdWUnLCBuZXdWYWx1ZVByb3ApO1xuICBhY3RpdmVFbGVtZW50LmF0dGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xufVxuXG4vKipcbiAqIChGb3Igb2xkIElFLikgUmVtb3ZlcyB0aGUgZXZlbnQgbGlzdGVuZXJzIGZyb20gdGhlIGN1cnJlbnRseS10cmFja2VkIGVsZW1lbnQsXG4gKiBpZiBhbnkgZXhpc3RzLlxuICovXG5mdW5jdGlvbiBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpIHtcbiAgaWYgKCFhY3RpdmVFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZGVsZXRlIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBwcm9wZXJ0eSBkZWZpbml0aW9uXG4gIGRlbGV0ZSBhY3RpdmVFbGVtZW50LnZhbHVlO1xuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xuXG4gIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50VmFsdWUgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gbnVsbDtcbn1cblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIEhhbmRsZXMgYSBwcm9wZXJ0eWNoYW5nZSBldmVudCwgc2VuZGluZyBhIGBjaGFuZ2VgIGV2ZW50IGlmXG4gKiB0aGUgdmFsdWUgb2YgdGhlIGFjdGl2ZSBlbGVtZW50IGhhcyBjaGFuZ2VkLlxuICovXG5mdW5jdGlvbiBoYW5kbGVQcm9wZXJ0eUNoYW5nZShuYXRpdmVFdmVudCkge1xuICBpZiAobmF0aXZlRXZlbnQucHJvcGVydHlOYW1lICE9PSAndmFsdWUnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciB2YWx1ZSA9IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQudmFsdWU7XG4gIGlmICh2YWx1ZSA9PT0gYWN0aXZlRWxlbWVudFZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IHZhbHVlO1xuXG4gIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpO1xufVxuXG4vKipcbiAqIElmIGEgYGNoYW5nZWAgZXZlbnQgc2hvdWxkIGJlIGZpcmVkLCByZXR1cm5zIHRoZSB0YXJnZXQncyBJRC5cbiAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50KFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wSW5wdXQpIHtcbiAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMgKGkuZS4sIG5vdCBJRTggb3IgSUU5KSwgdGhlIGlucHV0IGV2ZW50IGlzIGV4YWN0bHlcbiAgICAvLyB3aGF0IHdlIHdhbnQgc28gZmFsbCB0aHJvdWdoIGhlcmUgYW5kIHRyaWdnZXIgYW4gYWJzdHJhY3QgZXZlbnRcbiAgICByZXR1cm4gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgfVxufVxuXG4vLyBGb3IgSUU4IGFuZCBJRTkuXG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUUoXG4gICAgdG9wTGV2ZWxUeXBlLFxuICAgIHRvcExldmVsVGFyZ2V0LFxuICAgIHRvcExldmVsVGFyZ2V0SUQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BGb2N1cykge1xuICAgIC8vIEluIElFOCwgd2UgY2FuIGNhcHR1cmUgYWxtb3N0IGFsbCAudmFsdWUgY2hhbmdlcyBieSBhZGRpbmcgYVxuICAgIC8vIHByb3BlcnR5Y2hhbmdlIGhhbmRsZXIgYW5kIGxvb2tpbmcgZm9yIGV2ZW50cyB3aXRoIHByb3BlcnR5TmFtZVxuICAgIC8vIGVxdWFsIHRvICd2YWx1ZSdcbiAgICAvLyBJbiBJRTksIHByb3BlcnR5Y2hhbmdlIGZpcmVzIGZvciBtb3N0IGlucHV0IGV2ZW50cyBidXQgaXMgYnVnZ3kgYW5kXG4gICAgLy8gZG9lc24ndCBmaXJlIHdoZW4gdGV4dCBpcyBkZWxldGVkLCBidXQgY29udmVuaWVudGx5LCBzZWxlY3Rpb25jaGFuZ2VcbiAgICAvLyBhcHBlYXJzIHRvIGZpcmUgaW4gYWxsIG9mIHRoZSByZW1haW5pbmcgY2FzZXMgc28gd2UgY2F0Y2ggdGhvc2UgYW5kXG4gICAgLy8gZm9yd2FyZCB0aGUgZXZlbnQgaWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkXG4gICAgLy8gSW4gZWl0aGVyIGNhc2UsIHdlIGRvbid0IHdhbnQgdG8gY2FsbCB0aGUgZXZlbnQgaGFuZGxlciBpZiB0aGUgdmFsdWVcbiAgICAvLyBpcyBjaGFuZ2VkIGZyb20gSlMgc28gd2UgcmVkZWZpbmUgYSBzZXR0ZXIgZm9yIGAudmFsdWVgIHRoYXQgdXBkYXRlc1xuICAgIC8vIG91ciBhY3RpdmVFbGVtZW50VmFsdWUgdmFyaWFibGUsIGFsbG93aW5nIHVzIHRvIGlnbm9yZSB0aG9zZSBjaGFuZ2VzXG4gICAgLy9cbiAgICAvLyBzdG9wV2F0Y2hpbmcoKSBzaG91bGQgYmUgYSBub29wIGhlcmUgYnV0IHdlIGNhbGwgaXQganVzdCBpbiBjYXNlIHdlXG4gICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gICAgc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKTtcbiAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gIH1cbn1cblxuLy8gRm9yIElFOCBhbmQgSUU5LlxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50SUUoXG4gICAgdG9wTGV2ZWxUeXBlLFxuICAgIHRvcExldmVsVGFyZ2V0LFxuICAgIHRvcExldmVsVGFyZ2V0SUQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2UgfHxcbiAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCB8fFxuICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24pIHtcbiAgICAvLyBPbiB0aGUgc2VsZWN0aW9uY2hhbmdlIGV2ZW50LCB0aGUgdGFyZ2V0IGlzIGp1c3QgZG9jdW1lbnQgd2hpY2ggaXNuJ3RcbiAgICAvLyBoZWxwZnVsIGZvciB1cyBzbyBqdXN0IGNoZWNrIGFjdGl2ZUVsZW1lbnQgaW5zdGVhZC5cbiAgICAvL1xuICAgIC8vIDk5JSBvZiB0aGUgdGltZSwga2V5ZG93biBhbmQga2V5dXAgYXJlbid0IG5lY2Vzc2FyeS4gSUU4IGZhaWxzIHRvIGZpcmVcbiAgICAvLyBwcm9wZXJ0eWNoYW5nZSBvbiB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYWZ0ZXIgc2V0dGluZyBgdmFsdWVgIGZyb20gYVxuICAgIC8vIHNjcmlwdCBhbmQgZmlyZXMgb25seSBrZXlkb3duLCBrZXlwcmVzcywga2V5dXAuIENhdGNoaW5nIGtleXVwIHVzdWFsbHlcbiAgICAvLyBnZXRzIGl0IGFuZCBjYXRjaGluZyBrZXlkb3duIGxldHMgdXMgZmlyZSBhbiBldmVudCBmb3IgdGhlIGZpcnN0XG4gICAgLy8ga2V5c3Ryb2tlIGlmIHVzZXIgZG9lcyBhIGtleSByZXBlYXQgKGl0J2xsIGJlIGEgbGl0dGxlIGRlbGF5ZWQ6IHJpZ2h0XG4gICAgLy8gYmVmb3JlIHRoZSBzZWNvbmQga2V5c3Ryb2tlKS4gT3RoZXIgaW5wdXQgbWV0aG9kcyAoZS5nLiwgcGFzdGUpIHNlZW0gdG9cbiAgICAvLyBmaXJlIHNlbGVjdGlvbmNoYW5nZSBub3JtYWxseS5cbiAgICBpZiAoYWN0aXZlRWxlbWVudCAmJiBhY3RpdmVFbGVtZW50LnZhbHVlICE9PSBhY3RpdmVFbGVtZW50VmFsdWUpIHtcbiAgICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IGFjdGl2ZUVsZW1lbnQudmFsdWU7XG4gICAgICByZXR1cm4gYWN0aXZlRWxlbWVudElEO1xuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjbGlja2AgZXZlbnRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXNlQ2xpY2tFdmVudChlbGVtKSB7XG4gIC8vIFVzZSB0aGUgYGNsaWNrYCBldmVudCB0byBkZXRlY3QgY2hhbmdlcyB0byBjaGVja2JveCBhbmQgcmFkaW8gaW5wdXRzLlxuICAvLyBUaGlzIGFwcHJvYWNoIHdvcmtzIGFjcm9zcyBhbGwgYnJvd3NlcnMsIHdoZXJlYXMgYGNoYW5nZWAgZG9lcyBub3QgZmlyZVxuICAvLyB1bnRpbCBgYmx1cmAgaW4gSUU4LlxuICByZXR1cm4gKFxuICAgIGVsZW0ubm9kZU5hbWUgPT09ICdJTlBVVCcgJiZcbiAgICAoZWxlbS50eXBlID09PSAnY2hlY2tib3gnIHx8IGVsZW0udHlwZSA9PT0gJ3JhZGlvJylcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JDbGlja0V2ZW50KFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQ2xpY2spIHtcbiAgICByZXR1cm4gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgcGx1Z2luIGNyZWF0ZXMgYW4gYG9uQ2hhbmdlYCBldmVudCB0aGF0IG5vcm1hbGl6ZXMgY2hhbmdlIGV2ZW50c1xuICogYWNyb3NzIGZvcm0gZWxlbWVudHMuIFRoaXMgZXZlbnQgZmlyZXMgYXQgYSB0aW1lIHdoZW4gaXQncyBwb3NzaWJsZSB0b1xuICogY2hhbmdlIHRoZSBlbGVtZW50J3MgdmFsdWUgd2l0aG91dCBzZWVpbmcgYSBmbGlja2VyLlxuICpcbiAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG4gKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG4gKiAtIHRleHRhcmVhXG4gKiAtIHNlbGVjdFxuICovXG52YXIgQ2hhbmdlRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG5cbiAgICB2YXIgZ2V0VGFyZ2V0SURGdW5jLCBoYW5kbGVFdmVudEZ1bmM7XG4gICAgaWYgKHNob3VsZFVzZUNoYW5nZUV2ZW50KHRvcExldmVsVGFyZ2V0KSkge1xuICAgICAgaWYgKGRvZXNDaGFuZ2VFdmVudEJ1YmJsZSkge1xuICAgICAgICBnZXRUYXJnZXRJREZ1bmMgPSBnZXRUYXJnZXRJREZvckNoYW5nZUV2ZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9yQ2hhbmdlRXZlbnRJRTg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RleHRJbnB1dEVsZW1lbnQodG9wTGV2ZWxUYXJnZXQpKSB7XG4gICAgICBpZiAoaXNJbnB1dEV2ZW50U3VwcG9ydGVkKSB7XG4gICAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9ySW5wdXRFdmVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9ySW5wdXRFdmVudElFO1xuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzaG91bGRVc2VDbGlja0V2ZW50KHRvcExldmVsVGFyZ2V0KSkge1xuICAgICAgZ2V0VGFyZ2V0SURGdW5jID0gZ2V0VGFyZ2V0SURGb3JDbGlja0V2ZW50O1xuICAgIH1cblxuICAgIGlmIChnZXRUYXJnZXRJREZ1bmMpIHtcbiAgICAgIHZhciB0YXJnZXRJRCA9IGdldFRhcmdldElERnVuYyhcbiAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRFxuICAgICAgKTtcbiAgICAgIGlmICh0YXJnZXRJRCkge1xuICAgICAgICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG4gICAgICAgICAgZXZlbnRUeXBlcy5jaGFuZ2UsXG4gICAgICAgICAgdGFyZ2V0SUQsXG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgKTtcbiAgICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChoYW5kbGVFdmVudEZ1bmMpIHtcbiAgICAgIGhhbmRsZUV2ZW50RnVuYyhcbiAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDaGFuZ2VFdmVudFBsdWdpbjtcblxufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudENvbnN0YW50cy5qc1wiLFwiLi9FdmVudFBsdWdpbkh1YlwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQbHVnaW5IdWIuanNcIixcIi4vRXZlbnRQcm9wYWdhdG9yc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQcm9wYWdhdG9ycy5qc1wiLFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanNcIixcIi4vUmVhY3RVcGRhdGVzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFVwZGF0ZXMuanNcIixcIi4vU3ludGhldGljRXZlbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0V2ZW50LmpzXCIsXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2lzRXZlbnRTdXBwb3J0ZWQuanNcIixcIi4vaXNUZXh0SW5wdXRFbGVtZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc1RleHRJbnB1dEVsZW1lbnQuanNcIixcIi4va2V5T2ZcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2tleU9mLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0NsaWVudFJlYWN0Um9vdEluZGV4LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENsaWVudFJlYWN0Um9vdEluZGV4XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIG5leHRSZWFjdFJvb3RJbmRleCA9IDA7XG5cbnZhciBDbGllbnRSZWFjdFJvb3RJbmRleCA9IHtcbiAgY3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXh0UmVhY3RSb290SW5kZXgrKztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnRSZWFjdFJvb3RJbmRleDtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9ET01DaGlsZHJlbk9wZXJhdGlvbnMuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERPTUNoaWxkcmVuT3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEYW5nZXIgPSByZXF1aXJlKFwiLi9EYW5nZXJcIik7XG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSByZXF1aXJlKFwiLi9SZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlc1wiKTtcblxudmFyIHNldFRleHRDb250ZW50ID0gcmVxdWlyZShcIi4vc2V0VGV4dENvbnRlbnRcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIEluc2VydHMgYGNoaWxkTm9kZWAgYXMgYSBjaGlsZCBvZiBgcGFyZW50Tm9kZWAgYXQgdGhlIGBpbmRleGAuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnROb2RlIFBhcmVudCBub2RlIGluIHdoaWNoIHRvIGluc2VydC5cbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY2hpbGROb2RlIENoaWxkIG5vZGUgdG8gaW5zZXJ0LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGF0IHdoaWNoIHRvIGluc2VydCB0aGUgY2hpbGQuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaW5zZXJ0Q2hpbGRBdChwYXJlbnROb2RlLCBjaGlsZE5vZGUsIGluZGV4KSB7XG4gIC8vIEJ5IGV4cGxvaXRpbmcgYXJyYXlzIHJldHVybmluZyBgdW5kZWZpbmVkYCBmb3IgYW4gdW5kZWZpbmVkIGluZGV4LCB3ZSBjYW5cbiAgLy8gcmVseSBleGNsdXNpdmVseSBvbiBgaW5zZXJ0QmVmb3JlKG5vZGUsIG51bGwpYCBpbnN0ZWFkIG9mIGFsc28gdXNpbmdcbiAgLy8gYGFwcGVuZENoaWxkKG5vZGUpYC4gSG93ZXZlciwgdXNpbmcgYHVuZGVmaW5lZGAgaXMgbm90IGFsbG93ZWQgYnkgYWxsXG4gIC8vIGJyb3dzZXJzIHNvIHdlIG11c3QgcmVwbGFjZSBpdCB3aXRoIGBudWxsYC5cbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoXG4gICAgY2hpbGROb2RlLFxuICAgIHBhcmVudE5vZGUuY2hpbGROb2Rlc1tpbmRleF0gfHwgbnVsbFxuICApO1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIHVwZGF0aW5nIHdpdGggRE9NIGNoaWxkcmVuLlxuICovXG52YXIgRE9NQ2hpbGRyZW5PcGVyYXRpb25zID0ge1xuXG4gIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwOiBEYW5nZXIuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAsXG5cbiAgdXBkYXRlVGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgY29tcG9uZW50J3MgY2hpbGRyZW4gYnkgcHJvY2Vzc2luZyBhIHNlcmllcyBvZiB1cGRhdGVzLiBUaGVcbiAgICogdXBkYXRlIGNvbmZpZ3VyYXRpb25zIGFyZSBlYWNoIGV4cGVjdGVkIHRvIGhhdmUgYSBgcGFyZW50Tm9kZWAgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXk8b2JqZWN0Pn0gdXBkYXRlcyBMaXN0IG9mIHVwZGF0ZSBjb25maWd1cmF0aW9ucy5cbiAgICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBtYXJrdXBMaXN0IExpc3Qgb2YgbWFya3VwIHN0cmluZ3MuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHJvY2Vzc1VwZGF0ZXM6IGZ1bmN0aW9uKHVwZGF0ZXMsIG1hcmt1cExpc3QpIHtcbiAgICB2YXIgdXBkYXRlO1xuICAgIC8vIE1hcHBpbmcgZnJvbSBwYXJlbnQgSURzIHRvIGluaXRpYWwgY2hpbGQgb3JkZXJpbmdzLlxuICAgIHZhciBpbml0aWFsQ2hpbGRyZW4gPSBudWxsO1xuICAgIC8vIExpc3Qgb2YgY2hpbGRyZW4gdGhhdCB3aWxsIGJlIG1vdmVkIG9yIHJlbW92ZWQuXG4gICAgdmFyIHVwZGF0ZWRDaGlsZHJlbiA9IG51bGw7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVwZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHVwZGF0ZSA9IHVwZGF0ZXNbaV07XG4gICAgICBpZiAodXBkYXRlLnR5cGUgPT09IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkcgfHxcbiAgICAgICAgICB1cGRhdGUudHlwZSA9PT0gUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREUpIHtcbiAgICAgICAgdmFyIHVwZGF0ZWRJbmRleCA9IHVwZGF0ZS5mcm9tSW5kZXg7XG4gICAgICAgIHZhciB1cGRhdGVkQ2hpbGQgPSB1cGRhdGUucGFyZW50Tm9kZS5jaGlsZE5vZGVzW3VwZGF0ZWRJbmRleF07XG4gICAgICAgIHZhciBwYXJlbnRJRCA9IHVwZGF0ZS5wYXJlbnRJRDtcblxuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIHVwZGF0ZWRDaGlsZCxcbiAgICAgICAgICAncHJvY2Vzc1VwZGF0ZXMoKTogVW5hYmxlIHRvIGZpbmQgY2hpbGQgJXMgb2YgZWxlbWVudC4gVGhpcyAnICtcbiAgICAgICAgICAncHJvYmFibHkgbWVhbnMgdGhlIERPTSB3YXMgdW5leHBlY3RlZGx5IG11dGF0ZWQgKGUuZy4sIGJ5IHRoZSAnICtcbiAgICAgICAgICAnYnJvd3NlciksIHVzdWFsbHkgZHVlIHRvIGZvcmdldHRpbmcgYSA8dGJvZHk+IHdoZW4gdXNpbmcgdGFibGVzLCAnICtcbiAgICAgICAgICAnbmVzdGluZyB0YWdzIGxpa2UgPGZvcm0+LCA8cD4sIG9yIDxhPiwgb3IgdXNpbmcgbm9uLVNWRyBlbGVtZW50cyAnICtcbiAgICAgICAgICAnaW4gYW4gPHN2Zz4gcGFyZW50LiBUcnkgaW5zcGVjdGluZyB0aGUgY2hpbGQgbm9kZXMgb2YgdGhlIGVsZW1lbnQgJyArXG4gICAgICAgICAgJ3dpdGggUmVhY3QgSUQgYCVzYC4nLFxuICAgICAgICAgIHVwZGF0ZWRJbmRleCxcbiAgICAgICAgICBwYXJlbnRJRFxuICAgICAgICApIDogaW52YXJpYW50KHVwZGF0ZWRDaGlsZCkpO1xuXG4gICAgICAgIGluaXRpYWxDaGlsZHJlbiA9IGluaXRpYWxDaGlsZHJlbiB8fCB7fTtcbiAgICAgICAgaW5pdGlhbENoaWxkcmVuW3BhcmVudElEXSA9IGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF0gfHwgW107XG4gICAgICAgIGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF1bdXBkYXRlZEluZGV4XSA9IHVwZGF0ZWRDaGlsZDtcblxuICAgICAgICB1cGRhdGVkQ2hpbGRyZW4gPSB1cGRhdGVkQ2hpbGRyZW4gfHwgW107XG4gICAgICAgIHVwZGF0ZWRDaGlsZHJlbi5wdXNoKHVwZGF0ZWRDaGlsZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlbmRlcmVkTWFya3VwID0gRGFuZ2VyLmRhbmdlcm91c2x5UmVuZGVyTWFya3VwKG1hcmt1cExpc3QpO1xuXG4gICAgLy8gUmVtb3ZlIHVwZGF0ZWQgY2hpbGRyZW4gZmlyc3Qgc28gdGhhdCBgdG9JbmRleGAgaXMgY29uc2lzdGVudC5cbiAgICBpZiAodXBkYXRlZENoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHVwZGF0ZWRDaGlsZHJlbi5sZW5ndGg7IGorKykge1xuICAgICAgICB1cGRhdGVkQ2hpbGRyZW5bal0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh1cGRhdGVkQ2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdXBkYXRlcy5sZW5ndGg7IGsrKykge1xuICAgICAgdXBkYXRlID0gdXBkYXRlc1trXTtcbiAgICAgIHN3aXRjaCAodXBkYXRlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5JTlNFUlRfTUFSS1VQOlxuICAgICAgICAgIGluc2VydENoaWxkQXQoXG4gICAgICAgICAgICB1cGRhdGUucGFyZW50Tm9kZSxcbiAgICAgICAgICAgIHJlbmRlcmVkTWFya3VwW3VwZGF0ZS5tYXJrdXBJbmRleF0sXG4gICAgICAgICAgICB1cGRhdGUudG9JbmRleFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORzpcbiAgICAgICAgICBpbnNlcnRDaGlsZEF0KFxuICAgICAgICAgICAgdXBkYXRlLnBhcmVudE5vZGUsXG4gICAgICAgICAgICBpbml0aWFsQ2hpbGRyZW5bdXBkYXRlLnBhcmVudElEXVt1cGRhdGUuZnJvbUluZGV4XSxcbiAgICAgICAgICAgIHVwZGF0ZS50b0luZGV4XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5URVhUX0NPTlRFTlQ6XG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoXG4gICAgICAgICAgICB1cGRhdGUucGFyZW50Tm9kZSxcbiAgICAgICAgICAgIHVwZGF0ZS50ZXh0Q29udGVudFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREU6XG4gICAgICAgICAgLy8gQWxyZWFkeSByZW1vdmVkIGJ5IHRoZSBmb3ItbG9vcCBhYm92ZS5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01DaGlsZHJlbk9wZXJhdGlvbnM7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0RhbmdlclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRGFuZ2VyLmpzXCIsXCIuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5qc1wiLFwiLi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwiLi9zZXRUZXh0Q29udGVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvc2V0VGV4dENvbnRlbnQuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9ET01Qcm9wZXJ0eS5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRE9NUHJvcGVydHlcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuLypqc2xpbnQgYml0d2lzZTogdHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbmZ1bmN0aW9uIGNoZWNrTWFzayh2YWx1ZSwgYml0bWFzaykge1xuICByZXR1cm4gKHZhbHVlICYgYml0bWFzaykgPT09IGJpdG1hc2s7XG59XG5cbnZhciBET01Qcm9wZXJ0eUluamVjdGlvbiA9IHtcbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkLCBjYW1lbGNhc2VkIHByb3BlcnR5IG5hbWVzIHRvIGEgY29uZmlndXJhdGlvbiB0aGF0XG4gICAqIHNwZWNpZmllcyBob3cgdGhlIGFzc29jaWF0ZWQgRE9NIHByb3BlcnR5IHNob3VsZCBiZSBhY2Nlc3NlZCBvciByZW5kZXJlZC5cbiAgICovXG4gIE1VU1RfVVNFX0FUVFJJQlVURTogMHgxLFxuICBNVVNUX1VTRV9QUk9QRVJUWTogMHgyLFxuICBIQVNfU0lERV9FRkZFQ1RTOiAweDQsXG4gIEhBU19CT09MRUFOX1ZBTFVFOiAweDgsXG4gIEhBU19OVU1FUklDX1ZBTFVFOiAweDEwLFxuICBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTogMHgyMCB8IDB4MTAsXG4gIEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6IDB4NDAsXG5cbiAgLyoqXG4gICAqIEluamVjdCBzb21lIHNwZWNpYWxpemVkIGtub3dsZWRnZSBhYm91dCB0aGUgRE9NLiBUaGlzIHRha2VzIGEgY29uZmlnIG9iamVjdFxuICAgKiB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogaXNDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uIHRoYXQgZ2l2ZW4gYW4gYXR0cmlidXRlIG5hbWUgd2lsbCByZXR1cm4gdHJ1ZVxuICAgKiBpZiBpdCBjYW4gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NIHZlcmJhdGltLiBVc2VmdWwgZm9yIGRhdGEtKiBvciBhcmlhLSpcbiAgICogYXR0cmlidXRlcyB3aGVyZSBpdCdzIGltcG9zc2libGUgdG8gZW51bWVyYXRlIGFsbCBvZiB0aGUgcG9zc2libGVcbiAgICogYXR0cmlidXRlIG5hbWVzLFxuICAgKlxuICAgKiBQcm9wZXJ0aWVzOiBvYmplY3QgbWFwcGluZyBET00gcHJvcGVydHkgbmFtZSB0byBvbmUgb2YgdGhlXG4gICAqIERPTVByb3BlcnR5SW5qZWN0aW9uIGNvbnN0YW50cyBvciBudWxsLiBJZiB5b3VyIGF0dHJpYnV0ZSBpc24ndCBpbiBoZXJlLFxuICAgKiBpdCB3b24ndCBnZXQgd3JpdHRlbiB0byB0aGUgRE9NLlxuICAgKlxuICAgKiBET01BdHRyaWJ1dGVOYW1lczogb2JqZWN0IG1hcHBpbmcgUmVhY3QgYXR0cmlidXRlIG5hbWUgdG8gdGhlIERPTVxuICAgKiBhdHRyaWJ1dGUgbmFtZS4gQXR0cmlidXRlIG5hbWVzIG5vdCBzcGVjaWZpZWQgdXNlIHRoZSAqKmxvd2VyY2FzZSoqXG4gICAqIG5vcm1hbGl6ZWQgbmFtZS5cbiAgICpcbiAgICogRE9NUHJvcGVydHlOYW1lczogc2ltaWxhciB0byBET01BdHRyaWJ1dGVOYW1lcyBidXQgZm9yIERPTSBwcm9wZXJ0aWVzLlxuICAgKiBQcm9wZXJ0eSBuYW1lcyBub3Qgc3BlY2lmaWVkIHVzZSB0aGUgbm9ybWFsaXplZCBuYW1lLlxuICAgKlxuICAgKiBET01NdXRhdGlvbk1ldGhvZHM6IFByb3BlcnRpZXMgdGhhdCByZXF1aXJlIHNwZWNpYWwgbXV0YXRpb24gbWV0aG9kcy4gSWZcbiAgICogYHZhbHVlYCBpcyB1bmRlZmluZWQsIHRoZSBtdXRhdGlvbiBtZXRob2Qgc2hvdWxkIHVuc2V0IHRoZSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGRvbVByb3BlcnR5Q29uZmlnIHRoZSBjb25maWcgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKi9cbiAgaW5qZWN0RE9NUHJvcGVydHlDb25maWc6IGZ1bmN0aW9uKGRvbVByb3BlcnR5Q29uZmlnKSB7XG4gICAgdmFyIFByb3BlcnRpZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5Qcm9wZXJ0aWVzIHx8IHt9O1xuICAgIHZhciBET01BdHRyaWJ1dGVOYW1lcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTUF0dHJpYnV0ZU5hbWVzIHx8IHt9O1xuICAgIHZhciBET01Qcm9wZXJ0eU5hbWVzID0gZG9tUHJvcGVydHlDb25maWcuRE9NUHJvcGVydHlOYW1lcyB8fCB7fTtcbiAgICB2YXIgRE9NTXV0YXRpb25NZXRob2RzID0gZG9tUHJvcGVydHlDb25maWcuRE9NTXV0YXRpb25NZXRob2RzIHx8IHt9O1xuXG4gICAgaWYgKGRvbVByb3BlcnR5Q29uZmlnLmlzQ3VzdG9tQXR0cmlidXRlKSB7XG4gICAgICBET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnMucHVzaChcbiAgICAgICAgZG9tUHJvcGVydHlDb25maWcuaXNDdXN0b21BdHRyaWJ1dGVcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gUHJvcGVydGllcykge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgIURPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KHByb3BOYW1lKSxcbiAgICAgICAgJ2luamVjdERPTVByb3BlcnR5Q29uZmlnKC4uLik6IFlvdVxcJ3JlIHRyeWluZyB0byBpbmplY3QgRE9NIHByb3BlcnR5ICcgK1xuICAgICAgICAnXFwnJXNcXCcgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiBpbmplY3RlZC4gWW91IG1heSBiZSBhY2NpZGVudGFsbHkgJyArXG4gICAgICAgICdpbmplY3RpbmcgdGhlIHNhbWUgRE9NIHByb3BlcnR5IGNvbmZpZyB0d2ljZSwgb3IgeW91IG1heSBiZSAnICtcbiAgICAgICAgJ2luamVjdGluZyB0d28gY29uZmlncyB0aGF0IGhhdmUgY29uZmxpY3RpbmcgcHJvcGVydHkgbmFtZXMuJyxcbiAgICAgICAgcHJvcE5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQoIURPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkpO1xuXG4gICAgICBET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtwcm9wTmFtZV0gPSB0cnVlO1xuXG4gICAgICB2YXIgbG93ZXJDYXNlZCA9IHByb3BOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVtsb3dlckNhc2VkXSA9IHByb3BOYW1lO1xuXG4gICAgICBpZiAoRE9NQXR0cmlidXRlTmFtZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gRE9NQXR0cmlidXRlTmFtZXNbcHJvcE5hbWVdO1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVthdHRyaWJ1dGVOYW1lXSA9IHByb3BOYW1lO1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW3Byb3BOYW1lXSA9IGF0dHJpYnV0ZU5hbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW3Byb3BOYW1lXSA9IGxvd2VyQ2FzZWQ7XG4gICAgICB9XG5cbiAgICAgIERPTVByb3BlcnR5LmdldFByb3BlcnR5TmFtZVtwcm9wTmFtZV0gPVxuICAgICAgICBET01Qcm9wZXJ0eU5hbWVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSA/XG4gICAgICAgICAgRE9NUHJvcGVydHlOYW1lc1twcm9wTmFtZV0gOlxuICAgICAgICAgIHByb3BOYW1lO1xuXG4gICAgICBpZiAoRE9NTXV0YXRpb25NZXRob2RzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRNdXRhdGlvbk1ldGhvZFtwcm9wTmFtZV0gPSBET01NdXRhdGlvbk1ldGhvZHNbcHJvcE5hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0TXV0YXRpb25NZXRob2RbcHJvcE5hbWVdID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb3BDb25maWcgPSBQcm9wZXJ0aWVzW3Byb3BOYW1lXTtcbiAgICAgIERPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbcHJvcE5hbWVdID1cbiAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLk1VU1RfVVNFX0FUVFJJQlVURSk7XG4gICAgICBET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdID1cbiAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZKTtcbiAgICAgIERPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW3Byb3BOYW1lXSA9XG4gICAgICAgIGNoZWNrTWFzayhwcm9wQ29uZmlnLCBET01Qcm9wZXJ0eUluamVjdGlvbi5IQVNfU0lERV9FRkZFQ1RTKTtcbiAgICAgIERPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gPVxuICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUUpO1xuICAgICAgRE9NUHJvcGVydHkuaGFzTnVtZXJpY1ZhbHVlW3Byb3BOYW1lXSA9XG4gICAgICAgIGNoZWNrTWFzayhwcm9wQ29uZmlnLCBET01Qcm9wZXJ0eUluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRSk7XG4gICAgICBET01Qcm9wZXJ0eS5oYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZVtwcm9wTmFtZV0gPVxuICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUpO1xuICAgICAgRE9NUHJvcGVydHkuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gPVxuICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSk7XG5cbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICFET01Qcm9wZXJ0eS5tdXN0VXNlQXR0cmlidXRlW3Byb3BOYW1lXSB8fFxuICAgICAgICAgICFET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdLFxuICAgICAgICAnRE9NUHJvcGVydHk6IENhbm5vdCByZXF1aXJlIHVzaW5nIGJvdGggYXR0cmlidXRlIGFuZCBwcm9wZXJ0eTogJXMnLFxuICAgICAgICBwcm9wTmFtZVxuICAgICAgKSA6IGludmFyaWFudCghRE9NUHJvcGVydHkubXVzdFVzZUF0dHJpYnV0ZVtwcm9wTmFtZV0gfHxcbiAgICAgICAgIURPTVByb3BlcnR5Lm11c3RVc2VQcm9wZXJ0eVtwcm9wTmFtZV0pKTtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIERPTVByb3BlcnR5Lm11c3RVc2VQcm9wZXJ0eVtwcm9wTmFtZV0gfHxcbiAgICAgICAgICAhRE9NUHJvcGVydHkuaGFzU2lkZUVmZmVjdHNbcHJvcE5hbWVdLFxuICAgICAgICAnRE9NUHJvcGVydHk6IFByb3BlcnRpZXMgdGhhdCBoYXZlIHNpZGUgZWZmZWN0cyBtdXN0IHVzZSBwcm9wZXJ0eTogJXMnLFxuICAgICAgICBwcm9wTmFtZVxuICAgICAgKSA6IGludmFyaWFudChET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdIHx8XG4gICAgICAgICFET01Qcm9wZXJ0eS5oYXNTaWRlRWZmZWN0c1twcm9wTmFtZV0pKTtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICEhRE9NUHJvcGVydHkuaGFzQm9vbGVhblZhbHVlW3Byb3BOYW1lXSArXG4gICAgICAgICAgISFET01Qcm9wZXJ0eS5oYXNOdW1lcmljVmFsdWVbcHJvcE5hbWVdICtcbiAgICAgICAgICAhIURPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbcHJvcE5hbWVdIDw9IDEsXG4gICAgICAgICdET01Qcm9wZXJ0eTogVmFsdWUgY2FuIGJlIG9uZSBvZiBib29sZWFuLCBvdmVybG9hZGVkIGJvb2xlYW4sIG9yICcgK1xuICAgICAgICAnbnVtZXJpYyB2YWx1ZSwgYnV0IG5vdCBhIGNvbWJpbmF0aW9uOiAlcycsXG4gICAgICAgIHByb3BOYW1lXG4gICAgICApIDogaW52YXJpYW50KCEhRE9NUHJvcGVydHkuaGFzQm9vbGVhblZhbHVlW3Byb3BOYW1lXSArXG4gICAgICAgICEhRE9NUHJvcGVydHkuaGFzTnVtZXJpY1ZhbHVlW3Byb3BOYW1lXSArXG4gICAgICAgICEhRE9NUHJvcGVydHkuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gPD0gMSkpO1xuICAgIH1cbiAgfVxufTtcbnZhciBkZWZhdWx0VmFsdWVDYWNoZSA9IHt9O1xuXG4vKipcbiAqIERPTVByb3BlcnR5IGV4cG9ydHMgbG9va3VwIG9iamVjdHMgdGhhdCBjYW4gYmUgdXNlZCBsaWtlIGZ1bmN0aW9uczpcbiAqXG4gKiAgID4gRE9NUHJvcGVydHkuaXNWYWxpZFsnaWQnXVxuICogICB0cnVlXG4gKiAgID4gRE9NUHJvcGVydHkuaXNWYWxpZFsnZm9vYmFyJ11cbiAqICAgdW5kZWZpbmVkXG4gKlxuICogQWx0aG91Z2ggdGhpcyBtYXkgYmUgY29uZnVzaW5nLCBpdCBwZXJmb3JtcyBiZXR0ZXIgaW4gZ2VuZXJhbC5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2tleS1leGlzdHNcbiAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20va2V5LW1pc3NpbmdcbiAqL1xudmFyIERPTVByb3BlcnR5ID0ge1xuXG4gIElEX0FUVFJJQlVURV9OQU1FOiAnZGF0YS1yZWFjdGlkJyxcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgYSBwcm9wZXJ0eSBuYW1lIGlzIGEgc3RhbmRhcmQgcHJvcGVydHkuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBpc1N0YW5kYXJkTmFtZToge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBsb3dlcmNhc2UgcHJvcGVydHkgbmFtZXMgdG8gdGhlIHByb3Blcmx5IGNhc2VkIHZlcnNpb24sIHVzZWRcbiAgICogdG8gd2FybiBpbiB0aGUgY2FzZSBvZiBtaXNzaW5nIHByb3BlcnRpZXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBnZXRQb3NzaWJsZVN0YW5kYXJkTmFtZToge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkIG5hbWVzIHRvIGF0dHJpYnV0ZSBuYW1lcyB0aGF0IGRpZmZlci4gQXR0cmlidXRlXG4gICAqIG5hbWVzIGFyZSB1c2VkIHdoZW4gcmVuZGVyaW5nIG1hcmt1cCBvciB3aXRoIGAqQXR0cmlidXRlKClgLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0QXR0cmlidXRlTmFtZToge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkIG5hbWVzIHRvIHByb3BlcnRpZXMgb24gRE9NIG5vZGUgaW5zdGFuY2VzLlxuICAgKiAoVGhpcyBpbmNsdWRlcyBwcm9wZXJ0aWVzIHRoYXQgbXV0YXRlIGR1ZSB0byBleHRlcm5hbCBmYWN0b3JzLilcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGdldFByb3BlcnR5TmFtZToge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkIG5hbWVzIHRvIG11dGF0aW9uIG1ldGhvZHMuIFRoaXMgd2lsbCBvbmx5IGV4aXN0IGlmXG4gICAqIG11dGF0aW9uIGNhbm5vdCBiZSBzZXQgc2ltcGx5IGJ5IHRoZSBwcm9wZXJ0eSBvciBgc2V0QXR0cmlidXRlKClgLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0TXV0YXRpb25NZXRob2Q6IHt9LFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIGFjY2Vzc2VkIGFuZCBtdXRhdGVkIGFzIGFuIG9iamVjdCBwcm9wZXJ0eS5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIG11c3RVc2VBdHRyaWJ1dGU6IHt9LFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIGFjY2Vzc2VkIGFuZCBtdXRhdGVkIHVzaW5nIGAqQXR0cmlidXRlKClgLlxuICAgKiAoVGhpcyBpbmNsdWRlcyBhbnl0aGluZyB0aGF0IGZhaWxzIGA8cHJvcE5hbWU+IGluIDxlbGVtZW50PmAuKVxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgbXVzdFVzZVByb3BlcnR5OiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3Qgc2V0dGluZyBhIHZhbHVlIGNhdXNlcyBzaWRlIGVmZmVjdHMgc3VjaCBhcyB0cmlnZ2VyaW5nXG4gICAqIHJlc291cmNlcyB0byBiZSBsb2FkZWQgb3IgdGV4dCBzZWxlY3Rpb24gY2hhbmdlcy4gV2UgbXVzdCBlbnN1cmUgdGhhdFxuICAgKiB0aGUgdmFsdWUgaXMgb25seSBzZXQgaWYgaXQgaGFzIGNoYW5nZWQuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBoYXNTaWRlRWZmZWN0czoge30sXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSByZW1vdmVkIHdoZW4gc2V0IHRvIGEgZmFsc2V5IHZhbHVlLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgaGFzQm9vbGVhblZhbHVlOiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBudW1lcmljIG9yIHBhcnNlIGFzIGFcbiAgICogbnVtZXJpYyBhbmQgc2hvdWxkIGJlIHJlbW92ZWQgd2hlbiBzZXQgdG8gYSBmYWxzZXkgdmFsdWUuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBoYXNOdW1lcmljVmFsdWU6IHt9LFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIHBvc2l0aXZlIG51bWVyaWMgb3IgcGFyc2UgYXMgYSBwb3NpdGl2ZVxuICAgKiBudW1lcmljIGFuZCBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuIHNldCB0byBhIGZhbHNleSB2YWx1ZS5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlOiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcHJvcGVydHkgY2FuIGJlIHVzZWQgYXMgYSBmbGFnIGFzIHdlbGwgYXMgd2l0aCBhIHZhbHVlLiBSZW1vdmVkXG4gICAqIHdoZW4gc3RyaWN0bHkgZXF1YWwgdG8gZmFsc2U7IHByZXNlbnQgd2l0aG91dCBhIHZhbHVlIHdoZW4gc3RyaWN0bHkgZXF1YWxcbiAgICogdG8gdHJ1ZTsgcHJlc2VudCB3aXRoIGEgdmFsdWUgb3RoZXJ3aXNlLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZToge30sXG5cbiAgLyoqXG4gICAqIEFsbCBvZiB0aGUgaXNDdXN0b21BdHRyaWJ1dGUoKSBmdW5jdGlvbnMgdGhhdCBoYXZlIGJlZW4gaW5qZWN0ZWQuXG4gICAqL1xuICBfaXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnM6IFtdLFxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBhIHByb3BlcnR5IG5hbWUgaXMgYSBjdXN0b20gYXR0cmlidXRlLlxuICAgKiBAbWV0aG9kXG4gICAqL1xuICBpc0N1c3RvbUF0dHJpYnV0ZTogZnVuY3Rpb24oYXR0cmlidXRlTmFtZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXNDdXN0b21BdHRyaWJ1dGVGbiA9IERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9uc1tpXTtcbiAgICAgIGlmIChpc0N1c3RvbUF0dHJpYnV0ZUZuKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRlZmF1bHQgcHJvcGVydHkgdmFsdWUgZm9yIGEgRE9NIHByb3BlcnR5IChpLmUuLCBub3QgYW5cbiAgICogYXR0cmlidXRlKS4gTW9zdCBkZWZhdWx0IHZhbHVlcyBhcmUgJycgb3IgZmFsc2UsIGJ1dCBub3QgYWxsLiBXb3JzZSB5ZXQsXG4gICAqIHNvbWUgKGluIHBhcnRpY3VsYXIsIGB0eXBlYCkgdmFyeSBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2YgZWxlbWVudC5cbiAgICpcbiAgICogVE9ETzogSXMgaXQgYmV0dGVyIHRvIGdyYWIgYWxsIHRoZSBwb3NzaWJsZSBwcm9wZXJ0aWVzIHdoZW4gY3JlYXRpbmcgYW5cbiAgICogZWxlbWVudCB0byBhdm9pZCBoYXZpbmcgdG8gY3JlYXRlIHRoZSBzYW1lIGVsZW1lbnQgdHdpY2U/XG4gICAqL1xuICBnZXREZWZhdWx0VmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24obm9kZU5hbWUsIHByb3ApIHtcbiAgICB2YXIgbm9kZURlZmF1bHRzID0gZGVmYXVsdFZhbHVlQ2FjaGVbbm9kZU5hbWVdO1xuICAgIHZhciB0ZXN0RWxlbWVudDtcbiAgICBpZiAoIW5vZGVEZWZhdWx0cykge1xuICAgICAgZGVmYXVsdFZhbHVlQ2FjaGVbbm9kZU5hbWVdID0gbm9kZURlZmF1bHRzID0ge307XG4gICAgfVxuICAgIGlmICghKHByb3AgaW4gbm9kZURlZmF1bHRzKSkge1xuICAgICAgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5vZGVOYW1lKTtcbiAgICAgIG5vZGVEZWZhdWx0c1twcm9wXSA9IHRlc3RFbGVtZW50W3Byb3BdO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZURlZmF1bHRzW3Byb3BdO1xuICB9LFxuXG4gIGluamVjdGlvbjogRE9NUHJvcGVydHlJbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NUHJvcGVydHk7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NUHJvcGVydHlPcGVyYXRpb25zLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBET01Qcm9wZXJ0eU9wZXJhdGlvbnNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKTtcblxudmFyIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyID0gcmVxdWlyZShcIi4vcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXJcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbmZ1bmN0aW9uIHNob3VsZElnbm9yZVZhbHVlKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsIHx8XG4gICAgKERPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtuYW1lXSAmJiAhdmFsdWUpIHx8XG4gICAgKERPTVByb3BlcnR5Lmhhc051bWVyaWNWYWx1ZVtuYW1lXSAmJiBpc05hTih2YWx1ZSkpIHx8XG4gICAgKERPTVByb3BlcnR5Lmhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlW25hbWVdICYmICh2YWx1ZSA8IDEpKSB8fFxuICAgIChET01Qcm9wZXJ0eS5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlW25hbWVdICYmIHZhbHVlID09PSBmYWxzZSk7XG59XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgdmFyIHJlYWN0UHJvcHMgPSB7XG4gICAgY2hpbGRyZW46IHRydWUsXG4gICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHRydWUsXG4gICAga2V5OiB0cnVlLFxuICAgIHJlZjogdHJ1ZVxuICB9O1xuICB2YXIgd2FybmVkUHJvcGVydGllcyA9IHt9O1xuXG4gIHZhciB3YXJuVW5rbm93blByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmIChyZWFjdFByb3BzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHJlYWN0UHJvcHNbbmFtZV0gfHxcbiAgICAgICAgd2FybmVkUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkUHJvcGVydGllc1tuYW1lXSA9IHRydWU7XG4gICAgdmFyIGxvd2VyQ2FzZWROYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gZGF0YS0qIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGxvd2VyY2FzZTsgc3VnZ2VzdCB0aGUgbG93ZXJjYXNlIHZlcnNpb25cbiAgICB2YXIgc3RhbmRhcmROYW1lID0gKFxuICAgICAgRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobG93ZXJDYXNlZE5hbWUpID9cbiAgICAgICAgbG93ZXJDYXNlZE5hbWUgOlxuICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpID9cbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZE5hbWVdIDpcbiAgICAgICAgbnVsbFxuICAgICk7XG5cbiAgICAvLyBGb3Igbm93LCBvbmx5IHdhcm4gd2hlbiB3ZSBoYXZlIGEgc3VnZ2VzdGVkIGNvcnJlY3Rpb24uIFRoaXMgcHJldmVudHNcbiAgICAvLyBsb2dnaW5nIHRvbyBtdWNoIHdoZW4gdXNpbmcgdHJhbnNmZXJQcm9wc1RvLlxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgc3RhbmRhcmROYW1lID09IG51bGwsXG4gICAgICAnVW5rbm93biBET00gcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8nLFxuICAgICAgbmFtZSxcbiAgICAgIHN0YW5kYXJkTmFtZVxuICAgICkgOiBudWxsKTtcblxuICB9O1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBET00gcHJvcGVydGllcy5cbiAqL1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBJRCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFVuZXNjYXBlZCBJRC5cbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgc3RyaW5nLlxuICAgKi9cbiAgY3JlYXRlTWFya3VwRm9ySUQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgcmV0dXJuIERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FICsgJz0nICtcbiAgICAgIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKGlkKTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIGEgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHJldHVybiB7P3N0cmluZ30gTWFya3VwIHN0cmluZywgb3IgbnVsbCBpZiB0aGUgcHJvcGVydHkgd2FzIGludmFsaWQuXG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eTogZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbbmFtZV0pIHtcbiAgICAgIGlmIChzaG91bGRJZ25vcmVWYWx1ZShuYW1lLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW25hbWVdO1xuICAgICAgaWYgKERPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtuYW1lXSB8fFxuICAgICAgICAgIChET01Qcm9wZXJ0eS5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlW25hbWVdICYmIHZhbHVlID09PSB0cnVlKSkge1xuICAgICAgICByZXR1cm4gYXR0cmlidXRlTmFtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhdHRyaWJ1dGVOYW1lICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYW1lICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB3YXJuVW5rbm93blByb3BlcnR5KG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgZm9yIGEgcHJvcGVydHkgb24gYSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKi9cbiAgc2V0VmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24obm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbbmFtZV0pIHtcbiAgICAgIHZhciBtdXRhdGlvbk1ldGhvZCA9IERPTVByb3BlcnR5LmdldE11dGF0aW9uTWV0aG9kW25hbWVdO1xuICAgICAgaWYgKG11dGF0aW9uTWV0aG9kKSB7XG4gICAgICAgIG11dGF0aW9uTWV0aG9kKG5vZGUsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkSWdub3JlVmFsdWUobmFtZSwgdmFsdWUpKSB7XG4gICAgICAgIHRoaXMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkubXVzdFVzZUF0dHJpYnV0ZVtuYW1lXSkge1xuICAgICAgICAvLyBgc2V0QXR0cmlidXRlYCB3aXRoIG9iamVjdHMgYmVjb21lcyBvbmx5IGBbb2JqZWN0XWAgaW4gSUU4LzksXG4gICAgICAgIC8vICgnJyArIHZhbHVlKSBtYWtlcyBpdCBvdXRwdXQgdGhlIGNvcnJlY3QgdG9TdHJpbmcoKS12YWx1ZS5cbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoRE9NUHJvcGVydHkuZ2V0QXR0cmlidXRlTmFtZVtuYW1lXSwgJycgKyB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcHJvcE5hbWUgPSBET01Qcm9wZXJ0eS5nZXRQcm9wZXJ0eU5hbWVbbmFtZV07XG4gICAgICAgIC8vIE11c3QgZXhwbGljaXRseSBjYXN0IHZhbHVlcyBmb3IgSEFTX1NJREVfRUZGRUNUUy1wcm9wZXJ0aWVzIHRvIHRoZVxuICAgICAgICAvLyBwcm9wZXJ0eSB0eXBlIGJlZm9yZSBjb21wYXJpbmc7IG9ubHkgYHZhbHVlYCBkb2VzIGFuZCBpcyBzdHJpbmcuXG4gICAgICAgIGlmICghRE9NUHJvcGVydHkuaGFzU2lkZUVmZmVjdHNbbmFtZV0gfHxcbiAgICAgICAgICAgICgnJyArIG5vZGVbcHJvcE5hbWVdKSAhPT0gKCcnICsgdmFsdWUpKSB7XG4gICAgICAgICAgLy8gQ29udHJhcnkgdG8gYHNldEF0dHJpYnV0ZWAsIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBwcm9wZXJseVxuICAgICAgICAgIC8vIGB0b1N0cmluZ2BlZCBieSBJRTgvOS5cbiAgICAgICAgICBub2RlW3Byb3BOYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCAnJyArIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgdGhlIHZhbHVlIGZvciBhIHByb3BlcnR5IG9uIGEgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqL1xuICBkZWxldGVWYWx1ZUZvclByb3BlcnR5OiBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gICAgaWYgKERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KG5hbWUpICYmXG4gICAgICAgIERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lW25hbWVdKSB7XG4gICAgICB2YXIgbXV0YXRpb25NZXRob2QgPSBET01Qcm9wZXJ0eS5nZXRNdXRhdGlvbk1ldGhvZFtuYW1lXTtcbiAgICAgIGlmIChtdXRhdGlvbk1ldGhvZCkge1xuICAgICAgICBtdXRhdGlvbk1ldGhvZChub2RlLCB1bmRlZmluZWQpO1xuICAgICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5tdXN0VXNlQXR0cmlidXRlW25hbWVdKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKERPTVByb3BlcnR5LmdldEF0dHJpYnV0ZU5hbWVbbmFtZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gRE9NUHJvcGVydHkuZ2V0UHJvcGVydHlOYW1lW25hbWVdO1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gRE9NUHJvcGVydHkuZ2V0RGVmYXVsdFZhbHVlRm9yUHJvcGVydHkoXG4gICAgICAgICAgbm9kZS5ub2RlTmFtZSxcbiAgICAgICAgICBwcm9wTmFtZVxuICAgICAgICApO1xuICAgICAgICBpZiAoIURPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW25hbWVdIHx8XG4gICAgICAgICAgICAoJycgKyBub2RlW3Byb3BOYW1lXSkgIT09IGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgIG5vZGVbcHJvcE5hbWVdID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfSBlbHNlIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHdhcm5Vbmtub3duUHJvcGVydHkobmFtZSk7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NUHJvcGVydHlPcGVyYXRpb25zO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9ET01Qcm9wZXJ0eVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NUHJvcGVydHkuanNcIixcIi4vcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyLmpzXCIsXCIuL3dhcm5pbmdcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3dhcm5pbmcuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9EYW5nZXIuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERhbmdlclxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlLCBzdWI6IHRydWUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cCA9IHJlcXVpcmUoXCIuL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cFwiKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcbnZhciBnZXRNYXJrdXBXcmFwID0gcmVxdWlyZShcIi4vZ2V0TWFya3VwV3JhcFwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbnZhciBPUEVOX1RBR19OQU1FX0VYUCA9IC9eKDxbXiBcXC8+XSspLztcbnZhciBSRVNVTFRfSU5ERVhfQVRUUiA9ICdkYXRhLWRhbmdlci1pbmRleCc7XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIGBub2RlTmFtZWAgZnJvbSBhIHN0cmluZyBvZiBtYXJrdXAuXG4gKlxuICogTk9URTogRXh0cmFjdGluZyB0aGUgYG5vZGVOYW1lYCBkb2VzIG5vdCByZXF1aXJlIGEgcmVndWxhciBleHByZXNzaW9uIG1hdGNoXG4gKiBiZWNhdXNlIHdlIG1ha2UgYXNzdW1wdGlvbnMgYWJvdXQgUmVhY3QtZ2VuZXJhdGVkIG1hcmt1cCAoaS5lLiB0aGVyZSBhcmUgbm9cbiAqIHNwYWNlcyBzdXJyb3VuZGluZyB0aGUgb3BlbmluZyB0YWcgYW5kIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBhdHRyaWJ1dGUpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgU3RyaW5nIG9mIG1hcmt1cC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9kZSBuYW1lIG9mIHRoZSBzdXBwbGllZCBtYXJrdXAuXG4gKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2V4dHJhY3Qtbm9kZW5hbWVcbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZU5hbWUobWFya3VwKSB7XG4gIHJldHVybiBtYXJrdXAuc3Vic3RyaW5nKDEsIG1hcmt1cC5pbmRleE9mKCcgJykpO1xufVxuXG52YXIgRGFuZ2VyID0ge1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIG1hcmt1cCBpbnRvIGFuIGFycmF5IG9mIG5vZGVzLiBUaGUgbWFya3VwIGlzIGV4cGVjdGVkIHRvIHJlbmRlclxuICAgKiBpbnRvIGEgbGlzdCBvZiByb290IG5vZGVzLiBBbHNvLCB0aGUgbGVuZ3RoIG9mIGByZXN1bHRMaXN0YCBhbmRcbiAgICogYG1hcmt1cExpc3RgIHNob3VsZCBiZSB0aGUgc2FtZS5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBtYXJrdXBMaXN0IExpc3Qgb2YgbWFya3VwIHN0cmluZ3MgdG8gcmVuZGVyLlxuICAgKiBAcmV0dXJuIHthcnJheTxET01FbGVtZW50Pn0gTGlzdCBvZiByZW5kZXJlZCBub2Rlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBkYW5nZXJvdXNseVJlbmRlck1hcmt1cDogZnVuY3Rpb24obWFya3VwTGlzdCkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00sXG4gICAgICAnZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXAoLi4uKTogQ2Fubm90IHJlbmRlciBtYXJrdXAgaW4gYSB3b3JrZXIgJyArXG4gICAgICAndGhyZWFkLiBNYWtlIHN1cmUgYHdpbmRvd2AgYW5kIGBkb2N1bWVudGAgYXJlIGF2YWlsYWJsZSBnbG9iYWxseSAnICtcbiAgICAgICdiZWZvcmUgcmVxdWlyaW5nIFJlYWN0IHdoZW4gdW5pdCB0ZXN0aW5nIG9yIHVzZSAnICtcbiAgICAgICdSZWFjdC5yZW5kZXJUb1N0cmluZyBmb3Igc2VydmVyIHJlbmRlcmluZy4nXG4gICAgKSA6IGludmFyaWFudChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pKTtcbiAgICB2YXIgbm9kZU5hbWU7XG4gICAgdmFyIG1hcmt1cEJ5Tm9kZU5hbWUgPSB7fTtcbiAgICAvLyBHcm91cCBtYXJrdXAgYnkgYG5vZGVOYW1lYCBpZiBhIHdyYXAgaXMgbmVjZXNzYXJ5LCBlbHNlIGJ5ICcqJy5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hcmt1cExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIG1hcmt1cExpc3RbaV0sXG4gICAgICAgICdkYW5nZXJvdXNseVJlbmRlck1hcmt1cCguLi4pOiBNaXNzaW5nIG1hcmt1cC4nXG4gICAgICApIDogaW52YXJpYW50KG1hcmt1cExpc3RbaV0pKTtcbiAgICAgIG5vZGVOYW1lID0gZ2V0Tm9kZU5hbWUobWFya3VwTGlzdFtpXSk7XG4gICAgICBub2RlTmFtZSA9IGdldE1hcmt1cFdyYXAobm9kZU5hbWUpID8gbm9kZU5hbWUgOiAnKic7XG4gICAgICBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXSA9IG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdIHx8IFtdO1xuICAgICAgbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV1baV0gPSBtYXJrdXBMaXN0W2ldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0TGlzdCA9IFtdO1xuICAgIHZhciByZXN1bHRMaXN0QXNzaWdubWVudENvdW50ID0gMDtcbiAgICBmb3IgKG5vZGVOYW1lIGluIG1hcmt1cEJ5Tm9kZU5hbWUpIHtcbiAgICAgIGlmICghbWFya3VwQnlOb2RlTmFtZS5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgbWFya3VwTGlzdEJ5Tm9kZU5hbWUgPSBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXTtcblxuICAgICAgLy8gVGhpcyBmb3ItaW4gbG9vcCBza2lwcyB0aGUgaG9sZXMgb2YgdGhlIHNwYXJzZSBhcnJheS4gVGhlIG9yZGVyIG9mXG4gICAgICAvLyBpdGVyYXRpb24gc2hvdWxkIGZvbGxvdyB0aGUgb3JkZXIgb2YgYXNzaWdubWVudCwgd2hpY2ggaGFwcGVucyB0byBtYXRjaFxuICAgICAgLy8gbnVtZXJpY2FsIGluZGV4IG9yZGVyLCBidXQgd2UgZG9uJ3QgcmVseSBvbiB0aGF0LlxuICAgICAgdmFyIHJlc3VsdEluZGV4O1xuICAgICAgZm9yIChyZXN1bHRJbmRleCBpbiBtYXJrdXBMaXN0QnlOb2RlTmFtZSkge1xuICAgICAgICBpZiAobWFya3VwTGlzdEJ5Tm9kZU5hbWUuaGFzT3duUHJvcGVydHkocmVzdWx0SW5kZXgpKSB7XG4gICAgICAgICAgdmFyIG1hcmt1cCA9IG1hcmt1cExpc3RCeU5vZGVOYW1lW3Jlc3VsdEluZGV4XTtcblxuICAgICAgICAgIC8vIFB1c2ggdGhlIHJlcXVlc3RlZCBtYXJrdXAgd2l0aCBhbiBhZGRpdGlvbmFsIFJFU1VMVF9JTkRFWF9BVFRSXG4gICAgICAgICAgLy8gYXR0cmlidXRlLiAgSWYgdGhlIG1hcmt1cCBkb2VzIG5vdCBzdGFydCB3aXRoIGEgPCBjaGFyYWN0ZXIsIGl0XG4gICAgICAgICAgLy8gd2lsbCBiZSBkaXNjYXJkZWQgYmVsb3cgKHdpdGggYW4gYXBwcm9wcmlhdGUgY29uc29sZS5lcnJvcikuXG4gICAgICAgICAgbWFya3VwTGlzdEJ5Tm9kZU5hbWVbcmVzdWx0SW5kZXhdID0gbWFya3VwLnJlcGxhY2UoXG4gICAgICAgICAgICBPUEVOX1RBR19OQU1FX0VYUCxcbiAgICAgICAgICAgIC8vIFRoaXMgaW5kZXggd2lsbCBiZSBwYXJzZWQgYmFjayBvdXQgYmVsb3cuXG4gICAgICAgICAgICAnJDEgJyArIFJFU1VMVF9JTkRFWF9BVFRSICsgJz1cIicgKyByZXN1bHRJbmRleCArICdcIiAnXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZW5kZXIgZWFjaCBncm91cCBvZiBtYXJrdXAgd2l0aCBzaW1pbGFyIHdyYXBwaW5nIGBub2RlTmFtZWAuXG4gICAgICB2YXIgcmVuZGVyTm9kZXMgPSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAoXG4gICAgICAgIG1hcmt1cExpc3RCeU5vZGVOYW1lLmpvaW4oJycpLFxuICAgICAgICBlbXB0eUZ1bmN0aW9uIC8vIERvIG5vdGhpbmcgc3BlY2lhbCB3aXRoIDxzY3JpcHQ+IHRhZ3MuXG4gICAgICApO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlbmRlck5vZGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIHZhciByZW5kZXJOb2RlID0gcmVuZGVyTm9kZXNbal07XG4gICAgICAgIGlmIChyZW5kZXJOb2RlLmhhc0F0dHJpYnV0ZSAmJlxuICAgICAgICAgICAgcmVuZGVyTm9kZS5oYXNBdHRyaWJ1dGUoUkVTVUxUX0lOREVYX0FUVFIpKSB7XG5cbiAgICAgICAgICByZXN1bHRJbmRleCA9ICtyZW5kZXJOb2RlLmdldEF0dHJpYnV0ZShSRVNVTFRfSU5ERVhfQVRUUik7XG4gICAgICAgICAgcmVuZGVyTm9kZS5yZW1vdmVBdHRyaWJ1dGUoUkVTVUxUX0lOREVYX0FUVFIpO1xuXG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICAgICFyZXN1bHRMaXN0Lmhhc093blByb3BlcnR5KHJlc3VsdEluZGV4KSxcbiAgICAgICAgICAgICdEYW5nZXI6IEFzc2lnbmluZyB0byBhbiBhbHJlYWR5LW9jY3VwaWVkIHJlc3VsdCBpbmRleC4nXG4gICAgICAgICAgKSA6IGludmFyaWFudCghcmVzdWx0TGlzdC5oYXNPd25Qcm9wZXJ0eShyZXN1bHRJbmRleCkpKTtcblxuICAgICAgICAgIHJlc3VsdExpc3RbcmVzdWx0SW5kZXhdID0gcmVuZGVyTm9kZTtcblxuICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIG1hdGNoIHJlc3VsdExpc3QubGVuZ3RoIGFuZCBtYXJrdXBMaXN0Lmxlbmd0aCB3aGVuXG4gICAgICAgICAgLy8gd2UncmUgZG9uZS5cbiAgICAgICAgICByZXN1bHRMaXN0QXNzaWdubWVudENvdW50ICs9IDE7XG5cbiAgICAgICAgfSBlbHNlIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgJ0RhbmdlcjogRGlzY2FyZGluZyB1bmV4cGVjdGVkIG5vZGU6JyxcbiAgICAgICAgICAgIHJlbmRlck5vZGVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWx0aG91Z2ggcmVzdWx0TGlzdCB3YXMgcG9wdWxhdGVkIG91dCBvZiBvcmRlciwgaXQgc2hvdWxkIG5vdyBiZSBhIGRlbnNlXG4gICAgLy8gYXJyYXkuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQgPT09IHJlc3VsdExpc3QubGVuZ3RoLFxuICAgICAgJ0RhbmdlcjogRGlkIG5vdCBhc3NpZ24gdG8gZXZlcnkgaW5kZXggb2YgcmVzdWx0TGlzdC4nXG4gICAgKSA6IGludmFyaWFudChyZXN1bHRMaXN0QXNzaWdubWVudENvdW50ID09PSByZXN1bHRMaXN0Lmxlbmd0aCkpO1xuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHJlc3VsdExpc3QubGVuZ3RoID09PSBtYXJrdXBMaXN0Lmxlbmd0aCxcbiAgICAgICdEYW5nZXI6IEV4cGVjdGVkIG1hcmt1cCB0byByZW5kZXIgJXMgbm9kZXMsIGJ1dCByZW5kZXJlZCAlcy4nLFxuICAgICAgbWFya3VwTGlzdC5sZW5ndGgsXG4gICAgICByZXN1bHRMaXN0Lmxlbmd0aFxuICAgICkgOiBpbnZhcmlhbnQocmVzdWx0TGlzdC5sZW5ndGggPT09IG1hcmt1cExpc3QubGVuZ3RoKSk7XG5cbiAgICByZXR1cm4gcmVzdWx0TGlzdDtcbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZXMgYSBub2RlIHdpdGggYSBzdHJpbmcgb2YgbWFya3VwIGF0IGl0cyBjdXJyZW50IHBvc2l0aW9uIHdpdGhpbiBpdHNcbiAgICogcGFyZW50LiBUaGUgbWFya3VwIG11c3QgcmVuZGVyIGludG8gYSBzaW5nbGUgcm9vdCBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG9sZENoaWxkIENoaWxkIG5vZGUgdG8gcmVwbGFjZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgdG8gcmVuZGVyIGluIHBsYWNlIG9mIHRoZSBjaGlsZCBub2RlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwOiBmdW5jdGlvbihvbGRDaGlsZCwgbWFya3VwKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSxcbiAgICAgICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBDYW5ub3QgcmVuZGVyIG1hcmt1cCBpbiBhICcgK1xuICAgICAgJ3dvcmtlciB0aHJlYWQuIE1ha2Ugc3VyZSBgd2luZG93YCBhbmQgYGRvY3VtZW50YCBhcmUgYXZhaWxhYmxlICcgK1xuICAgICAgJ2dsb2JhbGx5IGJlZm9yZSByZXF1aXJpbmcgUmVhY3Qgd2hlbiB1bml0IHRlc3Rpbmcgb3IgdXNlICcgK1xuICAgICAgJ1JlYWN0LnJlbmRlclRvU3RyaW5nIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLidcbiAgICApIDogaW52YXJpYW50KEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQobWFya3VwLCAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogTWlzc2luZyBtYXJrdXAuJykgOiBpbnZhcmlhbnQobWFya3VwKSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIG9sZENoaWxkLnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2h0bWwnLFxuICAgICAgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IENhbm5vdCByZXBsYWNlIG1hcmt1cCBvZiB0aGUgJyArXG4gICAgICAnPGh0bWw+IG5vZGUuIFRoaXMgaXMgYmVjYXVzZSBicm93c2VyIHF1aXJrcyBtYWtlIHRoaXMgdW5yZWxpYWJsZSAnICtcbiAgICAgICdhbmQvb3Igc2xvdy4gSWYgeW91IHdhbnQgdG8gcmVuZGVyIHRvIHRoZSByb290IHlvdSBtdXN0IHVzZSAnICtcbiAgICAgICdzZXJ2ZXIgcmVuZGVyaW5nLiBTZWUgUmVhY3QucmVuZGVyVG9TdHJpbmcoKS4nXG4gICAgKSA6IGludmFyaWFudChvbGRDaGlsZC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdodG1sJykpO1xuXG4gICAgdmFyIG5ld0NoaWxkID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwKG1hcmt1cCwgZW1wdHlGdW5jdGlvbilbMF07XG4gICAgb2xkQ2hpbGQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3Q2hpbGQsIG9sZENoaWxkKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhbmdlcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzXCIsXCIuL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY3JlYXRlTm9kZXNGcm9tTWFya3VwLmpzXCIsXCIuL2VtcHR5RnVuY3Rpb25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2VtcHR5RnVuY3Rpb24uanNcIixcIi4vZ2V0TWFya3VwV3JhcFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0TWFya3VwV3JhcC5qc1wiLFwiLi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0RlZmF1bHRFdmVudFBsdWdpbk9yZGVyLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcblxuLyoqXG4gKiBNb2R1bGUgdGhhdCBpcyBpbmplY3RhYmxlIGludG8gYEV2ZW50UGx1Z2luSHViYCwgdGhhdCBzcGVjaWZpZXMgYVxuICogZGV0ZXJtaW5pc3RpYyBvcmRlcmluZyBvZiBgRXZlbnRQbHVnaW5gcy4gQSBjb252ZW5pZW50IHdheSB0byByZWFzb24gYWJvdXRcbiAqIHBsdWdpbnMsIHdpdGhvdXQgaGF2aW5nIHRvIHBhY2thZ2UgZXZlcnkgb25lIG9mIHRoZW0uIFRoaXMgaXMgYmV0dGVyIHRoYW5cbiAqIGhhdmluZyBwbHVnaW5zIGJlIG9yZGVyZWQgaW4gdGhlIHNhbWUgb3JkZXIgdGhhdCB0aGV5IGFyZSBpbmplY3RlZCBiZWNhdXNlXG4gKiB0aGF0IG9yZGVyaW5nIHdvdWxkIGJlIGluZmx1ZW5jZWQgYnkgdGhlIHBhY2thZ2luZyBvcmRlci5cbiAqIGBSZXNwb25kZXJFdmVudFBsdWdpbmAgbXVzdCBvY2N1ciBiZWZvcmUgYFNpbXBsZUV2ZW50UGx1Z2luYCBzbyB0aGF0XG4gKiBwcmV2ZW50aW5nIGRlZmF1bHQgb24gZXZlbnRzIGlzIGNvbnZlbmllbnQgaW4gYFNpbXBsZUV2ZW50UGx1Z2luYCBoYW5kbGVycy5cbiAqL1xudmFyIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyID0gW1xuICBrZXlPZih7UmVzcG9uZGVyRXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe1NpbXBsZUV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtUYXBFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7RW50ZXJMZWF2ZUV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtDaGFuZ2VFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7U2VsZWN0RXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe0JlZm9yZUlucHV0RXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe0FuYWx5dGljc0V2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luOiBudWxsfSlcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXI7XG5cbn0se1wiLi9rZXlPZlwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIva2V5T2YuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEVudGVyTGVhdmVFdmVudFBsdWdpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKFwiLi9FdmVudFByb3BhZ2F0b3JzXCIpO1xudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNNb3VzZUV2ZW50XCIpO1xuXG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xudmFyIGdldEZpcnN0UmVhY3RET00gPSBSZWFjdE1vdW50LmdldEZpcnN0UmVhY3RET007XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBtb3VzZUVudGVyOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZToga2V5T2Yoe29uTW91c2VFbnRlcjogbnVsbH0pLFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyXG4gICAgXVxuICB9LFxuICBtb3VzZUxlYXZlOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZToga2V5T2Yoe29uTW91c2VMZWF2ZTogbnVsbH0pLFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyXG4gICAgXVxuICB9XG59O1xuXG52YXIgZXh0cmFjdGVkRXZlbnRzID0gW251bGwsIG51bGxdO1xuXG52YXIgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEZvciBhbG1vc3QgZXZlcnkgaW50ZXJhY3Rpb24gd2UgY2FyZSBhYm91dCwgdGhlcmUgd2lsbCBiZSBib3RoIGEgdG9wLWxldmVsXG4gICAqIGBtb3VzZW92ZXJgIGFuZCBgbW91c2VvdXRgIGV2ZW50IHRoYXQgb2NjdXJzLiBPbmx5IHVzZSBgbW91c2VvdXRgIHNvIHRoYXRcbiAgICogd2UgZG8gbm90IGV4dHJhY3QgZHVwbGljYXRlIGV2ZW50cy4gSG93ZXZlciwgbW92aW5nIHRoZSBtb3VzZSBpbnRvIHRoZVxuICAgKiBicm93c2VyIGZyb20gb3V0c2lkZSB3aWxsIG5vdCBmaXJlIGEgYG1vdXNlb3V0YCBldmVudC4gSW4gdGhpcyBjYXNlLCB3ZSB1c2VcbiAgICogdGhlIGBtb3VzZW92ZXJgIHRvcC1sZXZlbCBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXIgJiZcbiAgICAgICAgKG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQuZnJvbUVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHRvcExldmVsVHlwZSAhPT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCAmJlxuICAgICAgICB0b3BMZXZlbFR5cGUgIT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyKSB7XG4gICAgICAvLyBNdXN0IG5vdCBiZSBhIG1vdXNlIGluIG9yIG1vdXNlIG91dCAtIGlnbm9yaW5nLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHdpbjtcbiAgICBpZiAodG9wTGV2ZWxUYXJnZXQud2luZG93ID09PSB0b3BMZXZlbFRhcmdldCkge1xuICAgICAgLy8gYHRvcExldmVsVGFyZ2V0YCBpcyBwcm9iYWJseSBhIHdpbmRvdyBvYmplY3QuXG4gICAgICB3aW4gPSB0b3BMZXZlbFRhcmdldDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVE9ETzogRmlndXJlIG91dCB3aHkgYG93bmVyRG9jdW1lbnRgIGlzIHNvbWV0aW1lcyB1bmRlZmluZWQgaW4gSUU4LlxuICAgICAgdmFyIGRvYyA9IHRvcExldmVsVGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gICAgICBpZiAoZG9jKSB7XG4gICAgICAgIHdpbiA9IGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luID0gd2luZG93O1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBmcm9tLCB0bztcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0KSB7XG4gICAgICBmcm9tID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgICB0byA9XG4gICAgICAgIGdldEZpcnN0UmVhY3RET00obmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC50b0VsZW1lbnQpIHx8XG4gICAgICAgIHdpbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJvbSA9IHdpbjtcbiAgICAgIHRvID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgICAvLyBOb3RoaW5nIHBlcnRhaW5zIHRvIG91ciBtYW5hZ2VkIGNvbXBvbmVudHMuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgZnJvbUlEID0gZnJvbSA/IFJlYWN0TW91bnQuZ2V0SUQoZnJvbSkgOiAnJztcbiAgICB2YXIgdG9JRCA9IHRvID8gUmVhY3RNb3VudC5nZXRJRCh0bykgOiAnJztcblxuICAgIHZhciBsZWF2ZSA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKFxuICAgICAgZXZlbnRUeXBlcy5tb3VzZUxlYXZlLFxuICAgICAgZnJvbUlELFxuICAgICAgbmF0aXZlRXZlbnRcbiAgICApO1xuICAgIGxlYXZlLnR5cGUgPSAnbW91c2VsZWF2ZSc7XG4gICAgbGVhdmUudGFyZ2V0ID0gZnJvbTtcbiAgICBsZWF2ZS5yZWxhdGVkVGFyZ2V0ID0gdG87XG5cbiAgICB2YXIgZW50ZXIgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmdldFBvb2xlZChcbiAgICAgIGV2ZW50VHlwZXMubW91c2VFbnRlcixcbiAgICAgIHRvSUQsXG4gICAgICBuYXRpdmVFdmVudFxuICAgICk7XG4gICAgZW50ZXIudHlwZSA9ICdtb3VzZWVudGVyJztcbiAgICBlbnRlci50YXJnZXQgPSB0bztcbiAgICBlbnRlci5yZWxhdGVkVGFyZ2V0ID0gZnJvbTtcblxuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbUlELCB0b0lEKTtcblxuICAgIGV4dHJhY3RlZEV2ZW50c1swXSA9IGxlYXZlO1xuICAgIGV4dHJhY3RlZEV2ZW50c1sxXSA9IGVudGVyO1xuXG4gICAgcmV0dXJuIGV4dHJhY3RlZEV2ZW50cztcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVudGVyTGVhdmVFdmVudFBsdWdpbjtcblxufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudENvbnN0YW50cy5qc1wiLFwiLi9FdmVudFByb3BhZ2F0b3JzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFByb3BhZ2F0b3JzLmpzXCIsXCIuL1JlYWN0TW91bnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TW91bnQuanNcIixcIi4vU3ludGhldGljTW91c2VFdmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljTW91c2VFdmVudC5qc1wiLFwiLi9rZXlPZlwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIva2V5T2YuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRDb25zdGFudHMuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRDb25zdGFudHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXlNaXJyb3IgPSByZXF1aXJlKFwiLi9rZXlNaXJyb3JcIik7XG5cbnZhciBQcm9wYWdhdGlvblBoYXNlcyA9IGtleU1pcnJvcih7YnViYmxlZDogbnVsbCwgY2FwdHVyZWQ6IG51bGx9KTtcblxuLyoqXG4gKiBUeXBlcyBvZiByYXcgc2lnbmFscyBmcm9tIHRoZSBicm93c2VyIGNhdWdodCBhdCB0aGUgdG9wIGxldmVsLlxuICovXG52YXIgdG9wTGV2ZWxUeXBlcyA9IGtleU1pcnJvcih7XG4gIHRvcEJsdXI6IG51bGwsXG4gIHRvcENoYW5nZTogbnVsbCxcbiAgdG9wQ2xpY2s6IG51bGwsXG4gIHRvcENvbXBvc2l0aW9uRW5kOiBudWxsLFxuICB0b3BDb21wb3NpdGlvblN0YXJ0OiBudWxsLFxuICB0b3BDb21wb3NpdGlvblVwZGF0ZTogbnVsbCxcbiAgdG9wQ29udGV4dE1lbnU6IG51bGwsXG4gIHRvcENvcHk6IG51bGwsXG4gIHRvcEN1dDogbnVsbCxcbiAgdG9wRG91YmxlQ2xpY2s6IG51bGwsXG4gIHRvcERyYWc6IG51bGwsXG4gIHRvcERyYWdFbmQ6IG51bGwsXG4gIHRvcERyYWdFbnRlcjogbnVsbCxcbiAgdG9wRHJhZ0V4aXQ6IG51bGwsXG4gIHRvcERyYWdMZWF2ZTogbnVsbCxcbiAgdG9wRHJhZ092ZXI6IG51bGwsXG4gIHRvcERyYWdTdGFydDogbnVsbCxcbiAgdG9wRHJvcDogbnVsbCxcbiAgdG9wRXJyb3I6IG51bGwsXG4gIHRvcEZvY3VzOiBudWxsLFxuICB0b3BJbnB1dDogbnVsbCxcbiAgdG9wS2V5RG93bjogbnVsbCxcbiAgdG9wS2V5UHJlc3M6IG51bGwsXG4gIHRvcEtleVVwOiBudWxsLFxuICB0b3BMb2FkOiBudWxsLFxuICB0b3BNb3VzZURvd246IG51bGwsXG4gIHRvcE1vdXNlTW92ZTogbnVsbCxcbiAgdG9wTW91c2VPdXQ6IG51bGwsXG4gIHRvcE1vdXNlT3ZlcjogbnVsbCxcbiAgdG9wTW91c2VVcDogbnVsbCxcbiAgdG9wUGFzdGU6IG51bGwsXG4gIHRvcFJlc2V0OiBudWxsLFxuICB0b3BTY3JvbGw6IG51bGwsXG4gIHRvcFNlbGVjdGlvbkNoYW5nZTogbnVsbCxcbiAgdG9wU3VibWl0OiBudWxsLFxuICB0b3BUZXh0SW5wdXQ6IG51bGwsXG4gIHRvcFRvdWNoQ2FuY2VsOiBudWxsLFxuICB0b3BUb3VjaEVuZDogbnVsbCxcbiAgdG9wVG91Y2hNb3ZlOiBudWxsLFxuICB0b3BUb3VjaFN0YXJ0OiBudWxsLFxuICB0b3BXaGVlbDogbnVsbFxufSk7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHtcbiAgdG9wTGV2ZWxUeXBlczogdG9wTGV2ZWxUeXBlcyxcbiAgUHJvcGFnYXRpb25QaGFzZXM6IFByb3BhZ2F0aW9uUGhhc2VzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50Q29uc3RhbnRzO1xuXG59LHtcIi4va2V5TWlycm9yXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9rZXlNaXJyb3IuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRMaXN0ZW5lci5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50TGlzdGVuZXJcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xuXG4vKipcbiAqIFVwc3RyZWFtIHZlcnNpb24gb2YgZXZlbnQgbGlzdGVuZXIuIERvZXMgbm90IHRha2UgaW50byBhY2NvdW50IHNwZWNpZmljXG4gKiBuYXR1cmUgb2YgcGxhdGZvcm0uXG4gKi9cbnZhciBFdmVudExpc3RlbmVyID0ge1xuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBidWJibGUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgbGlzdGVuOiBmdW5jdGlvbih0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0LmF0dGFjaEV2ZW50KSB7XG4gICAgICB0YXJnZXQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0YXJnZXQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0YXJnZXQgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgbGlzdGVuZXIgb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snIG9yICdtb3VzZW92ZXInLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCBhIGByZW1vdmVgIG1ldGhvZC5cbiAgICovXG4gIGNhcHR1cmU6IGZ1bmN0aW9uKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgIGlmICghdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAnQXR0ZW1wdGVkIHRvIGxpc3RlbiB0byBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlIG9uIGEgJyArXG4gICAgICAgICAgJ2Jyb3dzZXIgdGhhdCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjYXB0dXJlIHBoYXNlLiBZb3VyIGFwcGxpY2F0aW9uICcgK1xuICAgICAgICAgICd3aWxsIG5vdCByZWNlaXZlIHNvbWUgZXZlbnRzLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZW1wdHlGdW5jdGlvblxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICByZWdpc3RlckRlZmF1bHQ6IGZ1bmN0aW9uKCkge31cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRMaXN0ZW5lcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vZW1wdHlGdW5jdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZW1wdHlGdW5jdGlvbi5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50UGx1Z2luSHViLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudFBsdWdpbkh1YlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblJlZ2lzdHJ5XCIpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblV0aWxzXCIpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKFwiLi9hY2N1bXVsYXRlSW50b1wiKTtcbnZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSByZXF1aXJlKFwiLi9mb3JFYWNoQWNjdW11bGF0ZWRcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIEludGVybmFsIHN0b3JlIGZvciBldmVudCBsaXN0ZW5lcnNcbiAqL1xudmFyIGxpc3RlbmVyQmFuayA9IHt9O1xuXG4vKipcbiAqIEludGVybmFsIHF1ZXVlIG9mIGV2ZW50cyB0aGF0IGhhdmUgYWNjdW11bGF0ZWQgdGhlaXIgZGlzcGF0Y2hlcyBhbmQgYXJlXG4gKiB3YWl0aW5nIHRvIGhhdmUgdGhlaXIgZGlzcGF0Y2hlcyBleGVjdXRlZC5cbiAqL1xudmFyIGV2ZW50UXVldWUgPSBudWxsO1xuXG4vKipcbiAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYW5kIHJlbGVhc2VzIGl0IGJhY2sgaW50byB0aGUgcG9vbCwgdW5sZXNzIHBlcnNpc3RlbnQuXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBldmVudCBTeW50aGV0aWMgZXZlbnQgdG8gYmUgZGlzcGF0Y2hlZC5cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UgPSBmdW5jdGlvbihldmVudCkge1xuICBpZiAoZXZlbnQpIHtcbiAgICB2YXIgZXhlY3V0ZURpc3BhdGNoID0gRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2g7XG4gICAgLy8gUGx1Z2lucyBjYW4gcHJvdmlkZSBjdXN0b20gYmVoYXZpb3Igd2hlbiBkaXNwYXRjaGluZyBldmVudHMuXG4gICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkuZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQoZXZlbnQpO1xuICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLmV4ZWN1dGVEaXNwYXRjaCkge1xuICAgICAgZXhlY3V0ZURpc3BhdGNoID0gUGx1Z2luTW9kdWxlLmV4ZWN1dGVEaXNwYXRjaDtcbiAgICB9XG4gICAgRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIGV4ZWN1dGVEaXNwYXRjaCk7XG5cbiAgICBpZiAoIWV2ZW50LmlzUGVyc2lzdGVudCgpKSB7XG4gICAgICBldmVudC5jb25zdHJ1Y3Rvci5yZWxlYXNlKGV2ZW50KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogLSBgSW5zdGFuY2VIYW5kbGVgOiBbcmVxdWlyZWRdIE1vZHVsZSB0aGF0IHBlcmZvcm1zIGxvZ2ljYWwgdHJhdmVyc2FscyBvZiBET01cbiAqICAgaGllcmFyY2h5IGdpdmVuIGlkcyBvZiB0aGUgbG9naWNhbCBET00gZWxlbWVudHMgaW52b2x2ZWQuXG4gKi9cbnZhciBJbnN0YW5jZUhhbmRsZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSW5zdGFuY2VIYW5kbGUoKSB7XG4gIHZhciB2YWxpZCA9XG4gICAgSW5zdGFuY2VIYW5kbGUgJiZcbiAgICBJbnN0YW5jZUhhbmRsZS50cmF2ZXJzZVR3b1BoYXNlICYmXG4gICAgSW5zdGFuY2VIYW5kbGUudHJhdmVyc2VFbnRlckxlYXZlO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIHZhbGlkLFxuICAgICdJbnN0YW5jZUhhbmRsZSBub3QgaW5qZWN0ZWQgYmVmb3JlIHVzZSEnXG4gICkgOiBpbnZhcmlhbnQodmFsaWQpKTtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGEgdW5pZmllZCBpbnRlcmZhY2UgZm9yIGV2ZW50IHBsdWdpbnMgdG8gYmUgaW5zdGFsbGVkIGFuZCBjb25maWd1cmVkLlxuICpcbiAqIEV2ZW50IHBsdWdpbnMgY2FuIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICBgZXh0cmFjdEV2ZW50c2Age2Z1bmN0aW9uKHN0cmluZywgRE9NRXZlbnRUYXJnZXQsIHN0cmluZywgb2JqZWN0KTogKn1cbiAqICAgICBSZXF1aXJlZC4gV2hlbiBhIHRvcC1sZXZlbCBldmVudCBpcyBmaXJlZCwgdGhpcyBtZXRob2QgaXMgZXhwZWN0ZWQgdG9cbiAqICAgICBleHRyYWN0IHN5bnRoZXRpYyBldmVudHMgdGhhdCB3aWxsIGluIHR1cm4gYmUgcXVldWVkIGFuZCBkaXNwYXRjaGVkLlxuICpcbiAqICAgYGV2ZW50VHlwZXNgIHtvYmplY3R9XG4gKiAgICAgT3B0aW9uYWwsIHBsdWdpbnMgdGhhdCBmaXJlIGV2ZW50cyBtdXN0IHB1Ymxpc2ggYSBtYXBwaW5nIG9mIHJlZ2lzdHJhdGlvblxuICogICAgIG5hbWVzIHRoYXQgYXJlIHVzZWQgdG8gcmVnaXN0ZXIgbGlzdGVuZXJzLiBWYWx1ZXMgb2YgdGhpcyBtYXBwaW5nIG11c3RcbiAqICAgICBiZSBvYmplY3RzIHRoYXQgY29udGFpbiBgcmVnaXN0cmF0aW9uTmFtZWAgb3IgYHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzYC5cbiAqXG4gKiAgIGBleGVjdXRlRGlzcGF0Y2hgIHtmdW5jdGlvbihvYmplY3QsIGZ1bmN0aW9uLCBzdHJpbmcpfVxuICogICAgIE9wdGlvbmFsLCBhbGxvd3MgcGx1Z2lucyB0byBvdmVycmlkZSBob3cgYW4gZXZlbnQgZ2V0cyBkaXNwYXRjaGVkLiBCeVxuICogICAgIGRlZmF1bHQsIHRoZSBsaXN0ZW5lciBpcyBzaW1wbHkgaW52b2tlZC5cbiAqXG4gKiBFYWNoIHBsdWdpbiB0aGF0IGlzIGluamVjdGVkIGludG8gYEV2ZW50c1BsdWdpbkh1YmAgaXMgaW1tZWRpYXRlbHkgb3BlcmFibGUuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgRXZlbnRQbHVnaW5IdWIgPSB7XG5cbiAgLyoqXG4gICAqIE1ldGhvZHMgZm9yIGluamVjdGluZyBkZXBlbmRlbmNpZXMuXG4gICAqL1xuICBpbmplY3Rpb246IHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBJbmplY3RlZE1vdW50XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGluamVjdE1vdW50OiBFdmVudFBsdWdpblV0aWxzLmluamVjdGlvbi5pbmplY3RNb3VudCxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBJbmplY3RlZEluc3RhbmNlSGFuZGxlXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGluamVjdEluc3RhbmNlSGFuZGxlOiBmdW5jdGlvbihJbmplY3RlZEluc3RhbmNlSGFuZGxlKSB7XG4gICAgICBJbnN0YW5jZUhhbmRsZSA9IEluamVjdGVkSW5zdGFuY2VIYW5kbGU7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHZhbGlkYXRlSW5zdGFuY2VIYW5kbGUoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0SW5zdGFuY2VIYW5kbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICB2YWxpZGF0ZUluc3RhbmNlSGFuZGxlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gSW5zdGFuY2VIYW5kbGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IEluamVjdGVkRXZlbnRQbHVnaW5PcmRlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBpbmplY3RFdmVudFBsdWdpbk9yZGVyOiBFdmVudFBsdWdpblJlZ2lzdHJ5LmluamVjdEV2ZW50UGx1Z2luT3JkZXIsXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cbiAgICAgKi9cbiAgICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IEV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lXG5cbiAgfSxcblxuICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6IEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLFxuXG4gIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgYGxpc3RlbmVyYCBhdCBgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2lkXWAuIElzIGlkZW1wb3RlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGxpc3RlbmVyIFRoZSBjYWxsYmFjayB0byBzdG9yZS5cbiAgICovXG4gIHB1dExpc3RlbmVyOiBmdW5jdGlvbihpZCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIWxpc3RlbmVyIHx8IHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICdFeHBlY3RlZCAlcyBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLCBpbnN0ZWFkIGdvdCB0eXBlICVzJyxcbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWUsIHR5cGVvZiBsaXN0ZW5lclxuICAgICkgOiBpbnZhcmlhbnQoIWxpc3RlbmVyIHx8IHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykpO1xuXG4gICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID1cbiAgICAgIGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXSB8fCAobGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdID0ge30pO1xuICAgIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2lkXSA9IGxpc3RlbmVyO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIERPTSBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBOYW1lIG9mIGxpc3RlbmVyIChlLmcuIGBvbkNsaWNrYCkuXG4gICAqIEByZXR1cm4gez9mdW5jdGlvbn0gVGhlIHN0b3JlZCBjYWxsYmFjay5cbiAgICovXG4gIGdldExpc3RlbmVyOiBmdW5jdGlvbihpZCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICByZXR1cm4gYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUgJiYgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWVbaWRdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGEgbGlzdGVuZXIgZnJvbSB0aGUgcmVnaXN0cmF0aW9uIGJhbmsuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICovXG4gIGRlbGV0ZUxpc3RlbmVyOiBmdW5jdGlvbihpZCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICBpZiAoYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgIGRlbGV0ZSBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpZF07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBsaXN0ZW5lcnMgZm9yIHRoZSBET00gZWxlbWVudCB3aXRoIHRoZSBzdXBwbGllZCBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICovXG4gIGRlbGV0ZUFsbExpc3RlbmVyczogZnVuY3Rpb24oaWQpIHtcbiAgICBmb3IgKHZhciByZWdpc3RyYXRpb25OYW1lIGluIGxpc3RlbmVyQmFuaykge1xuICAgICAgZGVsZXRlIGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXVtpZF07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgcmVnaXN0ZXJlZCBwbHVnaW5zIGFuIG9wcG9ydHVuaXR5IHRvIGV4dHJhY3QgZXZlbnRzIGZyb20gdG9wLWxldmVsXG4gICAqIG5hdGl2ZSBicm93c2VyIGV2ZW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuICAgIHZhciBldmVudHM7XG4gICAgdmFyIHBsdWdpbnMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnM7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwbHVnaW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgLy8gTm90IGV2ZXJ5IHBsdWdpbiBpbiB0aGUgb3JkZXJpbmcgbWF5IGJlIGxvYWRlZCBhdCBydW50aW1lLlxuICAgICAgdmFyIHBvc3NpYmxlUGx1Z2luID0gcGx1Z2luc1tpXTtcbiAgICAgIGlmIChwb3NzaWJsZVBsdWdpbikge1xuICAgICAgICB2YXIgZXh0cmFjdGVkRXZlbnRzID0gcG9zc2libGVQbHVnaW4uZXh0cmFjdEV2ZW50cyhcbiAgICAgICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICApO1xuICAgICAgICBpZiAoZXh0cmFjdGVkRXZlbnRzKSB7XG4gICAgICAgICAgZXZlbnRzID0gYWNjdW11bGF0ZUludG8oZXZlbnRzLCBleHRyYWN0ZWRFdmVudHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBldmVudHM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgc3ludGhldGljIGV2ZW50IHRoYXQgc2hvdWxkIGJlIGRpc3BhdGNoZWQgd2hlblxuICAgKiBgcHJvY2Vzc0V2ZW50UXVldWVgIGlzIGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZXZlbnRzIEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVFdmVudHM6IGZ1bmN0aW9uKGV2ZW50cykge1xuICAgIGlmIChldmVudHMpIHtcbiAgICAgIGV2ZW50UXVldWUgPSBhY2N1bXVsYXRlSW50byhldmVudFF1ZXVlLCBldmVudHMpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbGwgc3ludGhldGljIGV2ZW50cyBvbiB0aGUgZXZlbnQgcXVldWUuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHJvY2Vzc0V2ZW50UXVldWU6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFNldCBgZXZlbnRRdWV1ZWAgdG8gbnVsbCBiZWZvcmUgcHJvY2Vzc2luZyBpdCBzbyB0aGF0IHdlIGNhbiB0ZWxsIGlmIG1vcmVcbiAgICAvLyBldmVudHMgZ2V0IGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcuXG4gICAgdmFyIHByb2Nlc3NpbmdFdmVudFF1ZXVlID0gZXZlbnRRdWV1ZTtcbiAgICBldmVudFF1ZXVlID0gbnVsbDtcbiAgICBmb3JFYWNoQWNjdW11bGF0ZWQocHJvY2Vzc2luZ0V2ZW50UXVldWUsIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICFldmVudFF1ZXVlLFxuICAgICAgJ3Byb2Nlc3NFdmVudFF1ZXVlKCk6IEFkZGl0aW9uYWwgZXZlbnRzIHdlcmUgZW5xdWV1ZWQgd2hpbGUgcHJvY2Vzc2luZyAnICtcbiAgICAgICdhbiBldmVudCBxdWV1ZS4gU3VwcG9ydCBmb3IgdGhpcyBoYXMgbm90IHlldCBiZWVuIGltcGxlbWVudGVkLidcbiAgICApIDogaW52YXJpYW50KCFldmVudFF1ZXVlKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZXNlIGFyZSBuZWVkZWQgZm9yIHRlc3RzIG9ubHkuIERvIG5vdCB1c2UhXG4gICAqL1xuICBfX3B1cmdlOiBmdW5jdGlvbigpIHtcbiAgICBsaXN0ZW5lckJhbmsgPSB7fTtcbiAgfSxcblxuICBfX2dldExpc3RlbmVyQmFuazogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQmFuaztcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50UGx1Z2luSHViO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9FdmVudFBsdWdpblJlZ2lzdHJ5XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFBsdWdpblJlZ2lzdHJ5LmpzXCIsXCIuL0V2ZW50UGx1Z2luVXRpbHNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50UGx1Z2luVXRpbHMuanNcIixcIi4vYWNjdW11bGF0ZUludG9cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2FjY3VtdWxhdGVJbnRvLmpzXCIsXCIuL2ZvckVhY2hBY2N1bXVsYXRlZFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZm9yRWFjaEFjY3VtdWxhdGVkLmpzXCIsXCIuL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQbHVnaW5SZWdpc3RyeS5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5SZWdpc3RyeVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogSW5qZWN0YWJsZSBvcmRlcmluZyBvZiBldmVudCBwbHVnaW5zLlxuICovXG52YXIgRXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG5cbi8qKlxuICogSW5qZWN0YWJsZSBtYXBwaW5nIGZyb20gbmFtZXMgdG8gZXZlbnQgcGx1Z2luIG1vZHVsZXMuXG4gKi9cbnZhciBuYW1lc1RvUGx1Z2lucyA9IHt9O1xuXG4vKipcbiAqIFJlY29tcHV0ZXMgdGhlIHBsdWdpbiBsaXN0IHVzaW5nIHRoZSBpbmplY3RlZCBwbHVnaW5zIGFuZCBwbHVnaW4gb3JkZXJpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKSB7XG4gIGlmICghRXZlbnRQbHVnaW5PcmRlcikge1xuICAgIC8vIFdhaXQgdW50aWwgYW4gYEV2ZW50UGx1Z2luT3JkZXJgIGlzIGluamVjdGVkLlxuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgdmFyIFBsdWdpbk1vZHVsZSA9IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgIHZhciBwbHVnaW5JbmRleCA9IEV2ZW50UGx1Z2luT3JkZXIuaW5kZXhPZihwbHVnaW5OYW1lKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgcGx1Z2luSW5kZXggPiAtMSxcbiAgICAgICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbnMgdGhhdCBkbyBub3QgZXhpc3QgaW4gJyArXG4gICAgICAndGhlIHBsdWdpbiBvcmRlcmluZywgYCVzYC4nLFxuICAgICAgcGx1Z2luTmFtZVxuICAgICkgOiBpbnZhcmlhbnQocGx1Z2luSW5kZXggPiAtMSkpO1xuICAgIGlmIChFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbcGx1Z2luSW5kZXhdKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIFBsdWdpbk1vZHVsZS5leHRyYWN0RXZlbnRzLFxuICAgICAgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IEV2ZW50IHBsdWdpbnMgbXVzdCBpbXBsZW1lbnQgYW4gYGV4dHJhY3RFdmVudHNgICcgK1xuICAgICAgJ21ldGhvZCwgYnV0IGAlc2AgZG9lcyBub3QuJyxcbiAgICAgIHBsdWdpbk5hbWVcbiAgICApIDogaW52YXJpYW50KFBsdWdpbk1vZHVsZS5leHRyYWN0RXZlbnRzKSk7XG4gICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zW3BsdWdpbkluZGV4XSA9IFBsdWdpbk1vZHVsZTtcbiAgICB2YXIgcHVibGlzaGVkRXZlbnRzID0gUGx1Z2luTW9kdWxlLmV2ZW50VHlwZXM7XG4gICAgZm9yICh2YXIgZXZlbnROYW1lIGluIHB1Ymxpc2hlZEV2ZW50cykge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgcHVibGlzaEV2ZW50Rm9yUGx1Z2luKFxuICAgICAgICAgIHB1Ymxpc2hlZEV2ZW50c1tldmVudE5hbWVdLFxuICAgICAgICAgIFBsdWdpbk1vZHVsZSxcbiAgICAgICAgICBldmVudE5hbWVcbiAgICAgICAgKSxcbiAgICAgICAgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IEZhaWxlZCB0byBwdWJsaXNoIGV2ZW50IGAlc2AgZm9yIHBsdWdpbiBgJXNgLicsXG4gICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgcGx1Z2luTmFtZVxuICAgICAgKSA6IGludmFyaWFudChwdWJsaXNoRXZlbnRGb3JQbHVnaW4oXG4gICAgICAgIHB1Ymxpc2hlZEV2ZW50c1tldmVudE5hbWVdLFxuICAgICAgICBQbHVnaW5Nb2R1bGUsXG4gICAgICAgIGV2ZW50TmFtZVxuICAgICAgKSkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFB1Ymxpc2hlcyBhbiBldmVudCBzbyB0aGF0IGl0IGNhbiBiZSBkaXNwYXRjaGVkIGJ5IHRoZSBzdXBwbGllZCBwbHVnaW4uXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIERpc3BhdGNoIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBQbHVnaW5Nb2R1bGUgUGx1Z2luIHB1Ymxpc2hpbmcgdGhlIGV2ZW50LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgd2FzIHN1Y2Nlc3NmdWxseSBwdWJsaXNoZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwdWJsaXNoRXZlbnRGb3JQbHVnaW4oZGlzcGF0Y2hDb25maWcsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgIUV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSksXG4gICAgJ0V2ZW50UGx1Z2luSHViOiBNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gcHVibGlzaCB0aGUgc2FtZSAnICtcbiAgICAnZXZlbnQgbmFtZSwgYCVzYC4nLFxuICAgIGV2ZW50TmFtZVxuICApIDogaW52YXJpYW50KCFFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpKSk7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2V2ZW50TmFtZV0gPSBkaXNwYXRjaENvbmZpZztcblxuICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMgPSBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztcbiAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgZm9yICh2YXIgcGhhc2VOYW1lIGluIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2VOYW1lKSkge1xuICAgICAgICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZSA9IHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlTmFtZV07XG4gICAgICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKFxuICAgICAgICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUsXG4gICAgICAgICAgUGx1Z2luTW9kdWxlLFxuICAgICAgICAgIGV2ZW50TmFtZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUoXG4gICAgICBkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lLFxuICAgICAgUGx1Z2luTW9kdWxlLFxuICAgICAgZXZlbnROYW1lXG4gICAgKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGEgcmVnaXN0cmF0aW9uIG5hbWUgdGhhdCBpcyB1c2VkIHRvIGlkZW50aWZ5IGRpc3BhdGNoZWQgZXZlbnRzIGFuZFxuICogY2FuIGJlIHVzZWQgd2l0aCBgRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXJgIHRvIHJlZ2lzdGVyIGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBSZWdpc3RyYXRpb24gbmFtZSB0byBhZGQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHJlZ2lzdHJhdGlvbk5hbWUsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgIUV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0sXG4gICAgJ0V2ZW50UGx1Z2luSHViOiBNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gcHVibGlzaCB0aGUgc2FtZSAnICtcbiAgICAncmVnaXN0cmF0aW9uIG5hbWUsIGAlc2AuJyxcbiAgICByZWdpc3RyYXRpb25OYW1lXG4gICkgOiBpbnZhcmlhbnQoIUV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0pKTtcbiAgRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSA9IFBsdWdpbk1vZHVsZTtcbiAgRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdID1cbiAgICBQbHVnaW5Nb2R1bGUuZXZlbnRUeXBlc1tldmVudE5hbWVdLmRlcGVuZGVuY2llcztcbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgcGx1Z2lucyBzbyB0aGF0IHRoZXkgY2FuIGV4dHJhY3QgYW5kIGRpc3BhdGNoIGV2ZW50cy5cbiAqXG4gKiBAc2VlIHtFdmVudFBsdWdpbkh1Yn1cbiAqL1xudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSB7XG5cbiAgLyoqXG4gICAqIE9yZGVyZWQgbGlzdCBvZiBpbmplY3RlZCBwbHVnaW5zLlxuICAgKi9cbiAgcGx1Z2luczogW10sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBldmVudCBuYW1lIHRvIGRpc3BhdGNoIGNvbmZpZ1xuICAgKi9cbiAgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOiB7fSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIHBsdWdpbiBtb2R1bGVcbiAgICovXG4gIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiB7fSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIGV2ZW50IG5hbWVcbiAgICovXG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6IHt9LFxuXG4gIC8qKlxuICAgKiBJbmplY3RzIGFuIG9yZGVyaW5nIG9mIHBsdWdpbnMgKGJ5IHBsdWdpbiBuYW1lKS4gVGhpcyBhbGxvd3MgdGhlIG9yZGVyaW5nXG4gICAqIHRvIGJlIGRlY291cGxlZCBmcm9tIGluamVjdGlvbiBvZiB0aGUgYWN0dWFsIHBsdWdpbnMgc28gdGhhdCBvcmRlcmluZyBpc1xuICAgKiBhbHdheXMgZGV0ZXJtaW5pc3RpYyByZWdhcmRsZXNzIG9mIHBhY2thZ2luZywgb24tdGhlLWZseSBpbmplY3Rpb24sIGV0Yy5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheX0gSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5PcmRlcn1cbiAgICovXG4gIGluamVjdEV2ZW50UGx1Z2luT3JkZXI6IGZ1bmN0aW9uKEluamVjdGVkRXZlbnRQbHVnaW5PcmRlcikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAhRXZlbnRQbHVnaW5PcmRlcixcbiAgICAgICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbiBvcmRlcmluZyBtb3JlIHRoYW4gJyArXG4gICAgICAnb25jZS4gWW91IGFyZSBsaWtlbHkgdHJ5aW5nIHRvIGxvYWQgbW9yZSB0aGFuIG9uZSBjb3B5IG9mIFJlYWN0LidcbiAgICApIDogaW52YXJpYW50KCFFdmVudFBsdWdpbk9yZGVyKSk7XG4gICAgLy8gQ2xvbmUgdGhlIG9yZGVyaW5nIHNvIGl0IGNhbm5vdCBiZSBkeW5hbWljYWxseSBtdXRhdGVkLlxuICAgIEV2ZW50UGx1Z2luT3JkZXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIpO1xuICAgIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluamVjdHMgcGx1Z2lucyB0byBiZSB1c2VkIGJ5IGBFdmVudFBsdWdpbkh1YmAuIFRoZSBwbHVnaW4gbmFtZXMgbXVzdCBiZVxuICAgKiBpbiB0aGUgb3JkZXJpbmcgaW5qZWN0ZWQgYnkgYGluamVjdEV2ZW50UGx1Z2luT3JkZXJgLlxuICAgKlxuICAgKiBQbHVnaW5zIGNhbiBiZSBpbmplY3RlZCBhcyBwYXJ0IG9mIHBhZ2UgaW5pdGlhbGl6YXRpb24gb3Igb24tdGhlLWZseS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGluamVjdGVkTmFtZXNUb1BsdWdpbnMgTWFwIGZyb20gbmFtZXMgdG8gcGx1Z2luIG1vZHVsZXMuXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lfVxuICAgKi9cbiAgaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOiBmdW5jdGlvbihpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gICAgdmFyIGlzT3JkZXJpbmdEaXJ0eSA9IGZhbHNlO1xuICAgIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucykge1xuICAgICAgaWYgKCFpbmplY3RlZE5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIFBsdWdpbk1vZHVsZSA9IGluamVjdGVkTmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgICBpZiAoIW5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpIHx8XG4gICAgICAgICAgbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0gIT09IFBsdWdpbk1vZHVsZSkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgICFuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSxcbiAgICAgICAgICAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCB0d28gZGlmZmVyZW50IGV2ZW50IHBsdWdpbnMgJyArXG4gICAgICAgICAgJ3VzaW5nIHRoZSBzYW1lIG5hbWUsIGAlc2AuJyxcbiAgICAgICAgICBwbHVnaW5OYW1lXG4gICAgICAgICkgOiBpbnZhcmlhbnQoIW5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdKSk7XG4gICAgICAgIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdID0gUGx1Z2luTW9kdWxlO1xuICAgICAgICBpc09yZGVyaW5nRGlydHkgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNPcmRlcmluZ0RpcnR5KSB7XG4gICAgICByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTG9va3MgdXAgdGhlIHBsdWdpbiBmb3IgdGhlIHN1cHBsaWVkIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgQSBzeW50aGV0aWMgZXZlbnQuXG4gICAqIEByZXR1cm4gez9vYmplY3R9IFRoZSBwbHVnaW4gdGhhdCBjcmVhdGVkIHRoZSBzdXBwbGllZCBldmVudC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRQbHVnaW5Nb2R1bGVGb3JFdmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgZGlzcGF0Y2hDb25maWcgPSBldmVudC5kaXNwYXRjaENvbmZpZztcbiAgICBpZiAoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgICAgcmV0dXJuIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbXG4gICAgICAgIGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWVcbiAgICAgIF0gfHwgbnVsbDtcbiAgICB9XG4gICAgZm9yICh2YXIgcGhhc2UgaW4gZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICAgIGlmICghZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2UpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbXG4gICAgICAgIGRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlXVxuICAgICAgXTtcbiAgICAgIGlmIChQbHVnaW5Nb2R1bGUpIHtcbiAgICAgICAgcmV0dXJuIFBsdWdpbk1vZHVsZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIHVuaXQgdGVzdGluZy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZXNldEV2ZW50UGx1Z2luczogZnVuY3Rpb24oKSB7XG4gICAgRXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG4gICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBuYW1lc1RvUGx1Z2lucykge1xuICAgICAgaWYgKG5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpKSB7XG4gICAgICAgIGRlbGV0ZSBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zLmxlbmd0aCA9IDA7XG5cbiAgICB2YXIgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M7XG4gICAgZm9yICh2YXIgZXZlbnROYW1lIGluIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlncykge1xuICAgICAgaWYgKGV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpKSB7XG4gICAgICAgIGRlbGV0ZSBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3NbZXZlbnROYW1lXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzO1xuICAgIGZvciAodmFyIHJlZ2lzdHJhdGlvbk5hbWUgaW4gcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMpIHtcbiAgICAgIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShyZWdpc3RyYXRpb25OYW1lKSkge1xuICAgICAgICBkZWxldGUgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5SZWdpc3RyeTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFBsdWdpblV0aWxzLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudFBsdWdpblV0aWxzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBJbmplY3RlZCBkZXBlbmRlbmNpZXM6XG4gKi9cblxuLyoqXG4gKiAtIGBNb3VudGA6IFtyZXF1aXJlZF0gTW9kdWxlIHRoYXQgY2FuIGNvbnZlcnQgYmV0d2VlbiBSZWFjdCBkb20gSURzIGFuZFxuICogICBhY3R1YWwgbm9kZSByZWZlcmVuY2VzLlxuICovXG52YXIgaW5qZWN0aW9uID0ge1xuICBNb3VudDogbnVsbCxcbiAgaW5qZWN0TW91bnQ6IGZ1bmN0aW9uKEluamVjdGVkTW91bnQpIHtcbiAgICBpbmplY3Rpb24uTW91bnQgPSBJbmplY3RlZE1vdW50O1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIEluamVjdGVkTW91bnQgJiYgSW5qZWN0ZWRNb3VudC5nZXROb2RlLFxuICAgICAgICAnRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0TW91bnQoLi4uKTogSW5qZWN0ZWQgTW91bnQgbW9kdWxlICcgK1xuICAgICAgICAnaXMgbWlzc2luZyBnZXROb2RlLidcbiAgICAgICkgOiBpbnZhcmlhbnQoSW5qZWN0ZWRNb3VudCAmJiBJbmplY3RlZE1vdW50LmdldE5vZGUpKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxuZnVuY3Rpb24gaXNFbmRpc2godG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VVcCB8fFxuICAgICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoRW5kIHx8XG4gICAgICAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hDYW5jZWw7XG59XG5cbmZ1bmN0aW9uIGlzTW92ZWlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU1vdmUgfHxcbiAgICAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaE1vdmU7XG59XG5mdW5jdGlvbiBpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93biB8fFxuICAgICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ7XG59XG5cblxudmFyIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzO1xuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICAgIHZhciBkaXNwYXRjaElEcyA9IGV2ZW50Ll9kaXNwYXRjaElEcztcblxuICAgIHZhciBsaXN0ZW5lcnNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpO1xuICAgIHZhciBpZHNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hJRHMpO1xuICAgIHZhciBJRHNMZW4gPSBpZHNJc0FyciA/IGRpc3BhdGNoSURzLmxlbmd0aCA6IGRpc3BhdGNoSURzID8gMSA6IDA7XG4gICAgdmFyIGxpc3RlbmVyc0xlbiA9IGxpc3RlbmVyc0lzQXJyID9cbiAgICAgIGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aCA6XG4gICAgICBkaXNwYXRjaExpc3RlbmVycyA/IDEgOiAwO1xuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGlkc0lzQXJyID09PSBsaXN0ZW5lcnNJc0FyciAmJiBJRHNMZW4gPT09IGxpc3RlbmVyc0xlbixcbiAgICAgICdFdmVudFBsdWdpblV0aWxzOiBJbnZhbGlkIGBldmVudGAuJ1xuICAgICkgOiBpbnZhcmlhbnQoaWRzSXNBcnIgPT09IGxpc3RlbmVyc0lzQXJyICYmIElEc0xlbiA9PT0gbGlzdGVuZXJzTGVuKSk7XG4gIH07XG59XG5cbi8qKlxuICogSW52b2tlcyBgY2IoZXZlbnQsIGxpc3RlbmVyLCBpZClgLiBBdm9pZHMgdXNpbmcgY2FsbCBpZiBubyBzY29wZSBpc1xuICogcHJvdmlkZWQuIFRoZSBgKGxpc3RlbmVyLGlkKWAgcGFpciBlZmZlY3RpdmVseSBmb3JtcyB0aGUgXCJkaXNwYXRjaFwiIGJ1dCBhcmVcbiAqIGtlcHQgc2VwYXJhdGUgdG8gY29uc2VydmUgbWVtb3J5LlxuICovXG5mdW5jdGlvbiBmb3JFYWNoRXZlbnREaXNwYXRjaChldmVudCwgY2IpIHtcbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICB2YXIgZGlzcGF0Y2hJRHMgPSBldmVudC5fZGlzcGF0Y2hJRHM7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBMaXN0ZW5lcnMgYW5kIElEcyBhcmUgdHdvIHBhcmFsbGVsIGFycmF5cyB0aGF0IGFyZSBhbHdheXMgaW4gc3luYy5cbiAgICAgIGNiKGV2ZW50LCBkaXNwYXRjaExpc3RlbmVyc1tpXSwgZGlzcGF0Y2hJRHNbaV0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgIGNiKGV2ZW50LCBkaXNwYXRjaExpc3RlbmVycywgZGlzcGF0Y2hJRHMpO1xuICB9XG59XG5cbi8qKlxuICogRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBQbHVnaW5Nb2R1bGUuZXhlY3V0ZURpc3BhdGNoKCkuXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBTeW50aGV0aWNFdmVudCB0byBoYW5kbGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IEFwcGxpY2F0aW9uLWxldmVsIGNhbGxiYWNrXG4gKiBAcGFyYW0ge3N0cmluZ30gZG9tSUQgRE9NIGlkIHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIGxpc3RlbmVyLCBkb21JRCkge1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gaW5qZWN0aW9uLk1vdW50LmdldE5vZGUoZG9tSUQpO1xuICB2YXIgcmV0dXJuVmFsdWUgPSBsaXN0ZW5lcihldmVudCwgZG9tSUQpO1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG4vKipcbiAqIFN0YW5kYXJkL3NpbXBsZSBpdGVyYXRpb24gdGhyb3VnaCBhbiBldmVudCdzIGNvbGxlY3RlZCBkaXNwYXRjaGVzLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIGNiKSB7XG4gIGZvckVhY2hFdmVudERpc3BhdGNoKGV2ZW50LCBjYik7XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaElEcyA9IG51bGw7XG59XG5cbi8qKlxuICogU3RhbmRhcmQvc2ltcGxlIGl0ZXJhdGlvbiB0aHJvdWdoIGFuIGV2ZW50J3MgY29sbGVjdGVkIGRpc3BhdGNoZXMsIGJ1dCBzdG9wc1xuICogYXQgdGhlIGZpcnN0IGRpc3BhdGNoIGV4ZWN1dGlvbiByZXR1cm5pbmcgdHJ1ZSwgYW5kIHJldHVybnMgdGhhdCBpZC5cbiAqXG4gKiBAcmV0dXJuIGlkIG9mIHRoZSBmaXJzdCBkaXNwYXRjaCBleGVjdXRpb24gd2hvJ3MgbGlzdGVuZXIgcmV0dXJucyB0cnVlLCBvclxuICogbnVsbCBpZiBubyBsaXN0ZW5lciByZXR1cm5lZCB0cnVlLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbChldmVudCkge1xuICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaElEcyA9IGV2ZW50Ll9kaXNwYXRjaElEcztcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIExpc3RlbmVycyBhbmQgSURzIGFyZSB0d28gcGFyYWxsZWwgYXJyYXlzIHRoYXQgYXJlIGFsd2F5cyBpbiBzeW5jLlxuICAgICAgaWYgKGRpc3BhdGNoTGlzdGVuZXJzW2ldKGV2ZW50LCBkaXNwYXRjaElEc1tpXSkpIHtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoSURzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgIGlmIChkaXNwYXRjaExpc3RlbmVycyhldmVudCwgZGlzcGF0Y2hJRHMpKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2hJRHM7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEBzZWUgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGxcbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZShldmVudCkge1xuICB2YXIgcmV0ID0gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwoZXZlbnQpO1xuICBldmVudC5fZGlzcGF0Y2hJRHMgPSBudWxsO1xuICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIEV4ZWN1dGlvbiBvZiBhIFwiZGlyZWN0XCIgZGlzcGF0Y2ggLSB0aGVyZSBtdXN0IGJlIGF0IG1vc3Qgb25lIGRpc3BhdGNoXG4gKiBhY2N1bXVsYXRlZCBvbiB0aGUgZXZlbnQgb3IgaXQgaXMgY29uc2lkZXJlZCBhbiBlcnJvci4gSXQgZG9lc24ndCByZWFsbHkgbWFrZVxuICogc2Vuc2UgZm9yIGFuIGV2ZW50IHdpdGggbXVsdGlwbGUgZGlzcGF0Y2hlcyAoYnViYmxlZCkgdG8ga2VlcCB0cmFjayBvZiB0aGVcbiAqIHJldHVybiB2YWx1ZXMgYXQgZWFjaCBkaXNwYXRjaCBleGVjdXRpb24sIGJ1dCBpdCBkb2VzIHRlbmQgdG8gbWFrZSBzZW5zZSB3aGVuXG4gKiBkZWFsaW5nIHdpdGggXCJkaXJlY3RcIiBkaXNwYXRjaGVzLlxuICpcbiAqIEByZXR1cm4gVGhlIHJldHVybiB2YWx1ZSBvZiBleGVjdXRpbmcgdGhlIHNpbmdsZSBkaXNwYXRjaC5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpcmVjdERpc3BhdGNoKGV2ZW50KSB7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXIgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaElEID0gZXZlbnQuX2Rpc3BhdGNoSURzO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICFBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXIpLFxuICAgICdleGVjdXRlRGlyZWN0RGlzcGF0Y2goLi4uKTogSW52YWxpZCBgZXZlbnRgLidcbiAgKSA6IGludmFyaWFudCghQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVyKSkpO1xuICB2YXIgcmVzID0gZGlzcGF0Y2hMaXN0ZW5lciA/XG4gICAgZGlzcGF0Y2hMaXN0ZW5lcihldmVudCwgZGlzcGF0Y2hJRCkgOlxuICAgIG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaElEcyA9IG51bGw7XG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnRcbiAqIEByZXR1cm4ge2Jvb2x9IFRydWUgaWZmIG51bWJlciBvZiBkaXNwYXRjaGVzIGFjY3VtdWxhdGVkIGlzIGdyZWF0ZXIgdGhhbiAwLlxuICovXG5mdW5jdGlvbiBoYXNEaXNwYXRjaGVzKGV2ZW50KSB7XG4gIHJldHVybiAhIWV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbn1cblxuLyoqXG4gKiBHZW5lcmFsIHV0aWxpdGllcyB0aGF0IGFyZSB1c2VmdWwgaW4gY3JlYXRpbmcgY3VzdG9tIEV2ZW50IFBsdWdpbnMuXG4gKi9cbnZhciBFdmVudFBsdWdpblV0aWxzID0ge1xuICBpc0VuZGlzaDogaXNFbmRpc2gsXG4gIGlzTW92ZWlzaDogaXNNb3ZlaXNoLFxuICBpc1N0YXJ0aXNoOiBpc1N0YXJ0aXNoLFxuXG4gIGV4ZWN1dGVEaXJlY3REaXNwYXRjaDogZXhlY3V0ZURpcmVjdERpc3BhdGNoLFxuICBleGVjdXRlRGlzcGF0Y2g6IGV4ZWN1dGVEaXNwYXRjaCxcbiAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyOiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIsXG4gIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWU6IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUsXG4gIGhhc0Rpc3BhdGNoZXM6IGhhc0Rpc3BhdGNoZXMsXG4gIGluamVjdGlvbjogaW5qZWN0aW9uLFxuICB1c2VUb3VjaEV2ZW50czogZmFsc2Vcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5VdGlscztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50Q29uc3RhbnRzLmpzXCIsXCIuL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQcm9wYWdhdG9ycy5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQcm9wYWdhdG9yc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpbkh1YlwiKTtcblxudmFyIGFjY3VtdWxhdGVJbnRvID0gcmVxdWlyZShcIi4vYWNjdW11bGF0ZUludG9cIik7XG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gcmVxdWlyZShcIi4vZm9yRWFjaEFjY3VtdWxhdGVkXCIpO1xuXG52YXIgUHJvcGFnYXRpb25QaGFzZXMgPSBFdmVudENvbnN0YW50cy5Qcm9wYWdhdGlvblBoYXNlcztcbnZhciBnZXRMaXN0ZW5lciA9IEV2ZW50UGx1Z2luSHViLmdldExpc3RlbmVyO1xuXG4vKipcbiAqIFNvbWUgZXZlbnQgdHlwZXMgaGF2ZSBhIG5vdGlvbiBvZiBkaWZmZXJlbnQgcmVnaXN0cmF0aW9uIG5hbWVzIGZvciBkaWZmZXJlbnRcbiAqIFwicGhhc2VzXCIgb2YgcHJvcGFnYXRpb24uIFRoaXMgZmluZHMgbGlzdGVuZXJzIGJ5IGEgZ2l2ZW4gcGhhc2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RlbmVyQXRQaGFzZShpZCwgZXZlbnQsIHByb3BhZ2F0aW9uUGhhc2UpIHtcbiAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPVxuICAgIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3Byb3BhZ2F0aW9uUGhhc2VdO1xuICByZXR1cm4gZ2V0TGlzdGVuZXIoaWQsIHJlZ2lzdHJhdGlvbk5hbWUpO1xufVxuXG4vKipcbiAqIFRhZ3MgYSBgU3ludGhldGljRXZlbnRgIHdpdGggZGlzcGF0Y2hlZCBsaXN0ZW5lcnMuIENyZWF0aW5nIHRoaXMgZnVuY3Rpb25cbiAqIGhlcmUsIGFsbG93cyB1cyB0byBub3QgaGF2ZSB0byBiaW5kIG9yIGNyZWF0ZSBmdW5jdGlvbnMgZm9yIGVhY2ggZXZlbnQuXG4gKiBNdXRhdGluZyB0aGUgZXZlbnQncyBtZW1iZXJzIGFsbG93cyB1cyB0byBub3QgaGF2ZSB0byBjcmVhdGUgYSB3cmFwcGluZ1xuICogXCJkaXNwYXRjaFwiIG9iamVjdCB0aGF0IHBhaXJzIHRoZSBldmVudCB3aXRoIHRoZSBsaXN0ZW5lci5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyhkb21JRCwgdXB3YXJkcywgZXZlbnQpIHtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIGlmICghZG9tSUQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGlzcGF0Y2hpbmcgaWQgbXVzdCBub3QgYmUgbnVsbCcpO1xuICAgIH1cbiAgfVxuICB2YXIgcGhhc2UgPSB1cHdhcmRzID8gUHJvcGFnYXRpb25QaGFzZXMuYnViYmxlZCA6IFByb3BhZ2F0aW9uUGhhc2VzLmNhcHR1cmVkO1xuICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lckF0UGhhc2UoZG9tSUQsIGV2ZW50LCBwaGFzZSk7XG4gIGlmIChsaXN0ZW5lcikge1xuICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9XG4gICAgICBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgICBldmVudC5fZGlzcGF0Y2hJRHMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hJRHMsIGRvbUlEKTtcbiAgfVxufVxuXG4vKipcbiAqIENvbGxlY3QgZGlzcGF0Y2hlcyAobXVzdCBiZSBlbnRpcmVseSBjb2xsZWN0ZWQgYmVmb3JlIGRpc3BhdGNoaW5nIC0gc2VlIHVuaXRcbiAqIHRlc3RzKS4gTGF6aWx5IGFsbG9jYXRlIHRoZSBhcnJheSB0byBjb25zZXJ2ZSBtZW1vcnkuICBXZSBtdXN0IGxvb3AgdGhyb3VnaFxuICogZWFjaCBldmVudCBhbmQgcGVyZm9ybSB0aGUgdHJhdmVyc2FsIGZvciBlYWNoIG9uZS4gV2UgY2FuIG5vdCBwZXJmb3JtIGFcbiAqIHNpbmdsZSB0cmF2ZXJzYWwgZm9yIHRoZSBlbnRpcmUgY29sbGVjdGlvbiBvZiBldmVudHMgYmVjYXVzZSBlYWNoIGV2ZW50IG1heVxuICogaGF2ZSBhIGRpZmZlcmVudCB0YXJnZXQuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmdldEluc3RhbmNlSGFuZGxlKCkudHJhdmVyc2VUd29QaGFzZShcbiAgICAgIGV2ZW50LmRpc3BhdGNoTWFya2VyLFxuICAgICAgYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyxcbiAgICAgIGV2ZW50XG4gICAgKTtcbiAgfVxufVxuXG5cbi8qKlxuICogQWNjdW11bGF0ZXMgd2l0aG91dCByZWdhcmQgdG8gZGlyZWN0aW9uLCBkb2VzIG5vdCBsb29rIGZvciBwaGFzZWRcbiAqIHJlZ2lzdHJhdGlvbiBuYW1lcy4gU2FtZSBhcyBgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGVgIGJ1dCB3aXRob3V0XG4gKiByZXF1aXJpbmcgdGhhdCB0aGUgYGRpc3BhdGNoTWFya2VyYCBiZSB0aGUgc2FtZSBhcyB0aGUgZGlzcGF0Y2hlZCBJRC5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZURpc3BhdGNoZXMoaWQsIGlnbm9yZWREaXJlY3Rpb24sIGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPSBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lO1xuICAgIHZhciBsaXN0ZW5lciA9IGdldExpc3RlbmVyKGlkLCByZWdpc3RyYXRpb25OYW1lKTtcbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9XG4gICAgICAgIGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgbGlzdGVuZXIpO1xuICAgICAgZXZlbnQuX2Rpc3BhdGNoSURzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoSURzLCBpZCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjdW11bGF0ZXMgZGlzcGF0Y2hlcyBvbiBhbiBgU3ludGhldGljRXZlbnRgLCBidXQgb25seSBmb3IgdGhlXG4gKiBgZGlzcGF0Y2hNYXJrZXJgLlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnRcbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhldmVudC5kaXNwYXRjaE1hcmtlciwgbnVsbCwgZXZlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUpO1xufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMobGVhdmUsIGVudGVyLCBmcm9tSUQsIHRvSUQpIHtcbiAgRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmdldEluc3RhbmNlSGFuZGxlKCkudHJhdmVyc2VFbnRlckxlYXZlKFxuICAgIGZyb21JRCxcbiAgICB0b0lELFxuICAgIGFjY3VtdWxhdGVEaXNwYXRjaGVzLFxuICAgIGxlYXZlLFxuICAgIGVudGVyXG4gICk7XG59XG5cblxuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKTtcbn1cblxuXG5cbi8qKlxuICogQSBzbWFsbCBzZXQgb2YgcHJvcGFnYXRpb24gcGF0dGVybnMsIGVhY2ggb2Ygd2hpY2ggd2lsbCBhY2NlcHQgYSBzbWFsbCBhbW91bnRcbiAqIG9mIGluZm9ybWF0aW9uLCBhbmQgZ2VuZXJhdGUgYSBzZXQgb2YgXCJkaXNwYXRjaCByZWFkeSBldmVudCBvYmplY3RzXCIgLSB3aGljaFxuICogYXJlIHNldHMgb2YgZXZlbnRzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gYW5ub3RhdGVkIHdpdGggYSBzZXQgb2YgZGlzcGF0Y2hlZFxuICogbGlzdGVuZXIgZnVuY3Rpb25zL2lkcy4gVGhlIEFQSSBpcyBkZXNpZ25lZCB0aGlzIHdheSB0byBkaXNjb3VyYWdlIHRoZXNlXG4gKiBwcm9wYWdhdGlvbiBzdHJhdGVnaWVzIGZyb20gYWN0dWFsbHkgZXhlY3V0aW5nIHRoZSBkaXNwYXRjaGVzLCBzaW5jZSB3ZVxuICogYWx3YXlzIHdhbnQgdG8gY29sbGVjdCB0aGUgZW50aXJlIHNldCBvZiBkaXNwYXRjaGVzIGJlZm9yZSBleGVjdXRpbmcgZXZlbnQgYVxuICogc2luZ2xlIG9uZS5cbiAqXG4gKiBAY29uc3RydWN0b3IgRXZlbnRQcm9wYWdhdG9yc1xuICovXG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHtcbiAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczogYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyxcbiAgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6IGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzLFxuICBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFByb3BhZ2F0b3JzO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9FdmVudENvbnN0YW50c1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRDb25zdGFudHMuanNcIixcIi4vRXZlbnRQbHVnaW5IdWJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50UGx1Z2luSHViLmpzXCIsXCIuL2FjY3VtdWxhdGVJbnRvXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9hY2N1bXVsYXRlSW50by5qc1wiLFwiLi9mb3JFYWNoQWNjdW11bGF0ZWRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZvckVhY2hBY2N1bXVsYXRlZC5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV4ZWN1dGlvbkVudmlyb25tZW50XG4gKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGNhblVzZURPTSA9ICEhKFxuICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KVxuKTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOlxuICAgIGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7XG5cbn0se31dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBnZXRUZXh0Q29udGVudEFjY2Vzc29yID0gcmVxdWlyZShcIi4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclwiKTtcblxuLyoqXG4gKiBUaGlzIGhlbHBlciBjbGFzcyBzdG9yZXMgaW5mb3JtYXRpb24gYWJvdXQgdGV4dCBjb250ZW50IG9mIGEgdGFyZ2V0IG5vZGUsXG4gKiBhbGxvd2luZyBjb21wYXJpc29uIG9mIGNvbnRlbnQgYmVmb3JlIGFuZCBhZnRlciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIElkZW50aWZ5IHRoZSBub2RlIHdoZXJlIHNlbGVjdGlvbiBjdXJyZW50bHkgYmVnaW5zLCB0aGVuIG9ic2VydmVcbiAqIGJvdGggaXRzIHRleHQgY29udGVudCBhbmQgaXRzIGN1cnJlbnQgcG9zaXRpb24gaW4gdGhlIERPTS4gU2luY2UgdGhlXG4gKiBicm93c2VyIG1heSBuYXRpdmVseSByZXBsYWNlIHRoZSB0YXJnZXQgbm9kZSBkdXJpbmcgY29tcG9zaXRpb24sIHdlIGNhblxuICogdXNlIGl0cyBwb3NpdGlvbiB0byBmaW5kIGl0cyByZXBsYWNlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSByb290XG4gKi9cbmZ1bmN0aW9uIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZShyb290KSB7XG4gIHRoaXMuX3Jvb3QgPSByb290O1xuICB0aGlzLl9zdGFydFRleHQgPSB0aGlzLmdldFRleHQoKTtcbiAgdGhpcy5fZmFsbGJhY2tUZXh0ID0gbnVsbDtcbn1cblxuYXNzaWduKEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5wcm90b3R5cGUsIHtcbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IHRleHQgb2YgaW5wdXQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldFRleHQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICgndmFsdWUnIGluIHRoaXMuX3Jvb3QpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yb290LnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcm9vdFtnZXRUZXh0Q29udGVudEFjY2Vzc29yKCldO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgdGhlIGRpZmZlcmluZyBzdWJzdHJpbmcgYmV0d2VlbiB0aGUgaW5pdGlhbGx5IHN0b3JlZFxuICAgKiB0ZXh0IGNvbnRlbnQgYW5kIHRoZSBjdXJyZW50IGNvbnRlbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldERhdGE6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9mYWxsYmFja1RleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mYWxsYmFja1RleHQ7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0O1xuICAgIHZhciBzdGFydFZhbHVlID0gdGhpcy5fc3RhcnRUZXh0O1xuICAgIHZhciBzdGFydExlbmd0aCA9IHN0YXJ0VmFsdWUubGVuZ3RoO1xuICAgIHZhciBlbmQ7XG4gICAgdmFyIGVuZFZhbHVlID0gdGhpcy5nZXRUZXh0KCk7XG4gICAgdmFyIGVuZExlbmd0aCA9IGVuZFZhbHVlLmxlbmd0aDtcblxuICAgIGZvciAoc3RhcnQgPSAwOyBzdGFydCA8IHN0YXJ0TGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydF0gIT09IGVuZFZhbHVlW3N0YXJ0XSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbWluRW5kID0gc3RhcnRMZW5ndGggLSBzdGFydDtcbiAgICBmb3IgKGVuZCA9IDE7IGVuZCA8PSBtaW5FbmQ7IGVuZCsrKSB7XG4gICAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydExlbmd0aCAtIGVuZF0gIT09IGVuZFZhbHVlW2VuZExlbmd0aCAtIGVuZF0pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNsaWNlVGFpbCA9IGVuZCA+IDEgPyAxIC0gZW5kIDogdW5kZWZpbmVkO1xuICAgIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IGVuZFZhbHVlLnNsaWNlKHN0YXJ0LCBzbGljZVRhaWwpO1xuICAgIHJldHVybiB0aGlzLl9mYWxsYmFja1RleHQ7XG4gIH1cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGU7XG5cbn0se1wiLi9PYmplY3QuYXNzaWduXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9PYmplY3QuYXNzaWduLmpzXCIsXCIuL1Bvb2xlZENsYXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9Qb29sZWRDbGFzcy5qc1wiLFwiLi9nZXRUZXh0Q29udGVudEFjY2Vzc29yXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRUZXh0Q29udGVudEFjY2Vzc29yLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0hUTUxET01Qcm9wZXJ0eUNvbmZpZy5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBIVE1MRE9NUHJvcGVydHlDb25maWdcbiAqL1xuXG4vKmpzbGludCBiaXR3aXNlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgTVVTVF9VU0VfQVRUUklCVVRFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX0FUVFJJQlVURTtcbnZhciBNVVNUX1VTRV9QUk9QRVJUWSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5NVVNUX1VTRV9QUk9QRVJUWTtcbnZhciBIQVNfQk9PTEVBTl9WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfQk9PTEVBTl9WQUxVRTtcbnZhciBIQVNfU0lERV9FRkZFQ1RTID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19TSURFX0VGRkVDVFM7XG52YXIgSEFTX05VTUVSSUNfVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX05VTUVSSUNfVkFMVUU7XG52YXIgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUgPVxuICBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUU7XG52YXIgSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSA9XG4gIERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFO1xuXG52YXIgaGFzU1ZHO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB2YXIgaW1wbGVtZW50YXRpb24gPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbjtcbiAgaGFzU1ZHID0gKFxuICAgIGltcGxlbWVudGF0aW9uICYmXG4gICAgaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJlxuICAgIGltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXG4gICAgICAnaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvZmVhdHVyZSNCYXNpY1N0cnVjdHVyZScsXG4gICAgICAnMS4xJ1xuICAgIClcbiAgKTtcbn1cblxuXG52YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0ge1xuICBpc0N1c3RvbUF0dHJpYnV0ZTogUmVnRXhwLnByb3RvdHlwZS50ZXN0LmJpbmQoXG4gICAgL14oZGF0YXxhcmlhKS1bYS16X11bYS16XFxkXy5cXC1dKiQvXG4gICksXG4gIFByb3BlcnRpZXM6IHtcbiAgICAvKipcbiAgICAgKiBTdGFuZGFyZCBQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgYWNjZXB0OiBudWxsLFxuICAgIGFjY2VwdENoYXJzZXQ6IG51bGwsXG4gICAgYWNjZXNzS2V5OiBudWxsLFxuICAgIGFjdGlvbjogbnVsbCxcbiAgICBhbGxvd0Z1bGxTY3JlZW46IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGFsbG93VHJhbnNwYXJlbmN5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgYWx0OiBudWxsLFxuICAgIGFzeW5jOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBhdXRvQ29tcGxldGU6IG51bGwsXG4gICAgLy8gYXV0b0ZvY3VzIGlzIHBvbHlmaWxsZWQvbm9ybWFsaXplZCBieSBBdXRvRm9jdXNNaXhpblxuICAgIC8vIGF1dG9Gb2N1czogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYXV0b1BsYXk6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNlbGxQYWRkaW5nOiBudWxsLFxuICAgIGNlbGxTcGFjaW5nOiBudWxsLFxuICAgIGNoYXJTZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBjaGVja2VkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNsYXNzSUQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICAvLyBUbyBzZXQgY2xhc3NOYW1lIG9uIFNWRyBlbGVtZW50cywgaXQncyBuZWNlc3NhcnkgdG8gdXNlIC5zZXRBdHRyaWJ1dGU7XG4gICAgLy8gdGhpcyB3b3JrcyBvbiBIVE1MIGVsZW1lbnRzIHRvbyBpbiBhbGwgYnJvd3NlcnMgZXhjZXB0IElFOC4gQ29udmVuaWVudGx5LFxuICAgIC8vIElFOCBkb2Vzbid0IHN1cHBvcnQgU1ZHIGFuZCBzbyB3ZSBjYW4gc2ltcGx5IHVzZSB0aGUgYXR0cmlidXRlIGluXG4gICAgLy8gYnJvd3NlcnMgdGhhdCBzdXBwb3J0IFNWRyBhbmQgdGhlIHByb3BlcnR5IGluIGJyb3dzZXJzIHRoYXQgZG9uJ3QsXG4gICAgLy8gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSBlbGVtZW50IGlzIEhUTUwgb3IgU1ZHLlxuICAgIGNsYXNzTmFtZTogaGFzU1ZHID8gTVVTVF9VU0VfQVRUUklCVVRFIDogTVVTVF9VU0VfUFJPUEVSVFksXG4gICAgY29sczogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgY29sU3BhbjogbnVsbCxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGNvbnRlbnRFZGl0YWJsZTogbnVsbCxcbiAgICBjb250ZXh0TWVudTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGNvbnRyb2xzOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNvb3JkczogbnVsbCxcbiAgICBjcm9zc09yaWdpbjogbnVsbCxcbiAgICBkYXRhOiBudWxsLCAvLyBGb3IgYDxvYmplY3QgLz5gIGFjdHMgYXMgYHNyY2AuXG4gICAgZGF0ZVRpbWU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBkZWZlcjogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgZGlyOiBudWxsLFxuICAgIGRpc2FibGVkOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBkb3dubG9hZDogSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSxcbiAgICBkcmFnZ2FibGU6IG51bGwsXG4gICAgZW5jVHlwZTogbnVsbCxcbiAgICBmb3JtOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9ybUFjdGlvbjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvcm1FbmNUeXBlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9ybU1ldGhvZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvcm1Ob1ZhbGlkYXRlOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBmb3JtVGFyZ2V0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZnJhbWVCb3JkZXI6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBoZWFkZXJzOiBudWxsLFxuICAgIGhlaWdodDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGhpZGRlbjogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgaGlnaDogbnVsbCxcbiAgICBocmVmOiBudWxsLFxuICAgIGhyZWZMYW5nOiBudWxsLFxuICAgIGh0bWxGb3I6IG51bGwsXG4gICAgaHR0cEVxdWl2OiBudWxsLFxuICAgIGljb246IG51bGwsXG4gICAgaWQ6IE1VU1RfVVNFX1BST1BFUlRZLFxuICAgIGxhYmVsOiBudWxsLFxuICAgIGxhbmc6IG51bGwsXG4gICAgbGlzdDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGxvb3A6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgbG93OiBudWxsLFxuICAgIG1hbmlmZXN0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWFyZ2luSGVpZ2h0OiBudWxsLFxuICAgIG1hcmdpbldpZHRoOiBudWxsLFxuICAgIG1heDogbnVsbCxcbiAgICBtYXhMZW5ndGg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtZWRpYTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1lZGlhR3JvdXA6IG51bGwsXG4gICAgbWV0aG9kOiBudWxsLFxuICAgIG1pbjogbnVsbCxcbiAgICBtdWx0aXBsZTogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBtdXRlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBuYW1lOiBudWxsLFxuICAgIG5vVmFsaWRhdGU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG9wZW46IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG9wdGltdW06IG51bGwsXG4gICAgcGF0dGVybjogbnVsbCxcbiAgICBwbGFjZWhvbGRlcjogbnVsbCxcbiAgICBwb3N0ZXI6IG51bGwsXG4gICAgcHJlbG9hZDogbnVsbCxcbiAgICByYWRpb0dyb3VwOiBudWxsLFxuICAgIHJlYWRPbmx5OiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHJlbDogbnVsbCxcbiAgICByZXF1aXJlZDogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgcm9sZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHJvd3M6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIHJvd1NwYW46IG51bGwsXG4gICAgc2FuZGJveDogbnVsbCxcbiAgICBzY29wZTogbnVsbCxcbiAgICBzY29wZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHNjcm9sbGluZzogbnVsbCxcbiAgICBzZWFtbGVzczogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgc2VsZWN0ZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgc2hhcGU6IG51bGwsXG4gICAgc2l6ZTogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgc2l6ZXM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzcGFuOiBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICBzcGVsbENoZWNrOiBudWxsLFxuICAgIHNyYzogbnVsbCxcbiAgICBzcmNEb2M6IE1VU1RfVVNFX1BST1BFUlRZLFxuICAgIHNyY1NldDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0YXJ0OiBIQVNfTlVNRVJJQ19WQUxVRSxcbiAgICBzdGVwOiBudWxsLFxuICAgIHN0eWxlOiBudWxsLFxuICAgIHRhYkluZGV4OiBudWxsLFxuICAgIHRhcmdldDogbnVsbCxcbiAgICB0aXRsZTogbnVsbCxcbiAgICB0eXBlOiBudWxsLFxuICAgIHVzZU1hcDogbnVsbCxcbiAgICB2YWx1ZTogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfU0lERV9FRkZFQ1RTLFxuICAgIHdpZHRoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgd21vZGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcblxuICAgIC8qKlxuICAgICAqIE5vbi1zdGFuZGFyZCBQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgLy8gYXV0b0NhcGl0YWxpemUgYW5kIGF1dG9Db3JyZWN0IGFyZSBzdXBwb3J0ZWQgaW4gTW9iaWxlIFNhZmFyaSBmb3JcbiAgICAvLyBrZXlib2FyZCBoaW50cy5cbiAgICBhdXRvQ2FwaXRhbGl6ZTogbnVsbCxcbiAgICBhdXRvQ29ycmVjdDogbnVsbCxcbiAgICAvLyBpdGVtUHJvcCwgaXRlbVNjb3BlLCBpdGVtVHlwZSBhcmUgZm9yXG4gICAgLy8gTWljcm9kYXRhIHN1cHBvcnQuIFNlZSBodHRwOi8vc2NoZW1hLm9yZy9kb2NzL2dzLmh0bWxcbiAgICBpdGVtUHJvcDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGl0ZW1TY29wZTogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgaXRlbVR5cGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICAvLyBpdGVtSUQgYW5kIGl0ZW1SZWYgYXJlIGZvciBNaWNyb2RhdGEgc3VwcG9ydCBhcyB3ZWxsIGJ1dFxuICAgIC8vIG9ubHkgc3BlY2lmaWVkIGluIHRoZSB0aGUgV0hBVFdHIHNwZWMgZG9jdW1lbnQuIFNlZVxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL21pY3JvZGF0YS5odG1sI21pY3JvZGF0YS1kb20tYXBpXG4gICAgaXRlbUlEOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgaXRlbVJlZjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIC8vIHByb3BlcnR5IGlzIHN1cHBvcnRlZCBmb3IgT3BlbkdyYXBoIGluIG1ldGEgdGFncy5cbiAgICBwcm9wZXJ0eTogbnVsbCxcbiAgICAvLyBJRS1vbmx5IGF0dHJpYnV0ZSB0aGF0IGNvbnRyb2xzIGZvY3VzIGJlaGF2aW9yXG4gICAgdW5zZWxlY3RhYmxlOiBNVVNUX1VTRV9BVFRSSUJVVEVcbiAgfSxcbiAgRE9NQXR0cmlidXRlTmFtZXM6IHtcbiAgICBhY2NlcHRDaGFyc2V0OiAnYWNjZXB0LWNoYXJzZXQnLFxuICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcbiAgICBodG1sRm9yOiAnZm9yJyxcbiAgICBodHRwRXF1aXY6ICdodHRwLWVxdWl2J1xuICB9LFxuICBET01Qcm9wZXJ0eU5hbWVzOiB7XG4gICAgYXV0b0NhcGl0YWxpemU6ICdhdXRvY2FwaXRhbGl6ZScsXG4gICAgYXV0b0NvbXBsZXRlOiAnYXV0b2NvbXBsZXRlJyxcbiAgICBhdXRvQ29ycmVjdDogJ2F1dG9jb3JyZWN0JyxcbiAgICBhdXRvRm9jdXM6ICdhdXRvZm9jdXMnLFxuICAgIGF1dG9QbGF5OiAnYXV0b3BsYXknLFxuICAgIC8vIGBlbmNvZGluZ2AgaXMgZXF1aXZhbGVudCB0byBgZW5jdHlwZWAsIElFOCBsYWNrcyBhbiBgZW5jdHlwZWAgc2V0dGVyLlxuICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L2Zvcm1zLmh0bWwjZG9tLWZzLWVuY29kaW5nXG4gICAgZW5jVHlwZTogJ2VuY29kaW5nJyxcbiAgICBocmVmTGFuZzogJ2hyZWZsYW5nJyxcbiAgICByYWRpb0dyb3VwOiAncmFkaW9ncm91cCcsXG4gICAgc3BlbGxDaGVjazogJ3NwZWxsY2hlY2snLFxuICAgIHNyY0RvYzogJ3NyY2RvYycsXG4gICAgc3JjU2V0OiAnc3Jjc2V0J1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhUTUxET01Qcm9wZXJ0eUNvbmZpZztcblxufSx7XCIuL0RPTVByb3BlcnR5XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9ET01Qcm9wZXJ0eS5qc1wiLFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvTGlua2VkVmFsdWVVdGlscy5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgTGlua2VkVmFsdWVVdGlsc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVzXCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgaGFzUmVhZE9ubHlWYWx1ZSA9IHtcbiAgJ2J1dHRvbic6IHRydWUsXG4gICdjaGVja2JveCc6IHRydWUsXG4gICdpbWFnZSc6IHRydWUsXG4gICdoaWRkZW4nOiB0cnVlLFxuICAncmFkaW8nOiB0cnVlLFxuICAncmVzZXQnOiB0cnVlLFxuICAnc3VibWl0JzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpbnB1dC5wcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0LnByb3BzLnZhbHVlTGluayA9PSBudWxsLFxuICAgICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIHZhbHVlTGluay4gSWYgeW91IHdhbnQgdG8gdXNlICcgK1xuICAgICdjaGVja2VkTGluaywgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byB1c2UgdmFsdWVMaW5rIGFuZCB2aWNlIHZlcnNhLidcbiAgKSA6IGludmFyaWFudChpbnB1dC5wcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0LnByb3BzLnZhbHVlTGluayA9PSBudWxsKSk7XG59XG5mdW5jdGlvbiBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0KSB7XG4gIF9hc3NlcnRTaW5nbGVMaW5rKGlucHV0KTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpbnB1dC5wcm9wcy52YWx1ZSA9PSBudWxsICYmIGlucHV0LnByb3BzLm9uQ2hhbmdlID09IG51bGwsXG4gICAgJ0Nhbm5vdCBwcm92aWRlIGEgdmFsdWVMaW5rIGFuZCBhIHZhbHVlIG9yIG9uQ2hhbmdlIGV2ZW50LiBJZiB5b3Ugd2FudCAnICtcbiAgICAndG8gdXNlIHZhbHVlIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvIHVzZSB2YWx1ZUxpbmsuJ1xuICApIDogaW52YXJpYW50KGlucHV0LnByb3BzLnZhbHVlID09IG51bGwgJiYgaW5wdXQucHJvcHMub25DaGFuZ2UgPT0gbnVsbCkpO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXQpIHtcbiAgX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXQpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGlucHV0LnByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dC5wcm9wcy5vbkNoYW5nZSA9PSBudWxsLFxuICAgICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIGNoZWNrZWQgcHJvcGVydHkgb3Igb25DaGFuZ2UgZXZlbnQuICcgK1xuICAgICdJZiB5b3Ugd2FudCB0byB1c2UgY2hlY2tlZCBvciBvbkNoYW5nZSwgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byAnICtcbiAgICAndXNlIGNoZWNrZWRMaW5rJ1xuICApIDogaW52YXJpYW50KGlucHV0LnByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dC5wcm9wcy5vbkNoYW5nZSA9PSBudWxsKSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZSBjaGFuZ2UgZXZlbnQgdG8gaGFuZGxlXG4gKi9cbmZ1bmN0aW9uIF9oYW5kbGVMaW5rZWRWYWx1ZUNoYW5nZShlKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHRoaXMucHJvcHMudmFsdWVMaW5rLnJlcXVlc3RDaGFuZ2UoZS50YXJnZXQudmFsdWUpO1xufVxuXG4vKipcbiAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBlIGNoYW5nZSBldmVudCB0byBoYW5kbGVcbiAgKi9cbmZ1bmN0aW9uIF9oYW5kbGVMaW5rZWRDaGVja0NoYW5nZShlKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHRoaXMucHJvcHMuY2hlY2tlZExpbmsucmVxdWVzdENoYW5nZShlLnRhcmdldC5jaGVja2VkKTtcbn1cblxuLyoqXG4gKiBQcm92aWRlIGEgbGlua2VkIGB2YWx1ZWAgYXR0cmlidXRlIGZvciBjb250cm9sbGVkIGZvcm1zLiBZb3Ugc2hvdWxkIG5vdCB1c2VcbiAqIHRoaXMgb3V0c2lkZSBvZiB0aGUgUmVhY3RET00gY29udHJvbGxlZCBmb3JtIGNvbXBvbmVudHMuXG4gKi9cbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0ge1xuICBNaXhpbjoge1xuICAgIHByb3BUeXBlczoge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fFxuICAgICAgICAgICAgaGFzUmVhZE9ubHlWYWx1ZVtwcm9wcy50eXBlXSB8fFxuICAgICAgICAgICAgcHJvcHMub25DaGFuZ2UgfHxcbiAgICAgICAgICAgIHByb3BzLnJlYWRPbmx5IHx8XG4gICAgICAgICAgICBwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1lvdSBwcm92aWRlZCBhIGB2YWx1ZWAgcHJvcCB0byBhIGZvcm0gZmllbGQgd2l0aG91dCBhbiAnICtcbiAgICAgICAgICAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICtcbiAgICAgICAgICAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdFZhbHVlYC4gT3RoZXJ3aXNlLCAnICtcbiAgICAgICAgICAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJ1xuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIGNoZWNrZWQ6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fFxuICAgICAgICAgICAgcHJvcHMub25DaGFuZ2UgfHxcbiAgICAgICAgICAgIHByb3BzLnJlYWRPbmx5IHx8XG4gICAgICAgICAgICBwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1lvdSBwcm92aWRlZCBhIGBjaGVja2VkYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgK1xuICAgICAgICAgICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgK1xuICAgICAgICAgICd0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBkZWZhdWx0Q2hlY2tlZGAuIE90aGVyd2lzZSwgJyArXG4gICAgICAgICAgJ3NldCBlaXRoZXIgYG9uQ2hhbmdlYCBvciBgcmVhZE9ubHlgLidcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBvbkNoYW5nZTogUmVhY3RQcm9wVHlwZXMuZnVuY1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW5wdXQgRm9ybSBjb21wb25lbnRcbiAgICogQHJldHVybiB7Kn0gY3VycmVudCB2YWx1ZSBvZiB0aGUgaW5wdXQgZWl0aGVyIGZyb20gdmFsdWUgcHJvcCBvciBsaW5rLlxuICAgKi9cbiAgZ2V0VmFsdWU6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgaWYgKGlucHV0LnByb3BzLnZhbHVlTGluaykge1xuICAgICAgX2Fzc2VydFZhbHVlTGluayhpbnB1dCk7XG4gICAgICByZXR1cm4gaW5wdXQucHJvcHMudmFsdWVMaW5rLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQucHJvcHMudmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGlucHV0IEZvcm0gY29tcG9uZW50XG4gICAqIEByZXR1cm4geyp9IGN1cnJlbnQgY2hlY2tlZCBzdGF0dXMgb2YgdGhlIGlucHV0IGVpdGhlciBmcm9tIGNoZWNrZWQgcHJvcFxuICAgKiAgICAgICAgICAgICBvciBsaW5rLlxuICAgKi9cbiAgZ2V0Q2hlY2tlZDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQucHJvcHMuY2hlY2tlZExpbmspIHtcbiAgICAgIF9hc3NlcnRDaGVja2VkTGluayhpbnB1dCk7XG4gICAgICByZXR1cm4gaW5wdXQucHJvcHMuY2hlY2tlZExpbmsudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dC5wcm9wcy5jaGVja2VkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnB1dCBGb3JtIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gY2hhbmdlIGNhbGxiYWNrIGVpdGhlciBmcm9tIG9uQ2hhbmdlIHByb3Agb3IgbGluay5cbiAgICovXG4gIGdldE9uQ2hhbmdlOiBmdW5jdGlvbihpbnB1dCkge1xuICAgIGlmIChpbnB1dC5wcm9wcy52YWx1ZUxpbmspIHtcbiAgICAgIF9hc3NlcnRWYWx1ZUxpbmsoaW5wdXQpO1xuICAgICAgcmV0dXJuIF9oYW5kbGVMaW5rZWRWYWx1ZUNoYW5nZTtcbiAgICB9IGVsc2UgaWYgKGlucHV0LnByb3BzLmNoZWNrZWRMaW5rKSB7XG4gICAgICBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXQpO1xuICAgICAgcmV0dXJuIF9oYW5kbGVMaW5rZWRDaGVja0NoYW5nZTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0LnByb3BzLm9uQ2hhbmdlO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmtlZFZhbHVlVXRpbHM7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0UHJvcFR5cGVzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlcy5qc1wiLFwiLi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0xvY2FsRXZlbnRUcmFwTWl4aW4uanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIExvY2FsRXZlbnRUcmFwTWl4aW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIik7XG5cbnZhciBhY2N1bXVsYXRlSW50byA9IHJlcXVpcmUoXCIuL2FjY3VtdWxhdGVJbnRvXCIpO1xudmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IHJlcXVpcmUoXCIuL2ZvckVhY2hBY2N1bXVsYXRlZFwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbmZ1bmN0aW9uIHJlbW92ZShldmVudCkge1xuICBldmVudC5yZW1vdmUoKTtcbn1cblxudmFyIExvY2FsRXZlbnRUcmFwTWl4aW4gPSB7XG4gIHRyYXBCdWJibGVkRXZlbnQ6ZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KHRoaXMuaXNNb3VudGVkKCksICdNdXN0IGJlIG1vdW50ZWQgdG8gdHJhcCBldmVudHMnKSA6IGludmFyaWFudCh0aGlzLmlzTW91bnRlZCgpKSk7XG4gICAgLy8gSWYgYSBjb21wb25lbnQgcmVuZGVycyB0byBudWxsIG9yIGlmIGFub3RoZXIgY29tcG9uZW50IGZhdGFscyBhbmQgY2F1c2VzXG4gICAgLy8gdGhlIHN0YXRlIG9mIHRoZSB0cmVlIHRvIGJlIGNvcnJ1cHRlZCwgYG5vZGVgIGhlcmUgY2FuIGJlIG51bGwuXG4gICAgdmFyIG5vZGUgPSB0aGlzLmdldERPTU5vZGUoKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgbm9kZSxcbiAgICAgICdMb2NhbEV2ZW50VHJhcE1peGluLnRyYXBCdWJibGVkRXZlbnQoLi4uKTogUmVxdWlyZXMgbm9kZSB0byBiZSByZW5kZXJlZC4nXG4gICAgKSA6IGludmFyaWFudChub2RlKSk7XG4gICAgdmFyIGxpc3RlbmVyID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICBoYW5kbGVyQmFzZU5hbWUsXG4gICAgICBub2RlXG4gICAgKTtcbiAgICB0aGlzLl9sb2NhbEV2ZW50TGlzdGVuZXJzID1cbiAgICAgIGFjY3VtdWxhdGVJbnRvKHRoaXMuX2xvY2FsRXZlbnRMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgfSxcblxuICAvLyB0cmFwQ2FwdHVyZWRFdmVudCB3b3VsZCBsb29rIG5lYXJseSBpZGVudGljYWwuIFdlIGRvbid0IGltcGxlbWVudCB0aGF0XG4gIC8vIG1ldGhvZCBiZWNhdXNlIGl0IGlzbid0IGN1cnJlbnRseSBuZWVkZWQuXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6ZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xvY2FsRXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIGZvckVhY2hBY2N1bXVsYXRlZCh0aGlzLl9sb2NhbEV2ZW50TGlzdGVuZXJzLCByZW1vdmUpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMb2NhbEV2ZW50VHJhcE1peGluO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5qc1wiLFwiLi9hY2N1bXVsYXRlSW50b1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvYWNjdW11bGF0ZUludG8uanNcIixcIi4vZm9yRWFjaEFjY3VtdWxhdGVkXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9mb3JFYWNoQWNjdW11bGF0ZWQuanNcIixcIi4vaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9Nb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbi8qKlxuICogTW9iaWxlIFNhZmFyaSBkb2VzIG5vdCBmaXJlIHByb3Blcmx5IGJ1YmJsZSBjbGljayBldmVudHMgb24gbm9uLWludGVyYWN0aXZlXG4gKiBlbGVtZW50cywgd2hpY2ggbWVhbnMgZGVsZWdhdGVkIGNsaWNrIGxpc3RlbmVycyBkbyBub3QgZmlyZS4gVGhlIHdvcmthcm91bmRcbiAqIGZvciB0aGlzIGJ1ZyBpbnZvbHZlcyBhdHRhY2hpbmcgYW4gZW1wdHkgY2xpY2sgbGlzdGVuZXIgb24gdGhlIHRhcmdldCBub2RlLlxuICpcbiAqIFRoaXMgcGFydGljdWxhciBwbHVnaW4gd29ya3MgYXJvdW5kIHRoZSBidWcgYnkgYXR0YWNoaW5nIGFuIGVtcHR5IGNsaWNrXG4gKiBsaXN0ZW5lciBvbiBgdG91Y2hzdGFydGAgKHdoaWNoIGRvZXMgZmlyZSBvbiBldmVyeSBlbGVtZW50KS5cbiAqL1xudmFyIE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogbnVsbCxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0KSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gbmF0aXZlRXZlbnQudGFyZ2V0O1xuICAgICAgaWYgKHRhcmdldCAmJiAhdGFyZ2V0Lm9uY2xpY2spIHtcbiAgICAgICAgdGFyZ2V0Lm9uY2xpY2sgPSBlbXB0eUZ1bmN0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW47XG5cbn0se1wiLi9FdmVudENvbnN0YW50c1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRDb25zdGFudHMuanNcIixcIi4vZW1wdHlGdW5jdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZW1wdHlGdW5jdGlvbi5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9PYmplY3QuYXNzaWduLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIE9iamVjdC5hc3NpZ25cbiAqL1xuXG4vLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtb2JqZWN0LmFzc2lnblxuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZXMpIHtcbiAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiB0YXJnZXQgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gIH1cblxuICB2YXIgdG8gPSBPYmplY3QodGFyZ2V0KTtcbiAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuICBmb3IgKHZhciBuZXh0SW5kZXggPSAxOyBuZXh0SW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBuZXh0SW5kZXgrKykge1xuICAgIHZhciBuZXh0U291cmNlID0gYXJndW1lbnRzW25leHRJbmRleF07XG4gICAgaWYgKG5leHRTb3VyY2UgPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGZyb20gPSBPYmplY3QobmV4dFNvdXJjZSk7XG5cbiAgICAvLyBXZSBkb24ndCBjdXJyZW50bHkgc3VwcG9ydCBhY2Nlc3NvcnMgbm9yIHByb3hpZXMuIFRoZXJlZm9yZSB0aGlzXG4gICAgLy8gY29weSBjYW5ub3QgdGhyb3cuIElmIHdlIGV2ZXIgc3VwcG9ydGVkIHRoaXMgdGhlbiB3ZSBtdXN0IGhhbmRsZVxuICAgIC8vIGV4Y2VwdGlvbnMgYW5kIHNpZGUtZWZmZWN0cy4gV2UgZG9uJ3Qgc3VwcG9ydCBzeW1ib2xzIHNvIHRoZXkgd29uJ3RcbiAgICAvLyBiZSB0cmFuc2ZlcnJlZC5cblxuICAgIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG4gICAgICAgIHRvW2tleV0gPSBmcm9tW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnbjtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9Qb29sZWRDbGFzcy5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUG9vbGVkQ2xhc3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogU3RhdGljIHBvb2xlcnMuIFNldmVyYWwgY3VzdG9tIHZlcnNpb25zIGZvciBlYWNoIHBvdGVudGlhbCBudW1iZXIgb2ZcbiAqIGFyZ3VtZW50cy4gQSBjb21wbGV0ZWx5IGdlbmVyaWMgcG9vbGVyIGlzIGVhc3kgdG8gaW1wbGVtZW50LCBidXQgd291bGRcbiAqIHJlcXVpcmUgYWNjZXNzaW5nIHRoZSBgYXJndW1lbnRzYCBvYmplY3QuIEluIGVhY2ggb2YgdGhlc2UsIGB0aGlzYCByZWZlcnMgdG9cbiAqIHRoZSBDbGFzcyBpdHNlbGYsIG5vdCBhbiBpbnN0YW5jZS4gSWYgYW55IG90aGVycyBhcmUgbmVlZGVkLCBzaW1wbHkgYWRkIHRoZW1cbiAqIGhlcmUsIG9yIGluIHRoZWlyIG93biBmaWxlcy5cbiAqL1xudmFyIG9uZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oY29weUZpZWxkc0Zyb20pIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgY29weUZpZWxkc0Zyb20pO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGNvcHlGaWVsZHNGcm9tKTtcbiAgfVxufTtcblxudmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oYTEsIGEyKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMik7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyKTtcbiAgfVxufTtcblxudmFyIHRocmVlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihhMSwgYTIsIGEzKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMpO1xuICB9XG59O1xuXG52YXIgZml2ZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQsIGE1KTtcbiAgfVxufTtcblxudmFyIHN0YW5kYXJkUmVsZWFzZXIgPSBmdW5jdGlvbihpbnN0YW5jZSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGluc3RhbmNlIGluc3RhbmNlb2YgS2xhc3MsXG4gICAgJ1RyeWluZyB0byByZWxlYXNlIGFuIGluc3RhbmNlIGludG8gYSBwb29sIG9mIGEgZGlmZmVyZW50IHR5cGUuJ1xuICApIDogaW52YXJpYW50KGluc3RhbmNlIGluc3RhbmNlb2YgS2xhc3MpKTtcbiAgaWYgKGluc3RhbmNlLmRlc3RydWN0b3IpIHtcbiAgICBpbnN0YW5jZS5kZXN0cnVjdG9yKCk7XG4gIH1cbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGggPCBLbGFzcy5wb29sU2l6ZSkge1xuICAgIEtsYXNzLmluc3RhbmNlUG9vbC5wdXNoKGluc3RhbmNlKTtcbiAgfVxufTtcblxudmFyIERFRkFVTFRfUE9PTF9TSVpFID0gMTA7XG52YXIgREVGQVVMVF9QT09MRVIgPSBvbmVBcmd1bWVudFBvb2xlcjtcblxuLyoqXG4gKiBBdWdtZW50cyBgQ29weUNvbnN0cnVjdG9yYCB0byBiZSBhIHBvb2xhYmxlIGNsYXNzLCBhdWdtZW50aW5nIG9ubHkgdGhlIGNsYXNzXG4gKiBpdHNlbGYgKHN0YXRpY2FsbHkpIG5vdCBhZGRpbmcgYW55IHByb3RvdHlwaWNhbCBmaWVsZHMuIEFueSBDb3B5Q29uc3RydWN0b3JcbiAqIHlvdSBnaXZlIHRoaXMgbWF5IGhhdmUgYSBgcG9vbFNpemVgIHByb3BlcnR5LCBhbmQgd2lsbCBsb29rIGZvciBhXG4gKiBwcm90b3R5cGljYWwgYGRlc3RydWN0b3JgIG9uIGluc3RhbmNlcyAob3B0aW9uYWwpLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IENvcHlDb25zdHJ1Y3RvciBDb25zdHJ1Y3RvciB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcG9vbGVyIEN1c3RvbWl6YWJsZSBwb29sZXIuXG4gKi9cbnZhciBhZGRQb29saW5nVG8gPSBmdW5jdGlvbihDb3B5Q29uc3RydWN0b3IsIHBvb2xlcikge1xuICB2YXIgTmV3S2xhc3MgPSBDb3B5Q29uc3RydWN0b3I7XG4gIE5ld0tsYXNzLmluc3RhbmNlUG9vbCA9IFtdO1xuICBOZXdLbGFzcy5nZXRQb29sZWQgPSBwb29sZXIgfHwgREVGQVVMVF9QT09MRVI7XG4gIGlmICghTmV3S2xhc3MucG9vbFNpemUpIHtcbiAgICBOZXdLbGFzcy5wb29sU2l6ZSA9IERFRkFVTFRfUE9PTF9TSVpFO1xuICB9XG4gIE5ld0tsYXNzLnJlbGVhc2UgPSBzdGFuZGFyZFJlbGVhc2VyO1xuICByZXR1cm4gTmV3S2xhc3M7XG59O1xuXG52YXIgUG9vbGVkQ2xhc3MgPSB7XG4gIGFkZFBvb2xpbmdUbzogYWRkUG9vbGluZ1RvLFxuICBvbmVBcmd1bWVudFBvb2xlcjogb25lQXJndW1lbnRQb29sZXIsXG4gIHR3b0FyZ3VtZW50UG9vbGVyOiB0d29Bcmd1bWVudFBvb2xlcixcbiAgdGhyZWVBcmd1bWVudFBvb2xlcjogdGhyZWVBcmd1bWVudFBvb2xlcixcbiAgZml2ZUFyZ3VtZW50UG9vbGVyOiBmaXZlQXJndW1lbnRQb29sZXJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUG9vbGVkQ2xhc3M7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3QuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0XG4gKi9cblxuLyogZ2xvYmFscyBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18qL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudFBsdWdpblV0aWxzID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5VdGlsc1wiKTtcbnZhciBSZWFjdENoaWxkcmVuID0gcmVxdWlyZShcIi4vUmVhY3RDaGlsZHJlblwiKTtcbnZhciBSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9uZW50XCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0Q29udGV4dCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29udGV4dFwiKTtcbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3JcIik7XG52YXIgUmVhY3RET00gPSByZXF1aXJlKFwiLi9SZWFjdERPTVwiKTtcbnZhciBSZWFjdERPTVRleHRDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdERPTVRleHRDb21wb25lbnRcIik7XG52YXIgUmVhY3REZWZhdWx0SW5qZWN0aW9uID0gcmVxdWlyZShcIi4vUmVhY3REZWZhdWx0SW5qZWN0aW9uXCIpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xudmFyIFJlYWN0UHJvcFR5cGVzID0gcmVxdWlyZShcIi4vUmVhY3RQcm9wVHlwZXNcIik7XG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZShcIi4vUmVhY3RSZWNvbmNpbGVyXCIpO1xudmFyIFJlYWN0U2VydmVyUmVuZGVyaW5nID0gcmVxdWlyZShcIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGZpbmRET01Ob2RlID0gcmVxdWlyZShcIi4vZmluZERPTU5vZGVcIik7XG52YXIgb25seUNoaWxkID0gcmVxdWlyZShcIi4vb25seUNoaWxkXCIpO1xuXG5SZWFjdERlZmF1bHRJbmplY3Rpb24uaW5qZWN0KCk7XG5cbnZhciBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQ7XG52YXIgY3JlYXRlRmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5O1xudmFyIGNsb25lRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQ7XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgY3JlYXRlRWxlbWVudCA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVFbGVtZW50O1xuICBjcmVhdGVGYWN0b3J5ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3Rvcnk7XG4gIGNsb25lRWxlbWVudCA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jbG9uZUVsZW1lbnQ7XG59XG5cbnZhciByZW5kZXIgPSBSZWFjdFBlcmYubWVhc3VyZSgnUmVhY3QnLCAncmVuZGVyJywgUmVhY3RNb3VudC5yZW5kZXIpO1xuXG52YXIgUmVhY3QgPSB7XG4gIENoaWxkcmVuOiB7XG4gICAgbWFwOiBSZWFjdENoaWxkcmVuLm1hcCxcbiAgICBmb3JFYWNoOiBSZWFjdENoaWxkcmVuLmZvckVhY2gsXG4gICAgY291bnQ6IFJlYWN0Q2hpbGRyZW4uY291bnQsXG4gICAgb25seTogb25seUNoaWxkXG4gIH0sXG4gIENvbXBvbmVudDogUmVhY3RDb21wb25lbnQsXG4gIERPTTogUmVhY3RET00sXG4gIFByb3BUeXBlczogUmVhY3RQcm9wVHlwZXMsXG4gIGluaXRpYWxpemVUb3VjaEV2ZW50czogZnVuY3Rpb24oc2hvdWxkVXNlVG91Y2gpIHtcbiAgICBFdmVudFBsdWdpblV0aWxzLnVzZVRvdWNoRXZlbnRzID0gc2hvdWxkVXNlVG91Y2g7XG4gIH0sXG4gIGNyZWF0ZUNsYXNzOiBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzLFxuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50LFxuICBjbG9uZUVsZW1lbnQ6IGNsb25lRWxlbWVudCxcbiAgY3JlYXRlRmFjdG9yeTogY3JlYXRlRmFjdG9yeSxcbiAgY3JlYXRlTWl4aW46IGZ1bmN0aW9uKG1peGluKSB7XG4gICAgLy8gQ3VycmVudGx5IGEgbm9vcC4gV2lsbCBiZSB1c2VkIHRvIHZhbGlkYXRlIGFuZCB0cmFjZSBtaXhpbnMuXG4gICAgcmV0dXJuIG1peGluO1xuICB9LFxuICBjb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnQ6IFJlYWN0TW91bnQuY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50LFxuICBjb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnRCeUlEOiBSZWFjdE1vdW50LmNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudEJ5SUQsXG4gIGZpbmRET01Ob2RlOiBmaW5kRE9NTm9kZSxcbiAgcmVuZGVyOiByZW5kZXIsXG4gIHJlbmRlclRvU3RyaW5nOiBSZWFjdFNlcnZlclJlbmRlcmluZy5yZW5kZXJUb1N0cmluZyxcbiAgcmVuZGVyVG9TdGF0aWNNYXJrdXA6IFJlYWN0U2VydmVyUmVuZGVyaW5nLnJlbmRlclRvU3RhdGljTWFya3VwLFxuICB1bm1vdW50Q29tcG9uZW50QXROb2RlOiBSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGUsXG4gIGlzVmFsaWRFbGVtZW50OiBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQsXG4gIHdpdGhDb250ZXh0OiBSZWFjdENvbnRleHQud2l0aENvbnRleHQsXG5cbiAgLy8gSG9vayBmb3IgSlNYIHNwcmVhZCwgZG9uJ3QgdXNlIHRoaXMgZm9yIGFueXRoaW5nIGVsc2UuXG4gIF9fc3ByZWFkOiBhc3NpZ25cbn07XG5cbi8vIEluamVjdCB0aGUgcnVudGltZSBpbnRvIGEgZGV2dG9vbHMgZ2xvYmFsIGhvb2sgcmVnYXJkbGVzcyBvZiBicm93c2VyLlxuLy8gQWxsb3dzIGZvciBkZWJ1Z2dpbmcgd2hlbiB0aGUgaG9vayBpcyBpbmplY3RlZCBvbiB0aGUgcGFnZS5cbmlmIChcbiAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5pbmplY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdCh7XG4gICAgQ3VycmVudE93bmVyOiBSZWFjdEN1cnJlbnRPd25lcixcbiAgICBJbnN0YW5jZUhhbmRsZXM6IFJlYWN0SW5zdGFuY2VIYW5kbGVzLFxuICAgIE1vdW50OiBSZWFjdE1vdW50LFxuICAgIFJlY29uY2lsZXI6IFJlYWN0UmVjb25jaWxlcixcbiAgICBUZXh0Q29tcG9uZW50OiBSZWFjdERPTVRleHRDb21wb25lbnRcbiAgfSk7XG59XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgdmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG4gIGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgd2luZG93LnRvcCA9PT0gd2luZG93LnNlbGYpIHtcblxuICAgIC8vIElmIHdlJ3JlIGluIENocm9tZSwgbG9vayBmb3IgdGhlIGRldnRvb2xzIG1hcmtlciBhbmQgcHJvdmlkZSBhIGRvd25sb2FkXG4gICAgLy8gbGluayBpZiBub3QgaW5zdGFsbGVkLlxuICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpID4gLTEpIHtcbiAgICAgIGlmICh0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFxuICAgICAgICAgICdEb3dubG9hZCB0aGUgUmVhY3QgRGV2VG9vbHMgZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6ICcgK1xuICAgICAgICAgICdodHRwczovL2ZiLm1lL3JlYWN0LWRldnRvb2xzJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBleHBlY3RlZEZlYXR1cmVzID0gW1xuICAgICAgLy8gc2hpbXNcbiAgICAgIEFycmF5LmlzQXJyYXksXG4gICAgICBBcnJheS5wcm90b3R5cGUuZXZlcnksXG4gICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCxcbiAgICAgIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLFxuICAgICAgQXJyYXkucHJvdG90eXBlLm1hcCxcbiAgICAgIERhdGUubm93LFxuICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQsXG4gICAgICBPYmplY3Qua2V5cyxcbiAgICAgIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsXG4gICAgICBTdHJpbmcucHJvdG90eXBlLnRyaW0sXG5cbiAgICAgIC8vIHNoYW1zXG4gICAgICBPYmplY3QuY3JlYXRlLFxuICAgICAgT2JqZWN0LmZyZWV6ZVxuICAgIF07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkRmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZXhwZWN0ZWRGZWF0dXJlc1tpXSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdPbmUgb3IgbW9yZSBFUzUgc2hpbS9zaGFtcyBleHBlY3RlZCBieSBSZWFjdCBhcmUgbm90IGF2YWlsYWJsZTogJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1wb2x5ZmlsbHMnXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5SZWFjdC52ZXJzaW9uID0gJzAuMTMuMyc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0V2ZW50UGx1Z2luVXRpbHNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50UGx1Z2luVXRpbHMuanNcIixcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzXCIsXCIuL09iamVjdC5hc3NpZ25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanNcIixcIi4vUmVhY3RDaGlsZHJlblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDaGlsZHJlbi5qc1wiLFwiLi9SZWFjdENsYXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENsYXNzLmpzXCIsXCIuL1JlYWN0Q29tcG9uZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudC5qc1wiLFwiLi9SZWFjdENvbnRleHRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29udGV4dC5qc1wiLFwiLi9SZWFjdEN1cnJlbnRPd25lclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXIuanNcIixcIi4vUmVhY3RET01cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NLmpzXCIsXCIuL1JlYWN0RE9NVGV4dENvbXBvbmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01UZXh0Q29tcG9uZW50LmpzXCIsXCIuL1JlYWN0RGVmYXVsdEluamVjdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3REZWZhdWx0SW5qZWN0aW9uLmpzXCIsXCIuL1JlYWN0RWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCIsXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50VmFsaWRhdG9yLmpzXCIsXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEluc3RhbmNlSGFuZGxlcy5qc1wiLFwiLi9SZWFjdE1vdW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE1vdW50LmpzXCIsXCIuL1JlYWN0UGVyZlwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQZXJmLmpzXCIsXCIuL1JlYWN0UHJvcFR5cGVzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlcy5qc1wiLFwiLi9SZWFjdFJlY29uY2lsZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UmVjb25jaWxlci5qc1wiLFwiLi9SZWFjdFNlcnZlclJlbmRlcmluZ1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmcuanNcIixcIi4vZmluZERPTU5vZGVcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZpbmRET01Ob2RlLmpzXCIsXCIuL29ubHlDaGlsZFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvb25seUNoaWxkLmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4uanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBmaW5kRE9NTm9kZSA9IHJlcXVpcmUoXCIuL2ZpbmRET01Ob2RlXCIpO1xuXG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBET00gbm9kZSByZW5kZXJlZCBieSB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHJldHVybiB7RE9NRWxlbWVudH0gVGhlIHJvb3Qgbm9kZSBvZiB0aGlzIGNvbXBvbmVudC5cbiAgICogQGZpbmFsXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGdldERPTU5vZGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmaW5kRE9NTm9kZSh0aGlzKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbjtcblxufSx7XCIuL2ZpbmRET01Ob2RlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9maW5kRE9NTm9kZS5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpbkh1YlwiKTtcbnZhciBFdmVudFBsdWdpblJlZ2lzdHJ5ID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5SZWdpc3RyeVwiKTtcbnZhciBSZWFjdEV2ZW50RW1pdHRlck1peGluID0gcmVxdWlyZShcIi4vUmVhY3RFdmVudEVtaXR0ZXJNaXhpblwiKTtcbnZhciBWaWV3cG9ydE1ldHJpY3MgPSByZXF1aXJlKFwiLi9WaWV3cG9ydE1ldHJpY3NcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKFwiLi9pc0V2ZW50U3VwcG9ydGVkXCIpO1xuXG4vKipcbiAqIFN1bW1hcnkgb2YgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgZXZlbnQgaGFuZGxpbmc6XG4gKlxuICogIC0gVG9wLWxldmVsIGRlbGVnYXRpb24gaXMgdXNlZCB0byB0cmFwIG1vc3QgbmF0aXZlIGJyb3dzZXIgZXZlbnRzLiBUaGlzXG4gKiAgICBtYXkgb25seSBvY2N1ciBpbiB0aGUgbWFpbiB0aHJlYWQgYW5kIGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZlxuICogICAgUmVhY3RFdmVudExpc3RlbmVyLCB3aGljaCBpcyBpbmplY3RlZCBhbmQgY2FuIHRoZXJlZm9yZSBzdXBwb3J0IHBsdWdnYWJsZVxuICogICAgZXZlbnQgc291cmNlcy4gVGhpcyBpcyB0aGUgb25seSB3b3JrIHRoYXQgb2NjdXJzIGluIHRoZSBtYWluIHRocmVhZC5cbiAqXG4gKiAgLSBXZSBub3JtYWxpemUgYW5kIGRlLWR1cGxpY2F0ZSBldmVudHMgdG8gYWNjb3VudCBmb3IgYnJvd3NlciBxdWlya3MuIFRoaXNcbiAqICAgIG1heSBiZSBkb25lIGluIHRoZSB3b3JrZXIgdGhyZWFkLlxuICpcbiAqICAtIEZvcndhcmQgdGhlc2UgbmF0aXZlIGV2ZW50cyAod2l0aCB0aGUgYXNzb2NpYXRlZCB0b3AtbGV2ZWwgdHlwZSB1c2VkIHRvXG4gKiAgICB0cmFwIGl0KSB0byBgRXZlbnRQbHVnaW5IdWJgLCB3aGljaCBpbiB0dXJuIHdpbGwgYXNrIHBsdWdpbnMgaWYgdGhleSB3YW50XG4gKiAgICB0byBleHRyYWN0IGFueSBzeW50aGV0aWMgZXZlbnRzLlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHdpbGwgdGhlbiBwcm9jZXNzIGVhY2ggZXZlbnQgYnkgYW5ub3RhdGluZyB0aGVtIHdpdGhcbiAqICAgIFwiZGlzcGF0Y2hlc1wiLCBhIHNlcXVlbmNlIG9mIGxpc3RlbmVycyBhbmQgSURzIHRoYXQgY2FyZSBhYm91dCB0aGF0IGV2ZW50LlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHRoZW4gZGlzcGF0Y2hlcyB0aGUgZXZlbnRzLlxuICpcbiAqIE92ZXJ2aWV3IG9mIFJlYWN0IGFuZCB0aGUgZXZlbnQgc3lzdGVtOlxuICpcbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgICAgRE9NICAgICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqICAgICAgIHwgICAgICAgICAgIC5cbiAqICAgICAgIHYgICAgICAgICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgUmVhY3RFdmVudCB8ICAgIC5cbiAqIHwgIExpc3RlbmVyICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgICstLS0tLS0tLSt8U2ltcGxlRXZlbnR8XG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgfCAgICAgICAgIHxQbHVnaW4gICAgIHxcbiAqICstLS0tLXwtLS0tLS0rICAgIC4gICAgICAgICAgICAgICB2ICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58RXZlbnRQbHVnaW5IdWJ8ICAgICAgICAgICAgICAgICAgICB8ICAgIEV2ZW50ICAgfFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8IFByb3BhZ2F0b3JzfFxuICogfCBSZWFjdEV2ZW50IHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICB8VGFwRXZlbnQgICB8ICB8LS0tLS0tLS0tLS0tfFxuICogfCAgRW1pdHRlciAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8PC0tLSt8UGx1Z2luICAgICB8ICB8b3RoZXIgcGx1Z2lufFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8ICB1dGlsaXRpZXMgfFxuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58ICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rXG4gKiArLS0tLS18LS0tLS0tKyAgICAuICAgICAgICAgICAgICAgIF4gICAgICAgICstLS0tLS0tLS0tLStcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICAgfCAgICAgICAgfEVudGVyL0xlYXZlfFxuICogICAgICAgKyAgICAgICAgICAgLiAgICAgICAgICAgICAgICArLS0tLS0tLSt8UGx1Z2luICAgICB8XG4gKiArLS0tLS0tLS0tLS0tLSsgICAuICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLStcbiAqIHwgYXBwbGljYXRpb24gfCAgIC5cbiAqIHwtLS0tLS0tLS0tLS0tfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqICstLS0tLS0tLS0tLS0tKyAgIC5cbiAqICAgICAgICAgICAgICAgICAgIC5cbiAqICAgIFJlYWN0IENvcmUgICAgIC4gIEdlbmVyYWwgUHVycG9zZSBFdmVudCBQbHVnaW4gU3lzdGVtXG4gKi9cblxudmFyIGFscmVhZHlMaXN0ZW5pbmdUbyA9IHt9O1xudmFyIGlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlID0gZmFsc2U7XG52YXIgcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyID0gMDtcblxuLy8gRm9yIGV2ZW50cyBsaWtlICdzdWJtaXQnIHdoaWNoIGRvbid0IGNvbnNpc3RlbnRseSBidWJibGUgKHdoaWNoIHdlIHRyYXAgYXQgYVxuLy8gbG93ZXIgbm9kZSB0aGFuIGBkb2N1bWVudGApLCBiaW5kaW5nIGF0IGBkb2N1bWVudGAgd291bGQgY2F1c2UgZHVwbGljYXRlXG4vLyBldmVudHMgc28gd2UgZG9uJ3QgaW5jbHVkZSB0aGVtIGhlcmVcbnZhciB0b3BFdmVudE1hcHBpbmcgPSB7XG4gIHRvcEJsdXI6ICdibHVyJyxcbiAgdG9wQ2hhbmdlOiAnY2hhbmdlJyxcbiAgdG9wQ2xpY2s6ICdjbGljaycsXG4gIHRvcENvbXBvc2l0aW9uRW5kOiAnY29tcG9zaXRpb25lbmQnLFxuICB0b3BDb21wb3NpdGlvblN0YXJ0OiAnY29tcG9zaXRpb25zdGFydCcsXG4gIHRvcENvbXBvc2l0aW9uVXBkYXRlOiAnY29tcG9zaXRpb251cGRhdGUnLFxuICB0b3BDb250ZXh0TWVudTogJ2NvbnRleHRtZW51JyxcbiAgdG9wQ29weTogJ2NvcHknLFxuICB0b3BDdXQ6ICdjdXQnLFxuICB0b3BEb3VibGVDbGljazogJ2RibGNsaWNrJyxcbiAgdG9wRHJhZzogJ2RyYWcnLFxuICB0b3BEcmFnRW5kOiAnZHJhZ2VuZCcsXG4gIHRvcERyYWdFbnRlcjogJ2RyYWdlbnRlcicsXG4gIHRvcERyYWdFeGl0OiAnZHJhZ2V4aXQnLFxuICB0b3BEcmFnTGVhdmU6ICdkcmFnbGVhdmUnLFxuICB0b3BEcmFnT3ZlcjogJ2RyYWdvdmVyJyxcbiAgdG9wRHJhZ1N0YXJ0OiAnZHJhZ3N0YXJ0JyxcbiAgdG9wRHJvcDogJ2Ryb3AnLFxuICB0b3BGb2N1czogJ2ZvY3VzJyxcbiAgdG9wSW5wdXQ6ICdpbnB1dCcsXG4gIHRvcEtleURvd246ICdrZXlkb3duJyxcbiAgdG9wS2V5UHJlc3M6ICdrZXlwcmVzcycsXG4gIHRvcEtleVVwOiAna2V5dXAnLFxuICB0b3BNb3VzZURvd246ICdtb3VzZWRvd24nLFxuICB0b3BNb3VzZU1vdmU6ICdtb3VzZW1vdmUnLFxuICB0b3BNb3VzZU91dDogJ21vdXNlb3V0JyxcbiAgdG9wTW91c2VPdmVyOiAnbW91c2VvdmVyJyxcbiAgdG9wTW91c2VVcDogJ21vdXNldXAnLFxuICB0b3BQYXN0ZTogJ3Bhc3RlJyxcbiAgdG9wU2Nyb2xsOiAnc2Nyb2xsJyxcbiAgdG9wU2VsZWN0aW9uQ2hhbmdlOiAnc2VsZWN0aW9uY2hhbmdlJyxcbiAgdG9wVGV4dElucHV0OiAndGV4dElucHV0JyxcbiAgdG9wVG91Y2hDYW5jZWw6ICd0b3VjaGNhbmNlbCcsXG4gIHRvcFRvdWNoRW5kOiAndG91Y2hlbmQnLFxuICB0b3BUb3VjaE1vdmU6ICd0b3VjaG1vdmUnLFxuICB0b3BUb3VjaFN0YXJ0OiAndG91Y2hzdGFydCcsXG4gIHRvcFdoZWVsOiAnd2hlZWwnXG59O1xuXG4vKipcbiAqIFRvIGVuc3VyZSBubyBjb25mbGljdHMgd2l0aCBvdGhlciBwb3RlbnRpYWwgUmVhY3QgaW5zdGFuY2VzIG9uIHRoZSBwYWdlXG4gKi9cbnZhciB0b3BMaXN0ZW5lcnNJREtleSA9ICdfcmVhY3RMaXN0ZW5lcnNJRCcgKyBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5cbmZ1bmN0aW9uIGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpIHtcbiAgLy8gSW4gSUU4LCBgbW91bnRBdGAgaXMgYSBob3N0IG9iamVjdCBhbmQgZG9lc24ndCBoYXZlIGBoYXNPd25Qcm9wZXJ0eWBcbiAgLy8gZGlyZWN0bHkuXG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vdW50QXQsIHRvcExpc3RlbmVyc0lES2V5KSkge1xuICAgIG1vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldID0gcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyKys7XG4gICAgYWxyZWFkeUxpc3RlbmluZ1RvW21vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldXSA9IHt9O1xuICB9XG4gIHJldHVybiBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dO1xufVxuXG4vKipcbiAqIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGlzIHVzZWQgdG8gYXR0YWNoIHRvcC1sZXZlbCBldmVudCBsaXN0ZW5lcnMuIEZvclxuICogZXhhbXBsZTpcbiAqXG4gKiAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5wdXRMaXN0ZW5lcignbXlJRCcsICdvbkNsaWNrJywgbXlGdW5jdGlvbik7XG4gKlxuICogVGhpcyB3b3VsZCBhbGxvY2F0ZSBhIFwicmVnaXN0cmF0aW9uXCIgb2YgYCgnb25DbGljaycsIG15RnVuY3Rpb24pYCBvbiAnbXlJRCcuXG4gKlxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSBhc3NpZ24oe30sIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4sIHtcblxuICAvKipcbiAgICogSW5qZWN0YWJsZSBldmVudCBiYWNrZW5kXG4gICAqL1xuICBSZWFjdEV2ZW50TGlzdGVuZXI6IG51bGwsXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFJlYWN0RXZlbnRMaXN0ZW5lclxuICAgICAqL1xuICAgIGluamVjdFJlYWN0RXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oUmVhY3RFdmVudExpc3RlbmVyKSB7XG4gICAgICBSZWFjdEV2ZW50TGlzdGVuZXIuc2V0SGFuZGxlVG9wTGV2ZWwoXG4gICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5oYW5kbGVUb3BMZXZlbFxuICAgICAgKTtcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIgPSBSZWFjdEV2ZW50TGlzdGVuZXI7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIHdoZXRoZXIgb3Igbm90IGFueSBjcmVhdGVkIGNhbGxiYWNrcyBzaG91bGQgYmUgZW5hYmxlZC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGVkIFRydWUgaWYgY2FsbGJhY2tzIHNob3VsZCBiZSBlbmFibGVkLlxuICAgKi9cbiAgc2V0RW5hYmxlZDogZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgIGlmIChSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyKSB7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnNldEVuYWJsZWQoZW5hYmxlZCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGNhbGxiYWNrcyBhcmUgZW5hYmxlZC5cbiAgICovXG4gIGlzRW5hYmxlZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICEhKFxuICAgICAgKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIgJiYgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5pc0VuYWJsZWQoKSlcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBXZSBsaXN0ZW4gZm9yIGJ1YmJsZWQgdG91Y2ggZXZlbnRzIG9uIHRoZSBkb2N1bWVudCBvYmplY3QuXG4gICAqXG4gICAqIEZpcmVmb3ggdjguMDEgKGFuZCBwb3NzaWJseSBvdGhlcnMpIGV4aGliaXRlZCBzdHJhbmdlIGJlaGF2aW9yIHdoZW5cbiAgICogbW91bnRpbmcgYG9ubW91c2Vtb3ZlYCBldmVudHMgYXQgc29tZSBub2RlIHRoYXQgd2FzIG5vdCB0aGUgZG9jdW1lbnRcbiAgICogZWxlbWVudC4gVGhlIHN5bXB0b21zIHdlcmUgdGhhdCBpZiB5b3VyIG1vdXNlIGlzIG5vdCBtb3Zpbmcgb3ZlciBzb21ldGhpbmdcbiAgICogY29udGFpbmVkIHdpdGhpbiB0aGF0IG1vdW50IHBvaW50IChmb3IgZXhhbXBsZSBvbiB0aGUgYmFja2dyb3VuZCkgdGhlXG4gICAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgZm9yIGBvbm1vdXNlbW92ZWAgd29uJ3QgYmUgY2FsbGVkLiBIb3dldmVyLCBpZiB5b3VcbiAgICogcmVnaXN0ZXIgdGhlIGBtb3VzZW1vdmVgIG9uIHRoZSBkb2N1bWVudCBvYmplY3QsIHRoZW4gaXQgd2lsbCBvZiBjb3Vyc2VcbiAgICogY2F0Y2ggYWxsIGBtb3VzZW1vdmVgcy4gVGhpcyBhbG9uZyB3aXRoIGlPUyBxdWlya3MsIGp1c3RpZmllcyByZXN0cmljdGluZ1xuICAgKiB0b3AtbGV2ZWwgbGlzdGVuZXJzIHRvIHRoZSBkb2N1bWVudCBvYmplY3Qgb25seSwgYXQgbGVhc3QgZm9yIHRoZXNlXG4gICAqIG1vdmVtZW50IHR5cGVzIG9mIGV2ZW50cyBhbmQgcG9zc2libHkgYWxsIGV2ZW50cy5cbiAgICpcbiAgICogQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxMC8wOS9jbGlja19ldmVudF9kZWwuaHRtbFxuICAgKlxuICAgKiBBbHNvLCBga2V5dXBgL2BrZXlwcmVzc2AvYGtleWRvd25gIGRvIG5vdCBidWJibGUgdG8gdGhlIHdpbmRvdyBvbiBJRSwgYnV0XG4gICAqIHRoZXkgYnViYmxlIHRvIGRvY3VtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBOYW1lIG9mIGxpc3RlbmVyIChlLmcuIGBvbkNsaWNrYCkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZW50RG9jdW1lbnRIYW5kbGUgRG9jdW1lbnQgd2hpY2ggb3ducyB0aGUgY29udGFpbmVyXG4gICAqL1xuICBsaXN0ZW5UbzogZnVuY3Rpb24ocmVnaXN0cmF0aW9uTmFtZSwgY29udGVudERvY3VtZW50SGFuZGxlKSB7XG4gICAgdmFyIG1vdW50QXQgPSBjb250ZW50RG9jdW1lbnRIYW5kbGU7XG4gICAgdmFyIGlzTGlzdGVuaW5nID0gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCk7XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkuXG4gICAgICByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuXG4gICAgdmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGRlcGVuZGVuY3kgPSBkZXBlbmRlbmNpZXNbaV07XG4gICAgICBpZiAoIShcbiAgICAgICAgICAgIChpc0xpc3RlbmluZy5oYXNPd25Qcm9wZXJ0eShkZXBlbmRlbmN5KSAmJiBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSlcbiAgICAgICAgICApKSB7XG4gICAgICAgIGlmIChkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcFdoZWVsKSB7XG4gICAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ3doZWVsJykpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BXaGVlbCxcbiAgICAgICAgICAgICAgJ3doZWVsJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ21vdXNld2hlZWwnKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcFdoZWVsLFxuICAgICAgICAgICAgICAnbW91c2V3aGVlbCcsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZpcmVmb3ggbmVlZHMgdG8gY2FwdHVyZSBhIGRpZmZlcmVudCBtb3VzZSBzY3JvbGwgZXZlbnQuXG4gICAgICAgICAgICAvLyBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvZG9tL2V2ZW50cy90ZXN0cy9zY3JvbGwuaHRtbFxuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcFdoZWVsLFxuICAgICAgICAgICAgICAnRE9NTW91c2VTY3JvbGwnLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcFNjcm9sbCkge1xuXG4gICAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ3Njcm9sbCcsIHRydWUpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcFNjcm9sbCxcbiAgICAgICAgICAgICAgJ3Njcm9sbCcsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BTY3JvbGwsXG4gICAgICAgICAgICAgICdzY3JvbGwnLFxuICAgICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLldJTkRPV19IQU5ETEVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wRm9jdXMgfHxcbiAgICAgICAgICAgIGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuXG4gICAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ2ZvY3VzJywgdHJ1ZSkpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wRm9jdXMsXG4gICAgICAgICAgICAgICdmb2N1cycsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG4gICAgICAgICAgICAgICdibHVyJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ2ZvY3VzaW4nKSkge1xuICAgICAgICAgICAgLy8gSUUgaGFzIGBmb2N1c2luYCBhbmQgYGZvY3Vzb3V0YCBldmVudHMgd2hpY2ggYnViYmxlLlxuICAgICAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAwOC8wNC9kZWxlZ2F0aW5nX3RoZS5odG1sXG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wRm9jdXMsXG4gICAgICAgICAgICAgICdmb2N1c2luJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgICAgICAgICAnZm9jdXNvdXQnLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHRvIG1ha2Ugc3VyZSBibHVyIGFuZCBmb2N1cyBldmVudCBsaXN0ZW5lcnMgYXJlIG9ubHkgYXR0YWNoZWQgb25jZVxuICAgICAgICAgIGlzTGlzdGVuaW5nW3RvcExldmVsVHlwZXMudG9wQmx1cl0gPSB0cnVlO1xuICAgICAgICAgIGlzTGlzdGVuaW5nW3RvcExldmVsVHlwZXMudG9wRm9jdXNdID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0b3BFdmVudE1hcHBpbmcuaGFzT3duUHJvcGVydHkoZGVwZW5kZW5jeSkpIHtcbiAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICBkZXBlbmRlbmN5LFxuICAgICAgICAgICAgdG9wRXZlbnRNYXBwaW5nW2RlcGVuZGVuY3ldLFxuICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHRyYXBCdWJibGVkRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICByZXR1cm4gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgaGFuZGxlckJhc2VOYW1lLFxuICAgICAgaGFuZGxlXG4gICAgKTtcbiAgfSxcblxuICB0cmFwQ2FwdHVyZWRFdmVudDogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSkge1xuICAgIHJldHVybiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgaGFuZGxlckJhc2VOYW1lLFxuICAgICAgaGFuZGxlXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogTGlzdGVucyB0byB3aW5kb3cgc2Nyb2xsIGFuZCByZXNpemUgZXZlbnRzLiBXZSBjYWNoZSBzY3JvbGwgdmFsdWVzIHNvIHRoYXRcbiAgICogYXBwbGljYXRpb24gY29kZSBjYW4gYWNjZXNzIHRoZW0gd2l0aG91dCB0cmlnZ2VyaW5nIHJlZmxvd3MuXG4gICAqXG4gICAqIE5PVEU6IFNjcm9sbCBldmVudHMgZG8gbm90IGJ1YmJsZS5cbiAgICpcbiAgICogQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS9ldmVudHMvc2Nyb2xsLmh0bWxcbiAgICovXG4gIGVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZzogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSkge1xuICAgICAgdmFyIHJlZnJlc2ggPSBWaWV3cG9ydE1ldHJpY3MucmVmcmVzaFNjcm9sbFZhbHVlcztcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIubW9uaXRvclNjcm9sbFZhbHVlKHJlZnJlc2gpO1xuICAgICAgaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgfSxcblxuICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6IEV2ZW50UGx1Z2luSHViLmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyxcblxuICByZWdpc3RyYXRpb25OYW1lTW9kdWxlczogRXZlbnRQbHVnaW5IdWIucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMsXG5cbiAgcHV0TGlzdGVuZXI6IEV2ZW50UGx1Z2luSHViLnB1dExpc3RlbmVyLFxuXG4gIGdldExpc3RlbmVyOiBFdmVudFBsdWdpbkh1Yi5nZXRMaXN0ZW5lcixcblxuICBkZWxldGVMaXN0ZW5lcjogRXZlbnRQbHVnaW5IdWIuZGVsZXRlTGlzdGVuZXIsXG5cbiAgZGVsZXRlQWxsTGlzdGVuZXJzOiBFdmVudFBsdWdpbkh1Yi5kZWxldGVBbGxMaXN0ZW5lcnNcblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyO1xuXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50Q29uc3RhbnRzLmpzXCIsXCIuL0V2ZW50UGx1Z2luSHViXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFBsdWdpbkh1Yi5qc1wiLFwiLi9FdmVudFBsdWdpblJlZ2lzdHJ5XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFBsdWdpblJlZ2lzdHJ5LmpzXCIsXCIuL09iamVjdC5hc3NpZ25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanNcIixcIi4vUmVhY3RFdmVudEVtaXR0ZXJNaXhpblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFdmVudEVtaXR0ZXJNaXhpbi5qc1wiLFwiLi9WaWV3cG9ydE1ldHJpY3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1ZpZXdwb3J0TWV0cmljcy5qc1wiLFwiLi9pc0V2ZW50U3VwcG9ydGVkXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc0V2ZW50U3VwcG9ydGVkLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q2hpbGRSZWNvbmNpbGVyLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q2hpbGRSZWNvbmNpbGVyXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoXCIuL1JlYWN0UmVjb25jaWxlclwiKTtcblxudmFyIGZsYXR0ZW5DaGlsZHJlbiA9IHJlcXVpcmUoXCIuL2ZsYXR0ZW5DaGlsZHJlblwiKTtcbnZhciBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFwiKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XCIpO1xuXG4vKipcbiAqIFJlYWN0Q2hpbGRSZWNvbmNpbGVyIHByb3ZpZGVzIGhlbHBlcnMgZm9yIGluaXRpYWxpemluZyBvciB1cGRhdGluZyBhIHNldCBvZlxuICogY2hpbGRyZW4uIEl0cyBvdXRwdXQgaXMgc3VpdGFibGUgZm9yIHBhc3NpbmcgaXQgb250byBSZWFjdE11bHRpQ2hpbGQgd2hpY2hcbiAqIGRvZXMgZGlmZmVkIHJlb3JkZXJpbmcgYW5kIGluc2VydGlvbi5cbiAqL1xudmFyIFJlYWN0Q2hpbGRSZWNvbmNpbGVyID0ge1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBcIm1vdW50IGltYWdlXCIgZm9yIGVhY2ggb2YgdGhlIHN1cHBsaWVkIGNoaWxkcmVuLiBJbiB0aGUgY2FzZVxuICAgKiBvZiBgUmVhY3RET01Db21wb25lbnRgLCBhIG1vdW50IGltYWdlIGlzIGEgc3RyaW5nIG9mIG1hcmt1cC5cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXN0ZWRDaGlsZE5vZGVzIE5lc3RlZCBjaGlsZCBtYXBzLlxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fSBBIHNldCBvZiBjaGlsZCBpbnN0YW5jZXMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgaW5zdGFudGlhdGVDaGlsZHJlbjogZnVuY3Rpb24obmVzdGVkQ2hpbGROb2RlcywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBmbGF0dGVuQ2hpbGRyZW4obmVzdGVkQ2hpbGROb2Rlcyk7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBjaGlsZHJlbikge1xuICAgICAgaWYgKGNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW25hbWVdO1xuICAgICAgICAvLyBUaGUgcmVuZGVyZWQgY2hpbGRyZW4gbXVzdCBiZSB0dXJuZWQgaW50byBpbnN0YW5jZXMgYXMgdGhleSdyZVxuICAgICAgICAvLyBtb3VudGVkLlxuICAgICAgICB2YXIgY2hpbGRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoY2hpbGQsIG51bGwpO1xuICAgICAgICBjaGlsZHJlbltuYW1lXSA9IGNoaWxkSW5zdGFuY2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgcmVuZGVyZWQgY2hpbGRyZW4gYW5kIHJldHVybnMgYSBuZXcgc2V0IG9mIGNoaWxkcmVuLlxuICAgKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IHByZXZDaGlsZHJlbiBQcmV2aW91c2x5IGluaXRpYWxpemVkIHNldCBvZiBjaGlsZHJlbi5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0TmVzdGVkQ2hpbGROb2RlcyBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fSBBIG5ldyBzZXQgb2YgY2hpbGQgaW5zdGFuY2VzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbihcbiAgICBwcmV2Q2hpbGRyZW4sXG4gICAgbmV4dE5lc3RlZENoaWxkTm9kZXMsXG4gICAgdHJhbnNhY3Rpb24sXG4gICAgY29udGV4dCkge1xuICAgIC8vIFdlIGN1cnJlbnRseSBkb24ndCBoYXZlIGEgd2F5IHRvIHRyYWNrIG1vdmVzIGhlcmUgYnV0IGlmIHdlIHVzZSBpdGVyYXRvcnNcbiAgICAvLyBpbnN0ZWFkIG9mIGZvci4uaW4gd2UgY2FuIHppcCB0aGUgaXRlcmF0b3JzIGFuZCBjaGVjayBpZiBhbiBpdGVtIGhhc1xuICAgIC8vIG1vdmVkLlxuICAgIC8vIFRPRE86IElmIG5vdGhpbmcgaGFzIGNoYW5nZWQsIHJldHVybiB0aGUgcHJldkNoaWxkcmVuIG9iamVjdCBzbyB0aGF0IHdlXG4gICAgLy8gY2FuIHF1aWNrbHkgYmFpbG91dCBpZiBub3RoaW5nIGhhcyBjaGFuZ2VkLlxuICAgIHZhciBuZXh0Q2hpbGRyZW4gPSBmbGF0dGVuQ2hpbGRyZW4obmV4dE5lc3RlZENoaWxkTm9kZXMpO1xuICAgIGlmICghbmV4dENoaWxkcmVuICYmICFwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgbmFtZTtcbiAgICBmb3IgKG5hbWUgaW4gbmV4dENoaWxkcmVuKSB7XG4gICAgICBpZiAoIW5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRyZW4gJiYgcHJldkNoaWxkcmVuW25hbWVdO1xuICAgICAgdmFyIHByZXZFbGVtZW50ID0gcHJldkNoaWxkICYmIHByZXZDaGlsZC5fY3VycmVudEVsZW1lbnQ7XG4gICAgICB2YXIgbmV4dEVsZW1lbnQgPSBuZXh0Q2hpbGRyZW5bbmFtZV07XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldkVsZW1lbnQsIG5leHRFbGVtZW50KSkge1xuICAgICAgICBSZWFjdFJlY29uY2lsZXIucmVjZWl2ZUNvbXBvbmVudChcbiAgICAgICAgICBwcmV2Q2hpbGQsIG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgY29udGV4dFxuICAgICAgICApO1xuICAgICAgICBuZXh0Q2hpbGRyZW5bbmFtZV0gPSBwcmV2Q2hpbGQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJldkNoaWxkKSB7XG4gICAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNoaWxkLCBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgY2hpbGQgbXVzdCBiZSBpbnN0YW50aWF0ZWQgYmVmb3JlIGl0J3MgbW91bnRlZC5cbiAgICAgICAgdmFyIG5leHRDaGlsZEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChcbiAgICAgICAgICBuZXh0RWxlbWVudCxcbiAgICAgICAgICBudWxsXG4gICAgICAgICk7XG4gICAgICAgIG5leHRDaGlsZHJlbltuYW1lXSA9IG5leHRDaGlsZEluc3RhbmNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBVbm1vdW50IGNoaWxkcmVuIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50LlxuICAgIGZvciAobmFtZSBpbiBwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIGlmIChwcmV2Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgICAhKG5leHRDaGlsZHJlbiAmJiBuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpKSB7XG4gICAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHByZXZDaGlsZHJlbltuYW1lXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXh0Q2hpbGRyZW47XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVubW91bnRzIGFsbCByZW5kZXJlZCBjaGlsZHJlbi4gVGhpcyBzaG91bGQgYmUgdXNlZCB0byBjbGVhbiB1cCBjaGlsZHJlblxuICAgKiB3aGVuIHRoaXMgY29tcG9uZW50IGlzIHVubW91bnRlZC5cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSByZW5kZXJlZENoaWxkcmVuIFByZXZpb3VzbHkgaW5pdGlhbGl6ZWQgc2V0IG9mIGNoaWxkcmVuLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDaGlsZHJlbjogZnVuY3Rpb24ocmVuZGVyZWRDaGlsZHJlbikge1xuICAgIGZvciAodmFyIG5hbWUgaW4gcmVuZGVyZWRDaGlsZHJlbikge1xuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGQgPSByZW5kZXJlZENoaWxkcmVuW25hbWVdO1xuICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocmVuZGVyZWRDaGlsZCk7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDaGlsZFJlY29uY2lsZXI7XG5cbn0se1wiLi9SZWFjdFJlY29uY2lsZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UmVjb25jaWxlci5qc1wiLFwiLi9mbGF0dGVuQ2hpbGRyZW5cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZsYXR0ZW5DaGlsZHJlbi5qc1wiLFwiLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50LmpzXCIsXCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENoaWxkcmVuLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENoaWxkcmVuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcbnZhciBSZWFjdEZyYWdtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RGcmFnbWVudFwiKTtcblxudmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSByZXF1aXJlKFwiLi90cmF2ZXJzZUFsbENoaWxkcmVuXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgdHdvQXJndW1lbnRQb29sZXIgPSBQb29sZWRDbGFzcy50d29Bcmd1bWVudFBvb2xlcjtcbnZhciB0aHJlZUFyZ3VtZW50UG9vbGVyID0gUG9vbGVkQ2xhc3MudGhyZWVBcmd1bWVudFBvb2xlcjtcblxuLyoqXG4gKiBQb29sZWRDbGFzcyByZXByZXNlbnRpbmcgdGhlIGJvb2trZWVwaW5nIGFzc29jaWF0ZWQgd2l0aCBwZXJmb3JtaW5nIGEgY2hpbGRcbiAqIHRyYXZlcnNhbC4gQWxsb3dzIGF2b2lkaW5nIGJpbmRpbmcgY2FsbGJhY2tzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBGb3JFYWNoQm9va0tlZXBpbmdcbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBmb3JFYWNoRnVuY3Rpb24gRnVuY3Rpb24gdG8gcGVyZm9ybSB0cmF2ZXJzYWwgd2l0aC5cbiAqIEBwYXJhbSB7Pyp9IGZvckVhY2hDb250ZXh0IENvbnRleHQgdG8gcGVyZm9ybSBjb250ZXh0IHdpdGguXG4gKi9cbmZ1bmN0aW9uIEZvckVhY2hCb29rS2VlcGluZyhmb3JFYWNoRnVuY3Rpb24sIGZvckVhY2hDb250ZXh0KSB7XG4gIHRoaXMuZm9yRWFjaEZ1bmN0aW9uID0gZm9yRWFjaEZ1bmN0aW9uO1xuICB0aGlzLmZvckVhY2hDb250ZXh0ID0gZm9yRWFjaENvbnRleHQ7XG59XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oRm9yRWFjaEJvb2tLZWVwaW5nLCB0d29Bcmd1bWVudFBvb2xlcik7XG5cbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZCh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lLCBpKSB7XG4gIHZhciBmb3JFYWNoQm9va0tlZXBpbmcgPSB0cmF2ZXJzZUNvbnRleHQ7XG4gIGZvckVhY2hCb29rS2VlcGluZy5mb3JFYWNoRnVuY3Rpb24uY2FsbChcbiAgICBmb3JFYWNoQm9va0tlZXBpbmcuZm9yRWFjaENvbnRleHQsIGNoaWxkLCBpKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlcyB0aHJvdWdoIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBUaGUgcHJvdmlkZWQgZm9yRWFjaEZ1bmMoY2hpbGQsIGluZGV4KSB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaFxuICogbGVhZiBjaGlsZC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZm9yRWFjaEZ1bmMuXG4gKiBAcGFyYW0geyp9IGZvckVhY2hDb250ZXh0IENvbnRleHQgZm9yIGZvckVhY2hDb250ZXh0LlxuICovXG5mdW5jdGlvbiBmb3JFYWNoQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHZhciB0cmF2ZXJzZUNvbnRleHQgPVxuICAgIEZvckVhY2hCb29rS2VlcGluZy5nZXRQb29sZWQoZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KTtcbiAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaFNpbmdsZUNoaWxkLCB0cmF2ZXJzZUNvbnRleHQpO1xuICBGb3JFYWNoQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG4vKipcbiAqIFBvb2xlZENsYXNzIHJlcHJlc2VudGluZyB0aGUgYm9va2tlZXBpbmcgYXNzb2NpYXRlZCB3aXRoIHBlcmZvcm1pbmcgYSBjaGlsZFxuICogbWFwcGluZy4gQWxsb3dzIGF2b2lkaW5nIGJpbmRpbmcgY2FsbGJhY2tzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBNYXBCb29rS2VlcGluZ1xuICogQHBhcmFtIHshKn0gbWFwUmVzdWx0IE9iamVjdCBjb250YWluaW5nIHRoZSBvcmRlcmVkIG1hcCBvZiByZXN1bHRzLlxuICogQHBhcmFtIHshZnVuY3Rpb259IG1hcEZ1bmN0aW9uIEZ1bmN0aW9uIHRvIHBlcmZvcm0gbWFwcGluZyB3aXRoLlxuICogQHBhcmFtIHs/Kn0gbWFwQ29udGV4dCBDb250ZXh0IHRvIHBlcmZvcm0gbWFwcGluZyB3aXRoLlxuICovXG5mdW5jdGlvbiBNYXBCb29rS2VlcGluZyhtYXBSZXN1bHQsIG1hcEZ1bmN0aW9uLCBtYXBDb250ZXh0KSB7XG4gIHRoaXMubWFwUmVzdWx0ID0gbWFwUmVzdWx0O1xuICB0aGlzLm1hcEZ1bmN0aW9uID0gbWFwRnVuY3Rpb247XG4gIHRoaXMubWFwQ29udGV4dCA9IG1hcENvbnRleHQ7XG59XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oTWFwQm9va0tlZXBpbmcsIHRocmVlQXJndW1lbnRQb29sZXIpO1xuXG5mdW5jdGlvbiBtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUsIGkpIHtcbiAgdmFyIG1hcEJvb2tLZWVwaW5nID0gdHJhdmVyc2VDb250ZXh0O1xuICB2YXIgbWFwUmVzdWx0ID0gbWFwQm9va0tlZXBpbmcubWFwUmVzdWx0O1xuXG4gIHZhciBrZXlVbmlxdWUgPSAhbWFwUmVzdWx0Lmhhc093blByb3BlcnR5KG5hbWUpO1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBrZXlVbmlxdWUsXG4gICAgICAnUmVhY3RDaGlsZHJlbi5tYXAoLi4uKTogRW5jb3VudGVyZWQgdHdvIGNoaWxkcmVuIHdpdGggdGhlIHNhbWUga2V5LCAnICtcbiAgICAgICdgJXNgLiBDaGlsZCBrZXlzIG11c3QgYmUgdW5pcXVlOyB3aGVuIHR3byBjaGlsZHJlbiBzaGFyZSBhIGtleSwgb25seSAnICtcbiAgICAgICd0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSB1c2VkLicsXG4gICAgICBuYW1lXG4gICAgKSA6IG51bGwpO1xuICB9XG5cbiAgaWYgKGtleVVuaXF1ZSkge1xuICAgIHZhciBtYXBwZWRDaGlsZCA9XG4gICAgICBtYXBCb29rS2VlcGluZy5tYXBGdW5jdGlvbi5jYWxsKG1hcEJvb2tLZWVwaW5nLm1hcENvbnRleHQsIGNoaWxkLCBpKTtcbiAgICBtYXBSZXN1bHRbbmFtZV0gPSBtYXBwZWRDaGlsZDtcbiAgfVxufVxuXG4vKipcbiAqIE1hcHMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFRoZSBwcm92aWRlZCBtYXBGdW5jdGlvbihjaGlsZCwga2V5LCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogVE9ETzogVGhpcyBtYXkgbGlrZWx5IGJyZWFrIGFueSBjYWxscyB0byBgUmVhY3RDaGlsZHJlbi5tYXBgIHRoYXQgd2VyZVxuICogcHJldmlvdXNseSByZWx5aW5nIG9uIHRoZSBmYWN0IHRoYXQgd2UgZ3VhcmRlZCBhZ2FpbnN0IG51bGwgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IG1hcEZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBtYXBDb250ZXh0IENvbnRleHQgZm9yIG1hcEZ1bmN0aW9uLlxuICogQHJldHVybiB7b2JqZWN0fSBPYmplY3QgY29udGFpbmluZyB0aGUgb3JkZXJlZCBtYXAgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gbWFwQ2hpbGRyZW4oY2hpbGRyZW4sIGZ1bmMsIGNvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cblxuICB2YXIgbWFwUmVzdWx0ID0ge307XG4gIHZhciB0cmF2ZXJzZUNvbnRleHQgPSBNYXBCb29rS2VlcGluZy5nZXRQb29sZWQobWFwUmVzdWx0LCBmdW5jLCBjb250ZXh0KTtcbiAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgdHJhdmVyc2VDb250ZXh0KTtcbiAgTWFwQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xuICByZXR1cm4gUmVhY3RGcmFnbWVudC5jcmVhdGUobWFwUmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFNpbmdsZUNoaWxkRHVtbXkodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSwgaSkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBDb3VudCB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXNcbiAqIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4uXG4gKi9cbmZ1bmN0aW9uIGNvdW50Q2hpbGRyZW4oY2hpbGRyZW4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hTaW5nbGVDaGlsZER1bW15LCBudWxsKTtcbn1cblxudmFyIFJlYWN0Q2hpbGRyZW4gPSB7XG4gIGZvckVhY2g6IGZvckVhY2hDaGlsZHJlbixcbiAgbWFwOiBtYXBDaGlsZHJlbixcbiAgY291bnQ6IGNvdW50Q2hpbGRyZW5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDaGlsZHJlbjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUG9vbGVkQ2xhc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1Bvb2xlZENsYXNzLmpzXCIsXCIuL1JlYWN0RnJhZ21lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RnJhZ21lbnQuanNcIixcIi4vdHJhdmVyc2VBbGxDaGlsZHJlblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvdHJhdmVyc2VBbGxDaGlsZHJlbi5qc1wiLFwiLi93YXJuaW5nXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi93YXJuaW5nLmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDbGFzcy5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDbGFzc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFcnJvclV0aWxzID0gcmVxdWlyZShcIi4vUmVhY3RFcnJvclV0aWxzXCIpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpO1xudmFyIFJlYWN0TGlmZUN5Y2xlID0gcmVxdWlyZShcIi4vUmVhY3RMaWZlQ3ljbGVcIik7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnNcIik7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1wiKTtcbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVRdWV1ZVwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoXCIuL2tleU1pcnJvclwiKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgTUlYSU5TX0tFWSA9IGtleU9mKHttaXhpbnM6IG51bGx9KTtcblxuLyoqXG4gKiBQb2xpY2llcyB0aGF0IGRlc2NyaWJlIG1ldGhvZHMgaW4gYFJlYWN0Q2xhc3NJbnRlcmZhY2VgLlxuICovXG52YXIgU3BlY1BvbGljeSA9IGtleU1pcnJvcih7XG4gIC8qKlxuICAgKiBUaGVzZSBtZXRob2RzIG1heSBiZSBkZWZpbmVkIG9ubHkgb25jZSBieSB0aGUgY2xhc3Mgc3BlY2lmaWNhdGlvbiBvciBtaXhpbi5cbiAgICovXG4gIERFRklORV9PTkNFOiBudWxsLFxuICAvKipcbiAgICogVGhlc2UgbWV0aG9kcyBtYXkgYmUgZGVmaW5lZCBieSBib3RoIHRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIGFuZCBtaXhpbnMuXG4gICAqIFN1YnNlcXVlbnQgZGVmaW5pdGlvbnMgd2lsbCBiZSBjaGFpbmVkLiBUaGVzZSBtZXRob2RzIG11c3QgcmV0dXJuIHZvaWQuXG4gICAqL1xuICBERUZJTkVfTUFOWTogbnVsbCxcbiAgLyoqXG4gICAqIFRoZXNlIG1ldGhvZHMgYXJlIG92ZXJyaWRpbmcgdGhlIGJhc2UgY2xhc3MuXG4gICAqL1xuICBPVkVSUklERV9CQVNFOiBudWxsLFxuICAvKipcbiAgICogVGhlc2UgbWV0aG9kcyBhcmUgc2ltaWxhciB0byBERUZJTkVfTUFOWSwgZXhjZXB0IHdlIGFzc3VtZSB0aGV5IHJldHVyblxuICAgKiBvYmplY3RzLiBXZSB0cnkgdG8gbWVyZ2UgdGhlIGtleXMgb2YgdGhlIHJldHVybiB2YWx1ZXMgb2YgYWxsIHRoZSBtaXhlZCBpblxuICAgKiBmdW5jdGlvbnMuIElmIHRoZXJlIGlzIGEga2V5IGNvbmZsaWN0IHdlIHRocm93LlxuICAgKi9cbiAgREVGSU5FX01BTllfTUVSR0VEOiBudWxsXG59KTtcblxuXG52YXIgaW5qZWN0ZWRNaXhpbnMgPSBbXTtcblxuLyoqXG4gKiBDb21wb3NpdGUgY29tcG9uZW50cyBhcmUgaGlnaGVyLWxldmVsIGNvbXBvbmVudHMgdGhhdCBjb21wb3NlIG90aGVyIGNvbXBvc2l0ZVxuICogb3IgbmF0aXZlIGNvbXBvbmVudHMuXG4gKlxuICogVG8gY3JlYXRlIGEgbmV3IHR5cGUgb2YgYFJlYWN0Q2xhc3NgLCBwYXNzIGEgc3BlY2lmaWNhdGlvbiBvZlxuICogeW91ciBuZXcgY2xhc3MgdG8gYFJlYWN0LmNyZWF0ZUNsYXNzYC4gVGhlIG9ubHkgcmVxdWlyZW1lbnQgb2YgeW91ciBjbGFzc1xuICogc3BlY2lmaWNhdGlvbiBpcyB0aGF0IHlvdSBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuXG4gKlxuICogICB2YXIgTXlDb21wb25lbnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHJldHVybiA8ZGl2PkhlbGxvIFdvcmxkPC9kaXY+O1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogVGhlIGNsYXNzIHNwZWNpZmljYXRpb24gc3VwcG9ydHMgYSBzcGVjaWZpYyBwcm90b2NvbCBvZiBtZXRob2RzIHRoYXQgaGF2ZVxuICogc3BlY2lhbCBtZWFuaW5nIChlLmcuIGByZW5kZXJgKS4gU2VlIGBSZWFjdENsYXNzSW50ZXJmYWNlYCBmb3JcbiAqIG1vcmUgdGhlIGNvbXByZWhlbnNpdmUgcHJvdG9jb2wuIEFueSBvdGhlciBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGluIHRoZVxuICogY2xhc3Mgc3BlY2lmaWNhdGlvbiB3aWxsIGF2YWlsYWJsZSBvbiB0aGUgcHJvdG90eXBlLlxuICpcbiAqIEBpbnRlcmZhY2UgUmVhY3RDbGFzc0ludGVyZmFjZVxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdENsYXNzSW50ZXJmYWNlID0ge1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBNaXhpbiBvYmplY3RzIHRvIGluY2x1ZGUgd2hlbiBkZWZpbmluZyB5b3VyIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHR5cGUge2FycmF5fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIG1peGluczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyBhbmQgbWV0aG9kcyB0aGF0IHNob3VsZCBiZSBkZWZpbmVkIG9uXG4gICAqIHRoZSBjb21wb25lbnQncyBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIGl0cyBwcm90b3R5cGUgKHN0YXRpYyBtZXRob2RzKS5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBzdGF0aWNzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBEZWZpbml0aW9uIG9mIHByb3AgdHlwZXMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKlxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIHByb3BUeXBlczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogRGVmaW5pdGlvbiBvZiBjb250ZXh0IHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb250ZXh0VHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyB0aGlzIGNvbXBvbmVudCBzZXRzIGZvciBpdHMgY2hpbGRyZW4uXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY2hpbGRDb250ZXh0VHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLy8gPT09PSBEZWZpbml0aW9uIG1ldGhvZHMgPT09PVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBWYWx1ZXMgaW4gdGhlIG1hcHBpbmcgd2lsbCBiZSBzZXQgb25cbiAgICogYHRoaXMucHJvcHNgIGlmIHRoYXQgcHJvcCBpcyBub3Qgc3BlY2lmaWVkIChpLmUuIHVzaW5nIGFuIGBpbmAgY2hlY2spLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBpbnZva2VkIGJlZm9yZSBgZ2V0SW5pdGlhbFN0YXRlYCBhbmQgdGhlcmVmb3JlIGNhbm5vdCByZWx5XG4gICAqIG9uIGB0aGlzLnN0YXRlYCBvciB1c2UgYHRoaXMuc2V0U3RhdGVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgZ2V0RGVmYXVsdFByb3BzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcblxuICAvKipcbiAgICogSW52b2tlZCBvbmNlIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQuIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBiZSB1c2VkXG4gICAqIGFzIHRoZSBpbml0aWFsIHZhbHVlIG9mIGB0aGlzLnN0YXRlYC5cbiAgICpcbiAgICogICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgcmV0dXJuIHtcbiAgICogICAgICAgaXNPbjogZmFsc2UsXG4gICAqICAgICAgIGZvb0JhejogbmV3IEJhekZvbygpXG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgZ2V0SW5pdGlhbFN0YXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldENoaWxkQ29udGV4dDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cbiAgLyoqXG4gICAqIFVzZXMgcHJvcHMgZnJvbSBgdGhpcy5wcm9wc2AgYW5kIHN0YXRlIGZyb20gYHRoaXMuc3RhdGVgIHRvIHJlbmRlciB0aGVcbiAgICogc3RydWN0dXJlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIE5vIGd1YXJhbnRlZXMgYXJlIG1hZGUgYWJvdXQgd2hlbiBvciBob3cgb2Z0ZW4gdGhpcyBtZXRob2QgaXMgaW52b2tlZCwgc29cbiAgICogaXQgbXVzdCBub3QgaGF2ZSBzaWRlIGVmZmVjdHMuXG4gICAqXG4gICAqICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICogICAgIHZhciBuYW1lID0gdGhpcy5wcm9wcy5uYW1lO1xuICAgKiAgICAgcmV0dXJuIDxkaXY+SGVsbG8sIHtuYW1lfSE8L2Rpdj47XG4gICAqICAgfVxuICAgKlxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH1cbiAgICogQG5vc2lkZWVmZmVjdHNcbiAgICogQHJlcXVpcmVkXG4gICAqL1xuICByZW5kZXI6IFNwZWNQb2xpY3kuREVGSU5FX09OQ0UsXG5cblxuXG4gIC8vID09PT0gRGVsZWdhdGUgbWV0aG9kcyA9PT09XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluaXRpYWxseSBjcmVhdGVkIGFuZCBhYm91dCB0byBiZSBtb3VudGVkLlxuICAgKiBUaGlzIG1heSBoYXZlIHNpZGUgZWZmZWN0cywgYnV0IGFueSBleHRlcm5hbCBzdWJzY3JpcHRpb25zIG9yIGRhdGEgY3JlYXRlZFxuICAgKiBieSB0aGlzIG1ldGhvZCBtdXN0IGJlIGNsZWFuZWQgdXAgaW4gYGNvbXBvbmVudFdpbGxVbm1vdW50YC5cbiAgICpcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsTW91bnQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWQgYW5kIGhhcyBhIERPTSByZXByZXNlbnRhdGlvbi5cbiAgICogSG93ZXZlciwgdGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIERPTSBub2RlIGlzIGluIHRoZSBkb2N1bWVudC5cbiAgICpcbiAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gb3BlcmF0ZSBvbiB0aGUgRE9NIHdoZW4gdGhlIGNvbXBvbmVudCBoYXNcbiAgICogYmVlbiBtb3VudGVkIChpbml0aWFsaXplZCBhbmQgcmVuZGVyZWQpIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSByb290Tm9kZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGNvbXBvbmVudC5cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCByZWNlaXZlcyBuZXcgcHJvcHMuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHJlYWN0IHRvIGEgcHJvcCB0cmFuc2l0aW9uIGJ5IHVwZGF0aW5nIHRoZVxuICAgKiBzdGF0ZSB1c2luZyBgdGhpcy5zZXRTdGF0ZWAuIEN1cnJlbnQgcHJvcHMgYXJlIGFjY2Vzc2VkIHZpYSBgdGhpcy5wcm9wc2AuXG4gICAqXG4gICAqICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgKiAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAqICAgICAgIGxpa2VzSW5jcmVhc2luZzogbmV4dFByb3BzLmxpa2VDb3VudCA+IHRoaXMucHJvcHMubGlrZUNvdW50XG4gICAqICAgICB9KTtcbiAgICogICB9XG4gICAqXG4gICAqIE5PVEU6IFRoZXJlIGlzIG5vIGVxdWl2YWxlbnQgYGNvbXBvbmVudFdpbGxSZWNlaXZlU3RhdGVgLiBBbiBpbmNvbWluZyBwcm9wXG4gICAqIHRyYW5zaXRpb24gbWF5IGNhdXNlIGEgc3RhdGUgY2hhbmdlLCBidXQgdGhlIG9wcG9zaXRlIGlzIG5vdCB0cnVlLiBJZiB5b3VcbiAgICogbmVlZCBpdCwgeW91IGFyZSBwcm9iYWJseSBsb29raW5nIGZvciBgY29tcG9uZW50V2lsbFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoaWxlIGRlY2lkaW5nIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIGJlIHVwZGF0ZWQgYXMgYSByZXN1bHQgb2ZcbiAgICogcmVjZWl2aW5nIG5ldyBwcm9wcywgc3RhdGUgYW5kL29yIGNvbnRleHQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGByZXR1cm4gZmFsc2VgIHdoZW4geW91J3JlIGNlcnRhaW4gdGhhdCB0aGVcbiAgICogdHJhbnNpdGlvbiB0byB0aGUgbmV3IHByb3BzL3N0YXRlL2NvbnRleHQgd2lsbCBub3QgcmVxdWlyZSBhIGNvbXBvbmVudFxuICAgKiB1cGRhdGUuXG4gICAqXG4gICAqICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbihuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpIHtcbiAgICogICAgIHJldHVybiAhZXF1YWwobmV4dFByb3BzLCB0aGlzLnByb3BzKSB8fFxuICAgKiAgICAgICAhZXF1YWwobmV4dFN0YXRlLCB0aGlzLnN0YXRlKSB8fFxuICAgKiAgICAgICAhZXF1YWwobmV4dENvbnRleHQsIHRoaXMuY29udGV4dCk7XG4gICAqICAgfVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY29tcG9uZW50IHNob3VsZCB1cGRhdGUuXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9PTkNFLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBhYm91dCB0byB1cGRhdGUgZHVlIHRvIGEgdHJhbnNpdGlvbiBmcm9tXG4gICAqIGB0aGlzLnByb3BzYCwgYHRoaXMuc3RhdGVgIGFuZCBgdGhpcy5jb250ZXh0YCB0byBgbmV4dFByb3BzYCwgYG5leHRTdGF0ZWBcbiAgICogYW5kIGBuZXh0Q29udGV4dGAuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHBlcmZvcm0gcHJlcGFyYXRpb24gYmVmb3JlIGFuIHVwZGF0ZSBvY2N1cnMuXG4gICAqXG4gICAqIE5PVEU6IFlvdSAqKmNhbm5vdCoqIHVzZSBgdGhpcy5zZXRTdGF0ZSgpYCBpbiB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZVxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsVXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCdzIERPTSByZXByZXNlbnRhdGlvbiBoYXMgYmVlbiB1cGRhdGVkLlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBvcGVyYXRlIG9uIHRoZSBET00gd2hlbiB0aGUgY29tcG9uZW50IGhhc1xuICAgKiBiZWVuIHVwZGF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2UHJvcHNcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2U3RhdGVcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2Q29udGV4dFxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHJvb3ROb2RlIERPTSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgY29tcG9uZW50LlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgcmVtb3ZlZCBmcm9tIGl0cyBwYXJlbnQgYW5kIGhhdmVcbiAgICogaXRzIERPTSByZXByZXNlbnRhdGlvbiBkZXN0cm95ZWQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGRlYWxsb2NhdGUgYW55IGV4dGVybmFsIHJlc291cmNlcy5cbiAgICpcbiAgICogTk9URTogVGhlcmUgaXMgbm8gYGNvbXBvbmVudERpZFVubW91bnRgIHNpbmNlIHlvdXIgY29tcG9uZW50IHdpbGwgaGF2ZSBiZWVuXG4gICAqIGRlc3Ryb3llZCBieSB0aGF0IHBvaW50LlxuICAgKlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG5cblxuICAvLyA9PT09IEFkdmFuY2VkIG1ldGhvZHMgPT09PVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBjb21wb25lbnQncyBjdXJyZW50bHkgbW91bnRlZCBET00gcmVwcmVzZW50YXRpb24uXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoaXMgaW1wbGVtZW50cyBSZWFjdCdzIHJlbmRlcmluZyBhbmQgcmVjb25jaWxpYXRpb24gYWxnb3JpdGhtLlxuICAgKiBTb3BoaXN0aWNhdGVkIGNsaWVudHMgbWF5IHdpc2ggdG8gb3ZlcnJpZGUgdGhpcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICogQG92ZXJyaWRhYmxlXG4gICAqL1xuICB1cGRhdGVDb21wb25lbnQ6IFNwZWNQb2xpY3kuT1ZFUlJJREVfQkFTRVxuXG59O1xuXG4vKipcbiAqIE1hcHBpbmcgZnJvbSBjbGFzcyBzcGVjaWZpY2F0aW9uIGtleXMgdG8gc3BlY2lhbCBwcm9jZXNzaW5nIGZ1bmN0aW9ucy5cbiAqXG4gKiBBbHRob3VnaCB0aGVzZSBhcmUgZGVjbGFyZWQgbGlrZSBpbnN0YW5jZSBwcm9wZXJ0aWVzIGluIHRoZSBzcGVjaWZpY2F0aW9uXG4gKiB3aGVuIGRlZmluaW5nIGNsYXNzZXMgdXNpbmcgYFJlYWN0LmNyZWF0ZUNsYXNzYCwgdGhleSBhcmUgYWN0dWFsbHkgc3RhdGljXG4gKiBhbmQgYXJlIGFjY2Vzc2libGUgb24gdGhlIGNvbnN0cnVjdG9yIGluc3RlYWQgb2YgdGhlIHByb3RvdHlwZS4gRGVzcGl0ZVxuICogYmVpbmcgc3RhdGljLCB0aGV5IG11c3QgYmUgZGVmaW5lZCBvdXRzaWRlIG9mIHRoZSBcInN0YXRpY3NcIiBrZXkgdW5kZXJcbiAqIHdoaWNoIGFsbCBvdGhlciBzdGF0aWMgbWV0aG9kcyBhcmUgZGVmaW5lZC5cbiAqL1xudmFyIFJFU0VSVkVEX1NQRUNfS0VZUyA9IHtcbiAgZGlzcGxheU5hbWU6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBkaXNwbGF5TmFtZSkge1xuICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIH0sXG4gIG1peGluczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIG1peGlucykge1xuICAgIGlmIChtaXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBtaXhpbnNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY2hpbGRDb250ZXh0VHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBjaGlsZENvbnRleHRUeXBlcykge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHZhbGlkYXRlVHlwZURlZihcbiAgICAgICAgQ29uc3RydWN0b3IsXG4gICAgICAgIGNoaWxkQ29udGV4dFR5cGVzLFxuICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNoaWxkQ29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gICAgQ29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMgPSBhc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLFxuICAgICAgY2hpbGRDb250ZXh0VHlwZXNcbiAgICApO1xuICB9LFxuICBjb250ZXh0VHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB2YWxpZGF0ZVR5cGVEZWYoXG4gICAgICAgIENvbnN0cnVjdG9yLFxuICAgICAgICBjb250ZXh0VHlwZXMsXG4gICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzID0gYXNzaWduKFxuICAgICAge30sXG4gICAgICBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMsXG4gICAgICBjb250ZXh0VHlwZXNcbiAgICApO1xuICB9LFxuICAvKipcbiAgICogU3BlY2lhbCBjYXNlIGdldERlZmF1bHRQcm9wcyB3aGljaCBzaG91bGQgbW92ZSBpbnRvIHN0YXRpY3MgYnV0IHJlcXVpcmVzXG4gICAqIGF1dG9tYXRpYyBtZXJnaW5nLlxuICAgKi9cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oXG4gICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyxcbiAgICAgICAgZ2V0RGVmYXVsdFByb3BzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMgPSBnZXREZWZhdWx0UHJvcHM7XG4gICAgfVxuICB9LFxuICBwcm9wVHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBwcm9wVHlwZXMpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB2YWxpZGF0ZVR5cGVEZWYoXG4gICAgICAgIENvbnN0cnVjdG9yLFxuICAgICAgICBwcm9wVHlwZXMsXG4gICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcFxuICAgICAgKTtcbiAgICB9XG4gICAgQ29uc3RydWN0b3IucHJvcFR5cGVzID0gYXNzaWduKFxuICAgICAge30sXG4gICAgICBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMsXG4gICAgICBwcm9wVHlwZXNcbiAgICApO1xuICB9LFxuICBzdGF0aWNzOiBmdW5jdGlvbihDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICAgIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCB0eXBlRGVmLCBsb2NhdGlvbikge1xuICBmb3IgKHZhciBwcm9wTmFtZSBpbiB0eXBlRGVmKSB7XG4gICAgaWYgKHR5cGVEZWYuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAvLyB1c2UgYSB3YXJuaW5nIGluc3RlYWQgb2YgYW4gaW52YXJpYW50IHNvIGNvbXBvbmVudHNcbiAgICAgIC8vIGRvbid0IHNob3cgdXAgaW4gcHJvZCBidXQgbm90IGluIF9fREVWX19cbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICB0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsXG4gICAgICAgICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tICcgK1xuICAgICAgICAnUmVhY3QuUHJvcFR5cGVzLicsXG4gICAgICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENsYXNzJyxcbiAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLFxuICAgICAgICBwcm9wTmFtZVxuICAgICAgKSA6IG51bGwpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlKHByb3RvLCBuYW1lKSB7XG4gIHZhciBzcGVjUG9saWN5ID0gUmVhY3RDbGFzc0ludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/XG4gICAgUmVhY3RDbGFzc0ludGVyZmFjZVtuYW1lXSA6XG4gICAgbnVsbDtcblxuICAvLyBEaXNhbGxvdyBvdmVycmlkaW5nIG9mIGJhc2UgY2xhc3MgbWV0aG9kcyB1bmxlc3MgZXhwbGljaXRseSBhbGxvd2VkLlxuICBpZiAoUmVhY3RDbGFzc01peGluLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuT1ZFUlJJREVfQkFTRSxcbiAgICAgICdSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gb3ZlcnJpZGUgJyArXG4gICAgICAnYCVzYCBmcm9tIHlvdXIgY2xhc3Mgc3BlY2lmaWNhdGlvbi4gRW5zdXJlIHRoYXQgeW91ciBtZXRob2QgbmFtZXMgJyArXG4gICAgICAnZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLicsXG4gICAgICBuYW1lXG4gICAgKSA6IGludmFyaWFudChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5Lk9WRVJSSURFX0JBU0UpKTtcbiAgfVxuXG4gIC8vIERpc2FsbG93IGRlZmluaW5nIG1ldGhvZHMgbW9yZSB0aGFuIG9uY2UgdW5sZXNzIGV4cGxpY2l0bHkgYWxsb3dlZC5cbiAgaWYgKHByb3RvLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkgfHxcbiAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELFxuICAgICAgJ1JlYWN0Q2xhc3NJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArXG4gICAgICAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgZHVlICcgK1xuICAgICAgJ3RvIGEgbWl4aW4uJyxcbiAgICAgIG5hbWVcbiAgICApIDogaW52YXJpYW50KHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkgfHxcbiAgICBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkpO1xuICB9XG59XG5cbi8qKlxuICogTWl4aW4gaGVscGVyIHdoaWNoIGhhbmRsZXMgcG9saWN5IHZhbGlkYXRpb24gYW5kIHJlc2VydmVkXG4gKiBzcGVjaWZpY2F0aW9uIGtleXMgd2hlbiBidWlsZGluZyBSZWFjdCBjbGFzc3Nlcy5cbiAqL1xuZnVuY3Rpb24gbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpIHtcbiAgaWYgKCFzcGVjKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICB0eXBlb2Ygc3BlYyAhPT0gJ2Z1bmN0aW9uJyxcbiAgICAnUmVhY3RDbGFzczogWW91XFwncmUgYXR0ZW1wdGluZyB0byAnICtcbiAgICAndXNlIGEgY29tcG9uZW50IGNsYXNzIGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgcmVndWxhciBvYmplY3QuJ1xuICApIDogaW52YXJpYW50KHR5cGVvZiBzcGVjICE9PSAnZnVuY3Rpb24nKSk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChzcGVjKSxcbiAgICAnUmVhY3RDbGFzczogWW91XFwncmUgYXR0ZW1wdGluZyB0byAnICtcbiAgICAndXNlIGEgY29tcG9uZW50IGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgcmVndWxhciBvYmplY3QuJ1xuICApIDogaW52YXJpYW50KCFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3BlYykpKTtcblxuICB2YXIgcHJvdG8gPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgLy8gQnkgaGFuZGxpbmcgbWl4aW5zIGJlZm9yZSBhbnkgb3RoZXIgcHJvcGVydGllcywgd2UgZW5zdXJlIHRoZSBzYW1lXG4gIC8vIGNoYWluaW5nIG9yZGVyIGlzIGFwcGxpZWQgdG8gbWV0aG9kcyB3aXRoIERFRklORV9NQU5ZIHBvbGljeSwgd2hldGhlclxuICAvLyBtaXhpbnMgYXJlIGxpc3RlZCBiZWZvcmUgb3IgYWZ0ZXIgdGhlc2UgbWV0aG9kcyBpbiB0aGUgc3BlYy5cbiAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoTUlYSU5TX0tFWSkpIHtcbiAgICBSRVNFUlZFRF9TUEVDX0tFWVMubWl4aW5zKENvbnN0cnVjdG9yLCBzcGVjLm1peGlucyk7XG4gIH1cblxuICBmb3IgKHZhciBuYW1lIGluIHNwZWMpIHtcbiAgICBpZiAoIXNwZWMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSBNSVhJTlNfS0VZKSB7XG4gICAgICAvLyBXZSBoYXZlIGFscmVhZHkgaGFuZGxlZCBtaXhpbnMgaW4gYSBzcGVjaWFsIGNhc2UgYWJvdmVcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBwcm9wZXJ0eSA9IHNwZWNbbmFtZV07XG4gICAgdmFsaWRhdGVNZXRob2RPdmVycmlkZShwcm90bywgbmFtZSk7XG5cbiAgICBpZiAoUkVTRVJWRURfU1BFQ19LRVlTLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBSRVNFUlZFRF9TUEVDX0tFWVNbbmFtZV0oQ29uc3RydWN0b3IsIHByb3BlcnR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2V0dXAgbWV0aG9kcyBvbiBwcm90b3R5cGU6XG4gICAgICAvLyBUaGUgZm9sbG93aW5nIG1lbWJlciBtZXRob2RzIHNob3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBib3VuZDpcbiAgICAgIC8vIDEuIEV4cGVjdGVkIFJlYWN0Q2xhc3MgbWV0aG9kcyAoaW4gdGhlIFwiaW50ZXJmYWNlXCIpLlxuICAgICAgLy8gMi4gT3ZlcnJpZGRlbiBtZXRob2RzICh0aGF0IHdlcmUgbWl4ZWQgaW4pLlxuICAgICAgdmFyIGlzUmVhY3RDbGFzc01ldGhvZCA9XG4gICAgICAgIFJlYWN0Q2xhc3NJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB2YXIgaXNBbHJlYWR5RGVmaW5lZCA9IHByb3RvLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgdmFyIG1hcmtlZERvbnRCaW5kID0gcHJvcGVydHkgJiYgcHJvcGVydHkuX19yZWFjdERvbnRCaW5kO1xuICAgICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbic7XG4gICAgICB2YXIgc2hvdWxkQXV0b0JpbmQgPVxuICAgICAgICBpc0Z1bmN0aW9uICYmXG4gICAgICAgICFpc1JlYWN0Q2xhc3NNZXRob2QgJiZcbiAgICAgICAgIWlzQWxyZWFkeURlZmluZWQgJiZcbiAgICAgICAgIW1hcmtlZERvbnRCaW5kO1xuXG4gICAgICBpZiAoc2hvdWxkQXV0b0JpbmQpIHtcbiAgICAgICAgaWYgKCFwcm90by5fX3JlYWN0QXV0b0JpbmRNYXApIHtcbiAgICAgICAgICBwcm90by5fX3JlYWN0QXV0b0JpbmRNYXAgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBwcm90by5fX3JlYWN0QXV0b0JpbmRNYXBbbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlW25hbWVdO1xuXG4gICAgICAgICAgLy8gVGhlc2UgY2FzZXMgc2hvdWxkIGFscmVhZHkgYmUgY2F1Z2h0IGJ5IHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGVcbiAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgICAgaXNSZWFjdENsYXNzTWV0aG9kICYmIChcbiAgICAgICAgICAgICAgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEIHx8IHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgJ1JlYWN0Q2xhc3M6IFVuZXhwZWN0ZWQgc3BlYyBwb2xpY3kgJXMgZm9yIGtleSAlcyAnICtcbiAgICAgICAgICAgICd3aGVuIG1peGluZyBpbiBjb21wb25lbnQgc3BlY3MuJyxcbiAgICAgICAgICAgIHNwZWNQb2xpY3ksXG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgKSA6IGludmFyaWFudChpc1JlYWN0Q2xhc3NNZXRob2QgJiYgKFxuICAgICAgICAgICAgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEIHx8IHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkpXG4gICAgICAgICAgKSkpO1xuXG4gICAgICAgICAgLy8gRm9yIG1ldGhvZHMgd2hpY2ggYXJlIGRlZmluZWQgbW9yZSB0aGFuIG9uY2UsIGNhbGwgdGhlIGV4aXN0aW5nXG4gICAgICAgICAgLy8gbWV0aG9kcyBiZWZvcmUgY2FsbGluZyB0aGUgbmV3IHByb3BlcnR5LCBtZXJnaW5nIGlmIGFwcHJvcHJpYXRlLlxuICAgICAgICAgIGlmIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSkge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ocHJvdG9bbmFtZV0sIHByb3BlcnR5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgICAgICAvLyBBZGQgdmVyYm9zZSBkaXNwbGF5TmFtZSB0byB0aGUgZnVuY3Rpb24sIHdoaWNoIGhlbHBzIHdoZW4gbG9va2luZ1xuICAgICAgICAgICAgLy8gYXQgcHJvZmlsaW5nIHRvb2xzLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJyAmJiBzcGVjLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgICAgIHByb3RvW25hbWVdLmRpc3BsYXlOYW1lID0gc3BlYy5kaXNwbGF5TmFtZSArICdfJyArIG5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gIGlmICghc3RhdGljcykge1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBuYW1lIGluIHN0YXRpY3MpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBzdGF0aWNzW25hbWVdO1xuICAgIGlmICghc3RhdGljcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGlzUmVzZXJ2ZWQgPSBuYW1lIGluIFJFU0VSVkVEX1NQRUNfS0VZUztcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIWlzUmVzZXJ2ZWQsXG4gICAgICAnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBhIHJlc2VydmVkICcgK1xuICAgICAgJ3Byb3BlcnR5LCBgJXNgLCB0aGF0IHNob3VsZG5cXCd0IGJlIG9uIHRoZSBcInN0YXRpY3NcIiBrZXkuIERlZmluZSBpdCAnICtcbiAgICAgICdhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBpbnN0ZWFkOyBpdCB3aWxsIHN0aWxsIGJlIGFjY2Vzc2libGUgb24gdGhlICcgK1xuICAgICAgJ2NvbnN0cnVjdG9yLicsXG4gICAgICBuYW1lXG4gICAgKSA6IGludmFyaWFudCghaXNSZXNlcnZlZCkpO1xuXG4gICAgdmFyIGlzSW5oZXJpdGVkID0gbmFtZSBpbiBDb25zdHJ1Y3RvcjtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIWlzSW5oZXJpdGVkLFxuICAgICAgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArXG4gICAgICAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgJyArXG4gICAgICAnZHVlIHRvIGEgbWl4aW4uJyxcbiAgICAgIG5hbWVcbiAgICApIDogaW52YXJpYW50KCFpc0luaGVyaXRlZCkpO1xuICAgIENvbnN0cnVjdG9yW25hbWVdID0gcHJvcGVydHk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb2JqZWN0cywgYnV0IHRocm93IGlmIGJvdGggY29udGFpbiB0aGUgc2FtZSBrZXkuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9uZSBUaGUgZmlyc3Qgb2JqZWN0LCB3aGljaCBpcyBtdXRhdGVkLlxuICogQHBhcmFtIHtvYmplY3R9IHR3byBUaGUgc2Vjb25kIG9iamVjdFxuICogQHJldHVybiB7b2JqZWN0fSBvbmUgYWZ0ZXIgaXQgaGFzIGJlZW4gbXV0YXRlZCB0byBjb250YWluIGV2ZXJ5dGhpbmcgaW4gdHdvLlxuICovXG5mdW5jdGlvbiBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKG9uZSwgdHdvKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgb25lICYmIHR3byAmJiB0eXBlb2Ygb25lID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdHdvID09PSAnb2JqZWN0JyxcbiAgICAnbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cygpOiBDYW5ub3QgbWVyZ2Ugbm9uLW9iamVjdHMuJ1xuICApIDogaW52YXJpYW50KG9uZSAmJiB0d28gJiYgdHlwZW9mIG9uZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR3byA9PT0gJ29iamVjdCcpKTtcblxuICBmb3IgKHZhciBrZXkgaW4gdHdvKSB7XG4gICAgaWYgKHR3by5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBvbmVba2V5XSA9PT0gdW5kZWZpbmVkLFxuICAgICAgICAnbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cygpOiAnICtcbiAgICAgICAgJ1RyaWVkIHRvIG1lcmdlIHR3byBvYmplY3RzIHdpdGggdGhlIHNhbWUga2V5OiBgJXNgLiBUaGlzIGNvbmZsaWN0ICcgK1xuICAgICAgICAnbWF5IGJlIGR1ZSB0byBhIG1peGluOyBpbiBwYXJ0aWN1bGFyLCB0aGlzIG1heSBiZSBjYXVzZWQgYnkgdHdvICcgK1xuICAgICAgICAnZ2V0SW5pdGlhbFN0YXRlKCkgb3IgZ2V0RGVmYXVsdFByb3BzKCkgbWV0aG9kcyByZXR1cm5pbmcgb2JqZWN0cyAnICtcbiAgICAgICAgJ3dpdGggY2xhc2hpbmcga2V5cy4nLFxuICAgICAgICBrZXlcbiAgICAgICkgOiBpbnZhcmlhbnQob25lW2tleV0gPT09IHVuZGVmaW5lZCkpO1xuICAgICAgb25lW2tleV0gPSB0d29ba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9uZTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHR3byBmdW5jdGlvbnMgYW5kIG1lcmdlcyB0aGVpciByZXR1cm4gdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uZSBGdW5jdGlvbiB0byBpbnZva2UgZmlyc3QuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0d28gRnVuY3Rpb24gdG8gaW52b2tlIHNlY29uZC5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHR3byBhcmd1bWVudCBmdW5jdGlvbnMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihvbmUsIHR3bykge1xuICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkUmVzdWx0KCkge1xuICAgIHZhciBhID0gb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdmFyIGIgPSB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoYSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9IGVsc2UgaWYgKGIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICAgIHZhciBjID0ge307XG4gICAgbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhjLCBhKTtcbiAgICBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGMsIGIpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdHdvIGZ1bmN0aW9ucyBhbmQgaWdub3JlcyB0aGVpciByZXR1cm4gdmFsZXMuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25lIEZ1bmN0aW9uIHRvIGludm9rZSBmaXJzdC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHR3byBGdW5jdGlvbiB0byBpbnZva2Ugc2Vjb25kLlxuICogQHJldHVybiB7ZnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgdHdvIGFyZ3VtZW50IGZ1bmN0aW9ucy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbihvbmUsIHR3bykge1xuICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgIG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG4vKipcbiAqIEJpbmRzIGEgbWV0aG9kIHRvIHRoZSBjb21wb25lbnQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudCBDb21wb25lbnQgd2hvc2UgbWV0aG9kIGlzIGdvaW5nIHRvIGJlIGJvdW5kLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kIE1ldGhvZCB0byBiZSBib3VuZC5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgYm91bmQgbWV0aG9kLlxuICovXG5mdW5jdGlvbiBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpIHtcbiAgdmFyIGJvdW5kTWV0aG9kID0gbWV0aG9kLmJpbmQoY29tcG9uZW50KTtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZEFyZ3VtZW50cyA9IG51bGw7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG4gICAgdmFyIF9iaW5kID0gYm91bmRNZXRob2QuYmluZDtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBibG9jay1zY29wZWQtdmFyLCBuby11bmRlZiAqL1xuICAgIGJvdW5kTWV0aG9kLmJpbmQgPSBmdW5jdGlvbihuZXdUaGlzICkge2ZvciAodmFyIGFyZ3M9W10sJF9fMD0xLCRfXzE9YXJndW1lbnRzLmxlbmd0aDskX18wPCRfXzE7JF9fMCsrKSBhcmdzLnB1c2goYXJndW1lbnRzWyRfXzBdKTtcbiAgICAgIC8vIFVzZXIgaXMgdHJ5aW5nIHRvIGJpbmQoKSBhbiBhdXRvYm91bmQgbWV0aG9kOyB3ZSBlZmZlY3RpdmVseSB3aWxsXG4gICAgICAvLyBpZ25vcmUgdGhlIHZhbHVlIG9mIFwidGhpc1wiIHRoYXQgdGhlIHVzZXIgaXMgdHJ5aW5nIHRvIHVzZSwgc29cbiAgICAgIC8vIGxldCdzIHdhcm4uXG4gICAgICBpZiAobmV3VGhpcyAhPT0gY29tcG9uZW50ICYmIG5ld1RoaXMgIT09IG51bGwpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgJ2JpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlICcgK1xuICAgICAgICAgICdjb21wb25lbnQgaW5zdGFuY2UuIFNlZSAlcycsXG4gICAgICAgICAgY29tcG9uZW50TmFtZVxuICAgICAgICApIDogbnVsbCk7XG4gICAgICB9IGVsc2UgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAnYmluZCgpOiBZb3UgYXJlIGJpbmRpbmcgYSBjb21wb25lbnQgbWV0aG9kIHRvIHRoZSBjb21wb25lbnQuICcgK1xuICAgICAgICAgICdSZWFjdCBkb2VzIHRoaXMgZm9yIHlvdSBhdXRvbWF0aWNhbGx5IGluIGEgaGlnaC1wZXJmb3JtYW5jZSAnICtcbiAgICAgICAgICAnd2F5LCBzbyB5b3UgY2FuIHNhZmVseSByZW1vdmUgdGhpcyBjYWxsLiBTZWUgJXMnLFxuICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICByZXR1cm4gYm91bmRNZXRob2Q7XG4gICAgICB9XG4gICAgICB2YXIgcmVib3VuZE1ldGhvZCA9IF9iaW5kLmFwcGx5KGJvdW5kTWV0aG9kLCBhcmd1bWVudHMpO1xuICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRDb250ZXh0ID0gY29tcG9uZW50O1xuICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZEFyZ3VtZW50cyA9IGFyZ3M7XG4gICAgICByZXR1cm4gcmVib3VuZE1ldGhvZDtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICB9O1xuICB9XG4gIHJldHVybiBib3VuZE1ldGhvZDtcbn1cblxuLyoqXG4gKiBCaW5kcyBhbGwgYXV0by1ib3VuZCBtZXRob2RzIGluIGEgY29tcG9uZW50LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgQ29tcG9uZW50IHdob3NlIG1ldGhvZCBpcyBnb2luZyB0byBiZSBib3VuZC5cbiAqL1xuZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kcyhjb21wb25lbnQpIHtcbiAgZm9yICh2YXIgYXV0b0JpbmRLZXkgaW4gY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcCkge1xuICAgIGlmIChjb21wb25lbnQuX19yZWFjdEF1dG9CaW5kTWFwLmhhc093blByb3BlcnR5KGF1dG9CaW5kS2V5KSkge1xuICAgICAgdmFyIG1ldGhvZCA9IGNvbXBvbmVudC5fX3JlYWN0QXV0b0JpbmRNYXBbYXV0b0JpbmRLZXldO1xuICAgICAgY29tcG9uZW50W2F1dG9CaW5kS2V5XSA9IGJpbmRBdXRvQmluZE1ldGhvZChcbiAgICAgICAgY29tcG9uZW50LFxuICAgICAgICBSZWFjdEVycm9yVXRpbHMuZ3VhcmQoXG4gICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgIGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSArICcuJyArIGF1dG9CaW5kS2V5XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhciB0eXBlRGVwcmVjYXRpb25EZXNjcmlwdG9yID0ge1xuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSB0aGlzLmRpc3BsYXlOYW1lIHx8IHRoaXMubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIGZhbHNlLFxuICAgICAgJyVzLnR5cGUgaXMgZGVwcmVjYXRlZC4gVXNlICVzIGRpcmVjdGx5IHRvIGFjY2VzcyB0aGUgY2xhc3MuJyxcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgZGlzcGxheU5hbWVcbiAgICApIDogbnVsbCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd0eXBlJywge1xuICAgICAgdmFsdWU6IHRoaXNcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxuLyoqXG4gKiBBZGQgbW9yZSB0byB0aGUgUmVhY3RDbGFzcyBiYXNlIGNsYXNzLiBUaGVzZSBhcmUgYWxsIGxlZ2FjeSBmZWF0dXJlcyBhbmRcbiAqIHRoZXJlZm9yZSBub3QgYWxyZWFkeSBwYXJ0IG9mIHRoZSBtb2Rlcm4gUmVhY3RDb21wb25lbnQuXG4gKi9cbnZhciBSZWFjdENsYXNzTWl4aW4gPSB7XG5cbiAgLyoqXG4gICAqIFRPRE86IFRoaXMgd2lsbCBiZSBkZXByZWNhdGVkIGJlY2F1c2Ugc3RhdGUgc2hvdWxkIGFsd2F5cyBrZWVwIGEgY29uc2lzdGVudFxuICAgKiB0eXBlIHNpZ25hdHVyZSBhbmQgdGhlIG9ubHkgdXNlIGNhc2UgZm9yIHRoaXMsIGlzIHRvIGF2b2lkIHRoYXQuXG4gICAqL1xuICByZXBsYWNlU3RhdGU6IGZ1bmN0aW9uKG5ld1N0YXRlLCBjYWxsYmFjaykge1xuICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZVJlcGxhY2VTdGF0ZSh0aGlzLCBuZXdTdGF0ZSk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgbW91bnRlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBmaW5hbFxuICAgKi9cbiAgaXNNb3VudGVkOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB2YXIgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgIG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlcixcbiAgICAgICAgICAnJXMgaXMgYWNjZXNzaW5nIGlzTW91bnRlZCBpbnNpZGUgaXRzIHJlbmRlcigpIGZ1bmN0aW9uLiAnICtcbiAgICAgICAgICAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICtcbiAgICAgICAgICAnbmV2ZXIgYWNjZXNzIHNvbWV0aGluZyB0aGF0IHJlcXVpcmVzIHN0YWxlIGRhdGEgZnJvbSB0aGUgcHJldmlvdXMgJyArXG4gICAgICAgICAgJ3JlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kICcgK1xuICAgICAgICAgICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLFxuICAgICAgICAgIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnXG4gICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgb3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldCh0aGlzKTtcbiAgICByZXR1cm4gKFxuICAgICAgaW50ZXJuYWxJbnN0YW5jZSAmJlxuICAgICAgaW50ZXJuYWxJbnN0YW5jZSAhPT0gUmVhY3RMaWZlQ3ljbGUuY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZVxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHByb3BzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFByb3BzIFN1YnNldCBvZiB0aGUgbmV4dCBwcm9wcy5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBwcm9wcyBhcmUgdXBkYXRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBwdWJsaWNcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIHNldFByb3BzOiBmdW5jdGlvbihwYXJ0aWFsUHJvcHMsIGNhbGxiYWNrKSB7XG4gICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlU2V0UHJvcHModGhpcywgcGFydGlhbFByb3BzKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2UgYWxsIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5ld1Byb3BzIFN1YnNldCBvZiB0aGUgbmV4dCBwcm9wcy5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBwcm9wcyBhcmUgdXBkYXRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBwdWJsaWNcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIHJlcGxhY2VQcm9wczogZnVuY3Rpb24obmV3UHJvcHMsIGNhbGxiYWNrKSB7XG4gICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlUmVwbGFjZVByb3BzKHRoaXMsIG5ld1Byb3BzKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBSZWFjdENsYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24oKSB7fTtcbmFzc2lnbihcbiAgUmVhY3RDbGFzc0NvbXBvbmVudC5wcm90b3R5cGUsXG4gIFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSxcbiAgUmVhY3RDbGFzc01peGluXG4pO1xuXG4vKipcbiAqIE1vZHVsZSBmb3IgY3JlYXRpbmcgY29tcG9zaXRlIGNvbXBvbmVudHMuXG4gKlxuICogQGNsYXNzIFJlYWN0Q2xhc3NcbiAqL1xudmFyIFJlYWN0Q2xhc3MgPSB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjb21wb3NpdGUgY29tcG9uZW50IGNsYXNzIGdpdmVuIGEgY2xhc3Mgc3BlY2lmaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHNwZWMgQ2xhc3Mgc3BlY2lmaWNhdGlvbiAod2hpY2ggbXVzdCBkZWZpbmUgYHJlbmRlcmApLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gQ29tcG9uZW50IGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICAgKiBAcHVibGljXG4gICAqL1xuICBjcmVhdGVDbGFzczogZnVuY3Rpb24oc3BlYykge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAvLyBUaGlzIGNvbnN0cnVjdG9yIGlzIG92ZXJyaWRkZW4gYnkgbW9ja3MuIFRoZSBhcmd1bWVudCBpcyB1c2VkXG4gICAgICAvLyBieSBtb2NrcyB0byBhc3NlcnQgb24gd2hhdCBnZXRzIG1vdW50ZWQuXG5cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgdGhpcyBpbnN0YW5jZW9mIENvbnN0cnVjdG9yLFxuICAgICAgICAgICdTb21ldGhpbmcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gVXNlIGEgZmFjdG9yeSBvciAnICtcbiAgICAgICAgICAnSlNYIGluc3RlYWQuIFNlZTogaHR0cHM6Ly9mYi5tZS9yZWFjdC1sZWdhY3lmYWN0b3J5J1xuICAgICAgICApIDogbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdpcmUgdXAgYXV0by1iaW5kaW5nXG4gICAgICBpZiAodGhpcy5fX3JlYWN0QXV0b0JpbmRNYXApIHtcbiAgICAgICAgYmluZEF1dG9CaW5kTWV0aG9kcyh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuXG4gICAgICAvLyBSZWFjdENsYXNzZXMgZG9lc24ndCBoYXZlIGNvbnN0cnVjdG9ycy4gSW5zdGVhZCwgdGhleSB1c2UgdGhlXG4gICAgICAvLyBnZXRJbml0aWFsU3RhdGUgYW5kIGNvbXBvbmVudFdpbGxNb3VudCBtZXRob2RzIGZvciBpbml0aWFsaXphdGlvbi5cblxuICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IHRoaXMuZ2V0SW5pdGlhbFN0YXRlID8gdGhpcy5nZXRJbml0aWFsU3RhdGUoKSA6IG51bGw7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIC8vIFdlIGFsbG93IGF1dG8tbW9ja3MgdG8gcHJvY2VlZCBhcyBpZiB0aGV5J3JlIHJldHVybmluZyBudWxsLlxuICAgICAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIHRoaXMuZ2V0SW5pdGlhbFN0YXRlLl9pc01vY2tGdW5jdGlvbikge1xuICAgICAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYmFkIHByYWN0aWNlLiBDb25zaWRlciB3YXJuaW5nIGhlcmUgYW5kXG4gICAgICAgICAgLy8gZGVwcmVjYXRpbmcgdGhpcyBjb252ZW5pZW5jZS5cbiAgICAgICAgICBpbml0aWFsU3RhdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpLFxuICAgICAgICAnJXMuZ2V0SW5pdGlhbFN0YXRlKCk6IG11c3QgcmV0dXJuIGFuIG9iamVjdCBvciBudWxsJyxcbiAgICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50J1xuICAgICAgKSA6IGludmFyaWFudCh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpKSk7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgfTtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBuZXcgUmVhY3RDbGFzc0NvbXBvbmVudCgpO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuXG4gICAgaW5qZWN0ZWRNaXhpbnMuZm9yRWFjaChcbiAgICAgIG1peFNwZWNJbnRvQ29tcG9uZW50LmJpbmQobnVsbCwgQ29uc3RydWN0b3IpXG4gICAgKTtcblxuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzcGVjKTtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIGRlZmF1bHRQcm9wcyBwcm9wZXJ0eSBhZnRlciBhbGwgbWl4aW5zIGhhdmUgYmVlbiBtZXJnZWRcbiAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICBDb25zdHJ1Y3Rvci5kZWZhdWx0UHJvcHMgPSBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMoKTtcbiAgICB9XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgdGFnIHRvIGluZGljYXRlIHRoYXQgdGhlIHVzZSBvZiB0aGVzZSBtZXRob2QgbmFtZXMgaXMgb2ssXG4gICAgICAvLyBzaW5jZSBpdCdzIHVzZWQgd2l0aCBjcmVhdGVDbGFzcy4gSWYgaXQncyBub3QsIHRoZW4gaXQncyBsaWtlbHkgYVxuICAgICAgLy8gbWlzdGFrZSBzbyB3ZSdsbCB3YXJuIHlvdSB0byB1c2UgdGhlIHN0YXRpYyBwcm9wZXJ0eSwgcHJvcGVydHlcbiAgICAgIC8vIGluaXRpYWxpemVyIG9yIGNvbnN0cnVjdG9yIHJlc3BlY3RpdmVseS5cbiAgICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkID0ge307XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEluaXRpYWxTdGF0ZSkge1xuICAgICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlLmlzUmVhY3RDbGFzc0FwcHJvdmVkID0ge307XG4gICAgICB9XG4gICAgfVxuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5yZW5kZXIsXG4gICAgICAnY3JlYXRlQ2xhc3MoLi4uKTogQ2xhc3Mgc3BlY2lmaWNhdGlvbiBtdXN0IGltcGxlbWVudCBhIGByZW5kZXJgIG1ldGhvZC4nXG4gICAgKSA6IGludmFyaWFudChDb25zdHJ1Y3Rvci5wcm90b3R5cGUucmVuZGVyKSk7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRTaG91bGRVcGRhdGUsXG4gICAgICAgICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgK1xuICAgICAgICAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArXG4gICAgICAgICdUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgJyArXG4gICAgICAgICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nLFxuICAgICAgICBzcGVjLmRpc3BsYXlOYW1lIHx8ICdBIGNvbXBvbmVudCdcbiAgICAgICkgOiBudWxsKTtcbiAgICB9XG5cbiAgICAvLyBSZWR1Y2UgdGltZSBzcGVudCBkb2luZyBsb29rdXBzIGJ5IHNldHRpbmcgdGhlc2Ugb24gdGhlIHByb3RvdHlwZS5cbiAgICBmb3IgKHZhciBtZXRob2ROYW1lIGluIFJlYWN0Q2xhc3NJbnRlcmZhY2UpIHtcbiAgICAgIGlmICghQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGhvb2tcbiAgICBDb25zdHJ1Y3Rvci50eXBlID0gQ29uc3RydWN0b3I7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCAndHlwZScsIHR5cGVEZXByZWNhdGlvbkRlc2NyaXB0b3IpO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAvLyBJRSB3aWxsIGZhaWwgb24gZGVmaW5lUHJvcGVydHkgKGVzNS1zaGltL3NoYW0gdG9vKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfSxcblxuICBpbmplY3Rpb246IHtcbiAgICBpbmplY3RNaXhpbjogZnVuY3Rpb24obWl4aW4pIHtcbiAgICAgIGluamVjdGVkTWl4aW5zLnB1c2gobWl4aW4pO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q2xhc3M7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanNcIixcIi4vUmVhY3RDb21wb25lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50LmpzXCIsXCIuL1JlYWN0Q3VycmVudE93bmVyXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEN1cnJlbnRPd25lci5qc1wiLFwiLi9SZWFjdEVsZW1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qc1wiLFwiLi9SZWFjdEVycm9yVXRpbHNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RXJyb3JVdGlscy5qc1wiLFwiLi9SZWFjdEluc3RhbmNlTWFwXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEluc3RhbmNlTWFwLmpzXCIsXCIuL1JlYWN0TGlmZUN5Y2xlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdExpZmVDeWNsZS5qc1wiLFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanNcIixcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5qc1wiLFwiLi9SZWFjdFVwZGF0ZVF1ZXVlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFVwZGF0ZVF1ZXVlLmpzXCIsXCIuL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCIuL2tleU1pcnJvclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIva2V5TWlycm9yLmpzXCIsXCIuL2tleU9mXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9rZXlPZi5qc1wiLFwiLi93YXJuaW5nXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi93YXJuaW5nLmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb25lbnQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29tcG9uZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlUXVldWVcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBoZWxwZXJzIGZvciB0aGUgdXBkYXRpbmcgc3RhdGUgb2YgYSBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIFJlYWN0Q29tcG9uZW50KHByb3BzLCBjb250ZXh0KSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbn1cblxuLyoqXG4gKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gQWx3YXlzIHVzZSB0aGlzIHRvIG11dGF0ZVxuICogc3RhdGUuIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAqXG4gKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAqXG4gKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBjYWxscyB0byBgc2V0U3RhdGVgIHdpbGwgcnVuIHN5bmNocm9ub3VzbHksXG4gKiBhcyB0aGV5IG1heSBldmVudHVhbGx5IGJlIGJhdGNoZWQgdG9nZXRoZXIuICBZb3UgY2FuIHByb3ZpZGUgYW4gb3B0aW9uYWxcbiAqIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoZSBjYWxsIHRvIHNldFN0YXRlIGlzIGFjdHVhbGx5XG4gKiBjb21wbGV0ZWQuXG4gKlxuICogV2hlbiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIHRvIHNldFN0YXRlLCBpdCB3aWxsIGJlIGNhbGxlZCBhdCBzb21lIHBvaW50IGluXG4gKiB0aGUgZnV0dXJlIChub3Qgc3luY2hyb25vdXNseSkuIEl0IHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIHVwIHRvIGRhdGVcbiAqIGNvbXBvbmVudCBhcmd1bWVudHMgKHN0YXRlLCBwcm9wcywgY29udGV4dCkuIFRoZXNlIHZhbHVlcyBjYW4gYmUgZGlmZmVyZW50XG4gKiBmcm9tIHRoaXMuKiBiZWNhdXNlIHlvdXIgZnVuY3Rpb24gbWF5IGJlIGNhbGxlZCBhZnRlciByZWNlaXZlUHJvcHMgYnV0IGJlZm9yZVxuICogc2hvdWxkQ29tcG9uZW50VXBkYXRlLCBhbmQgdGhpcyBuZXcgc3RhdGUsIHByb3BzLCBhbmQgY29udGV4dCB3aWxsIG5vdCB5ZXQgYmVcbiAqIGFzc2lnbmVkIHRvIHRoaXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IHBhcnRpYWxTdGF0ZSBOZXh0IHBhcnRpYWwgc3RhdGUgb3IgZnVuY3Rpb24gdG9cbiAqICAgICAgICBwcm9kdWNlIG5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBjdXJyZW50IHN0YXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICogQGZpbmFsXG4gKiBAcHJvdGVjdGVkXG4gKi9cblJlYWN0Q29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uKHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fFxuICAgIHR5cGVvZiBwYXJ0aWFsU3RhdGUgPT09ICdmdW5jdGlvbicgfHxcbiAgICBwYXJ0aWFsU3RhdGUgPT0gbnVsbCxcbiAgICAnc2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSAnICtcbiAgICAnZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLidcbiAgKSA6IGludmFyaWFudCh0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fFxuICB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnZnVuY3Rpb24nIHx8XG4gIHBhcnRpYWxTdGF0ZSA9PSBudWxsKSk7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIHBhcnRpYWxTdGF0ZSAhPSBudWxsLFxuICAgICAgJ3NldFN0YXRlKC4uLik6IFlvdSBwYXNzZWQgYW4gdW5kZWZpbmVkIG9yIG51bGwgc3RhdGUgb2JqZWN0OyAnICtcbiAgICAgICdpbnN0ZWFkLCB1c2UgZm9yY2VVcGRhdGUoKS4nXG4gICAgKSA6IG51bGwpO1xuICB9XG4gIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZVNldFN0YXRlKHRoaXMsIHBhcnRpYWxTdGF0ZSk7XG4gIGlmIChjYWxsYmFjaykge1xuICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAqXG4gKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICpcbiAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgdXBkYXRlIGlzIGNvbXBsZXRlLlxuICogQGZpbmFsXG4gKiBAcHJvdGVjdGVkXG4gKi9cblJlYWN0Q29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMpO1xuICBpZiAoY2FsbGJhY2spIHtcbiAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogRGVwcmVjYXRlZCBBUElzLiBUaGVzZSBBUElzIHVzZWQgdG8gZXhpc3Qgb24gY2xhc3NpYyBSZWFjdCBjbGFzc2VzIGJ1dCBzaW5jZVxuICogd2Ugd291bGQgbGlrZSB0byBkZXByZWNhdGUgdGhlbSwgd2UncmUgbm90IGdvaW5nIHRvIG1vdmUgdGhlbSBvdmVyIHRvIHRoaXNcbiAqIG1vZGVybiBiYXNlIGNsYXNzLiBJbnN0ZWFkLCB3ZSBkZWZpbmUgYSBnZXR0ZXIgdGhhdCB3YXJucyBpZiBpdCdzIGFjY2Vzc2VkLlxuICovXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIHZhciBkZXByZWNhdGVkQVBJcyA9IHtcbiAgICBnZXRET01Ob2RlOiBbXG4gICAgICAnZ2V0RE9NTm9kZScsXG4gICAgICAnVXNlIFJlYWN0LmZpbmRET01Ob2RlKGNvbXBvbmVudCkgaW5zdGVhZC4nXG4gICAgXSxcbiAgICBpc01vdW50ZWQ6IFtcbiAgICAgICdpc01vdW50ZWQnLFxuICAgICAgJ0luc3RlYWQsIG1ha2Ugc3VyZSB0byBjbGVhbiB1cCBzdWJzY3JpcHRpb25zIGFuZCBwZW5kaW5nIHJlcXVlc3RzIGluICcgK1xuICAgICAgJ2NvbXBvbmVudFdpbGxVbm1vdW50IHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzLidcbiAgICBdLFxuICAgIHJlcGxhY2VQcm9wczogW1xuICAgICAgJ3JlcGxhY2VQcm9wcycsXG4gICAgICAnSW5zdGVhZCwgY2FsbCBSZWFjdC5yZW5kZXIgYWdhaW4gYXQgdGhlIHRvcCBsZXZlbC4nXG4gICAgXSxcbiAgICByZXBsYWNlU3RhdGU6IFtcbiAgICAgICdyZXBsYWNlU3RhdGUnLFxuICAgICAgJ1JlZmFjdG9yIHlvdXIgY29kZSB0byB1c2Ugc2V0U3RhdGUgaW5zdGVhZCAoc2VlICcgK1xuICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzIzNikuJ1xuICAgIF0sXG4gICAgc2V0UHJvcHM6IFtcbiAgICAgICdzZXRQcm9wcycsXG4gICAgICAnSW5zdGVhZCwgY2FsbCBSZWFjdC5yZW5kZXIgYWdhaW4gYXQgdGhlIHRvcCBsZXZlbC4nXG4gICAgXVxuICB9O1xuICB2YXIgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5mbykge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhY3RDb21wb25lbnQucHJvdG90eXBlLCBtZXRob2ROYW1lLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICclcyguLi4pIGlzIGRlcHJlY2F0ZWQgaW4gcGxhaW4gSmF2YVNjcmlwdCBSZWFjdCBjbGFzc2VzLiAlcycsXG4gICAgICAgICAgICBpbmZvWzBdLFxuICAgICAgICAgICAgaW5mb1sxXVxuICAgICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICAvLyBJRSB3aWxsIGZhaWwgb24gZGVmaW5lUHJvcGVydHkgKGVzNS1zaGltL3NoYW0gdG9vKVxuICAgIH1cbiAgfTtcbiAgZm9yICh2YXIgZm5OYW1lIGluIGRlcHJlY2F0ZWRBUElzKSB7XG4gICAgaWYgKGRlcHJlY2F0ZWRBUElzLmhhc093blByb3BlcnR5KGZuTmFtZSkpIHtcbiAgICAgIGRlZmluZURlcHJlY2F0aW9uV2FybmluZyhmbk5hbWUsIGRlcHJlY2F0ZWRBUElzW2ZuTmFtZV0pO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdFVwZGF0ZVF1ZXVlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFVwZGF0ZVF1ZXVlLmpzXCIsXCIuL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCIuL3dhcm5pbmdcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3dhcm5pbmcuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudFxuICovXG5cbi8qanNsaW50IGV2aWw6IHRydWUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01JRE9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9SZWFjdERPTUlET3BlcmF0aW9uc1wiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcblxuLyoqXG4gKiBBYnN0cmFjdHMgYXdheSBhbGwgZnVuY3Rpb25hbGl0eSBvZiB0aGUgcmVjb25jaWxlciB0aGF0IHJlcXVpcmVzIGtub3dsZWRnZSBvZlxuICogdGhlIGJyb3dzZXIgY29udGV4dC4gVE9ETzogVGhlc2UgY2FsbGVycyBzaG91bGQgYmUgcmVmYWN0b3JlZCB0byBhdm9pZCB0aGVcbiAqIG5lZWQgZm9yIHRoaXMgaW5qZWN0aW9uLlxuICovXG52YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPSB7XG5cbiAgcHJvY2Vzc0NoaWxkcmVuVXBkYXRlczpcbiAgICBSZWFjdERPTUlET3BlcmF0aW9ucy5kYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMsXG5cbiAgcmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDpcbiAgICBSZWFjdERPTUlET3BlcmF0aW9ucy5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQsXG5cbiAgLyoqXG4gICAqIElmIGEgcGFydGljdWxhciBlbnZpcm9ubWVudCByZXF1aXJlcyB0aGF0IHNvbWUgcmVzb3VyY2VzIGJlIGNsZWFuZWQgdXAsXG4gICAqIHNwZWNpZnkgdGhpcyBpbiB0aGUgaW5qZWN0ZWQgTWl4aW4uIEluIHRoZSBET00sIHdlIHdvdWxkIGxpa2VseSB3YW50IHRvXG4gICAqIHB1cmdlIGFueSBjYWNoZWQgbm9kZSBJRCBsb29rdXBzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdW5tb3VudElERnJvbUVudmlyb25tZW50OiBmdW5jdGlvbihyb290Tm9kZUlEKSB7XG4gICAgUmVhY3RNb3VudC5wdXJnZUlEKHJvb3ROb2RlSUQpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQ7XG5cbn0se1wiLi9SZWFjdERPTUlET3BlcmF0aW9uc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01JRE9wZXJhdGlvbnMuanNcIixcIi4vUmVhY3RNb3VudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNb3VudC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvbmVudEVudmlyb25tZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgaW5qZWN0ZWQgPSBmYWxzZTtcblxudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSB7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBlbnZpcm9ubWVudCBkZXBlbmRlbnQgY2xlYW51cCBob29rLiAoc2VydmVyIHZzLlxuICAgKiBicm93c2VyIGV0YykuIEV4YW1wbGU6IEEgYnJvd3NlciBzeXN0ZW0gY2FjaGVzIERPTSBub2RlcyBiYXNlZCBvbiBjb21wb25lbnRcbiAgICogSUQgYW5kIG11c3QgcmVtb3ZlIHRoYXQgY2FjaGUgZW50cnkgd2hlbiB0aGlzIGluc3RhbmNlIGlzIHVubW91bnRlZC5cbiAgICovXG4gIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogbnVsbCxcblxuICAvKipcbiAgICogT3B0aW9uYWxseSBpbmplY3RhYmxlIGhvb2sgZm9yIHN3YXBwaW5nIG91dCBtb3VudCBpbWFnZXMgaW4gdGhlIG1pZGRsZSBvZlxuICAgKiB0aGUgdHJlZS5cbiAgICovXG4gIHJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBob29rIGZvciBwcm9jZXNzaW5nIGEgcXVldWUgb2YgY2hpbGQgdXBkYXRlcy4gV2lsbFxuICAgKiBsYXRlciBtb3ZlIGludG8gTXVsdGlDaGlsZENvbXBvbmVudHMuXG4gICAqL1xuICBwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBudWxsLFxuXG4gIGluamVjdGlvbjoge1xuICAgIGluamVjdEVudmlyb25tZW50OiBmdW5jdGlvbihlbnZpcm9ubWVudCkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgIWluamVjdGVkLFxuICAgICAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQ6IGluamVjdEVudmlyb25tZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuJ1xuICAgICAgKSA6IGludmFyaWFudCghaW5qZWN0ZWQpKTtcbiAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50ID1cbiAgICAgICAgZW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50O1xuICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEID1cbiAgICAgICAgZW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDtcbiAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyA9XG4gICAgICAgIGVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXM7XG4gICAgICBpbmplY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDb21wb3NpdGVDb21wb25lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudFwiKTtcbnZhciBSZWFjdENvbnRleHQgPSByZXF1aXJlKFwiLi9SZWFjdENvbnRleHRcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCIpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpO1xudmFyIFJlYWN0TGlmZUN5Y2xlID0gcmVxdWlyZShcIi4vUmVhY3RMaWZlQ3ljbGVcIik7XG52YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdE5hdGl2ZUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKFwiLi9SZWFjdFBlcmZcIik7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnNcIik7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1wiKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoXCIuL2VtcHR5T2JqZWN0XCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSB7XG4gIHZhciBvd25lciA9IGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQuX293bmVyIHx8IG51bGw7XG4gIGlmIChvd25lcikge1xuICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tIFRoZSBMaWZlLUN5Y2xlIG9mIGEgQ29tcG9zaXRlIENvbXBvbmVudCAtLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiAtIGNvbnN0cnVjdG9yOiBJbml0aWFsaXphdGlvbiBvZiBzdGF0ZS4gVGhlIGluc3RhbmNlIGlzIG5vdyByZXRhaW5lZC5cbiAqICAgLSBjb21wb25lbnRXaWxsTW91bnRcbiAqICAgLSByZW5kZXJcbiAqICAgLSBbY2hpbGRyZW4ncyBjb25zdHJ1Y3RvcnNdXG4gKiAgICAgLSBbY2hpbGRyZW4ncyBjb21wb25lbnRXaWxsTW91bnQgYW5kIHJlbmRlcl1cbiAqICAgICAtIFtjaGlsZHJlbidzIGNvbXBvbmVudERpZE1vdW50XVxuICogICAgIC0gY29tcG9uZW50RGlkTW91bnRcbiAqXG4gKiAgICAgICBVcGRhdGUgUGhhc2VzOlxuICogICAgICAgLSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChvbmx5IGNhbGxlZCBpZiBwYXJlbnQgdXBkYXRlZClcbiAqICAgICAgIC0gc2hvdWxkQ29tcG9uZW50VXBkYXRlXG4gKiAgICAgICAgIC0gY29tcG9uZW50V2lsbFVwZGF0ZVxuICogICAgICAgICAgIC0gcmVuZGVyXG4gKiAgICAgICAgICAgLSBbY2hpbGRyZW4ncyBjb25zdHJ1Y3RvcnMgb3IgcmVjZWl2ZSBwcm9wcyBwaGFzZXNdXG4gKiAgICAgICAgIC0gY29tcG9uZW50RGlkVXBkYXRlXG4gKlxuICogICAgIC0gY29tcG9uZW50V2lsbFVubW91bnRcbiAqICAgICAtIFtjaGlsZHJlbidzIGNvbXBvbmVudFdpbGxVbm1vdW50XVxuICogICAtIFtjaGlsZHJlbiBkZXN0cm95ZWRdXG4gKiAtIChkZXN0cm95ZWQpOiBUaGUgaW5zdGFuY2UgaXMgbm93IGJsYW5rLCByZWxlYXNlZCBieSBSZWFjdCBhbmQgcmVhZHkgZm9yIEdDLlxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuLyoqXG4gKiBBbiBpbmNyZW1lbnRpbmcgSUQgYXNzaWduZWQgdG8gZWFjaCBjb21wb25lbnQgd2hlbiBpdCBpcyBtb3VudGVkLiBUaGlzIGlzXG4gKiB1c2VkIHRvIGVuZm9yY2UgdGhlIG9yZGVyIGluIHdoaWNoIGBSZWFjdFVwZGF0ZXNgIHVwZGF0ZXMgZGlydHkgY29tcG9uZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbmV4dE1vdW50SUQgPSAxO1xuXG4vKipcbiAqIEBsZW5kcyB7UmVhY3RDb21wb3NpdGVDb21wb25lbnQucHJvdG90eXBlfVxuICovXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbiA9IHtcblxuICAvKipcbiAgICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIGNvbXBvc2l0ZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG5cbiAgICAvLyBTZWUgUmVhY3RVcGRhdGVRdWV1ZVxuICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSBudWxsO1xuXG4gICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgdGhpcy5fbW91bnRPcmRlciA9IDA7XG4gICAgdGhpcy5faXNUb3BMZXZlbCA9IGZhbHNlO1xuXG4gICAgLy8gU2VlIFJlYWN0VXBkYXRlcyBhbmQgUmVhY3RVcGRhdGVRdWV1ZS5cbiAgICB0aGlzLl9wZW5kaW5nQ2FsbGJhY2tzID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGNvbXBvbmVudCwgcmVuZGVycyBtYXJrdXAsIGFuZCByZWdpc3RlcnMgZXZlbnQgbGlzdGVuZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7P3N0cmluZ30gUmVuZGVyZWQgbWFya3VwIHRvIGJlIGluc2VydGVkIGludG8gdGhlIERPTS5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9tb3VudE9yZGVyID0gbmV4dE1vdW50SUQrKztcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gcm9vdElEO1xuXG4gICAgdmFyIHB1YmxpY1Byb3BzID0gdGhpcy5fcHJvY2Vzc1Byb3BzKHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzKTtcbiAgICB2YXIgcHVibGljQ29udGV4dCA9IHRoaXMuX3Byb2Nlc3NDb250ZXh0KHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9jb250ZXh0KTtcblxuICAgIHZhciBDb21wb25lbnQgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5nZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQoXG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudFxuICAgICk7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBwdWJsaWMgY2xhc3NcbiAgICB2YXIgaW5zdCA9IG5ldyBDb21wb25lbnQocHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQpO1xuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGxhdGVyIGluIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQsIGJ1dCBhZGQgYW4gZWFybHlcbiAgICAgIC8vIHdhcm5pbmcgbm93IHRvIGhlbHAgZGVidWdnaW5nXG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgaW5zdC5yZW5kZXIgIT0gbnVsbCxcbiAgICAgICAgJyVzKC4uLik6IE5vIGByZW5kZXJgIG1ldGhvZCBmb3VuZCBvbiB0aGUgcmV0dXJuZWQgY29tcG9uZW50ICcgK1xuICAgICAgICAnaW5zdGFuY2U6IHlvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gZGVmaW5lIGByZW5kZXJgIGluIHlvdXIgJyArXG4gICAgICAgICdjb21wb25lbnQgb3IgeW91IG1heSBoYXZlIGFjY2lkZW50YWxseSB0cmllZCB0byByZW5kZXIgYW4gZWxlbWVudCAnICtcbiAgICAgICAgJ3dob3NlIHR5cGUgaXMgYSBmdW5jdGlvbiB0aGF0IGlzblxcJ3QgYSBSZWFjdCBjb21wb25lbnQuJyxcbiAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnXG4gICAgICApIDogbnVsbCk7XG4gICAgfVxuXG4gICAgLy8gVGhlc2Ugc2hvdWxkIGJlIHNldCB1cCBpbiB0aGUgY29uc3RydWN0b3IsIGJ1dCBhcyBhIGNvbnZlbmllbmNlIGZvclxuICAgIC8vIHNpbXBsZXIgY2xhc3MgYWJzdHJhY3Rpb25zLCB3ZSBzZXQgdGhlbSB1cCBhZnRlciB0aGUgZmFjdC5cbiAgICBpbnN0LnByb3BzID0gcHVibGljUHJvcHM7XG4gICAgaW5zdC5jb250ZXh0ID0gcHVibGljQ29udGV4dDtcbiAgICBpbnN0LnJlZnMgPSBlbXB0eU9iamVjdDtcblxuICAgIHRoaXMuX2luc3RhbmNlID0gaW5zdDtcblxuICAgIC8vIFN0b3JlIGEgcmVmZXJlbmNlIGZyb20gdGhlIGluc3RhbmNlIGJhY2sgdG8gdGhlIGludGVybmFsIHJlcHJlc2VudGF0aW9uXG4gICAgUmVhY3RJbnN0YW5jZU1hcC5zZXQoaW5zdCwgdGhpcyk7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB0aGlzLl93YXJuSWZDb250ZXh0c0RpZmZlcih0aGlzLl9jdXJyZW50RWxlbWVudC5fY29udGV4dCwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgLy8gU2luY2UgcGxhaW4gSlMgY2xhc3NlcyBhcmUgZGVmaW5lZCB3aXRob3V0IGFueSBzcGVjaWFsIGluaXRpYWxpemF0aW9uXG4gICAgICAvLyBsb2dpYywgd2UgY2FuIG5vdCBjYXRjaCBjb21tb24gZXJyb3JzIGVhcmx5LiBUaGVyZWZvcmUsIHdlIGhhdmUgdG9cbiAgICAgIC8vIGNhdGNoIHRoZW0gaGVyZSwgYXQgaW5pdGlhbGl6YXRpb24gdGltZSwgaW5zdGVhZC5cbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAhaW5zdC5nZXRJbml0aWFsU3RhdGUgfHxcbiAgICAgICAgaW5zdC5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQsXG4gICAgICAgICdnZXRJbml0aWFsU3RhdGUgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gJyArXG4gICAgICAgICdUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuICcgK1xuICAgICAgICAnRGlkIHlvdSBtZWFuIHRvIGRlZmluZSBhIHN0YXRlIHByb3BlcnR5IGluc3RlYWQ/JyxcbiAgICAgICAgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50J1xuICAgICAgKSA6IG51bGwpO1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICFpbnN0LmdldERlZmF1bHRQcm9wcyB8fFxuICAgICAgICBpbnN0LmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCxcbiAgICAgICAgJ2dldERlZmF1bHRQcm9wcyB3YXMgZGVmaW5lZCBvbiAlcywgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzLiAnICtcbiAgICAgICAgJ1RoaXMgaXMgb25seSBzdXBwb3J0ZWQgZm9yIGNsYXNzZXMgY3JlYXRlZCB1c2luZyBSZWFjdC5jcmVhdGVDbGFzcy4gJyArXG4gICAgICAgICdVc2UgYSBzdGF0aWMgcHJvcGVydHkgdG8gZGVmaW5lIGRlZmF1bHRQcm9wcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXMuZ2V0TmFtZSgpIHx8ICdhIGNvbXBvbmVudCdcbiAgICAgICkgOiBudWxsKTtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAhaW5zdC5wcm9wVHlwZXMsXG4gICAgICAgICdwcm9wVHlwZXMgd2FzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMuIFVzZSBhIHN0YXRpYyAnICtcbiAgICAgICAgJ3Byb3BlcnR5IHRvIGRlZmluZSBwcm9wVHlwZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzLmdldE5hbWUoKSB8fCAnYSBjb21wb25lbnQnXG4gICAgICApIDogbnVsbCk7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgIWluc3QuY29udGV4dFR5cGVzLFxuICAgICAgICAnY29udGV4dFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSAnICtcbiAgICAgICAgJ3N0YXRpYyBwcm9wZXJ0eSB0byBkZWZpbmUgY29udGV4dFR5cGVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50J1xuICAgICAgKSA6IG51bGwpO1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgIHR5cGVvZiBpbnN0LmNvbXBvbmVudFNob3VsZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArXG4gICAgICAgICdjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyAnICtcbiAgICAgICAgJ1RoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyAnICtcbiAgICAgICAgJ2V4cGVjdGVkIHRvIHJldHVybiBhIHZhbHVlLicsXG4gICAgICAgICh0aGlzLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKVxuICAgICAgKSA6IG51bGwpO1xuICAgIH1cblxuICAgIHZhciBpbml0aWFsU3RhdGUgPSBpbnN0LnN0YXRlO1xuICAgIGlmIChpbml0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaW5zdC5zdGF0ZSA9IGluaXRpYWxTdGF0ZSA9IG51bGw7XG4gICAgfVxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpLFxuICAgICAgJyVzLnN0YXRlOiBtdXN0IGJlIHNldCB0byBhbiBvYmplY3Qgb3IgbnVsbCcsXG4gICAgICB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnXG4gICAgKSA6IGludmFyaWFudCh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpKSk7XG5cbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgdmFyIGNoaWxkQ29udGV4dDtcbiAgICB2YXIgcmVuZGVyZWRFbGVtZW50O1xuXG4gICAgdmFyIHByZXZpb3VzbHlNb3VudGluZyA9IFJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseU1vdW50aW5nSW5zdGFuY2U7XG4gICAgUmVhY3RMaWZlQ3ljbGUuY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZSA9IHRoaXM7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxNb3VudCkge1xuICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgICAvLyBXaGVuIG1vdW50aW5nLCBjYWxscyB0byBgc2V0U3RhdGVgIGJ5IGBjb21wb25lbnRXaWxsTW91bnRgIHdpbGwgc2V0XG4gICAgICAgIC8vIGB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZWAgd2l0aG91dCB0cmlnZ2VyaW5nIGEgcmUtcmVuZGVyLlxuICAgICAgICBpZiAodGhpcy5fcGVuZGluZ1N0YXRlUXVldWUpIHtcbiAgICAgICAgICBpbnN0LnN0YXRlID0gdGhpcy5fcHJvY2Vzc1BlbmRpbmdTdGF0ZShpbnN0LnByb3BzLCBpbnN0LmNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoaWxkQ29udGV4dCA9IHRoaXMuX2dldFZhbGlkYXRlZENoaWxkQ29udGV4dChjb250ZXh0KTtcbiAgICAgIHJlbmRlcmVkRWxlbWVudCA9IHRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudChjaGlsZENvbnRleHQpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBSZWFjdExpZmVDeWNsZS5jdXJyZW50bHlNb3VudGluZ0luc3RhbmNlID0gcHJldmlvdXNseU1vdW50aW5nO1xuICAgIH1cblxuICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gdGhpcy5faW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChcbiAgICAgIHJlbmRlcmVkRWxlbWVudCxcbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUgLy8gVGhlIHdyYXBwaW5nIHR5cGVcbiAgICApO1xuXG4gICAgdmFyIG1hcmt1cCA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LFxuICAgICAgcm9vdElELFxuICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICB0aGlzLl9tZXJnZUNoaWxkQ29udGV4dChjb250ZXh0LCBjaGlsZENvbnRleHQpXG4gICAgKTtcbiAgICBpZiAoaW5zdC5jb21wb25lbnREaWRNb3VudCkge1xuICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShpbnN0LmNvbXBvbmVudERpZE1vdW50LCBpbnN0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFya3VwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSBgbW91bnRDb21wb25lbnRgLlxuICAgKlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuXG4gICAgaWYgKGluc3QuY29tcG9uZW50V2lsbFVubW91bnQpIHtcbiAgICAgIHZhciBwcmV2aW91c2x5VW5tb3VudGluZyA9IFJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseVVubW91bnRpbmdJbnN0YW5jZTtcbiAgICAgIFJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseVVubW91bnRpbmdJbnN0YW5jZSA9IHRoaXM7XG4gICAgICB0cnkge1xuICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdExpZmVDeWNsZS5jdXJyZW50bHlVbm1vdW50aW5nSW5zdGFuY2UgPSBwcmV2aW91c2x5VW5tb3VudGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudCh0aGlzLl9yZW5kZXJlZENvbXBvbmVudCk7XG4gICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSBudWxsO1xuXG4gICAgLy8gUmVzZXQgcGVuZGluZyBmaWVsZHNcbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcblxuICAgIC8vIFRoZXNlIGZpZWxkcyBkbyBub3QgcmVhbGx5IG5lZWQgdG8gYmUgcmVzZXQgc2luY2UgdGhpcyBvYmplY3QgaXMgbm9cbiAgICAvLyBsb25nZXIgYWNjZXNzaWJsZS5cbiAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcblxuICAgIC8vIERlbGV0ZSB0aGUgcmVmZXJlbmNlIGZyb20gdGhlIGluc3RhbmNlIHRvIHRoaXMgaW50ZXJuYWwgcmVwcmVzZW50YXRpb25cbiAgICAvLyB3aGljaCBhbGxvdyB0aGUgaW50ZXJuYWxzIHRvIGJlIHByb3Blcmx5IGNsZWFuZWQgdXAgZXZlbiBpZiB0aGUgdXNlclxuICAgIC8vIGxlYWtzIGEgcmVmZXJlbmNlIHRvIHRoZSBwdWJsaWMgaW5zdGFuY2UuXG4gICAgUmVhY3RJbnN0YW5jZU1hcC5yZW1vdmUoaW5zdCk7XG5cbiAgICAvLyBTb21lIGV4aXN0aW5nIGNvbXBvbmVudHMgcmVseSBvbiBpbnN0LnByb3BzIGV2ZW4gYWZ0ZXIgdGhleSd2ZSBiZWVuXG4gICAgLy8gZGVzdHJveWVkIChpbiBldmVudCBoYW5kbGVycykuXG4gICAgLy8gVE9ETzogaW5zdC5wcm9wcyA9IG51bGw7XG4gICAgLy8gVE9ETzogaW5zdC5zdGF0ZSA9IG51bGw7XG4gICAgLy8gVE9ETzogaW5zdC5jb250ZXh0ID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogU2NoZWR1bGUgYSBwYXJ0aWFsIHVwZGF0ZSB0byB0aGUgcHJvcHMuIE9ubHkgdXNlZCBmb3IgaW50ZXJuYWwgdGVzdGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxQcm9wcyBTdWJzZXQgb2YgdGhlIG5leHQgcHJvcHMuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgcHJvcHMgYXJlIHVwZGF0ZWQuXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9zZXRQcm9wc0ludGVybmFsOiBmdW5jdGlvbihwYXJ0aWFsUHJvcHMsIGNhbGxiYWNrKSB7XG4gICAgLy8gVGhpcyBpcyBhIGRlb3B0aW1pemVkIHBhdGguIFdlIG9wdGltaXplIGZvciBhbHdheXMgaGF2aW5nIGFuIGVsZW1lbnQuXG4gICAgLy8gVGhpcyBjcmVhdGVzIGFuIGV4dHJhIGludGVybmFsIGVsZW1lbnQuXG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLl9wZW5kaW5nRWxlbWVudCB8fCB0aGlzLl9jdXJyZW50RWxlbWVudDtcbiAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VQcm9wcyhcbiAgICAgIGVsZW1lbnQsXG4gICAgICBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMsIHBhcnRpYWxQcm9wcylcbiAgICApO1xuICAgIFJlYWN0VXBkYXRlcy5lbnF1ZXVlVXBkYXRlKHRoaXMsIGNhbGxiYWNrKTtcbiAgfSxcblxuICAvKipcbiAgICogRmlsdGVycyB0aGUgY29udGV4dCBvYmplY3QgdG8gb25seSBjb250YWluIGtleXMgc3BlY2lmaWVkIGluXG4gICAqIGBjb250ZXh0VHlwZXNgXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4gez9vYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbWFza0NvbnRleHQ6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICB2YXIgbWFza2VkQ29udGV4dCA9IG51bGw7XG4gICAgLy8gVGhpcyByZWFsbHkgc2hvdWxkIGJlIGdldHRpbmcgdGhlIGNvbXBvbmVudCBjbGFzcyBmb3IgdGhlIGVsZW1lbnQsXG4gICAgLy8gYnV0IHdlIGtub3cgdGhhdCB3ZSdyZSBub3QgZ29pbmcgdG8gbmVlZCBpdCBmb3IgYnVpbHQtaW5zLlxuICAgIGlmICh0eXBlb2YgdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBlbXB0eU9iamVjdDtcbiAgICB9XG4gICAgdmFyIGNvbnRleHRUeXBlcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUuY29udGV4dFR5cGVzO1xuICAgIGlmICghY29udGV4dFR5cGVzKSB7XG4gICAgICByZXR1cm4gZW1wdHlPYmplY3Q7XG4gICAgfVxuICAgIG1hc2tlZENvbnRleHQgPSB7fTtcbiAgICBmb3IgKHZhciBjb250ZXh0TmFtZSBpbiBjb250ZXh0VHlwZXMpIHtcbiAgICAgIG1hc2tlZENvbnRleHRbY29udGV4dE5hbWVdID0gY29udGV4dFtjb250ZXh0TmFtZV07XG4gICAgfVxuICAgIHJldHVybiBtYXNrZWRDb250ZXh0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaWx0ZXJzIHRoZSBjb250ZXh0IG9iamVjdCB0byBvbmx5IGNvbnRhaW4ga2V5cyBzcGVjaWZpZWQgaW5cbiAgICogYGNvbnRleHRUeXBlc2AsIGFuZCBhc3NlcnRzIHRoYXQgdGhleSBhcmUgdmFsaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4gez9vYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvY2Vzc0NvbnRleHQ6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICB2YXIgbWFza2VkQ29udGV4dCA9IHRoaXMuX21hc2tDb250ZXh0KGNvbnRleHQpO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHZhciBDb21wb25lbnQgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5nZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQoXG4gICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50XG4gICAgICApO1xuICAgICAgaWYgKENvbXBvbmVudC5jb250ZXh0VHlwZXMpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tQcm9wVHlwZXMoXG4gICAgICAgICAgQ29tcG9uZW50LmNvbnRleHRUeXBlcyxcbiAgICAgICAgICBtYXNrZWRDb250ZXh0LFxuICAgICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWFza2VkQ29udGV4dDtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGN1cnJlbnRDb250ZXh0XG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRWYWxpZGF0ZWRDaGlsZENvbnRleHQ6IGZ1bmN0aW9uKGN1cnJlbnRDb250ZXh0KSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICB2YXIgY2hpbGRDb250ZXh0ID0gaW5zdC5nZXRDaGlsZENvbnRleHQgJiYgaW5zdC5nZXRDaGlsZENvbnRleHQoKTtcbiAgICBpZiAoY2hpbGRDb250ZXh0KSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgaW5zdC5jb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyA9PT0gJ29iamVjdCcsXG4gICAgICAgICclcy5nZXRDaGlsZENvbnRleHQoKTogY2hpbGRDb250ZXh0VHlwZXMgbXVzdCBiZSBkZWZpbmVkIGluIG9yZGVyIHRvICcgK1xuICAgICAgICAndXNlIGdldENoaWxkQ29udGV4dCgpLicsXG4gICAgICAgIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdcbiAgICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIGluc3QuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMgPT09ICdvYmplY3QnKSk7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrUHJvcFR5cGVzKFxuICAgICAgICAgIGluc3QuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMsXG4gICAgICAgICAgY2hpbGRDb250ZXh0LFxuICAgICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY2hpbGRDb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBuYW1lIGluIGNoaWxkQ29udGV4dCkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIG5hbWUgaW4gaW5zdC5jb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyxcbiAgICAgICAgICAnJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGtleSBcIiVzXCIgaXMgbm90IGRlZmluZWQgaW4gY2hpbGRDb250ZXh0VHlwZXMuJyxcbiAgICAgICAgICB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnLFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgKSA6IGludmFyaWFudChuYW1lIGluIGluc3QuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGlsZENvbnRleHQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIF9tZXJnZUNoaWxkQ29udGV4dDogZnVuY3Rpb24oY3VycmVudENvbnRleHQsIGNoaWxkQ29udGV4dCkge1xuICAgIGlmIChjaGlsZENvbnRleHQpIHtcbiAgICAgIHJldHVybiBhc3NpZ24oe30sIGN1cnJlbnRDb250ZXh0LCBjaGlsZENvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudENvbnRleHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFByb2Nlc3NlcyBwcm9wcyBieSBzZXR0aW5nIGRlZmF1bHQgdmFsdWVzIGZvciB1bnNwZWNpZmllZCBwcm9wcyBhbmRcbiAgICogYXNzZXJ0aW5nIHRoYXQgdGhlIHByb3BzIGFyZSB2YWxpZC4gRG9lcyBub3QgbXV0YXRlIGl0cyBhcmd1bWVudDsgcmV0dXJuc1xuICAgKiBhIG5ldyBwcm9wcyBvYmplY3Qgd2l0aCBkZWZhdWx0cyBtZXJnZWQgaW4uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXdQcm9wc1xuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvY2Vzc1Byb3BzOiBmdW5jdGlvbihuZXdQcm9wcykge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHZhciBDb21wb25lbnQgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5nZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQoXG4gICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50XG4gICAgICApO1xuICAgICAgaWYgKENvbXBvbmVudC5wcm9wVHlwZXMpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tQcm9wVHlwZXMoXG4gICAgICAgICAgQ29tcG9uZW50LnByb3BUeXBlcyxcbiAgICAgICAgICBuZXdQcm9wcyxcbiAgICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3BcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld1Byb3BzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBc3NlcnQgdGhhdCB0aGUgcHJvcHMgYXJlIHZhbGlkXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wVHlwZXMgTWFwIG9mIHByb3AgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jaGVja1Byb3BUeXBlczogZnVuY3Rpb24ocHJvcFR5cGVzLCBwcm9wcywgbG9jYXRpb24pIHtcbiAgICAvLyBUT0RPOiBTdG9wIHZhbGlkYXRpbmcgcHJvcCB0eXBlcyBoZXJlIGFuZCBvbmx5IHVzZSB0aGUgZWxlbWVudFxuICAgIC8vIHZhbGlkYXRpb24uXG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSB0aGlzLmdldE5hbWUoKTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICAgIHR5cGVvZiBwcm9wVHlwZXNbcHJvcE5hbWVdID09PSAnZnVuY3Rpb24nLFxuICAgICAgICAgICAgJyVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5ICcgK1xuICAgICAgICAgICAgJ2Zyb20gUmVhY3QuUHJvcFR5cGVzLicsXG4gICAgICAgICAgICBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsXG4gICAgICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sXG4gICAgICAgICAgICBwcm9wTmFtZVxuICAgICAgICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIHByb3BUeXBlc1twcm9wTmFtZV0gPT09ICdmdW5jdGlvbicpKTtcbiAgICAgICAgICBlcnJvciA9IHByb3BUeXBlc1twcm9wTmFtZV0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIC8vIFdlIG1heSB3YW50IHRvIGV4dGVuZCB0aGlzIGxvZ2ljIGZvciBzaW1pbGFyIGVycm9ycyBpblxuICAgICAgICAgIC8vIFJlYWN0LnJlbmRlciBjYWxscywgc28gSSdtIGFic3RyYWN0aW5nIGl0IGF3YXkgaW50b1xuICAgICAgICAgIC8vIGEgZnVuY3Rpb24gdG8gbWluaW1pemUgcmVmYWN0b3JpbmcgaW4gdGhlIGZ1dHVyZVxuICAgICAgICAgIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSh0aGlzKTtcblxuICAgICAgICAgIGlmIChsb2NhdGlvbiA9PT0gUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wKSB7XG4gICAgICAgICAgICAvLyBQcmVmYWNlIGdpdmVzIHVzIHNvbWV0aGluZyB0byBibGFja2xpc3QgaW4gd2FybmluZyBtb2R1bGVcbiAgICAgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICVzJXMnLFxuICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICBhZGRlbmR1bVxuICAgICAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICdGYWlsZWQgQ29udGV4dCBUeXBlczogJXMlcycsXG4gICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgIGFkZGVuZHVtXG4gICAgICAgICAgICApIDogbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgbmV4dENvbnRleHQpIHtcbiAgICB2YXIgcHJldkVsZW1lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudDtcbiAgICB2YXIgcHJldkNvbnRleHQgPSB0aGlzLl9jb250ZXh0O1xuXG4gICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBudWxsO1xuXG4gICAgdGhpcy51cGRhdGVDb21wb25lbnQoXG4gICAgICB0cmFuc2FjdGlvbixcbiAgICAgIHByZXZFbGVtZW50LFxuICAgICAgbmV4dEVsZW1lbnQsXG4gICAgICBwcmV2Q29udGV4dCxcbiAgICAgIG5leHRDb250ZXh0XG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogSWYgYW55IG9mIGBfcGVuZGluZ0VsZW1lbnRgLCBgX3BlbmRpbmdTdGF0ZVF1ZXVlYCwgb3IgYF9wZW5kaW5nRm9yY2VVcGRhdGVgXG4gICAqIGlzIHNldCwgdXBkYXRlIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwZXJmb3JtVXBkYXRlSWZOZWNlc3Nhcnk6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKHRoaXMuX3BlbmRpbmdFbGVtZW50ICE9IG51bGwpIHtcbiAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KFxuICAgICAgICB0aGlzLFxuICAgICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCB8fCB0aGlzLl9jdXJyZW50RWxlbWVudCxcbiAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgIHRoaXMuX2NvbnRleHRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlICE9PSBudWxsIHx8IHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFByb3BzKFxuICAgICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQsXG4gICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50LFxuICAgICAgICB0aGlzLl9jb250ZXh0LFxuICAgICAgICB0aGlzLl9jb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ29tcGFyZSB0d28gY29udGV4dHMsIHdhcm5pbmcgaWYgdGhleSBhcmUgZGlmZmVyZW50XG4gICAqIFRPRE86IFJlbW92ZSB0aGlzIGNoZWNrIHdoZW4gb3duZXItY29udGV4dCBpcyByZW1vdmVkXG4gICAqL1xuICAgX3dhcm5JZkNvbnRleHRzRGlmZmVyOiBmdW5jdGlvbihvd25lckJhc2VkQ29udGV4dCwgcGFyZW50QmFzZWRDb250ZXh0KSB7XG4gICAgb3duZXJCYXNlZENvbnRleHQgPSB0aGlzLl9tYXNrQ29udGV4dChvd25lckJhc2VkQ29udGV4dCk7XG4gICAgcGFyZW50QmFzZWRDb250ZXh0ID0gdGhpcy5fbWFza0NvbnRleHQocGFyZW50QmFzZWRDb250ZXh0KTtcbiAgICB2YXIgcGFyZW50S2V5cyA9IE9iamVjdC5rZXlzKHBhcmVudEJhc2VkQ29udGV4dCkuc29ydCgpO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcGFyZW50S2V5c1tpXTtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICBvd25lckJhc2VkQ29udGV4dFtrZXldID09PSBwYXJlbnRCYXNlZENvbnRleHRba2V5XSxcbiAgICAgICAgJ293bmVyLWJhc2VkIGFuZCBwYXJlbnQtYmFzZWQgY29udGV4dHMgZGlmZmVyICcgICtcbiAgICAgICAgJyh2YWx1ZXM6IGAlc2AgdnMgYCVzYCkgZm9yIGtleSAoJXMpIHdoaWxlIG1vdW50aW5nICVzICcgK1xuICAgICAgICAnKHNlZTogaHR0cDovL2ZiLm1lL3JlYWN0LWNvbnRleHQtYnktcGFyZW50KScsXG4gICAgICAgIG93bmVyQmFzZWRDb250ZXh0W2tleV0sXG4gICAgICAgIHBhcmVudEJhc2VkQ29udGV4dFtrZXldLFxuICAgICAgICBrZXksXG4gICAgICAgIGRpc3BsYXlOYW1lXG4gICAgICApIDogbnVsbCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGFuIHVwZGF0ZSB0byBhIG1vdW50ZWQgY29tcG9uZW50LiBUaGUgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyBhbmRcbiAgICogc2hvdWxkQ29tcG9uZW50VXBkYXRlIG1ldGhvZHMgYXJlIGNhbGxlZCwgdGhlbiAoYXNzdW1pbmcgdGhlIHVwZGF0ZSBpc24ndFxuICAgKiBza2lwcGVkKSB0aGUgcmVtYWluaW5nIHVwZGF0ZSBsaWZlY3ljbGUgbWV0aG9kcyBhcmUgY2FsbGVkIGFuZCB0aGUgRE9NXG4gICAqIHJlcHJlc2VudGF0aW9uIGlzIHVwZGF0ZWQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoaXMgaW1wbGVtZW50cyBSZWFjdCdzIHJlbmRlcmluZyBhbmQgcmVjb25jaWxpYXRpb24gYWxnb3JpdGhtLlxuICAgKiBTb3BoaXN0aWNhdGVkIGNsaWVudHMgbWF5IHdpc2ggdG8gb3ZlcnJpZGUgdGhpcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gcHJldlBhcmVudEVsZW1lbnRcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRQYXJlbnRFbGVtZW50XG4gICAqIEBpbnRlcm5hbFxuICAgKiBAb3ZlcnJpZGFibGVcbiAgICovXG4gIHVwZGF0ZUNvbXBvbmVudDogZnVuY3Rpb24oXG4gICAgdHJhbnNhY3Rpb24sXG4gICAgcHJldlBhcmVudEVsZW1lbnQsXG4gICAgbmV4dFBhcmVudEVsZW1lbnQsXG4gICAgcHJldlVubWFza2VkQ29udGV4dCxcbiAgICBuZXh0VW5tYXNrZWRDb250ZXh0XG4gICkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG5cbiAgICB2YXIgbmV4dENvbnRleHQgPSBpbnN0LmNvbnRleHQ7XG4gICAgdmFyIG5leHRQcm9wcyA9IGluc3QucHJvcHM7XG5cbiAgICAvLyBEaXN0aW5ndWlzaCBiZXR3ZWVuIGEgcHJvcHMgdXBkYXRlIHZlcnN1cyBhIHNpbXBsZSBzdGF0ZSB1cGRhdGVcbiAgICBpZiAocHJldlBhcmVudEVsZW1lbnQgIT09IG5leHRQYXJlbnRFbGVtZW50KSB7XG4gICAgICBuZXh0Q29udGV4dCA9IHRoaXMuX3Byb2Nlc3NDb250ZXh0KG5leHRQYXJlbnRFbGVtZW50Ll9jb250ZXh0KTtcbiAgICAgIG5leHRQcm9wcyA9IHRoaXMuX3Byb2Nlc3NQcm9wcyhuZXh0UGFyZW50RWxlbWVudC5wcm9wcyk7XG5cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgaWYgKG5leHRVbm1hc2tlZENvbnRleHQgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuX3dhcm5JZkNvbnRleHRzRGlmZmVyKFxuICAgICAgICAgICAgbmV4dFBhcmVudEVsZW1lbnQuX2NvbnRleHQsXG4gICAgICAgICAgICBuZXh0VW5tYXNrZWRDb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBbiB1cGRhdGUgaGVyZSB3aWxsIHNjaGVkdWxlIGFuIHVwZGF0ZSBidXQgaW1tZWRpYXRlbHkgc2V0XG4gICAgICAvLyBfcGVuZGluZ1N0YXRlUXVldWUgd2hpY2ggd2lsbCBlbnN1cmUgdGhhdCBhbnkgc3RhdGUgdXBkYXRlcyBnZXRzXG4gICAgICAvLyBpbW1lZGlhdGVseSByZWNvbmNpbGVkIGluc3RlYWQgb2Ygd2FpdGluZyBmb3IgdGhlIG5leHQgYmF0Y2guXG5cbiAgICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMpIHtcbiAgICAgICAgaW5zdC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBuZXh0U3RhdGUgPSB0aGlzLl9wcm9jZXNzUGVuZGluZ1N0YXRlKG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuXG4gICAgdmFyIHNob3VsZFVwZGF0ZSA9XG4gICAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgfHxcbiAgICAgICFpbnN0LnNob3VsZENvbXBvbmVudFVwZGF0ZSB8fFxuICAgICAgaW5zdC5zaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KTtcblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICB0eXBlb2Ygc2hvdWxkVXBkYXRlICE9PSAndW5kZWZpbmVkJyxcbiAgICAgICAgJyVzLnNob3VsZENvbXBvbmVudFVwZGF0ZSgpOiBSZXR1cm5lZCB1bmRlZmluZWQgaW5zdGVhZCBvZiBhICcgK1xuICAgICAgICAnYm9vbGVhbiB2YWx1ZS4gTWFrZSBzdXJlIHRvIHJldHVybiB0cnVlIG9yIGZhbHNlLicsXG4gICAgICAgIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdcbiAgICAgICkgOiBudWxsKTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcbiAgICAgIC8vIFdpbGwgc2V0IGB0aGlzLnByb3BzYCwgYHRoaXMuc3RhdGVgIGFuZCBgdGhpcy5jb250ZXh0YC5cbiAgICAgIHRoaXMuX3BlcmZvcm1Db21wb25lbnRVcGRhdGUoXG4gICAgICAgIG5leHRQYXJlbnRFbGVtZW50LFxuICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgIG5leHRTdGF0ZSxcbiAgICAgICAgbmV4dENvbnRleHQsXG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICBuZXh0VW5tYXNrZWRDb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBpdCdzIGRldGVybWluZWQgdGhhdCBhIGNvbXBvbmVudCBzaG91bGQgbm90IHVwZGF0ZSwgd2Ugc3RpbGwgd2FudFxuICAgICAgLy8gdG8gc2V0IHByb3BzIGFuZCBzdGF0ZSBidXQgd2Ugc2hvcnRjdXQgdGhlIHJlc3Qgb2YgdGhlIHVwZGF0ZS5cbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dFBhcmVudEVsZW1lbnQ7XG4gICAgICB0aGlzLl9jb250ZXh0ID0gbmV4dFVubWFza2VkQ29udGV4dDtcbiAgICAgIGluc3QucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgICBpbnN0LnN0YXRlID0gbmV4dFN0YXRlO1xuICAgICAgaW5zdC5jb250ZXh0ID0gbmV4dENvbnRleHQ7XG4gICAgfVxuICB9LFxuXG4gIF9wcm9jZXNzUGVuZGluZ1N0YXRlOiBmdW5jdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgdmFyIHF1ZXVlID0gdGhpcy5fcGVuZGluZ1N0YXRlUXVldWU7XG4gICAgdmFyIHJlcGxhY2UgPSB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlO1xuICAgIHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG5cbiAgICBpZiAoIXF1ZXVlKSB7XG4gICAgICByZXR1cm4gaW5zdC5zdGF0ZTtcbiAgICB9XG5cbiAgICBpZiAocmVwbGFjZSAmJiBxdWV1ZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBxdWV1ZVswXTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dFN0YXRlID0gYXNzaWduKHt9LCByZXBsYWNlID8gcXVldWVbMF0gOiBpbnN0LnN0YXRlKTtcbiAgICBmb3IgKHZhciBpID0gcmVwbGFjZSA/IDEgOiAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJ0aWFsID0gcXVldWVbaV07XG4gICAgICBhc3NpZ24oXG4gICAgICAgIG5leHRTdGF0ZSxcbiAgICAgICAgdHlwZW9mIHBhcnRpYWwgPT09ICdmdW5jdGlvbicgP1xuICAgICAgICAgIHBhcnRpYWwuY2FsbChpbnN0LCBuZXh0U3RhdGUsIHByb3BzLCBjb250ZXh0KSA6XG4gICAgICAgICAgcGFydGlhbFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dFN0YXRlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBNZXJnZXMgbmV3IHByb3BzIGFuZCBzdGF0ZSwgbm90aWZpZXMgZGVsZWdhdGUgbWV0aG9kcyBvZiB1cGRhdGUgYW5kXG4gICAqIHBlcmZvcm1zIHVwZGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50IE5leHQgZWxlbWVudFxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzIE5leHQgcHVibGljIG9iamVjdCB0byBzZXQgYXMgcHJvcGVydGllcy5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0U3RhdGUgTmV4dCBvYmplY3QgdG8gc2V0IGFzIHN0YXRlLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0IE5leHQgcHVibGljIG9iamVjdCB0byBzZXQgYXMgY29udGV4dC5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0gez9vYmplY3R9IHVubWFza2VkQ29udGV4dFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BlcmZvcm1Db21wb25lbnRVcGRhdGU6IGZ1bmN0aW9uKFxuICAgIG5leHRFbGVtZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICBuZXh0U3RhdGUsXG4gICAgbmV4dENvbnRleHQsXG4gICAgdHJhbnNhY3Rpb24sXG4gICAgdW5tYXNrZWRDb250ZXh0XG4gICkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG5cbiAgICB2YXIgcHJldlByb3BzID0gaW5zdC5wcm9wcztcbiAgICB2YXIgcHJldlN0YXRlID0gaW5zdC5zdGF0ZTtcbiAgICB2YXIgcHJldkNvbnRleHQgPSBpbnN0LmNvbnRleHQ7XG5cbiAgICBpZiAoaW5zdC5jb21wb25lbnRXaWxsVXBkYXRlKSB7XG4gICAgICBpbnN0LmNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KTtcbiAgICB9XG5cbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgIHRoaXMuX2NvbnRleHQgPSB1bm1hc2tlZENvbnRleHQ7XG4gICAgaW5zdC5wcm9wcyA9IG5leHRQcm9wcztcbiAgICBpbnN0LnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIGluc3QuY29udGV4dCA9IG5leHRDb250ZXh0O1xuXG4gICAgdGhpcy5fdXBkYXRlUmVuZGVyZWRDb21wb25lbnQodHJhbnNhY3Rpb24sIHVubWFza2VkQ29udGV4dCk7XG5cbiAgICBpZiAoaW5zdC5jb21wb25lbnREaWRVcGRhdGUpIHtcbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoXG4gICAgICAgIGluc3QuY29tcG9uZW50RGlkVXBkYXRlLmJpbmQoaW5zdCwgcHJldlByb3BzLCBwcmV2U3RhdGUsIHByZXZDb250ZXh0KSxcbiAgICAgICAgaW5zdFxuICAgICAgKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGwgdGhlIGNvbXBvbmVudCdzIGByZW5kZXJgIG1ldGhvZCBhbmQgdXBkYXRlIHRoZSBET00gYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICBfdXBkYXRlUmVuZGVyZWRDb21wb25lbnQ6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIHByZXZDb21wb25lbnRJbnN0YW5jZSA9IHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50O1xuICAgIHZhciBwcmV2UmVuZGVyZWRFbGVtZW50ID0gcHJldkNvbXBvbmVudEluc3RhbmNlLl9jdXJyZW50RWxlbWVudDtcbiAgICB2YXIgY2hpbGRDb250ZXh0ID0gdGhpcy5fZ2V0VmFsaWRhdGVkQ2hpbGRDb250ZXh0KCk7XG4gICAgdmFyIG5leHRSZW5kZXJlZEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQoY2hpbGRDb250ZXh0KTtcbiAgICBpZiAoc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldlJlbmRlcmVkRWxlbWVudCwgbmV4dFJlbmRlcmVkRWxlbWVudCkpIHtcbiAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KFxuICAgICAgICBwcmV2Q29tcG9uZW50SW5zdGFuY2UsXG4gICAgICAgIG5leHRSZW5kZXJlZEVsZW1lbnQsXG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICB0aGlzLl9tZXJnZUNoaWxkQ29udGV4dChjb250ZXh0LCBjaGlsZENvbnRleHQpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGVzZSB0d28gSURzIGFyZSBhY3R1YWxseSB0aGUgc2FtZSEgQnV0IG5vdGhpbmcgc2hvdWxkIHJlbHkgb24gdGhhdC5cbiAgICAgIHZhciB0aGlzSUQgPSB0aGlzLl9yb290Tm9kZUlEO1xuICAgICAgdmFyIHByZXZDb21wb25lbnRJRCA9IHByZXZDb21wb25lbnRJbnN0YW5jZS5fcm9vdE5vZGVJRDtcbiAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHByZXZDb21wb25lbnRJbnN0YW5jZSk7XG5cbiAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gdGhpcy5faW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChcbiAgICAgICAgbmV4dFJlbmRlcmVkRWxlbWVudCxcbiAgICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZVxuICAgICAgKTtcbiAgICAgIHZhciBuZXh0TWFya3VwID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KFxuICAgICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCxcbiAgICAgICAgdGhpc0lELFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgdGhpcy5fbWVyZ2VDaGlsZENvbnRleHQoY29udGV4dCwgY2hpbGRDb250ZXh0KVxuICAgICAgKTtcbiAgICAgIHRoaXMuX3JlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQocHJldkNvbXBvbmVudElELCBuZXh0TWFya3VwKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOiBmdW5jdGlvbihwcmV2Q29tcG9uZW50SUQsIG5leHRNYXJrdXApIHtcbiAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQoXG4gICAgICBwcmV2Q29tcG9uZW50SUQsXG4gICAgICBuZXh0TWFya3VwXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICB2YXIgcmVuZGVyZWRDb21wb25lbnQgPSBpbnN0LnJlbmRlcigpO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIC8vIFdlIGFsbG93IGF1dG8tbW9ja3MgdG8gcHJvY2VlZCBhcyBpZiB0aGV5J3JlIHJldHVybmluZyBudWxsLlxuICAgICAgaWYgKHR5cGVvZiByZW5kZXJlZENvbXBvbmVudCA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICBpbnN0LnJlbmRlci5faXNNb2NrRnVuY3Rpb24pIHtcbiAgICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBiYWQgcHJhY3RpY2UuIENvbnNpZGVyIHdhcm5pbmcgaGVyZSBhbmRcbiAgICAgICAgLy8gZGVwcmVjYXRpbmcgdGhpcyBjb252ZW5pZW5jZS5cbiAgICAgICAgcmVuZGVyZWRDb21wb25lbnQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZW5kZXJlZENvbXBvbmVudDtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQ6IGZ1bmN0aW9uKGNoaWxkQ29udGV4dCkge1xuICAgIHZhciByZW5kZXJlZENvbXBvbmVudDtcbiAgICB2YXIgcHJldmlvdXNDb250ZXh0ID0gUmVhY3RDb250ZXh0LmN1cnJlbnQ7XG4gICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSB0aGlzLl9tZXJnZUNoaWxkQ29udGV4dChcbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9jb250ZXh0LFxuICAgICAgY2hpbGRDb250ZXh0XG4gICAgKTtcbiAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcztcbiAgICB0cnkge1xuICAgICAgcmVuZGVyZWRDb21wb25lbnQgPVxuICAgICAgICB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQoKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSBwcmV2aW91c0NvbnRleHQ7XG4gICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIC8vIFRPRE86IEFuIGBpc1ZhbGlkTm9kZWAgZnVuY3Rpb24gd291bGQgcHJvYmFibHkgYmUgbW9yZSBhcHByb3ByaWF0ZVxuICAgICAgcmVuZGVyZWRDb21wb25lbnQgPT09IG51bGwgfHwgcmVuZGVyZWRDb21wb25lbnQgPT09IGZhbHNlIHx8XG4gICAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocmVuZGVyZWRDb21wb25lbnQpLFxuICAgICAgJyVzLnJlbmRlcigpOiBBIHZhbGlkIFJlYWN0Q29tcG9uZW50IG11c3QgYmUgcmV0dXJuZWQuIFlvdSBtYXkgaGF2ZSAnICtcbiAgICAgICAgJ3JldHVybmVkIHVuZGVmaW5lZCwgYW4gYXJyYXkgb3Igc29tZSBvdGhlciBpbnZhbGlkIG9iamVjdC4nLFxuICAgICAgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50J1xuICAgICkgOiBpbnZhcmlhbnQoLy8gVE9ETzogQW4gYGlzVmFsaWROb2RlYCBmdW5jdGlvbiB3b3VsZCBwcm9iYWJseSBiZSBtb3JlIGFwcHJvcHJpYXRlXG4gICAgcmVuZGVyZWRDb21wb25lbnQgPT09IG51bGwgfHwgcmVuZGVyZWRDb21wb25lbnQgPT09IGZhbHNlIHx8XG4gICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHJlbmRlcmVkQ29tcG9uZW50KSkpO1xuICAgIHJldHVybiByZW5kZXJlZENvbXBvbmVudDtcbiAgfSxcblxuICAvKipcbiAgICogTGF6aWx5IGFsbG9jYXRlcyB0aGUgcmVmcyBvYmplY3QgYW5kIHN0b3JlcyBgY29tcG9uZW50YCBhcyBgcmVmYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiBSZWZlcmVuY2UgbmFtZS5cbiAgICogQHBhcmFtIHtjb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gc3RvcmUgYXMgYHJlZmAuXG4gICAqIEBmaW5hbFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYXR0YWNoUmVmOiBmdW5jdGlvbihyZWYsIGNvbXBvbmVudCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgIHZhciByZWZzID0gaW5zdC5yZWZzID09PSBlbXB0eU9iamVjdCA/IChpbnN0LnJlZnMgPSB7fSkgOiBpbnN0LnJlZnM7XG4gICAgcmVmc1tyZWZdID0gY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGFjaGVzIGEgcmVmZXJlbmNlIG5hbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSB0byBkZXJlZmVyZW5jZS5cbiAgICogQGZpbmFsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkZXRhY2hSZWY6IGZ1bmN0aW9uKHJlZikge1xuICAgIHZhciByZWZzID0gdGhpcy5nZXRQdWJsaWNJbnN0YW5jZSgpLnJlZnM7XG4gICAgZGVsZXRlIHJlZnNbcmVmXTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IGEgdGV4dCBkZXNjcmlwdGlvbiBvZiB0aGUgY29tcG9uZW50IHRoYXQgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgaXRcbiAgICogaW4gZXJyb3IgbWVzc2FnZXMuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5hbWUgb3IgbnVsbC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXROYW1lOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdHlwZSA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gdGhpcy5faW5zdGFuY2UgJiYgdGhpcy5faW5zdGFuY2UuY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGUuZGlzcGxheU5hbWUgfHwgKGNvbnN0cnVjdG9yICYmIGNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lKSB8fFxuICAgICAgdHlwZS5uYW1lIHx8IChjb25zdHJ1Y3RvciAmJiBjb25zdHJ1Y3Rvci5uYW1lKSB8fFxuICAgICAgbnVsbFxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcHVibGljbHkgYWNjZXNzaWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGNvbXBvbmVudCAtIGkuZS4gd2hhdFxuICAgKiBpcyBleHBvc2VkIGJ5IHJlZnMgYW5kIHJldHVybmVkIGJ5IFJlYWN0LnJlbmRlci4gQ2FuIGJlIG51bGwgZm9yIHN0YXRlbGVzc1xuICAgKiBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gdGhlIHB1YmxpYyBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0UHVibGljSW5zdGFuY2U6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgfSxcblxuICAvLyBTdHViXG4gIF9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50OiBudWxsXG5cbn07XG5cblJlYWN0UGVyZi5tZWFzdXJlTWV0aG9kcyhcbiAgUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbixcbiAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JyxcbiAge1xuICAgIG1vdW50Q29tcG9uZW50OiAnbW91bnRDb21wb25lbnQnLFxuICAgIHVwZGF0ZUNvbXBvbmVudDogJ3VwZGF0ZUNvbXBvbmVudCcsXG4gICAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudDogJ19yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQnXG4gIH1cbik7XG5cbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHtcblxuICBNaXhpbjogUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpblxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9PYmplY3QuYXNzaWduXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9PYmplY3QuYXNzaWduLmpzXCIsXCIuL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQuanNcIixcIi4vUmVhY3RDb250ZXh0XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbnRleHQuanNcIixcIi4vUmVhY3RDdXJyZW50T3duZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyLmpzXCIsXCIuL1JlYWN0RWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCIsXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50VmFsaWRhdG9yLmpzXCIsXCIuL1JlYWN0SW5zdGFuY2VNYXBcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5zdGFuY2VNYXAuanNcIixcIi4vUmVhY3RMaWZlQ3ljbGVcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TGlmZUN5Y2xlLmpzXCIsXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE5hdGl2ZUNvbXBvbmVudC5qc1wiLFwiLi9SZWFjdFBlcmZcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UGVyZi5qc1wiLFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanNcIixcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5qc1wiLFwiLi9SZWFjdFJlY29uY2lsZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UmVjb25jaWxlci5qc1wiLFwiLi9SZWFjdFVwZGF0ZXNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0VXBkYXRlcy5qc1wiLFwiLi9lbXB0eU9iamVjdFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZW1wdHlPYmplY3QuanNcIixcIi4vaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIixcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50LmpzXCIsXCIuL3dhcm5pbmdcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3dhcm5pbmcuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbnRleHQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29udGV4dFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKFwiLi9lbXB0eU9iamVjdFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIGRpZFdhcm4gPSBmYWxzZTtcblxuLyoqXG4gKiBLZWVwcyB0cmFjayBvZiB0aGUgY3VycmVudCBjb250ZXh0LlxuICpcbiAqIFRoZSBjb250ZXh0IGlzIGF1dG9tYXRpY2FsbHkgcGFzc2VkIGRvd24gdGhlIGNvbXBvbmVudCBvd25lcnNoaXAgaGllcmFyY2h5XG4gKiBhbmQgaXMgYWNjZXNzaWJsZSB2aWEgYHRoaXMuY29udGV4dGAgb24gUmVhY3RDb21wb3NpdGVDb21wb25lbnRzLlxuICovXG52YXIgUmVhY3RDb250ZXh0ID0ge1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHR5cGUge29iamVjdH1cbiAgICovXG4gIGN1cnJlbnQ6IGVtcHR5T2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUZW1wb3JhcmlseSBleHRlbmRzIHRoZSBjdXJyZW50IGNvbnRleHQgd2hpbGUgZXhlY3V0aW5nIHNjb3BlZENhbGxiYWNrLlxuICAgKlxuICAgKiBBIHR5cGljYWwgdXNlIGNhc2UgbWlnaHQgbG9vayBsaWtlXG4gICAqXG4gICAqICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgKiAgICB2YXIgY2hpbGRyZW4gPSBSZWFjdENvbnRleHQud2l0aENvbnRleHQoe2ZvbzogJ2Zvbyd9LCAoKSA9PiAoXG4gICAqXG4gICAqICAgICkpO1xuICAgKiAgICByZXR1cm4gPGRpdj57Y2hpbGRyZW59PC9kaXY+O1xuICAgKiAgfVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV3Q29udGV4dCBOZXcgY29udGV4dCB0byBtZXJnZSBpbnRvIHRoZSBleGlzdGluZyBjb250ZXh0XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHNjb3BlZENhbGxiYWNrIENhbGxiYWNrIHRvIHJ1biB3aXRoIHRoZSBuZXcgY29udGV4dFxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudHxhcnJheTxSZWFjdENvbXBvbmVudD59XG4gICAqL1xuICB3aXRoQ29udGV4dDogZnVuY3Rpb24obmV3Q29udGV4dCwgc2NvcGVkQ2FsbGJhY2spIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgZGlkV2FybixcbiAgICAgICAgJ3dpdGhDb250ZXh0IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiAnICtcbiAgICAgICAgJ1VzZSBhIHdyYXBwZXIgY29tcG9uZW50IHdpdGggZ2V0Q2hpbGRDb250ZXh0IGluc3RlYWQuJ1xuICAgICAgKSA6IG51bGwpO1xuXG4gICAgICBkaWRXYXJuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0O1xuICAgIHZhciBwcmV2aW91c0NvbnRleHQgPSBSZWFjdENvbnRleHQuY3VycmVudDtcbiAgICBSZWFjdENvbnRleHQuY3VycmVudCA9IGFzc2lnbih7fSwgcHJldmlvdXNDb250ZXh0LCBuZXdDb250ZXh0KTtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gc2NvcGVkQ2FsbGJhY2soKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSBwcmV2aW91c0NvbnRleHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbnRleHQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanNcIixcIi4vZW1wdHlPYmplY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2VtcHR5T2JqZWN0LmpzXCIsXCIuL3dhcm5pbmdcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3dhcm5pbmcuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEN1cnJlbnRPd25lci5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEN1cnJlbnRPd25lclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBLZWVwcyB0cmFjayBvZiB0aGUgY3VycmVudCBvd25lci5cbiAqXG4gKiBUaGUgY3VycmVudCBvd25lciBpcyB0aGUgY29tcG9uZW50IHdobyBzaG91bGQgb3duIGFueSBjb21wb25lbnRzIHRoYXQgYXJlXG4gKiBjdXJyZW50bHkgYmVpbmcgY29uc3RydWN0ZWQuXG4gKlxuICogVGhlIGRlcHRoIGluZGljYXRlIGhvdyBtYW55IGNvbXBvc2l0ZSBjb21wb25lbnRzIGFyZSBhYm92ZSB0aGlzIHJlbmRlciBsZXZlbC5cbiAqL1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0ge1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHR5cGUge1JlYWN0Q29tcG9uZW50fVxuICAgKi9cbiAgY3VycmVudDogbnVsbFxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q3VycmVudE93bmVyO1xuXG59LHt9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCIpO1xuXG52YXIgbWFwT2JqZWN0ID0gcmVxdWlyZShcIi4vbWFwT2JqZWN0XCIpO1xuXG4vKipcbiAqIENyZWF0ZSBhIGZhY3RvcnkgdGhhdCBjcmVhdGVzIEhUTUwgdGFnIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGFnIG5hbWUgKGUuZy4gYGRpdmApLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRE9NRmFjdG9yeSh0YWcpIHtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIHJldHVybiBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeSh0YWcpO1xuICB9XG4gIHJldHVybiBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSh0YWcpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXBwaW5nIGZyb20gc3VwcG9ydGVkIEhUTUwgdGFncyB0byBgUmVhY3RET01Db21wb25lbnRgIGNsYXNzZXMuXG4gKiBUaGlzIGlzIGFsc28gYWNjZXNzaWJsZSB2aWEgYFJlYWN0LkRPTWAuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgUmVhY3RET00gPSBtYXBPYmplY3Qoe1xuICBhOiAnYScsXG4gIGFiYnI6ICdhYmJyJyxcbiAgYWRkcmVzczogJ2FkZHJlc3MnLFxuICBhcmVhOiAnYXJlYScsXG4gIGFydGljbGU6ICdhcnRpY2xlJyxcbiAgYXNpZGU6ICdhc2lkZScsXG4gIGF1ZGlvOiAnYXVkaW8nLFxuICBiOiAnYicsXG4gIGJhc2U6ICdiYXNlJyxcbiAgYmRpOiAnYmRpJyxcbiAgYmRvOiAnYmRvJyxcbiAgYmlnOiAnYmlnJyxcbiAgYmxvY2txdW90ZTogJ2Jsb2NrcXVvdGUnLFxuICBib2R5OiAnYm9keScsXG4gIGJyOiAnYnInLFxuICBidXR0b246ICdidXR0b24nLFxuICBjYW52YXM6ICdjYW52YXMnLFxuICBjYXB0aW9uOiAnY2FwdGlvbicsXG4gIGNpdGU6ICdjaXRlJyxcbiAgY29kZTogJ2NvZGUnLFxuICBjb2w6ICdjb2wnLFxuICBjb2xncm91cDogJ2NvbGdyb3VwJyxcbiAgZGF0YTogJ2RhdGEnLFxuICBkYXRhbGlzdDogJ2RhdGFsaXN0JyxcbiAgZGQ6ICdkZCcsXG4gIGRlbDogJ2RlbCcsXG4gIGRldGFpbHM6ICdkZXRhaWxzJyxcbiAgZGZuOiAnZGZuJyxcbiAgZGlhbG9nOiAnZGlhbG9nJyxcbiAgZGl2OiAnZGl2JyxcbiAgZGw6ICdkbCcsXG4gIGR0OiAnZHQnLFxuICBlbTogJ2VtJyxcbiAgZW1iZWQ6ICdlbWJlZCcsXG4gIGZpZWxkc2V0OiAnZmllbGRzZXQnLFxuICBmaWdjYXB0aW9uOiAnZmlnY2FwdGlvbicsXG4gIGZpZ3VyZTogJ2ZpZ3VyZScsXG4gIGZvb3RlcjogJ2Zvb3RlcicsXG4gIGZvcm06ICdmb3JtJyxcbiAgaDE6ICdoMScsXG4gIGgyOiAnaDInLFxuICBoMzogJ2gzJyxcbiAgaDQ6ICdoNCcsXG4gIGg1OiAnaDUnLFxuICBoNjogJ2g2JyxcbiAgaGVhZDogJ2hlYWQnLFxuICBoZWFkZXI6ICdoZWFkZXInLFxuICBocjogJ2hyJyxcbiAgaHRtbDogJ2h0bWwnLFxuICBpOiAnaScsXG4gIGlmcmFtZTogJ2lmcmFtZScsXG4gIGltZzogJ2ltZycsXG4gIGlucHV0OiAnaW5wdXQnLFxuICBpbnM6ICdpbnMnLFxuICBrYmQ6ICdrYmQnLFxuICBrZXlnZW46ICdrZXlnZW4nLFxuICBsYWJlbDogJ2xhYmVsJyxcbiAgbGVnZW5kOiAnbGVnZW5kJyxcbiAgbGk6ICdsaScsXG4gIGxpbms6ICdsaW5rJyxcbiAgbWFpbjogJ21haW4nLFxuICBtYXA6ICdtYXAnLFxuICBtYXJrOiAnbWFyaycsXG4gIG1lbnU6ICdtZW51JyxcbiAgbWVudWl0ZW06ICdtZW51aXRlbScsXG4gIG1ldGE6ICdtZXRhJyxcbiAgbWV0ZXI6ICdtZXRlcicsXG4gIG5hdjogJ25hdicsXG4gIG5vc2NyaXB0OiAnbm9zY3JpcHQnLFxuICBvYmplY3Q6ICdvYmplY3QnLFxuICBvbDogJ29sJyxcbiAgb3B0Z3JvdXA6ICdvcHRncm91cCcsXG4gIG9wdGlvbjogJ29wdGlvbicsXG4gIG91dHB1dDogJ291dHB1dCcsXG4gIHA6ICdwJyxcbiAgcGFyYW06ICdwYXJhbScsXG4gIHBpY3R1cmU6ICdwaWN0dXJlJyxcbiAgcHJlOiAncHJlJyxcbiAgcHJvZ3Jlc3M6ICdwcm9ncmVzcycsXG4gIHE6ICdxJyxcbiAgcnA6ICdycCcsXG4gIHJ0OiAncnQnLFxuICBydWJ5OiAncnVieScsXG4gIHM6ICdzJyxcbiAgc2FtcDogJ3NhbXAnLFxuICBzY3JpcHQ6ICdzY3JpcHQnLFxuICBzZWN0aW9uOiAnc2VjdGlvbicsXG4gIHNlbGVjdDogJ3NlbGVjdCcsXG4gIHNtYWxsOiAnc21hbGwnLFxuICBzb3VyY2U6ICdzb3VyY2UnLFxuICBzcGFuOiAnc3BhbicsXG4gIHN0cm9uZzogJ3N0cm9uZycsXG4gIHN0eWxlOiAnc3R5bGUnLFxuICBzdWI6ICdzdWInLFxuICBzdW1tYXJ5OiAnc3VtbWFyeScsXG4gIHN1cDogJ3N1cCcsXG4gIHRhYmxlOiAndGFibGUnLFxuICB0Ym9keTogJ3Rib2R5JyxcbiAgdGQ6ICd0ZCcsXG4gIHRleHRhcmVhOiAndGV4dGFyZWEnLFxuICB0Zm9vdDogJ3Rmb290JyxcbiAgdGg6ICd0aCcsXG4gIHRoZWFkOiAndGhlYWQnLFxuICB0aW1lOiAndGltZScsXG4gIHRpdGxlOiAndGl0bGUnLFxuICB0cjogJ3RyJyxcbiAgdHJhY2s6ICd0cmFjaycsXG4gIHU6ICd1JyxcbiAgdWw6ICd1bCcsXG4gICd2YXInOiAndmFyJyxcbiAgdmlkZW86ICd2aWRlbycsXG4gIHdicjogJ3dicicsXG5cbiAgLy8gU1ZHXG4gIGNpcmNsZTogJ2NpcmNsZScsXG4gIGNsaXBQYXRoOiAnY2xpcFBhdGgnLFxuICBkZWZzOiAnZGVmcycsXG4gIGVsbGlwc2U6ICdlbGxpcHNlJyxcbiAgZzogJ2cnLFxuICBsaW5lOiAnbGluZScsXG4gIGxpbmVhckdyYWRpZW50OiAnbGluZWFyR3JhZGllbnQnLFxuICBtYXNrOiAnbWFzaycsXG4gIHBhdGg6ICdwYXRoJyxcbiAgcGF0dGVybjogJ3BhdHRlcm4nLFxuICBwb2x5Z29uOiAncG9seWdvbicsXG4gIHBvbHlsaW5lOiAncG9seWxpbmUnLFxuICByYWRpYWxHcmFkaWVudDogJ3JhZGlhbEdyYWRpZW50JyxcbiAgcmVjdDogJ3JlY3QnLFxuICBzdG9wOiAnc3RvcCcsXG4gIHN2ZzogJ3N2ZycsXG4gIHRleHQ6ICd0ZXh0JyxcbiAgdHNwYW46ICd0c3BhbidcblxufSwgY3JlYXRlRE9NRmFjdG9yeSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0RWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCIsXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50VmFsaWRhdG9yLmpzXCIsXCIuL21hcE9iamVjdFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvbWFwT2JqZWN0LmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01CdXR0b24uanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01CdXR0b25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBdXRvRm9jdXNNaXhpbiA9IHJlcXVpcmUoXCIuL0F1dG9Gb2N1c01peGluXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZShcIi4va2V5TWlycm9yXCIpO1xuXG52YXIgYnV0dG9uID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoJ2J1dHRvbicpO1xuXG52YXIgbW91c2VMaXN0ZW5lck5hbWVzID0ga2V5TWlycm9yKHtcbiAgb25DbGljazogdHJ1ZSxcbiAgb25Eb3VibGVDbGljazogdHJ1ZSxcbiAgb25Nb3VzZURvd246IHRydWUsXG4gIG9uTW91c2VNb3ZlOiB0cnVlLFxuICBvbk1vdXNlVXA6IHRydWUsXG4gIG9uQ2xpY2tDYXB0dXJlOiB0cnVlLFxuICBvbkRvdWJsZUNsaWNrQ2FwdHVyZTogdHJ1ZSxcbiAgb25Nb3VzZURvd25DYXB0dXJlOiB0cnVlLFxuICBvbk1vdXNlTW92ZUNhcHR1cmU6IHRydWUsXG4gIG9uTW91c2VVcENhcHR1cmU6IHRydWVcbn0pO1xuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8YnV0dG9uPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgZG9lcyBub3QgcmVjZWl2ZSBtb3VzZSBldmVudHNcbiAqIHdoZW4gYGRpc2FibGVkYCBpcyBzZXQuXG4gKi9cbnZhciBSZWFjdERPTUJ1dHRvbiA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NQnV0dG9uJyxcbiAgdGFnTmFtZTogJ0JVVFRPTicsXG5cbiAgbWl4aW5zOiBbQXV0b0ZvY3VzTWl4aW4sIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcm9wcyA9IHt9O1xuXG4gICAgLy8gQ29weSB0aGUgcHJvcHM7IGV4Y2VwdCB0aGUgbW91c2UgbGlzdGVuZXJzIGlmIHdlJ3JlIGRpc2FibGVkXG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMucHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmhhc093blByb3BlcnR5KGtleSkgJiZcbiAgICAgICAgICAoIXRoaXMucHJvcHMuZGlzYWJsZWQgfHwgIW1vdXNlTGlzdGVuZXJOYW1lc1trZXldKSkge1xuICAgICAgICBwcm9wc1trZXldID0gdGhpcy5wcm9wc1trZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBidXR0b24ocHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NQnV0dG9uO1xuXG59LHtcIi4vQXV0b0ZvY3VzTWl4aW5cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0F1dG9Gb2N1c01peGluLmpzXCIsXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbi5qc1wiLFwiLi9SZWFjdENsYXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENsYXNzLmpzXCIsXCIuL1JlYWN0RWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCIsXCIuL2tleU1pcnJvclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIva2V5TWlycm9yLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NQ29tcG9uZW50LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUNvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4vKiBnbG9iYWwgaGFzT3duUHJvcGVydHk6dHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKTtcbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID1cbiAgcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnRcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgUmVhY3RNdWx0aUNoaWxkID0gcmVxdWlyZShcIi4vUmVhY3RNdWx0aUNoaWxkXCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZShcIi4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZShcIi4vaXNFdmVudFN1cHBvcnRlZFwiKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgZGVsZXRlTGlzdGVuZXIgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuZGVsZXRlTGlzdGVuZXI7XG52YXIgbGlzdGVuVG8gPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIubGlzdGVuVG87XG52YXIgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM7XG5cbi8vIEZvciBxdWlja2x5IG1hdGNoaW5nIGNoaWxkcmVuIHR5cGUsIHRvIHRlc3QgaWYgY2FuIGJlIHRyZWF0ZWQgYXMgY29udGVudC5cbnZhciBDT05URU5UX1RZUEVTID0geydzdHJpbmcnOiB0cnVlLCAnbnVtYmVyJzogdHJ1ZX07XG5cbnZhciBTVFlMRSA9IGtleU9mKHtzdHlsZTogbnVsbH0pO1xuXG52YXIgRUxFTUVOVF9OT0RFX1RZUEUgPSAxO1xuXG4vKipcbiAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBvcGVyYXRpb25zIGZvciBtdXRhdGluZyB0aGUgRE9NXG4gKi9cbnZhciBCYWNrZW5kSURPcGVyYXRpb25zID0gbnVsbDtcblxuLyoqXG4gKiBAcGFyYW0gez9vYmplY3R9IHByb3BzXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFZhbGlkUHJvcHMocHJvcHMpIHtcbiAgaWYgKCFwcm9wcykge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBOb3RlIHRoZSB1c2Ugb2YgYD09YCB3aGljaCBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkLlxuICBpZiAocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIT0gbnVsbCkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBwcm9wcy5jaGlsZHJlbiA9PSBudWxsLFxuICAgICAgJ0NhbiBvbmx5IHNldCBvbmUgb2YgYGNoaWxkcmVuYCBvciBgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLidcbiAgICApIDogaW52YXJpYW50KHByb3BzLmNoaWxkcmVuID09IG51bGwpKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgdHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09PSAnb2JqZWN0JyAmJlxuICAgICAgJ19faHRtbCcgaW4gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsXG4gICAgICAnYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBtdXN0IGJlIGluIHRoZSBmb3JtIGB7X19odG1sOiAuLi59YC4gJyArXG4gICAgICAnUGxlYXNlIHZpc2l0IGh0dHBzOi8vZmIubWUvcmVhY3QtaW52YXJpYW50LWRhbmdlcm91c2x5LXNldC1pbm5lci1odG1sICcgK1xuICAgICAgJ2ZvciBtb3JlIGluZm9ybWF0aW9uLidcbiAgICApIDogaW52YXJpYW50KHR5cGVvZiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PT0gJ29iamVjdCcgJiZcbiAgICAnX19odG1sJyBpbiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCkpO1xuICB9XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIHByb3BzLmlubmVySFRNTCA9PSBudWxsLFxuICAgICAgJ0RpcmVjdGx5IHNldHRpbmcgcHJvcGVydHkgYGlubmVySFRNTGAgaXMgbm90IHBlcm1pdHRlZC4gJyArXG4gICAgICAnRm9yIG1vcmUgaW5mb3JtYXRpb24sIGxvb2t1cCBkb2N1bWVudGF0aW9uIG9uIGBkYW5nZXJvdXNseVNldElubmVySFRNTGAuJ1xuICAgICkgOiBudWxsKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICFwcm9wcy5jb250ZW50RWRpdGFibGUgfHwgcHJvcHMuY2hpbGRyZW4gPT0gbnVsbCxcbiAgICAgICdBIGNvbXBvbmVudCBpcyBgY29udGVudEVkaXRhYmxlYCBhbmQgY29udGFpbnMgYGNoaWxkcmVuYCBtYW5hZ2VkIGJ5ICcgK1xuICAgICAgJ1JlYWN0LiBJdCBpcyBub3cgeW91ciByZXNwb25zaWJpbGl0eSB0byBndWFyYW50ZWUgdGhhdCBub25lIG9mICcgK1xuICAgICAgJ3Rob3NlIG5vZGVzIGFyZSB1bmV4cGVjdGVkbHkgbW9kaWZpZWQgb3IgZHVwbGljYXRlZC4gVGhpcyBpcyAnICtcbiAgICAgICdwcm9iYWJseSBub3QgaW50ZW50aW9uYWwuJ1xuICAgICkgOiBudWxsKTtcbiAgfVxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIHByb3BzLnN0eWxlID09IG51bGwgfHwgdHlwZW9mIHByb3BzLnN0eWxlID09PSAnb2JqZWN0JyxcbiAgICAnVGhlIGBzdHlsZWAgcHJvcCBleHBlY3RzIGEgbWFwcGluZyBmcm9tIHN0eWxlIHByb3BlcnRpZXMgdG8gdmFsdWVzLCAnICtcbiAgICAnbm90IGEgc3RyaW5nLiBGb3IgZXhhbXBsZSwgc3R5bGU9e3ttYXJnaW5SaWdodDogc3BhY2luZyArIFxcJ2VtXFwnfX0gd2hlbiAnICtcbiAgICAndXNpbmcgSlNYLidcbiAgKSA6IGludmFyaWFudChwcm9wcy5zdHlsZSA9PSBudWxsIHx8IHR5cGVvZiBwcm9wcy5zdHlsZSA9PT0gJ29iamVjdCcpKTtcbn1cblxuZnVuY3Rpb24gcHV0TGlzdGVuZXIoaWQsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyLCB0cmFuc2FjdGlvbikge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgLy8gSUU4IGhhcyBubyBBUEkgZm9yIGV2ZW50IGNhcHR1cmluZyBhbmQgdGhlIGBvblNjcm9sbGAgZXZlbnQgZG9lc24ndFxuICAgIC8vIGJ1YmJsZS5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWUgIT09ICdvblNjcm9sbCcgfHwgaXNFdmVudFN1cHBvcnRlZCgnc2Nyb2xsJywgdHJ1ZSksXG4gICAgICAnVGhpcyBicm93c2VyIGRvZXNuXFwndCBzdXBwb3J0IHRoZSBgb25TY3JvbGxgIGV2ZW50J1xuICAgICkgOiBudWxsKTtcbiAgfVxuICB2YXIgY29udGFpbmVyID0gUmVhY3RNb3VudC5maW5kUmVhY3RDb250YWluZXJGb3JJRChpZCk7XG4gIGlmIChjb250YWluZXIpIHtcbiAgICB2YXIgZG9jID0gY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSA/XG4gICAgICBjb250YWluZXIub3duZXJEb2N1bWVudCA6XG4gICAgICBjb250YWluZXI7XG4gICAgbGlzdGVuVG8ocmVnaXN0cmF0aW9uTmFtZSwgZG9jKTtcbiAgfVxuICB0cmFuc2FjdGlvbi5nZXRQdXRMaXN0ZW5lclF1ZXVlKCkuZW5xdWV1ZVB1dExpc3RlbmVyKFxuICAgIGlkLFxuICAgIHJlZ2lzdHJhdGlvbk5hbWUsXG4gICAgbGlzdGVuZXJcbiAgKTtcbn1cblxuLy8gRm9yIEhUTUwsIGNlcnRhaW4gdGFncyBzaG91bGQgb21pdCB0aGVpciBjbG9zZSB0YWcuIFdlIGtlZXAgYSB3aGl0ZWxpc3QgZm9yXG4vLyB0aG9zZSBzcGVjaWFsIGNhc2VkIHRhZ3MuXG5cbnZhciBvbWl0dGVkQ2xvc2VUYWdzID0ge1xuICAnYXJlYSc6IHRydWUsXG4gICdiYXNlJzogdHJ1ZSxcbiAgJ2JyJzogdHJ1ZSxcbiAgJ2NvbCc6IHRydWUsXG4gICdlbWJlZCc6IHRydWUsXG4gICdocic6IHRydWUsXG4gICdpbWcnOiB0cnVlLFxuICAnaW5wdXQnOiB0cnVlLFxuICAna2V5Z2VuJzogdHJ1ZSxcbiAgJ2xpbmsnOiB0cnVlLFxuICAnbWV0YSc6IHRydWUsXG4gICdwYXJhbSc6IHRydWUsXG4gICdzb3VyY2UnOiB0cnVlLFxuICAndHJhY2snOiB0cnVlLFxuICAnd2JyJzogdHJ1ZVxuICAvLyBOT1RFOiBtZW51aXRlbSdzIGNsb3NlIHRhZyBzaG91bGQgYmUgb21pdHRlZCwgYnV0IHRoYXQgY2F1c2VzIHByb2JsZW1zLlxufTtcblxuLy8gV2UgYWNjZXB0IGFueSB0YWcgdG8gYmUgcmVuZGVyZWQgYnV0IHNpbmNlIHRoaXMgZ2V0cyBpbmplY3RlZCBpbnRvIGFiaXRyYXJ5XG4vLyBIVE1MLCB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IGl0J3MgYSBzYWZlIHRhZy5cbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy14bWwvI05ULU5hbWVcblxudmFyIFZBTElEX1RBR19SRUdFWCA9IC9eW2EtekEtWl1bYS16QS1aOl9cXC5cXC1cXGRdKiQvOyAvLyBTaW1wbGlmaWVkIHN1YnNldFxudmFyIHZhbGlkYXRlZFRhZ0NhY2hlID0ge307XG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gdmFsaWRhdGVEYW5nZXJvdXNUYWcodGFnKSB7XG4gIGlmICghaGFzT3duUHJvcGVydHkuY2FsbCh2YWxpZGF0ZWRUYWdDYWNoZSwgdGFnKSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoVkFMSURfVEFHX1JFR0VYLnRlc3QodGFnKSwgJ0ludmFsaWQgdGFnOiAlcycsIHRhZykgOiBpbnZhcmlhbnQoVkFMSURfVEFHX1JFR0VYLnRlc3QodGFnKSkpO1xuICAgIHZhbGlkYXRlZFRhZ0NhY2hlW3RhZ10gPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBSZWFjdCBjbGFzcyB0aGF0IGlzIGlkZW1wb3RlbnQgYW5kIGNhcGFibGUgb2YgY29udGFpbmluZyBvdGhlclxuICogUmVhY3QgY29tcG9uZW50cy4gSXQgYWNjZXB0cyBldmVudCBsaXN0ZW5lcnMgYW5kIERPTSBwcm9wZXJ0aWVzIHRoYXQgYXJlXG4gKiB2YWxpZCBhY2NvcmRpbmcgdG8gYERPTVByb3BlcnR5YC5cbiAqXG4gKiAgLSBFdmVudCBsaXN0ZW5lcnM6IGBvbkNsaWNrYCwgYG9uTW91c2VEb3duYCwgZXRjLlxuICogIC0gRE9NIHByb3BlcnRpZXM6IGBjbGFzc05hbWVgLCBgbmFtZWAsIGB0aXRsZWAsIGV0Yy5cbiAqXG4gKiBUaGUgYHN0eWxlYCBwcm9wZXJ0eSBmdW5jdGlvbnMgZGlmZmVyZW50bHkgZnJvbSB0aGUgRE9NIEFQSS4gSXQgYWNjZXB0cyBhblxuICogb2JqZWN0IG1hcHBpbmcgb2Ygc3R5bGUgcHJvcGVydGllcyB0byB2YWx1ZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yIFJlYWN0RE9NQ29tcG9uZW50XG4gKiBAZXh0ZW5kcyBSZWFjdE11bHRpQ2hpbGRcbiAqL1xuZnVuY3Rpb24gUmVhY3RET01Db21wb25lbnQodGFnKSB7XG4gIHZhbGlkYXRlRGFuZ2Vyb3VzVGFnKHRhZyk7XG4gIHRoaXMuX3RhZyA9IHRhZztcbiAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IG51bGw7XG4gIHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gbnVsbDtcbiAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG59XG5cblJlYWN0RE9NQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ1JlYWN0RE9NQ29tcG9uZW50JztcblxuUmVhY3RET01Db21wb25lbnQuTWl4aW4gPSB7XG5cbiAgY29uc3RydWN0OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgcm9vdCB0YWcgbWFya3VwIHRoZW4gcmVjdXJzZXMuIFRoaXMgbWV0aG9kIGhhcyBzaWRlIGVmZmVjdHMgYW5kXG4gICAqIGlzIG5vdCBpZGVtcG90ZW50LlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBUaGUgcm9vdCBET00gSUQgZm9yIHRoaXMgbm9kZS5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNvbXB1dGVkIG1hcmt1cC5cbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihyb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IHJvb3RJRDtcbiAgICBhc3NlcnRWYWxpZFByb3BzKHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzKTtcbiAgICB2YXIgY2xvc2VUYWcgPSBvbWl0dGVkQ2xvc2VUYWdzW3RoaXMuX3RhZ10gPyAnJyA6ICc8LycgKyB0aGlzLl90YWcgKyAnPic7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX2NyZWF0ZU9wZW5UYWdNYXJrdXBBbmRQdXRMaXN0ZW5lcnModHJhbnNhY3Rpb24pICtcbiAgICAgIHRoaXMuX2NyZWF0ZUNvbnRlbnRNYXJrdXAodHJhbnNhY3Rpb24sIGNvbnRleHQpICtcbiAgICAgIGNsb3NlVGFnXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBvcGVuIHRhZyBhbmQgYWxsIGF0dHJpYnV0ZXMuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGhhcyBzaWRlIGVmZmVjdHMgYmVjYXVzZSBldmVudHMgZ2V0IHJlZ2lzdGVyZWQuXG4gICAqXG4gICAqIEl0ZXJhdGluZyBvdmVyIG9iamVjdCBwcm9wZXJ0aWVzIGlzIGZhc3RlciB0aGFuIGl0ZXJhdGluZyBvdmVyIGFycmF5cy5cbiAgICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9vYmotdnMtYXJyLWl0ZXJhdGlvblxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgb2Ygb3BlbmluZyB0YWcuXG4gICAqL1xuICBfY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVyczogZnVuY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgcmV0ID0gJzwnICsgdGhpcy5fdGFnO1xuXG4gICAgZm9yICh2YXIgcHJvcEtleSBpbiBwcm9wcykge1xuICAgICAgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wS2V5XTtcbiAgICAgIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBwdXRMaXN0ZW5lcih0aGlzLl9yb290Tm9kZUlELCBwcm9wS2V5LCBwcm9wVmFsdWUsIHRyYW5zYWN0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSkge1xuICAgICAgICAgIGlmIChwcm9wVmFsdWUpIHtcbiAgICAgICAgICAgIHByb3BWYWx1ZSA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gYXNzaWduKHt9LCBwcm9wcy5zdHlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb3BWYWx1ZSA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JTdHlsZXMocHJvcFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWFya3VwID1cbiAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yUHJvcGVydHkocHJvcEtleSwgcHJvcFZhbHVlKTtcbiAgICAgICAgaWYgKG1hcmt1cCkge1xuICAgICAgICAgIHJldCArPSAnICcgKyBtYXJrdXA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGb3Igc3RhdGljIHBhZ2VzLCBubyBuZWVkIHRvIHB1dCBSZWFjdCBJRCBhbmQgY2hlY2tzdW0uIFNhdmVzIGxvdHMgb2ZcbiAgICAvLyBieXRlcy5cbiAgICBpZiAodHJhbnNhY3Rpb24ucmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcbiAgICAgIHJldHVybiByZXQgKyAnPic7XG4gICAgfVxuXG4gICAgdmFyIG1hcmt1cEZvcklEID0gRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvcklEKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgIHJldHVybiByZXQgKyAnICcgKyBtYXJrdXBGb3JJRCArICc+JztcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBjb250ZW50IGJldHdlZW4gdGhlIHRhZ3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IENvbnRlbnQgbWFya3VwLlxuICAgKi9cbiAgX2NyZWF0ZUNvbnRlbnRNYXJrdXA6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIHByZWZpeCA9ICcnO1xuICAgIGlmICh0aGlzLl90YWcgPT09ICdsaXN0aW5nJyB8fFxuICAgICAgICB0aGlzLl90YWcgPT09ICdwcmUnIHx8XG4gICAgICAgIHRoaXMuX3RhZyA9PT0gJ3RleHRhcmVhJykge1xuICAgICAgLy8gQWRkIGFuIGluaXRpYWwgbmV3bGluZSBiZWNhdXNlIGJyb3dzZXJzIGlnbm9yZSB0aGUgZmlyc3QgbmV3bGluZSBpblxuICAgICAgLy8gYSA8bGlzdGluZz4sIDxwcmU+LCBvciA8dGV4dGFyZWE+IGFzIGFuIFwiYXV0aG9yaW5nIGNvbnZlbmllbmNlXCIgLS0gc2VlXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5ib2R5LlxuICAgICAgcHJlZml4ID0gJ1xcbic7XG4gICAgfVxuXG4gICAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICAvLyBJbnRlbnRpb25hbCB1c2Ugb2YgIT0gdG8gYXZvaWQgY2F0Y2hpbmcgemVyby9mYWxzZS5cbiAgICB2YXIgaW5uZXJIVE1MID0gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw7XG4gICAgaWYgKGlubmVySFRNTCAhPSBudWxsKSB7XG4gICAgICBpZiAoaW5uZXJIVE1MLl9faHRtbCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyBpbm5lckhUTUwuX19odG1sO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY29udGVudFRvVXNlID1cbiAgICAgICAgQ09OVEVOVF9UWVBFU1t0eXBlb2YgcHJvcHMuY2hpbGRyZW5dID8gcHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgICAgdmFyIGNoaWxkcmVuVG9Vc2UgPSBjb250ZW50VG9Vc2UgIT0gbnVsbCA/IG51bGwgOiBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIGlmIChjb250ZW50VG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKGNvbnRlbnRUb1VzZSk7XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkcmVuVG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICB2YXIgbW91bnRJbWFnZXMgPSB0aGlzLm1vdW50Q2hpbGRyZW4oXG4gICAgICAgICAgY2hpbGRyZW5Ub1VzZSxcbiAgICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgICBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyBtb3VudEltYWdlcy5qb2luKCcnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByZWZpeDtcbiAgfSxcblxuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbihuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgcHJldkVsZW1lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudDtcbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQsIGNvbnRleHQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgbmF0aXZlIERPTSBjb21wb25lbnQgYWZ0ZXIgaXQgaGFzIGFscmVhZHkgYmVlbiBhbGxvY2F0ZWQgYW5kXG4gICAqIGF0dGFjaGVkIHRvIHRoZSBET00uIFJlY29uY2lsZXMgdGhlIHJvb3QgRE9NIG5vZGUsIHRoZW4gcmVjdXJzZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IHByZXZFbGVtZW50XG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudFxuICAgKiBAaW50ZXJuYWxcbiAgICogQG92ZXJyaWRhYmxlXG4gICAqL1xuICB1cGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQsIGNvbnRleHQpIHtcbiAgICBhc3NlcnRWYWxpZFByb3BzKHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzKTtcbiAgICB0aGlzLl91cGRhdGVET01Qcm9wZXJ0aWVzKHByZXZFbGVtZW50LnByb3BzLCB0cmFuc2FjdGlvbik7XG4gICAgdGhpcy5fdXBkYXRlRE9NQ2hpbGRyZW4ocHJldkVsZW1lbnQucHJvcHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVjb25jaWxlcyB0aGUgcHJvcGVydGllcyBieSBkZXRlY3RpbmcgZGlmZmVyZW5jZXMgaW4gcHJvcGVydHkgdmFsdWVzIGFuZFxuICAgKiB1cGRhdGluZyB0aGUgRE9NIGFzIG5lY2Vzc2FyeS4gVGhpcyBmdW5jdGlvbiBpcyBwcm9iYWJseSB0aGUgc2luZ2xlIG1vc3RcbiAgICogY3JpdGljYWwgcGF0aCBmb3IgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICAgKlxuICAgKiBUT0RPOiBCZW5jaG1hcmsgd2hldGhlciBjaGVja2luZyBmb3IgY2hhbmdlZCB2YWx1ZXMgaW4gbWVtb3J5IGFjdHVhbGx5XG4gICAqICAgICAgIGltcHJvdmVzIHBlcmZvcm1hbmNlIChlc3BlY2lhbGx5IHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50cykuXG4gICAqIFRPRE86IEJlbmNobWFyayB0aGUgZWZmZWN0cyBvZiBwdXR0aW5nIHRoaXMgYXQgdGhlIHRvcCBzaW5jZSA5OSUgb2YgcHJvcHNcbiAgICogICAgICAgZG8gbm90IGNoYW5nZSBmb3IgYSBnaXZlbiByZWNvbmNpbGlhdGlvbi5cbiAgICogVE9ETzogQmVuY2htYXJrIGFyZWFzIHRoYXQgY2FuIGJlIGltcHJvdmVkIHdpdGggY2FjaGluZy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtvYmplY3R9IGxhc3RQcm9wc1xuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBfdXBkYXRlRE9NUHJvcGVydGllczogZnVuY3Rpb24obGFzdFByb3BzLCB0cmFuc2FjdGlvbikge1xuICAgIHZhciBuZXh0UHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgcHJvcEtleTtcbiAgICB2YXIgc3R5bGVOYW1lO1xuICAgIHZhciBzdHlsZVVwZGF0ZXM7XG4gICAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgICAgaWYgKG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fFxuICAgICAgICAgIWxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSkge1xuICAgICAgICB2YXIgbGFzdFN0eWxlID0gdGhpcy5fcHJldmlvdXNTdHlsZUNvcHk7XG4gICAgICAgIGZvciAoc3R5bGVOYW1lIGluIGxhc3RTdHlsZSkge1xuICAgICAgICAgIGlmIChsYXN0U3R5bGUuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0gc3R5bGVVcGRhdGVzIHx8IHt9O1xuICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBkZWxldGVMaXN0ZW5lcih0aGlzLl9yb290Tm9kZUlELCBwcm9wS2V5KTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbcHJvcEtleV0gfHxcbiAgICAgICAgICBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICBCYWNrZW5kSURPcGVyYXRpb25zLmRlbGV0ZVByb3BlcnR5QnlJRChcbiAgICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuICAgICAgICAgIHByb3BLZXlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChwcm9wS2V5IGluIG5leHRQcm9wcykge1xuICAgICAgdmFyIG5leHRQcm9wID0gbmV4dFByb3BzW3Byb3BLZXldO1xuICAgICAgdmFyIGxhc3RQcm9wID0gcHJvcEtleSA9PT0gU1RZTEUgP1xuICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA6XG4gICAgICAgIGxhc3RQcm9wc1twcm9wS2V5XTtcbiAgICAgIGlmICghbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8IG5leHRQcm9wID09PSBsYXN0UHJvcCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSkge1xuICAgICAgICBpZiAobmV4dFByb3ApIHtcbiAgICAgICAgICBuZXh0UHJvcCA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gYXNzaWduKHt9LCBuZXh0UHJvcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0UHJvcCkge1xuICAgICAgICAgIC8vIFVuc2V0IHN0eWxlcyBvbiBgbGFzdFByb3BgIGJ1dCBub3Qgb24gYG5leHRQcm9wYC5cbiAgICAgICAgICBmb3IgKHN0eWxlTmFtZSBpbiBsYXN0UHJvcCkge1xuICAgICAgICAgICAgaWYgKGxhc3RQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiZcbiAgICAgICAgICAgICAgICAoIW5leHRQcm9wIHx8ICFuZXh0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSkge1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFVwZGF0ZSBzdHlsZXMgdGhhdCBjaGFuZ2VkIHNpbmNlIGBsYXN0UHJvcGAuXG4gICAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbmV4dFByb3ApIHtcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpICYmXG4gICAgICAgICAgICAgICAgbGFzdFByb3Bbc3R5bGVOYW1lXSAhPT0gbmV4dFByb3Bbc3R5bGVOYW1lXSkge1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gbmV4dFByb3Bbc3R5bGVOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUmVsaWVzIG9uIGB1cGRhdGVTdHlsZXNCeUlEYCBub3QgbXV0YXRpbmcgYHN0eWxlVXBkYXRlc2AuXG4gICAgICAgICAgc3R5bGVVcGRhdGVzID0gbmV4dFByb3A7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgcHV0TGlzdGVuZXIodGhpcy5fcm9vdE5vZGVJRCwgcHJvcEtleSwgbmV4dFByb3AsIHRyYW5zYWN0aW9uKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbcHJvcEtleV0gfHxcbiAgICAgICAgICBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICBCYWNrZW5kSURPcGVyYXRpb25zLnVwZGF0ZVByb3BlcnR5QnlJRChcbiAgICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuICAgICAgICAgIHByb3BLZXksXG4gICAgICAgICAgbmV4dFByb3BcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0eWxlVXBkYXRlcykge1xuICAgICAgQmFja2VuZElET3BlcmF0aW9ucy51cGRhdGVTdHlsZXNCeUlEKFxuICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuICAgICAgICBzdHlsZVVwZGF0ZXNcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZWNvbmNpbGVzIHRoZSBjaGlsZHJlbiB3aXRoIHRoZSB2YXJpb3VzIHByb3BlcnRpZXMgdGhhdCBhZmZlY3QgdGhlXG4gICAqIGNoaWxkcmVuIGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsYXN0UHJvcHNcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgX3VwZGF0ZURPTUNoaWxkcmVuOiBmdW5jdGlvbihsYXN0UHJvcHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIG5leHRQcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuXG4gICAgdmFyIGxhc3RDb250ZW50ID1cbiAgICAgIENPTlRFTlRfVFlQRVNbdHlwZW9mIGxhc3RQcm9wcy5jaGlsZHJlbl0gPyBsYXN0UHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgIHZhciBuZXh0Q29udGVudCA9XG4gICAgICBDT05URU5UX1RZUEVTW3R5cGVvZiBuZXh0UHJvcHMuY2hpbGRyZW5dID8gbmV4dFByb3BzLmNoaWxkcmVuIDogbnVsbDtcblxuICAgIHZhciBsYXN0SHRtbCA9XG4gICAgICBsYXN0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgJiZcbiAgICAgIGxhc3RQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG4gICAgdmFyIG5leHRIdG1sID1cbiAgICAgIG5leHRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJlxuICAgICAgbmV4dFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbDtcblxuICAgIC8vIE5vdGUgdGhlIHVzZSBvZiBgIT1gIHdoaWNoIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWQuXG4gICAgdmFyIGxhc3RDaGlsZHJlbiA9IGxhc3RDb250ZW50ICE9IG51bGwgPyBudWxsIDogbGFzdFByb3BzLmNoaWxkcmVuO1xuICAgIHZhciBuZXh0Q2hpbGRyZW4gPSBuZXh0Q29udGVudCAhPSBudWxsID8gbnVsbCA6IG5leHRQcm9wcy5jaGlsZHJlbjtcblxuICAgIC8vIElmIHdlJ3JlIHN3aXRjaGluZyBmcm9tIGNoaWxkcmVuIHRvIGNvbnRlbnQvaHRtbCBvciB2aWNlIHZlcnNhLCByZW1vdmVcbiAgICAvLyB0aGUgb2xkIGNvbnRlbnRcbiAgICB2YXIgbGFzdEhhc0NvbnRlbnRPckh0bWwgPSBsYXN0Q29udGVudCAhPSBudWxsIHx8IGxhc3RIdG1sICE9IG51bGw7XG4gICAgdmFyIG5leHRIYXNDb250ZW50T3JIdG1sID0gbmV4dENvbnRlbnQgIT0gbnVsbCB8fCBuZXh0SHRtbCAhPSBudWxsO1xuICAgIGlmIChsYXN0Q2hpbGRyZW4gIT0gbnVsbCAmJiBuZXh0Q2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbihudWxsLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfSBlbHNlIGlmIChsYXN0SGFzQ29udGVudE9ySHRtbCAmJiAhbmV4dEhhc0NvbnRlbnRPckh0bWwpIHtcbiAgICAgIHRoaXMudXBkYXRlVGV4dENvbnRlbnQoJycpO1xuICAgIH1cblxuICAgIGlmIChuZXh0Q29udGVudCAhPSBudWxsKSB7XG4gICAgICBpZiAobGFzdENvbnRlbnQgIT09IG5leHRDb250ZW50KSB7XG4gICAgICAgIHRoaXMudXBkYXRlVGV4dENvbnRlbnQoJycgKyBuZXh0Q29udGVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0SHRtbCAhPSBudWxsKSB7XG4gICAgICBpZiAobGFzdEh0bWwgIT09IG5leHRIdG1sKSB7XG4gICAgICAgIEJhY2tlbmRJRE9wZXJhdGlvbnMudXBkYXRlSW5uZXJIVE1MQnlJRChcbiAgICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuICAgICAgICAgIG5leHRIdG1sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0Q2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbihuZXh0Q2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFsbCBldmVudCByZWdpc3RyYXRpb25zIGZvciB0aGlzIGluc3RhbmNlLiBEb2VzIG5vdCByZW1vdmUgZnJvbVxuICAgKiB0aGUgRE9NLiBUaGF0IG11c3QgYmUgZG9uZSBieSB0aGUgcGFyZW50LlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudW5tb3VudENoaWxkcmVuKCk7XG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmRlbGV0ZUFsbExpc3RlbmVycyh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQodGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gIH1cblxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKFJlYWN0RE9NQ29tcG9uZW50LCAnUmVhY3RET01Db21wb25lbnQnLCB7XG4gIG1vdW50Q29tcG9uZW50OiAnbW91bnRDb21wb25lbnQnLFxuICB1cGRhdGVDb21wb25lbnQ6ICd1cGRhdGVDb21wb25lbnQnXG59KTtcblxuYXNzaWduKFxuICBSZWFjdERPTUNvbXBvbmVudC5wcm90b3R5cGUsXG4gIFJlYWN0RE9NQ29tcG9uZW50Lk1peGluLFxuICBSZWFjdE11bHRpQ2hpbGQuTWl4aW5cbik7XG5cblJlYWN0RE9NQ29tcG9uZW50LmluamVjdGlvbiA9IHtcbiAgaW5qZWN0SURPcGVyYXRpb25zOiBmdW5jdGlvbihJRE9wZXJhdGlvbnMpIHtcbiAgICBSZWFjdERPTUNvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zID0gQmFja2VuZElET3BlcmF0aW9ucyA9IElET3BlcmF0aW9ucztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUNvbXBvbmVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQ1NTUHJvcGVydHlPcGVyYXRpb25zXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMuanNcIixcIi4vRE9NUHJvcGVydHlcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0RPTVByb3BlcnR5LmpzXCIsXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NUHJvcGVydHlPcGVyYXRpb25zLmpzXCIsXCIuL09iamVjdC5hc3NpZ25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanNcIixcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuanNcIixcIi4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50LmpzXCIsXCIuL1JlYWN0TW91bnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TW91bnQuanNcIixcIi4vUmVhY3RNdWx0aUNoaWxkXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE11bHRpQ2hpbGQuanNcIixcIi4vUmVhY3RQZXJmXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFBlcmYuanNcIixcIi4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIuanNcIixcIi4vaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIixcIi4vaXNFdmVudFN1cHBvcnRlZFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaXNFdmVudFN1cHBvcnRlZC5qc1wiLFwiLi9rZXlPZlwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIva2V5T2YuanNcIixcIi4vd2FybmluZ1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvd2FybmluZy5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NRm9ybS5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUZvcm1cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIExvY2FsRXZlbnRUcmFwTWl4aW4gPSByZXF1aXJlKFwiLi9Mb2NhbEV2ZW50VHJhcE1peGluXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgZm9ybSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KCdmb3JtJyk7XG5cbi8qKlxuICogU2luY2Ugb25TdWJtaXQgZG9lc24ndCBidWJibGUgT1IgY2FwdHVyZSBvbiB0aGUgdG9wIGxldmVsIGluIElFOCwgd2UgbmVlZFxuICogdG8gY2FwdHVyZSBpdCBvbiB0aGUgPGZvcm0+IGVsZW1lbnQgaXRzZWxmLiBUaGVyZSBhcmUgbG90cyBvZiBoYWNrcyB3ZSBjb3VsZFxuICogZG8gdG8gYWNjb21wbGlzaCB0aGlzLCBidXQgdGhlIG1vc3QgcmVsaWFibGUgaXMgdG8gbWFrZSA8Zm9ybT4gYVxuICogY29tcG9zaXRlIGNvbXBvbmVudCBhbmQgdXNlIGBjb21wb25lbnREaWRNb3VudGAgdG8gYXR0YWNoIHRoZSBldmVudCBoYW5kbGVycy5cbiAqL1xudmFyIFJlYWN0RE9NRm9ybSA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NRm9ybScsXG4gIHRhZ05hbWU6ICdGT1JNJyxcblxuICBtaXhpbnM6IFtSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiwgTG9jYWxFdmVudFRyYXBNaXhpbl0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAvLyBUT0RPOiBJbnN0ZWFkIG9mIHVzaW5nIGBSZWFjdERPTWAgZGlyZWN0bHksIHdlIHNob3VsZCB1c2UgSlNYLiBIb3dldmVyLFxuICAgIC8vIGBqc2hpbnRgIGZhaWxzIHRvIHBhcnNlIEpTWCBzbyBpbiBvcmRlciBmb3IgbGludGluZyB0byB3b3JrIGluIHRoZSBvcGVuXG4gICAgLy8gc291cmNlIHJlcG8sIHdlIG5lZWQgdG8ganVzdCB1c2UgYFJlYWN0RE9NLmZvcm1gLlxuICAgIHJldHVybiBmb3JtKHRoaXMucHJvcHMpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BSZXNldCwgJ3Jlc2V0Jyk7XG4gICAgdGhpcy50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wU3VibWl0LCAnc3VibWl0Jyk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NRm9ybTtcblxufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudENvbnN0YW50cy5qc1wiLFwiLi9Mb2NhbEV2ZW50VHJhcE1peGluXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9Mb2NhbEV2ZW50VHJhcE1peGluLmpzXCIsXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbi5qc1wiLFwiLi9SZWFjdENsYXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENsYXNzLmpzXCIsXCIuL1JlYWN0RWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NSURPcGVyYXRpb25zLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUlET3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0NTU1Byb3BlcnR5T3BlcmF0aW9uc1wiKTtcbnZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9ET01DaGlsZHJlbk9wZXJhdGlvbnNcIik7XG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciBzZXRJbm5lckhUTUwgPSByZXF1aXJlKFwiLi9zZXRJbm5lckhUTUxcIik7XG5cbi8qKlxuICogRXJyb3JzIGZvciBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIG5vdCBiZSB1cGRhdGVkIHdpdGggYHVwZGF0ZVByb3BlcnR5QnlJZCgpYC5cbiAqXG4gKiBAdHlwZSB7b2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIElOVkFMSURfUFJPUEVSVFlfRVJST1JTID0ge1xuICBkYW5nZXJvdXNseVNldElubmVySFRNTDpcbiAgICAnYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBtdXN0IGJlIHNldCB1c2luZyBgdXBkYXRlSW5uZXJIVE1MQnlJRCgpYC4nLFxuICBzdHlsZTogJ2BzdHlsZWAgbXVzdCBiZSBzZXQgdXNpbmcgYHVwZGF0ZVN0eWxlc0J5SUQoKWAuJ1xufTtcblxuLyoqXG4gKiBPcGVyYXRpb25zIHVzZWQgdG8gcHJvY2VzcyB1cGRhdGVzIHRvIERPTSBub2Rlcy4gVGhpcyBpcyBtYWRlIGluamVjdGFibGUgdmlhXG4gKiBgUmVhY3RET01Db21wb25lbnQuQmFja2VuZElET3BlcmF0aW9uc2AuXG4gKi9cbnZhciBSZWFjdERPTUlET3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogVXBkYXRlcyBhIERPTSBub2RlIHdpdGggbmV3IHByb3BlcnR5IHZhbHVlcy4gVGhpcyBzaG91bGQgb25seSBiZSB1c2VkIHRvXG4gICAqIHVwZGF0ZSBET00gcHJvcGVydGllcyBpbiBgRE9NUHJvcGVydHlgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIG5vZGUgdG8gdXBkYXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBIHZhbGlkIHByb3BlcnR5IG5hbWUsIHNlZSBgRE9NUHJvcGVydHlgLlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIE5ldyB2YWx1ZSBvZiB0aGUgcHJvcGVydHkuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdXBkYXRlUHJvcGVydHlCeUlEOiBmdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICFJTlZBTElEX1BST1BFUlRZX0VSUk9SUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSxcbiAgICAgICd1cGRhdGVQcm9wZXJ0eUJ5SUQoLi4uKTogJXMnLFxuICAgICAgSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlNbbmFtZV1cbiAgICApIDogaW52YXJpYW50KCFJTlZBTElEX1BST1BFUlRZX0VSUk9SUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkpO1xuXG4gICAgLy8gSWYgd2UncmUgdXBkYXRpbmcgdG8gbnVsbCBvciB1bmRlZmluZWQsIHdlIHNob3VsZCByZW1vdmUgdGhlIHByb3BlcnR5XG4gICAgLy8gZnJvbSB0aGUgRE9NIG5vZGUgaW5zdGVhZCBvZiBpbmFkdmVydGFudGx5IHNldHRpbmcgdG8gYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBicmluZ3MgdXMgaW4gbGluZSB3aXRoIHRoZSBzYW1lIGJlaGF2aW9yIHdlIGhhdmUgb24gaW5pdGlhbCByZW5kZXIuXG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUgdG8gcmVtb3ZlIGEgcHJvcGVydHkuIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCB0byByZW1vdmVcbiAgICogRE9NIHByb3BlcnRpZXMgaW4gYERPTVByb3BlcnR5YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBwcm9wZXJ0eSBuYW1lIHRvIHJlbW92ZSwgc2VlIGBET01Qcm9wZXJ0eWAuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGVsZXRlUHJvcGVydHlCeUlEOiBmdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICFJTlZBTElEX1BST1BFUlRZX0VSUk9SUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSxcbiAgICAgICd1cGRhdGVQcm9wZXJ0eUJ5SUQoLi4uKTogJXMnLFxuICAgICAgSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlNbbmFtZV1cbiAgICApIDogaW52YXJpYW50KCFJTlZBTElEX1BST1BFUlRZX0VSUk9SUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkpO1xuICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUsIHZhbHVlKTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIERPTSBub2RlIHdpdGggbmV3IHN0eWxlIHZhbHVlcy4gSWYgYSB2YWx1ZSBpcyBzcGVjaWZpZWQgYXMgJycsXG4gICAqIHRoZSBjb3JyZXNwb25kaW5nIHN0eWxlIHByb3BlcnR5IHdpbGwgYmUgdW5zZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgbm9kZSB0byB1cGRhdGUuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdHlsZXMgTWFwcGluZyBmcm9tIHN0eWxlcyB0byB2YWx1ZXMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdXBkYXRlU3R5bGVzQnlJRDogZnVuY3Rpb24oaWQsIHN0eWxlcykge1xuICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JTdHlsZXMobm9kZSwgc3R5bGVzKTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIERPTSBub2RlJ3MgaW5uZXJIVE1MLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIG5vZGUgdG8gdXBkYXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaHRtbCBBbiBIVE1MIHN0cmluZy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVJbm5lckhUTUxCeUlEOiBmdW5jdGlvbihpZCwgaHRtbCkge1xuICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICBzZXRJbm5lckhUTUwobm9kZSwgaHRtbCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBET00gbm9kZSdzIHRleHQgY29udGVudCBzZXQgYnkgYHByb3BzLmNvbnRlbnRgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIG5vZGUgdG8gdXBkYXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCBUZXh0IGNvbnRlbnQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdXBkYXRlVGV4dENvbnRlbnRCeUlEOiBmdW5jdGlvbihpZCwgY29udGVudCkge1xuICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMudXBkYXRlVGV4dENvbnRlbnQobm9kZSwgY29udGVudCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGEgRE9NIG5vZGUgdGhhdCBleGlzdHMgaW4gdGhlIGRvY3VtZW50IHdpdGggbWFya3VwLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgY2hpbGQgdG8gYmUgcmVwbGFjZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgRGFuZ2Vyb3VzIG1hcmt1cCB0byBpbmplY3QgaW4gcGxhY2Ugb2YgY2hpbGQuXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc2VlIHtEYW5nZXIuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXB9XG4gICAqL1xuICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6IGZ1bmN0aW9uKGlkLCBtYXJrdXApIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKG5vZGUsIG1hcmt1cCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBjb21wb25lbnQncyBjaGlsZHJlbiBieSBwcm9jZXNzaW5nIGEgc2VyaWVzIG9mIHVwZGF0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXk8b2JqZWN0Pn0gdXBkYXRlcyBMaXN0IG9mIHVwZGF0ZSBjb25maWd1cmF0aW9ucy5cbiAgICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBtYXJrdXAgTGlzdCBvZiBtYXJrdXAgc3RyaW5ncy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6IGZ1bmN0aW9uKHVwZGF0ZXMsIG1hcmt1cCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXBkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdXBkYXRlc1tpXS5wYXJlbnROb2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHVwZGF0ZXNbaV0ucGFyZW50SUQpO1xuICAgIH1cbiAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMucHJvY2Vzc1VwZGF0ZXModXBkYXRlcywgbWFya3VwKTtcbiAgfVxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKFJlYWN0RE9NSURPcGVyYXRpb25zLCAnUmVhY3RET01JRE9wZXJhdGlvbnMnLCB7XG4gIHVwZGF0ZVByb3BlcnR5QnlJRDogJ3VwZGF0ZVByb3BlcnR5QnlJRCcsXG4gIGRlbGV0ZVByb3BlcnR5QnlJRDogJ2RlbGV0ZVByb3BlcnR5QnlJRCcsXG4gIHVwZGF0ZVN0eWxlc0J5SUQ6ICd1cGRhdGVTdHlsZXNCeUlEJyxcbiAgdXBkYXRlSW5uZXJIVE1MQnlJRDogJ3VwZGF0ZUlubmVySFRNTEJ5SUQnLFxuICB1cGRhdGVUZXh0Q29udGVudEJ5SUQ6ICd1cGRhdGVUZXh0Q29udGVudEJ5SUQnLFxuICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6ICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQnLFxuICBkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6ICdkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMnXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUlET3BlcmF0aW9ucztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQ1NTUHJvcGVydHlPcGVyYXRpb25zXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMuanNcIixcIi4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9ET01DaGlsZHJlbk9wZXJhdGlvbnMuanNcIixcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMuanNcIixcIi4vUmVhY3RNb3VudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNb3VudC5qc1wiLFwiLi9SZWFjdFBlcmZcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UGVyZi5qc1wiLFwiLi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwiLi9zZXRJbm5lckhUTUxcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3NldElubmVySFRNTC5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NSWZyYW1lLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NSWZyYW1lXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBMb2NhbEV2ZW50VHJhcE1peGluID0gcmVxdWlyZShcIi4vTG9jYWxFdmVudFRyYXBNaXhpblwiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcblxudmFyIGlmcmFtZSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KCdpZnJhbWUnKTtcblxuLyoqXG4gKiBTaW5jZSBvbkxvYWQgZG9lc24ndCBidWJibGUgT1IgY2FwdHVyZSBvbiB0aGUgdG9wIGxldmVsIGluIElFOCwgd2UgbmVlZCB0b1xuICogY2FwdHVyZSBpdCBvbiB0aGUgPGlmcmFtZT4gZWxlbWVudCBpdHNlbGYuIFRoZXJlIGFyZSBsb3RzIG9mIGhhY2tzIHdlIGNvdWxkXG4gKiBkbyB0byBhY2NvbXBsaXNoIHRoaXMsIGJ1dCB0aGUgbW9zdCByZWxpYWJsZSBpcyB0byBtYWtlIDxpZnJhbWU+IGEgY29tcG9zaXRlXG4gKiBjb21wb25lbnQgYW5kIHVzZSBgY29tcG9uZW50RGlkTW91bnRgIHRvIGF0dGFjaCB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gKi9cbnZhciBSZWFjdERPTUlmcmFtZSA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NSWZyYW1lJyxcbiAgdGFnTmFtZTogJ0lGUkFNRScsXG5cbiAgbWl4aW5zOiBbUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4sIExvY2FsRXZlbnRUcmFwTWl4aW5dLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGlmcmFtZSh0aGlzLnByb3BzKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wTG9hZCwgJ2xvYWQnKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JZnJhbWU7XG5cbn0se1wiLi9FdmVudENvbnN0YW50c1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRDb25zdGFudHMuanNcIixcIi4vTG9jYWxFdmVudFRyYXBNaXhpblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvTG9jYWxFdmVudFRyYXBNaXhpbi5qc1wiLFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4uanNcIixcIi4vUmVhY3RDbGFzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDbGFzcy5qc1wiLFwiLi9SZWFjdEVsZW1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTUltZy5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUltZ1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgTG9jYWxFdmVudFRyYXBNaXhpbiA9IHJlcXVpcmUoXCIuL0xvY2FsRXZlbnRUcmFwTWl4aW5cIik7XG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKTtcbnZhciBSZWFjdENsYXNzID0gcmVxdWlyZShcIi4vUmVhY3RDbGFzc1wiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG5cbnZhciBpbWcgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSgnaW1nJyk7XG5cbi8qKlxuICogU2luY2Ugb25Mb2FkIGRvZXNuJ3QgYnViYmxlIE9SIGNhcHR1cmUgb24gdGhlIHRvcCBsZXZlbCBpbiBJRTgsIHdlIG5lZWQgdG9cbiAqIGNhcHR1cmUgaXQgb24gdGhlIDxpbWc+IGVsZW1lbnQgaXRzZWxmLiBUaGVyZSBhcmUgbG90cyBvZiBoYWNrcyB3ZSBjb3VsZCBkb1xuICogdG8gYWNjb21wbGlzaCB0aGlzLCBidXQgdGhlIG1vc3QgcmVsaWFibGUgaXMgdG8gbWFrZSA8aW1nPiBhIGNvbXBvc2l0ZVxuICogY29tcG9uZW50IGFuZCB1c2UgYGNvbXBvbmVudERpZE1vdW50YCB0byBhdHRhY2ggdGhlIGV2ZW50IGhhbmRsZXJzLlxuICovXG52YXIgUmVhY3RET01JbWcgPSBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdERPTUltZycsXG4gIHRhZ05hbWU6ICdJTUcnLFxuXG4gIG1peGluczogW1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluLCBMb2NhbEV2ZW50VHJhcE1peGluXSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBpbWcodGhpcy5wcm9wcyk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcExvYWQsICdsb2FkJyk7XG4gICAgdGhpcy50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wRXJyb3IsICdlcnJvcicpO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUltZztcblxufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudENvbnN0YW50cy5qc1wiLFwiLi9Mb2NhbEV2ZW50VHJhcE1peGluXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9Mb2NhbEV2ZW50VHJhcE1peGluLmpzXCIsXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbi5qc1wiLFwiLi9SZWFjdENsYXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENsYXNzLmpzXCIsXCIuL1JlYWN0RWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NSW5wdXQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NSW5wdXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBdXRvRm9jdXNNaXhpbiA9IHJlcXVpcmUoXCIuL0F1dG9Gb2N1c01peGluXCIpO1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiKTtcbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0gcmVxdWlyZShcIi4vTGlua2VkVmFsdWVVdGlsc1wiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIGlucHV0ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoJ2lucHV0Jyk7XG5cbnZhciBpbnN0YW5jZXNCeVJlYWN0SUQgPSB7fTtcblxuZnVuY3Rpb24gZm9yY2VVcGRhdGVJZk1vdW50ZWQoKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIGlmICh0aGlzLmlzTW91bnRlZCgpKSB7XG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8aW5wdXQ+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBhbGxvd3Mgc2V0dGluZyB0aGVzZSBvcHRpb25hbFxuICogcHJvcHM6IGBjaGVja2VkYCwgYHZhbHVlYCwgYGRlZmF1bHRDaGVja2VkYCwgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICpcbiAqIElmIGBjaGVja2VkYCBvciBgdmFsdWVgIGFyZSBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zXG4gKiB0aGF0IGFmZmVjdCB0aGUgY2hlY2tlZCBzdGF0ZSBvciB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiB0aGV5IGFyZSBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgbm90XG4gKiB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuIEluc3RlYWQsIHRoZSBwcm9wcyBtdXN0IGNoYW5nZSBpbiBvcmRlciBmb3JcbiAqIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCBhcyB1bmNoZWNrZWQgKG9yIGBkZWZhdWx0Q2hlY2tlZGApXG4gKiB3aXRoIGFuIGVtcHR5IHZhbHVlIChvciBgZGVmYXVsdFZhbHVlYCkuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEyL1dELWh0bWw1LTIwMTIxMDI1L3RoZS1pbnB1dC1lbGVtZW50Lmh0bWxcbiAqL1xudmFyIFJlYWN0RE9NSW5wdXQgPSBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdERPTUlucHV0JyxcbiAgdGFnTmFtZTogJ0lOUFVUJyxcblxuICBtaXhpbnM6IFtBdXRvRm9jdXNNaXhpbiwgTGlua2VkVmFsdWVVdGlscy5NaXhpbiwgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5dLFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICBpbml0aWFsQ2hlY2tlZDogdGhpcy5wcm9wcy5kZWZhdWx0Q2hlY2tlZCB8fCBmYWxzZSxcbiAgICAgIGluaXRpYWxWYWx1ZTogZGVmYXVsdFZhbHVlICE9IG51bGwgPyBkZWZhdWx0VmFsdWUgOiBudWxsXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIC8vIENsb25lIGB0aGlzLnByb3BzYCBzbyB3ZSBkb24ndCBtdXRhdGUgdGhlIGlucHV0LlxuICAgIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgdGhpcy5wcm9wcyk7XG5cbiAgICBwcm9wcy5kZWZhdWx0Q2hlY2tlZCA9IG51bGw7XG4gICAgcHJvcHMuZGVmYXVsdFZhbHVlID0gbnVsbDtcblxuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgcHJvcHMudmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiB0aGlzLnN0YXRlLmluaXRpYWxWYWx1ZTtcblxuICAgIHZhciBjaGVja2VkID0gTGlua2VkVmFsdWVVdGlscy5nZXRDaGVja2VkKHRoaXMpO1xuICAgIHByb3BzLmNoZWNrZWQgPSBjaGVja2VkICE9IG51bGwgPyBjaGVja2VkIDogdGhpcy5zdGF0ZS5pbml0aWFsQ2hlY2tlZDtcblxuICAgIHByb3BzLm9uQ2hhbmdlID0gdGhpcy5faGFuZGxlQ2hhbmdlO1xuXG4gICAgcmV0dXJuIGlucHV0KHByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlkID0gUmVhY3RNb3VudC5nZXRJRCh0aGlzLmdldERPTU5vZGUoKSk7XG4gICAgaW5zdGFuY2VzQnlSZWFjdElEW2lkXSA9IHRoaXM7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciByb290Tm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpO1xuICAgIHZhciBpZCA9IFJlYWN0TW91bnQuZ2V0SUQocm9vdE5vZGUpO1xuICAgIGRlbGV0ZSBpbnN0YW5jZXNCeVJlYWN0SURbaWRdO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24ocHJldlByb3BzLCBwcmV2U3RhdGUsIHByZXZDb250ZXh0KSB7XG4gICAgdmFyIHJvb3ROb2RlID0gdGhpcy5nZXRET01Ob2RlKCk7XG4gICAgaWYgKHRoaXMucHJvcHMuY2hlY2tlZCAhPSBudWxsKSB7XG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShcbiAgICAgICAgcm9vdE5vZGUsXG4gICAgICAgICdjaGVja2VkJyxcbiAgICAgICAgdGhpcy5wcm9wcy5jaGVja2VkIHx8IGZhbHNlXG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIC8vIENhc3QgYHZhbHVlYCB0byBhIHN0cmluZyB0byBlbnN1cmUgdGhlIHZhbHVlIGlzIHNldCBjb3JyZWN0bHkuIFdoaWxlXG4gICAgICAvLyBicm93c2VycyB0eXBpY2FsbHkgZG8gdGhpcyBhcyBuZWNlc3NhcnksIGpzZG9tIGRvZXNuJ3QuXG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShyb290Tm9kZSwgJ3ZhbHVlJywgJycgKyB2YWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVDaGFuZ2U6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJldHVyblZhbHVlO1xuICAgIHZhciBvbkNoYW5nZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0T25DaGFuZ2UodGhpcyk7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IG9uQ2hhbmdlLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgICAvLyBIZXJlIHdlIHVzZSBhc2FwIHRvIHdhaXQgdW50aWwgYWxsIHVwZGF0ZXMgaGF2ZSBwcm9wYWdhdGVkLCB3aGljaFxuICAgIC8vIGlzIGltcG9ydGFudCB3aGVuIHVzaW5nIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3aXRoaW4gbGF5ZXJzOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTY5OFxuICAgIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcblxuICAgIHZhciBuYW1lID0gdGhpcy5wcm9wcy5uYW1lO1xuICAgIGlmICh0aGlzLnByb3BzLnR5cGUgPT09ICdyYWRpbycgJiYgbmFtZSAhPSBudWxsKSB7XG4gICAgICB2YXIgcm9vdE5vZGUgPSB0aGlzLmdldERPTU5vZGUoKTtcbiAgICAgIHZhciBxdWVyeVJvb3QgPSByb290Tm9kZTtcblxuICAgICAgd2hpbGUgKHF1ZXJ5Um9vdC5wYXJlbnROb2RlKSB7XG4gICAgICAgIHF1ZXJ5Um9vdCA9IHF1ZXJ5Um9vdC5wYXJlbnROb2RlO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBgcm9vdE5vZGUuZm9ybWAgd2FzIG5vbi1udWxsLCB0aGVuIHdlIGNvdWxkIHRyeSBgZm9ybS5lbGVtZW50c2AsXG4gICAgICAvLyBidXQgdGhhdCBzb21ldGltZXMgYmVoYXZlcyBzdHJhbmdlbHkgaW4gSUU4LiBXZSBjb3VsZCBhbHNvIHRyeSB1c2luZ1xuICAgICAgLy8gYGZvcm0uZ2V0RWxlbWVudHNCeU5hbWVgLCBidXQgdGhhdCB3aWxsIG9ubHkgcmV0dXJuIGRpcmVjdCBjaGlsZHJlblxuICAgICAgLy8gYW5kIHdvbid0IGluY2x1ZGUgaW5wdXRzIHRoYXQgdXNlIHRoZSBIVE1MNSBgZm9ybT1gIGF0dHJpYnV0ZS4gU2luY2VcbiAgICAgIC8vIHRoZSBpbnB1dCBtaWdodCBub3QgZXZlbiBiZSBpbiBhIGZvcm0sIGxldCdzIGp1c3QgdXNlIHRoZSBnbG9iYWxcbiAgICAgIC8vIGBxdWVyeVNlbGVjdG9yQWxsYCB0byBlbnN1cmUgd2UgZG9uJ3QgbWlzcyBhbnl0aGluZy5cbiAgICAgIHZhciBncm91cCA9IHF1ZXJ5Um9vdC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAnaW5wdXRbbmFtZT0nICsgSlNPTi5zdHJpbmdpZnkoJycgKyBuYW1lKSArICddW3R5cGU9XCJyYWRpb1wiXScpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgZ3JvdXBMZW4gPSBncm91cC5sZW5ndGg7IGkgPCBncm91cExlbjsgaSsrKSB7XG4gICAgICAgIHZhciBvdGhlck5vZGUgPSBncm91cFtpXTtcbiAgICAgICAgaWYgKG90aGVyTm9kZSA9PT0gcm9vdE5vZGUgfHxcbiAgICAgICAgICAgIG90aGVyTm9kZS5mb3JtICE9PSByb290Tm9kZS5mb3JtKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG90aGVySUQgPSBSZWFjdE1vdW50LmdldElEKG90aGVyTm9kZSk7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgb3RoZXJJRCxcbiAgICAgICAgICAnUmVhY3RET01JbnB1dDogTWl4aW5nIFJlYWN0IGFuZCBub24tUmVhY3QgcmFkaW8gaW5wdXRzIHdpdGggdGhlICcgK1xuICAgICAgICAgICdzYW1lIGBuYW1lYCBpcyBub3Qgc3VwcG9ydGVkLidcbiAgICAgICAgKSA6IGludmFyaWFudChvdGhlcklEKSk7XG4gICAgICAgIHZhciBvdGhlckluc3RhbmNlID0gaW5zdGFuY2VzQnlSZWFjdElEW290aGVySURdO1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIG90aGVySW5zdGFuY2UsXG4gICAgICAgICAgJ1JlYWN0RE9NSW5wdXQ6IFVua25vd24gcmFkaW8gYnV0dG9uIElEICVzLicsXG4gICAgICAgICAgb3RoZXJJRFxuICAgICAgICApIDogaW52YXJpYW50KG90aGVySW5zdGFuY2UpKTtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIGNvbnRyb2xsZWQgcmFkaW8gYnV0dG9uIGdyb3VwLCBmb3JjaW5nIHRoZSBpbnB1dCB0aGF0XG4gICAgICAgIC8vIHdhcyBwcmV2aW91c2x5IGNoZWNrZWQgdG8gdXBkYXRlIHdpbGwgY2F1c2UgaXQgdG8gYmUgY29tZSByZS1jaGVja2VkXG4gICAgICAgIC8vIGFzIGFwcHJvcHJpYXRlLlxuICAgICAgICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgb3RoZXJJbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSW5wdXQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0F1dG9Gb2N1c01peGluXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9BdXRvRm9jdXNNaXhpbi5qc1wiLFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0RPTVByb3BlcnR5T3BlcmF0aW9ucy5qc1wiLFwiLi9MaW5rZWRWYWx1ZVV0aWxzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9MaW5rZWRWYWx1ZVV0aWxzLmpzXCIsXCIuL09iamVjdC5hc3NpZ25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanNcIixcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluLmpzXCIsXCIuL1JlYWN0Q2xhc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q2xhc3MuanNcIixcIi4vUmVhY3RFbGVtZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVsZW1lbnQuanNcIixcIi4vUmVhY3RNb3VudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNb3VudC5qc1wiLFwiLi9SZWFjdFVwZGF0ZXNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0VXBkYXRlcy5qc1wiLFwiLi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NT3B0aW9uLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTU9wdGlvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciBvcHRpb24gPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSgnb3B0aW9uJyk7XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8b3B0aW9uPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgd2FybnMgd2hlbiBgc2VsZWN0ZWRgIGlzIHNldC5cbiAqL1xudmFyIFJlYWN0RE9NT3B0aW9uID0gUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01PcHRpb24nLFxuICB0YWdOYW1lOiAnT1BUSU9OJyxcblxuICBtaXhpbnM6IFtSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbl0sXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAvLyBUT0RPICh5dW5nc3RlcnMpOiBSZW1vdmUgc3VwcG9ydCBmb3IgYHNlbGVjdGVkYCBpbiA8b3B0aW9uPi5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZCA9PSBudWxsLFxuICAgICAgICAnVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIG9uIDxzZWxlY3Q+IGluc3RlYWQgb2YgJyArXG4gICAgICAgICdzZXR0aW5nIGBzZWxlY3RlZGAgb24gPG9wdGlvbj4uJ1xuICAgICAgKSA6IG51bGwpO1xuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBvcHRpb24odGhpcy5wcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01PcHRpb247XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbi5qc1wiLFwiLi9SZWFjdENsYXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENsYXNzLmpzXCIsXCIuL1JlYWN0RWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCIsXCIuL3dhcm5pbmdcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3dhcm5pbmcuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTVNlbGVjdC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVNlbGVjdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEF1dG9Gb2N1c01peGluID0gcmVxdWlyZShcIi4vQXV0b0ZvY3VzTWl4aW5cIik7XG52YXIgTGlua2VkVmFsdWVVdGlscyA9IHJlcXVpcmUoXCIuL0xpbmtlZFZhbHVlVXRpbHNcIik7XG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKTtcbnZhciBSZWFjdENsYXNzID0gcmVxdWlyZShcIi4vUmVhY3RDbGFzc1wiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxudmFyIHNlbGVjdCA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KCdzZWxlY3QnKTtcblxuZnVuY3Rpb24gdXBkYXRlT3B0aW9uc0lmUGVuZGluZ1VwZGF0ZUFuZE1vdW50ZWQoKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIGlmICh0aGlzLl9wZW5kaW5nVXBkYXRlKSB7XG4gICAgdGhpcy5fcGVuZGluZ1VwZGF0ZSA9IGZhbHNlO1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdGhpcy5pc01vdW50ZWQoKSkge1xuICAgICAgdXBkYXRlT3B0aW9ucyh0aGlzLCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmFsaWRhdGlvbiBmdW5jdGlvbiBmb3IgYHZhbHVlYCBhbmQgYGRlZmF1bHRWYWx1ZWAuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZWxlY3RWYWx1ZVR5cGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChwcm9wcy5tdWx0aXBsZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJUaGUgYFwiICsgcHJvcE5hbWUgKyBcImAgcHJvcCBzdXBwbGllZCB0byA8c2VsZWN0PiBtdXN0IGJlIGFuIGFycmF5IGlmIFwiKSArXG4gICAgICAgIChcImBtdWx0aXBsZWAgaXMgdHJ1ZS5cIilcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIlRoZSBgXCIgKyBwcm9wTmFtZSArIFwiYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYSBzY2FsYXIgXCIpICtcbiAgICAgICAgKFwidmFsdWUgaWYgYG11bHRpcGxlYCBpcyBmYWxzZS5cIilcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IEluc3RhbmNlIG9mIFJlYWN0RE9NU2VsZWN0XG4gKiBAcGFyYW0geyp9IHByb3BWYWx1ZSBBIHN0cmluZ2FibGUgKHdpdGggYG11bHRpcGxlYCwgYSBsaXN0IG9mIHN0cmluZ2FibGVzKS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMoY29tcG9uZW50LCBwcm9wVmFsdWUpIHtcbiAgdmFyIHNlbGVjdGVkVmFsdWUsIGksIGw7XG4gIHZhciBvcHRpb25zID0gY29tcG9uZW50LmdldERPTU5vZGUoKS5vcHRpb25zO1xuXG4gIGlmIChjb21wb25lbnQucHJvcHMubXVsdGlwbGUpIHtcbiAgICBzZWxlY3RlZFZhbHVlID0ge307XG4gICAgZm9yIChpID0gMCwgbCA9IHByb3BWYWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHNlbGVjdGVkVmFsdWVbJycgKyBwcm9wVmFsdWVbaV1dID0gdHJ1ZTtcbiAgICB9XG4gICAgZm9yIChpID0gMCwgbCA9IG9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSBzZWxlY3RlZFZhbHVlLmhhc093blByb3BlcnR5KG9wdGlvbnNbaV0udmFsdWUpO1xuICAgICAgaWYgKG9wdGlvbnNbaV0uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbnNbaV0uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRG8gbm90IHNldCBgc2VsZWN0LnZhbHVlYCBhcyBleGFjdCBiZWhhdmlvciBpc24ndCBjb25zaXN0ZW50IGFjcm9zcyBhbGxcbiAgICAvLyBicm93c2VycyBmb3IgYWxsIGNhc2VzLlxuICAgIHNlbGVjdGVkVmFsdWUgPSAnJyArIHByb3BWYWx1ZTtcbiAgICBmb3IgKGkgPSAwLCBsID0gb3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChvcHRpb25zW2ldLnZhbHVlID09PSBzZWxlY3RlZFZhbHVlKSB7XG4gICAgICAgIG9wdGlvbnNbaV0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmxlbmd0aCkge1xuICAgICAgb3B0aW9uc1swXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIDxzZWxlY3Q+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBhbGxvd3Mgb3B0aW9uYWxseSBzZXR0aW5nIHRoZVxuICogcHJvcHMgYHZhbHVlYCBhbmQgYGRlZmF1bHRWYWx1ZWAuIElmIGBtdWx0aXBsZWAgaXMgZmFsc2UsIHRoZSBwcm9wIG11c3QgYmUgYVxuICogc3RyaW5nYWJsZS4gSWYgYG11bHRpcGxlYCBpcyB0cnVlLCB0aGUgcHJvcCBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ2FibGVzLlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgbm90IHN1cHBsaWVkIChvciBudWxsL3VuZGVmaW5lZCksIHVzZXIgYWN0aW9ucyB0aGF0IGNoYW5nZSB0aGVcbiAqIHNlbGVjdGVkIG9wdGlvbiB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAqXG4gKiBJZiBpdCBpcyBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBvcHRpb25zIHdpbGwgbm90XG4gKiB1cGRhdGUgaW4gcmVzcG9uc2UgdG8gdXNlciBhY3Rpb25zLiBJbnN0ZWFkLCB0aGUgYHZhbHVlYCBwcm9wIG11c3QgY2hhbmdlIGluXG4gKiBvcmRlciBmb3IgdGhlIHJlbmRlcmVkIG9wdGlvbnMgdG8gdXBkYXRlLlxuICpcbiAqIElmIGBkZWZhdWx0VmFsdWVgIGlzIHByb3ZpZGVkLCBhbnkgb3B0aW9ucyB3aXRoIHRoZSBzdXBwbGllZCB2YWx1ZXMgd2lsbCBiZVxuICogc2VsZWN0ZWQuXG4gKi9cbnZhciBSZWFjdERPTVNlbGVjdCA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NU2VsZWN0JyxcbiAgdGFnTmFtZTogJ1NFTEVDVCcsXG5cbiAgbWl4aW5zOiBbQXV0b0ZvY3VzTWl4aW4sIExpbmtlZFZhbHVlVXRpbHMuTWl4aW4sIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBkZWZhdWx0VmFsdWU6IHNlbGVjdFZhbHVlVHlwZSxcbiAgICB2YWx1ZTogc2VsZWN0VmFsdWVUeXBlXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAvLyBDbG9uZSBgdGhpcy5wcm9wc2Agc28gd2UgZG9uJ3QgbXV0YXRlIHRoZSBpbnB1dC5cbiAgICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIHRoaXMucHJvcHMpO1xuXG4gICAgcHJvcHMub25DaGFuZ2UgPSB0aGlzLl9oYW5kbGVDaGFuZ2U7XG4gICAgcHJvcHMudmFsdWUgPSBudWxsO1xuXG4gICAgcmV0dXJuIHNlbGVjdChwcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wZW5kaW5nVXBkYXRlID0gZmFsc2U7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUgIT0gbnVsbCkge1xuICAgICAgdXBkYXRlT3B0aW9ucyh0aGlzLCB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24ocHJldlByb3BzKSB7XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fcGVuZGluZ1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgdXBkYXRlT3B0aW9ucyh0aGlzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICghcHJldlByb3BzLm11bHRpcGxlICE9PSAhdGhpcy5wcm9wcy5tdWx0aXBsZSkge1xuICAgICAgLy8gRm9yIHNpbXBsaWNpdHksIHJlYXBwbHkgYGRlZmF1bHRWYWx1ZWAgaWYgYG11bHRpcGxlYCBpcyB0b2dnbGVkLlxuICAgICAgaWYgKHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlT3B0aW9ucyh0aGlzLCB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXZlcnQgdGhlIHNlbGVjdCBiYWNrIHRvIGl0cyBkZWZhdWx0IHVuc2VsZWN0ZWQgc3RhdGUuXG4gICAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgdGhpcy5wcm9wcy5tdWx0aXBsZSA/IFtdIDogJycpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlQ2hhbmdlOiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZXR1cm5WYWx1ZTtcbiAgICB2YXIgb25DaGFuZ2UgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldE9uQ2hhbmdlKHRoaXMpO1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgcmV0dXJuVmFsdWUgPSBvbkNoYW5nZS5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLl9wZW5kaW5nVXBkYXRlID0gdHJ1ZTtcbiAgICBSZWFjdFVwZGF0ZXMuYXNhcCh1cGRhdGVPcHRpb25zSWZQZW5kaW5nVXBkYXRlQW5kTW91bnRlZCwgdGhpcyk7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NU2VsZWN0O1xuXG59LHtcIi4vQXV0b0ZvY3VzTWl4aW5cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0F1dG9Gb2N1c01peGluLmpzXCIsXCIuL0xpbmtlZFZhbHVlVXRpbHNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0xpbmtlZFZhbHVlVXRpbHMuanNcIixcIi4vT2JqZWN0LmFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1wiLFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4uanNcIixcIi4vUmVhY3RDbGFzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDbGFzcy5qc1wiLFwiLi9SZWFjdEVsZW1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qc1wiLFwiLi9SZWFjdFVwZGF0ZXNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0VXBkYXRlcy5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTVNlbGVjdGlvbi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVNlbGVjdGlvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0ID0gcmVxdWlyZShcIi4vZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldFwiKTtcbnZhciBnZXRUZXh0Q29udGVudEFjY2Vzc29yID0gcmVxdWlyZShcIi4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclwiKTtcblxuLyoqXG4gKiBXaGlsZSBgaXNDb2xsYXBzZWRgIGlzIGF2YWlsYWJsZSBvbiB0aGUgU2VsZWN0aW9uIG9iamVjdCBhbmQgYGNvbGxhcHNlZGBcbiAqIGlzIGF2YWlsYWJsZSBvbiB0aGUgUmFuZ2Ugb2JqZWN0LCBJRTExIHNvbWV0aW1lcyBnZXRzIHRoZW0gd3JvbmcuXG4gKiBJZiB0aGUgYW5jaG9yL2ZvY3VzIG5vZGVzIGFuZCBvZmZzZXRzIGFyZSB0aGUgc2FtZSwgdGhlIHJhbmdlIGlzIGNvbGxhcHNlZC5cbiAqL1xuZnVuY3Rpb24gaXNDb2xsYXBzZWQoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0LCBmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KSB7XG4gIHJldHVybiBhbmNob3JOb2RlID09PSBmb2N1c05vZGUgJiYgYW5jaG9yT2Zmc2V0ID09PSBmb2N1c09mZnNldDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGFwcHJvcHJpYXRlIGFuY2hvciBhbmQgZm9jdXMgbm9kZS9vZmZzZXQgcGFpcnMgZm9yIElFLlxuICpcbiAqIFRoZSBjYXRjaCBoZXJlIGlzIHRoYXQgSUUncyBzZWxlY3Rpb24gQVBJIGRvZXNuJ3QgcHJvdmlkZSBpbmZvcm1hdGlvblxuICogYWJvdXQgd2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGZvcndhcmQgb3IgYmFja3dhcmQsIHNvIHdlIGhhdmUgdG9cbiAqIGJlaGF2ZSBhcyB0aG91Z2ggaXQncyBhbHdheXMgZm9yd2FyZC5cbiAqXG4gKiBJRSB0ZXh0IGRpZmZlcnMgZnJvbSBtb2Rlcm4gc2VsZWN0aW9uIGluIHRoYXQgaXQgYmVoYXZlcyBhcyB0aG91Z2hcbiAqIGJsb2NrIGVsZW1lbnRzIGVuZCB3aXRoIGEgbmV3IGxpbmUuIFRoaXMgbWVhbnMgY2hhcmFjdGVyIG9mZnNldHMgd2lsbFxuICogZGlmZmVyIGJldHdlZW4gdGhlIHR3byBBUElzLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRJRU9mZnNldHMobm9kZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZG9jdW1lbnQuc2VsZWN0aW9uO1xuICB2YXIgc2VsZWN0ZWRSYW5nZSA9IHNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICB2YXIgc2VsZWN0ZWRMZW5ndGggPSBzZWxlY3RlZFJhbmdlLnRleHQubGVuZ3RoO1xuXG4gIC8vIER1cGxpY2F0ZSBzZWxlY3Rpb24gc28gd2UgY2FuIG1vdmUgcmFuZ2Ugd2l0aG91dCBicmVha2luZyB1c2VyIHNlbGVjdGlvbi5cbiAgdmFyIGZyb21TdGFydCA9IHNlbGVjdGVkUmFuZ2UuZHVwbGljYXRlKCk7XG4gIGZyb21TdGFydC5tb3ZlVG9FbGVtZW50VGV4dChub2RlKTtcbiAgZnJvbVN0YXJ0LnNldEVuZFBvaW50KCdFbmRUb1N0YXJ0Jywgc2VsZWN0ZWRSYW5nZSk7XG5cbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gZnJvbVN0YXJ0LnRleHQubGVuZ3RoO1xuICB2YXIgZW5kT2Zmc2V0ID0gc3RhcnRPZmZzZXQgKyBzZWxlY3RlZExlbmd0aDtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydE9mZnNldCxcbiAgICBlbmQ6IGVuZE9mZnNldFxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7P29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kZXJuT2Zmc2V0cyhub2RlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uICYmIHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcblxuICBpZiAoIXNlbGVjdGlvbiB8fCBzZWxlY3Rpb24ucmFuZ2VDb3VudCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGFuY2hvck5vZGUgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcbiAgdmFyIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQ7XG4gIHZhciBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICB2YXIgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG5cbiAgdmFyIGN1cnJlbnRSYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuXG4gIC8vIElmIHRoZSBub2RlIGFuZCBvZmZzZXQgdmFsdWVzIGFyZSB0aGUgc2FtZSwgdGhlIHNlbGVjdGlvbiBpcyBjb2xsYXBzZWQuXG4gIC8vIGBTZWxlY3Rpb24uaXNDb2xsYXBzZWRgIGlzIGF2YWlsYWJsZSBuYXRpdmVseSwgYnV0IElFIHNvbWV0aW1lcyBnZXRzXG4gIC8vIHRoaXMgdmFsdWUgd3JvbmcuXG4gIHZhciBpc1NlbGVjdGlvbkNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKFxuICAgIHNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgIHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgc2VsZWN0aW9uLmZvY3VzTm9kZSxcbiAgICBzZWxlY3Rpb24uZm9jdXNPZmZzZXRcbiAgKTtcblxuICB2YXIgcmFuZ2VMZW5ndGggPSBpc1NlbGVjdGlvbkNvbGxhcHNlZCA/IDAgOiBjdXJyZW50UmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7XG5cbiAgdmFyIHRlbXBSYW5nZSA9IGN1cnJlbnRSYW5nZS5jbG9uZVJhbmdlKCk7XG4gIHRlbXBSYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobm9kZSk7XG4gIHRlbXBSYW5nZS5zZXRFbmQoY3VycmVudFJhbmdlLnN0YXJ0Q29udGFpbmVyLCBjdXJyZW50UmFuZ2Uuc3RhcnRPZmZzZXQpO1xuXG4gIHZhciBpc1RlbXBSYW5nZUNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKFxuICAgIHRlbXBSYW5nZS5zdGFydENvbnRhaW5lcixcbiAgICB0ZW1wUmFuZ2Uuc3RhcnRPZmZzZXQsXG4gICAgdGVtcFJhbmdlLmVuZENvbnRhaW5lcixcbiAgICB0ZW1wUmFuZ2UuZW5kT2Zmc2V0XG4gICk7XG5cbiAgdmFyIHN0YXJ0ID0gaXNUZW1wUmFuZ2VDb2xsYXBzZWQgPyAwIDogdGVtcFJhbmdlLnRvU3RyaW5nKCkubGVuZ3RoO1xuICB2YXIgZW5kID0gc3RhcnQgKyByYW5nZUxlbmd0aDtcblxuICAvLyBEZXRlY3Qgd2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGJhY2t3YXJkLlxuICB2YXIgZGV0ZWN0aW9uUmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICBkZXRlY3Rpb25SYW5nZS5zZXRTdGFydChhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQpO1xuICBkZXRlY3Rpb25SYW5nZS5zZXRFbmQoZm9jdXNOb2RlLCBmb2N1c09mZnNldCk7XG4gIHZhciBpc0JhY2t3YXJkID0gZGV0ZWN0aW9uUmFuZ2UuY29sbGFwc2VkO1xuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IGlzQmFja3dhcmQgPyBlbmQgOiBzdGFydCxcbiAgICBlbmQ6IGlzQmFja3dhcmQgPyBzdGFydCA6IGVuZFxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAqL1xuZnVuY3Rpb24gc2V0SUVPZmZzZXRzKG5vZGUsIG9mZnNldHMpIHtcbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCkuZHVwbGljYXRlKCk7XG4gIHZhciBzdGFydCwgZW5kO1xuXG4gIGlmICh0eXBlb2Ygb2Zmc2V0cy5lbmQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIGVuZCA9IHN0YXJ0O1xuICB9IGVsc2UgaWYgKG9mZnNldHMuc3RhcnQgPiBvZmZzZXRzLmVuZCkge1xuICAgIHN0YXJ0ID0gb2Zmc2V0cy5lbmQ7XG4gICAgZW5kID0gb2Zmc2V0cy5zdGFydDtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgZW5kID0gb2Zmc2V0cy5lbmQ7XG4gIH1cblxuICByYW5nZS5tb3ZlVG9FbGVtZW50VGV4dChub2RlKTtcbiAgcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCBzdGFydCk7XG4gIHJhbmdlLnNldEVuZFBvaW50KCdFbmRUb1N0YXJ0JywgcmFuZ2UpO1xuICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBlbmQgLSBzdGFydCk7XG4gIHJhbmdlLnNlbGVjdCgpO1xufVxuXG4vKipcbiAqIEluIG1vZGVybiBub24tSUUgYnJvd3NlcnMsIHdlIGNhbiBzdXBwb3J0IGJvdGggZm9yd2FyZCBhbmQgYmFja3dhcmRcbiAqIHNlbGVjdGlvbnMuXG4gKlxuICogTm90ZTogSUUxMCsgc3VwcG9ydHMgdGhlIFNlbGVjdGlvbiBvYmplY3QsIGJ1dCBpdCBkb2VzIG5vdCBzdXBwb3J0XG4gKiB0aGUgYGV4dGVuZGAgbWV0aG9kLCB3aGljaCBtZWFucyB0aGF0IGV2ZW4gaW4gbW9kZXJuIElFLCBpdCdzIG5vdCBwb3NzaWJsZVxuICogdG8gcHJvZ3JhbWF0aWNhbGx5IGNyZWF0ZSBhIGJhY2t3YXJkIHNlbGVjdGlvbi4gVGh1cywgZm9yIGFsbCBJRVxuICogdmVyc2lvbnMsIHdlIHVzZSB0aGUgb2xkIElFIEFQSSB0byBjcmVhdGUgb3VyIHNlbGVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gb2Zmc2V0c1xuICovXG5mdW5jdGlvbiBzZXRNb2Rlcm5PZmZzZXRzKG5vZGUsIG9mZnNldHMpIHtcbiAgaWYgKCF3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGxlbmd0aCA9IG5vZGVbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXS5sZW5ndGg7XG4gIHZhciBzdGFydCA9IE1hdGgubWluKG9mZnNldHMuc3RhcnQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSB0eXBlb2Ygb2Zmc2V0cy5lbmQgPT09ICd1bmRlZmluZWQnID9cbiAgICAgICAgICAgIHN0YXJ0IDogTWF0aC5taW4ob2Zmc2V0cy5lbmQsIGxlbmd0aCk7XG5cbiAgLy8gSUUgMTEgdXNlcyBtb2Rlcm4gc2VsZWN0aW9uLCBidXQgZG9lc24ndCBzdXBwb3J0IHRoZSBleHRlbmQgbWV0aG9kLlxuICAvLyBGbGlwIGJhY2t3YXJkIHNlbGVjdGlvbnMsIHNvIHdlIGNhbiBzZXQgd2l0aCBhIHNpbmdsZSByYW5nZS5cbiAgaWYgKCFzZWxlY3Rpb24uZXh0ZW5kICYmIHN0YXJ0ID4gZW5kKSB7XG4gICAgdmFyIHRlbXAgPSBlbmQ7XG4gICAgZW5kID0gc3RhcnQ7XG4gICAgc3RhcnQgPSB0ZW1wO1xuICB9XG5cbiAgdmFyIHN0YXJ0TWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBzdGFydCk7XG4gIHZhciBlbmRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KG5vZGUsIGVuZCk7XG5cbiAgaWYgKHN0YXJ0TWFya2VyICYmIGVuZE1hcmtlcikge1xuICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnRNYXJrZXIubm9kZSwgc3RhcnRNYXJrZXIub2Zmc2V0KTtcbiAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cbiAgICBpZiAoc3RhcnQgPiBlbmQpIHtcbiAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgICBzZWxlY3Rpb24uZXh0ZW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2Uuc2V0RW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcbiAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgfVxuICB9XG59XG5cbnZhciB1c2VJRU9mZnNldHMgPSAoXG4gIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJlxuICAnc2VsZWN0aW9uJyBpbiBkb2N1bWVudCAmJlxuICAhKCdnZXRTZWxlY3Rpb24nIGluIHdpbmRvdylcbik7XG5cbnZhciBSZWFjdERPTVNlbGVjdGlvbiA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKi9cbiAgZ2V0T2Zmc2V0czogdXNlSUVPZmZzZXRzID8gZ2V0SUVPZmZzZXRzIDogZ2V0TW9kZXJuT2Zmc2V0cyxcblxuICAvKipcbiAgICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gICAqL1xuICBzZXRPZmZzZXRzOiB1c2VJRU9mZnNldHMgPyBzZXRJRU9mZnNldHMgOiBzZXRNb2Rlcm5PZmZzZXRzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NU2VsZWN0aW9uO1xuXG59LHtcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzXCIsXCIuL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQuanNcIixcIi4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0VGV4dENvbnRlbnRBY2Nlc3Nvci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTVRleHRDb21wb25lbnQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01UZXh0Q29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiKTtcbnZhciBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCA9XG4gIHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50XCIpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RET01Db21wb25lbnRcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9IHJlcXVpcmUoXCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiKTtcblxuLyoqXG4gKiBUZXh0IG5vZGVzIHZpb2xhdGUgYSBjb3VwbGUgYXNzdW1wdGlvbnMgdGhhdCBSZWFjdCBtYWtlcyBhYm91dCBjb21wb25lbnRzOlxuICpcbiAqICAtIFdoZW4gbW91bnRpbmcgdGV4dCBpbnRvIHRoZSBET00sIGFkamFjZW50IHRleHQgbm9kZXMgYXJlIG1lcmdlZC5cbiAqICAtIFRleHQgbm9kZXMgY2Fubm90IGJlIGFzc2lnbmVkIGEgUmVhY3Qgcm9vdCBJRC5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBpcyB1c2VkIHRvIHdyYXAgc3RyaW5ncyBpbiBlbGVtZW50cyBzbyB0aGF0IHRoZXkgY2FuIHVuZGVyZ29cbiAqIHRoZSBzYW1lIHJlY29uY2lsaWF0aW9uIHRoYXQgaXMgYXBwbGllZCB0byBlbGVtZW50cy5cbiAqXG4gKiBUT0RPOiBJbnZlc3RpZ2F0ZSByZXByZXNlbnRpbmcgUmVhY3QgY29tcG9uZW50cyBpbiB0aGUgRE9NIHdpdGggdGV4dCBub2Rlcy5cbiAqXG4gKiBAY2xhc3MgUmVhY3RET01UZXh0Q29tcG9uZW50XG4gKiBAZXh0ZW5kcyBSZWFjdENvbXBvbmVudFxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdERPTVRleHRDb21wb25lbnQgPSBmdW5jdGlvbihwcm9wcykge1xuICAvLyBUaGlzIGNvbnN0cnVjdG9yIGFuZCBpdHMgYXJndW1lbnQgaXMgY3VycmVudGx5IHVzZWQgYnkgbW9ja3MuXG59O1xuXG5hc3NpZ24oUmVhY3RET01UZXh0Q29tcG9uZW50LnByb3RvdHlwZSwge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlYWN0VGV4dH0gdGV4dFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24odGV4dCkge1xuICAgIC8vIFRPRE86IFRoaXMgaXMgcmVhbGx5IGEgUmVhY3RUZXh0IChSZWFjdE5vZGUpLCBub3QgYSBSZWFjdEVsZW1lbnRcbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IHRleHQ7XG4gICAgdGhpcy5fc3RyaW5nVGV4dCA9ICcnICsgdGV4dDtcblxuICAgIC8vIFByb3BlcnRpZXNcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgICB0aGlzLl9tb3VudEluZGV4ID0gMDtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgbWFya3VwIGZvciB0aGlzIHRleHQgbm9kZS4gVGhpcyBub2RlIGlzIG5vdCBpbnRlbmRlZCB0byBoYXZlXG4gICAqIGFueSBmZWF0dXJlcyBiZXNpZGVzIGNvbnRhaW5pbmcgdGV4dCBjb250ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgZm9yIHRoaXMgdGV4dCBub2RlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihyb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IHJvb3RJRDtcbiAgICB2YXIgZXNjYXBlZFRleHQgPSBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodGhpcy5fc3RyaW5nVGV4dCk7XG5cbiAgICBpZiAodHJhbnNhY3Rpb24ucmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcbiAgICAgIC8vIE5vcm1hbGx5IHdlJ2Qgd3JhcCB0aGlzIGluIGEgYHNwYW5gIGZvciB0aGUgcmVhc29ucyBzdGF0ZWQgYWJvdmUsIGJ1dFxuICAgICAgLy8gc2luY2UgdGhpcyBpcyBhIHNpdHVhdGlvbiB3aGVyZSBSZWFjdCB3b24ndCB0YWtlIG92ZXIgKHN0YXRpYyBwYWdlcyksXG4gICAgICAvLyB3ZSBjYW4gc2ltcGx5IHJldHVybiB0aGUgdGV4dCBhcyBpdCBpcy5cbiAgICAgIHJldHVybiBlc2NhcGVkVGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgJzxzcGFuICcgKyBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9ySUQocm9vdElEKSArICc+JyArXG4gICAgICAgIGVzY2FwZWRUZXh0ICtcbiAgICAgICc8L3NwYW4+J1xuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhpcyBjb21wb25lbnQgYnkgdXBkYXRpbmcgdGhlIHRleHQgY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFRleHR9IG5leHRUZXh0IFRoZSBuZXh0IHRleHQgY29udGVudFxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24obmV4dFRleHQsIHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKG5leHRUZXh0ICE9PSB0aGlzLl9jdXJyZW50RWxlbWVudCkge1xuICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0VGV4dDtcbiAgICAgIHZhciBuZXh0U3RyaW5nVGV4dCA9ICcnICsgbmV4dFRleHQ7XG4gICAgICBpZiAobmV4dFN0cmluZ1RleHQgIT09IHRoaXMuX3N0cmluZ1RleHQpIHtcbiAgICAgICAgLy8gVE9ETzogU2F2ZSB0aGlzIGFzIHBlbmRpbmcgcHJvcHMgYW5kIHVzZSBwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnlcbiAgICAgICAgLy8gYW5kL29yIHVwZGF0ZUNvbXBvbmVudCB0byBkbyB0aGUgYWN0dWFsIHVwZGF0ZSBmb3IgY29uc2lzdGVuY3kgd2l0aFxuICAgICAgICAvLyBvdGhlciBjb21wb25lbnQgdHlwZXM/XG4gICAgICAgIHRoaXMuX3N0cmluZ1RleHQgPSBuZXh0U3RyaW5nVGV4dDtcbiAgICAgICAgUmVhY3RET01Db21wb25lbnQuQmFja2VuZElET3BlcmF0aW9ucy51cGRhdGVUZXh0Q29udGVudEJ5SUQoXG4gICAgICAgICAgdGhpcy5fcm9vdE5vZGVJRCxcbiAgICAgICAgICBuZXh0U3RyaW5nVGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbigpIHtcbiAgICBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQodGhpcy5fcm9vdE5vZGVJRCk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01UZXh0Q29tcG9uZW50O1xuXG59LHtcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMuanNcIixcIi4vT2JqZWN0LmFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1wiLFwiLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQuanNcIixcIi4vUmVhY3RET01Db21wb25lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NQ29tcG9uZW50LmpzXCIsXCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NVGV4dGFyZWEuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NVGV4dGFyZWFcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBdXRvRm9jdXNNaXhpbiA9IHJlcXVpcmUoXCIuL0F1dG9Gb2N1c01peGluXCIpO1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiKTtcbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0gcmVxdWlyZShcIi4vTGlua2VkVmFsdWVVdGlsc1wiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgdGV4dGFyZWEgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSgndGV4dGFyZWEnKTtcblxuZnVuY3Rpb24gZm9yY2VVcGRhdGVJZk1vdW50ZWQoKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIGlmICh0aGlzLmlzTW91bnRlZCgpKSB7XG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIDx0ZXh0YXJlYT4gbmF0aXZlIGNvbXBvbmVudCB0aGF0IGFsbG93cyBzZXR0aW5nIGB2YWx1ZWAsIGFuZFxuICogYGRlZmF1bHRWYWx1ZWAuIFRoaXMgZGlmZmVycyBmcm9tIHRoZSB0cmFkaXRpb25hbCBET00gQVBJIGJlY2F1c2UgdmFsdWUgaXNcbiAqIHVzdWFsbHkgc2V0IGFzIFBDREFUQSBjaGlsZHJlbi5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBhZmZlY3QgdGhlXG4gKiB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbFxuICogbm90IHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCB3aXRoIGFuIGVtcHR5IHZhbHVlLCB0aGUgcHJvcFxuICogYGRlZmF1bHRWYWx1ZWAgaWYgc3BlY2lmaWVkLCBvciB0aGUgY2hpbGRyZW4gY29udGVudCAoZGVwcmVjYXRlZCkuXG4gKi9cbnZhciBSZWFjdERPTVRleHRhcmVhID0gUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01UZXh0YXJlYScsXG4gIHRhZ05hbWU6ICdURVhUQVJFQScsXG5cbiAgbWl4aW5zOiBbQXV0b0ZvY3VzTWl4aW4sIExpbmtlZFZhbHVlVXRpbHMuTWl4aW4sIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWZhdWx0VmFsdWUgPSB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICAvLyBUT0RPICh5dW5nc3RlcnMpOiBSZW1vdmUgc3VwcG9ydCBmb3IgY2hpbGRyZW4gY29udGVudCBpbiA8dGV4dGFyZWE+LlxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgJ1VzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3IgYHZhbHVlYCBwcm9wcyBpbnN0ZWFkIG9mIHNldHRpbmcgJyArXG4gICAgICAgICAgJ2NoaWxkcmVuIG9uIDx0ZXh0YXJlYT4uJ1xuICAgICAgICApIDogbnVsbCk7XG4gICAgICB9XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBkZWZhdWx0VmFsdWUgPT0gbnVsbCxcbiAgICAgICAgJ0lmIHlvdSBzdXBwbHkgYGRlZmF1bHRWYWx1ZWAgb24gYSA8dGV4dGFyZWE+LCBkbyBub3QgcGFzcyBjaGlsZHJlbi4nXG4gICAgICApIDogaW52YXJpYW50KGRlZmF1bHRWYWx1ZSA9PSBudWxsKSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICBjaGlsZHJlbi5sZW5ndGggPD0gMSxcbiAgICAgICAgICAnPHRleHRhcmVhPiBjYW4gb25seSBoYXZlIGF0IG1vc3Qgb25lIGNoaWxkLidcbiAgICAgICAgKSA6IGludmFyaWFudChjaGlsZHJlbi5sZW5ndGggPD0gMSkpO1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuWzBdO1xuICAgICAgfVxuXG4gICAgICBkZWZhdWx0VmFsdWUgPSAnJyArIGNoaWxkcmVuO1xuICAgIH1cbiAgICBpZiAoZGVmYXVsdFZhbHVlID09IG51bGwpIHtcbiAgICAgIGRlZmF1bHRWYWx1ZSA9ICcnO1xuICAgIH1cbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHRoaXMpO1xuICAgIHJldHVybiB7XG4gICAgICAvLyBXZSBzYXZlIHRoZSBpbml0aWFsIHZhbHVlIHNvIHRoYXQgYFJlYWN0RE9NQ29tcG9uZW50YCBkb2Vzbid0IHVwZGF0ZVxuICAgICAgLy8gYHRleHRDb250ZW50YCAodW5uZWNlc3Nhcnkgc2luY2Ugd2UgdXBkYXRlIHZhbHVlKS5cbiAgICAgIC8vIFRoZSBpbml0aWFsIHZhbHVlIGNhbiBiZSBhIGJvb2xlYW4gb3Igb2JqZWN0IHNvIHRoYXQncyB3aHkgaXQnc1xuICAgICAgLy8gZm9yY2VkIHRvIGJlIGEgc3RyaW5nLlxuICAgICAgaW5pdGlhbFZhbHVlOiAnJyArICh2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBkZWZhdWx0VmFsdWUpXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIC8vIENsb25lIGB0aGlzLnByb3BzYCBzbyB3ZSBkb24ndCBtdXRhdGUgdGhlIGlucHV0LlxuICAgIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgdGhpcy5wcm9wcyk7XG5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCxcbiAgICAgICdgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIGRvZXMgbm90IG1ha2Ugc2Vuc2Ugb24gPHRleHRhcmVhPi4nXG4gICAgKSA6IGludmFyaWFudChwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsKSk7XG5cbiAgICBwcm9wcy5kZWZhdWx0VmFsdWUgPSBudWxsO1xuICAgIHByb3BzLnZhbHVlID0gbnVsbDtcbiAgICBwcm9wcy5vbkNoYW5nZSA9IHRoaXMuX2hhbmRsZUNoYW5nZTtcblxuICAgIC8vIEFsd2F5cyBzZXQgY2hpbGRyZW4gdG8gdGhlIHNhbWUgdGhpbmcuIEluIElFOSwgdGhlIHNlbGVjdGlvbiByYW5nZSB3aWxsXG4gICAgLy8gZ2V0IHJlc2V0IGlmIGB0ZXh0Q29udGVudGAgaXMgbXV0YXRlZC5cbiAgICByZXR1cm4gdGV4dGFyZWEocHJvcHMsIHRoaXMuc3RhdGUuaW5pdGlhbFZhbHVlKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uKHByZXZQcm9wcywgcHJldlN0YXRlLCBwcmV2Q29udGV4dCkge1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIHZhciByb290Tm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpO1xuICAgICAgLy8gQ2FzdCBgdmFsdWVgIHRvIGEgc3RyaW5nIHRvIGVuc3VyZSB0aGUgdmFsdWUgaXMgc2V0IGNvcnJlY3RseS4gV2hpbGVcbiAgICAgIC8vIGJyb3dzZXJzIHR5cGljYWxseSBkbyB0aGlzIGFzIG5lY2Vzc2FyeSwganNkb20gZG9lc24ndC5cbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KHJvb3ROb2RlLCAndmFsdWUnLCAnJyArIHZhbHVlKTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZUNoYW5nZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmV0dXJuVmFsdWU7XG4gICAgdmFyIG9uQ2hhbmdlID0gTGlua2VkVmFsdWVVdGlscy5nZXRPbkNoYW5nZSh0aGlzKTtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIHJldHVyblZhbHVlID0gb25DaGFuZ2UuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICAgIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01UZXh0YXJlYTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQXV0b0ZvY3VzTWl4aW5cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0F1dG9Gb2N1c01peGluLmpzXCIsXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NUHJvcGVydHlPcGVyYXRpb25zLmpzXCIsXCIuL0xpbmtlZFZhbHVlVXRpbHNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0xpbmtlZFZhbHVlVXRpbHMuanNcIixcIi4vT2JqZWN0LmFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1wiLFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4uanNcIixcIi4vUmVhY3RDbGFzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDbGFzcy5qc1wiLFwiLi9SZWFjdEVsZW1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qc1wiLFwiLi9SZWFjdFVwZGF0ZXNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0VXBkYXRlcy5qc1wiLFwiLi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwiLi93YXJuaW5nXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi93YXJuaW5nLmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZShcIi4vVHJhbnNhY3Rpb25cIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xuXG52YXIgUkVTRVRfQkFUQ0hFRF9VUERBVEVTID0ge1xuICBpbml0aWFsaXplOiBlbXB0eUZ1bmN0aW9uLFxuICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA9IGZhbHNlO1xuICB9XG59O1xuXG52YXIgRkxVU0hfQkFUQ0hFRF9VUERBVEVTID0ge1xuICBpbml0aWFsaXplOiBlbXB0eUZ1bmN0aW9uLFxuICBjbG9zZTogUmVhY3RVcGRhdGVzLmZsdXNoQmF0Y2hlZFVwZGF0ZXMuYmluZChSZWFjdFVwZGF0ZXMpXG59O1xuXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbRkxVU0hfQkFUQ0hFRF9VUERBVEVTLCBSRVNFVF9CQVRDSEVEX1VQREFURVNdO1xuXG5mdW5jdGlvbiBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24oKSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbn1cblxuYXNzaWduKFxuICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24ucHJvdG90eXBlLFxuICBUcmFuc2FjdGlvbi5NaXhpbixcbiAge1xuICAgIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICAgIH1cbiAgfVxuKTtcblxudmFyIHRyYW5zYWN0aW9uID0gbmV3IFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbigpO1xuXG52YXIgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSA9IHtcbiAgaXNCYXRjaGluZ1VwZGF0ZXM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsIHRoZSBwcm92aWRlZCBmdW5jdGlvbiBpbiBhIGNvbnRleHQgd2l0aGluIHdoaWNoIGNhbGxzIHRvIGBzZXRTdGF0ZWBcbiAgICogYW5kIGZyaWVuZHMgYXJlIGJhdGNoZWQgc3VjaCB0aGF0IGNvbXBvbmVudHMgYXJlbid0IHVwZGF0ZWQgdW5uZWNlc3NhcmlseS5cbiAgICovXG4gIGJhdGNoZWRVcGRhdGVzOiBmdW5jdGlvbihjYWxsYmFjaywgYSwgYiwgYywgZCkge1xuICAgIHZhciBhbHJlYWR5QmF0Y2hpbmdVcGRhdGVzID0gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcztcblxuICAgIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPSB0cnVlO1xuXG4gICAgLy8gVGhlIGNvZGUgaXMgd3JpdHRlbiB0aGlzIHdheSB0byBhdm9pZCBleHRyYSBhbGxvY2F0aW9uc1xuICAgIGlmIChhbHJlYWR5QmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgICBjYWxsYmFjayhhLCBiLCBjLCBkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNhY3Rpb24ucGVyZm9ybShjYWxsYmFjaywgbnVsbCwgYSwgYiwgYywgZCk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3k7XG5cbn0se1wiLi9PYmplY3QuYXNzaWduXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9PYmplY3QuYXNzaWduLmpzXCIsXCIuL1JlYWN0VXBkYXRlc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RVcGRhdGVzLmpzXCIsXCIuL1RyYW5zYWN0aW9uXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9UcmFuc2FjdGlvbi5qc1wiLFwiLi9lbXB0eUZ1bmN0aW9uXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9lbXB0eUZ1bmN0aW9uLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RGVmYXVsdEluamVjdGlvbi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3REZWZhdWx0SW5qZWN0aW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQmVmb3JlSW5wdXRFdmVudFBsdWdpbiA9IHJlcXVpcmUoXCIuL0JlZm9yZUlucHV0RXZlbnRQbHVnaW5cIik7XG52YXIgQ2hhbmdlRXZlbnRQbHVnaW4gPSByZXF1aXJlKFwiLi9DaGFuZ2VFdmVudFBsdWdpblwiKTtcbnZhciBDbGllbnRSZWFjdFJvb3RJbmRleCA9IHJlcXVpcmUoXCIuL0NsaWVudFJlYWN0Um9vdEluZGV4XCIpO1xudmFyIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyID0gcmVxdWlyZShcIi4vRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXJcIik7XG52YXIgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luID0gcmVxdWlyZShcIi4vRW50ZXJMZWF2ZUV2ZW50UGx1Z2luXCIpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG52YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0gcmVxdWlyZShcIi4vSFRNTERPTVByb3BlcnR5Q29uZmlnXCIpO1xudmFyIE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW4gPSByZXF1aXJlKFwiLi9Nb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPVxuICByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudFwiKTtcbnZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0gcmVxdWlyZShcIi4vUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVwiKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NQ29tcG9uZW50XCIpO1xudmFyIFJlYWN0RE9NQnV0dG9uID0gcmVxdWlyZShcIi4vUmVhY3RET01CdXR0b25cIik7XG52YXIgUmVhY3RET01Gb3JtID0gcmVxdWlyZShcIi4vUmVhY3RET01Gb3JtXCIpO1xudmFyIFJlYWN0RE9NSW1nID0gcmVxdWlyZShcIi4vUmVhY3RET01JbWdcIik7XG52YXIgUmVhY3RET01JRE9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9SZWFjdERPTUlET3BlcmF0aW9uc1wiKTtcbnZhciBSZWFjdERPTUlmcmFtZSA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NSWZyYW1lXCIpO1xudmFyIFJlYWN0RE9NSW5wdXQgPSByZXF1aXJlKFwiLi9SZWFjdERPTUlucHV0XCIpO1xudmFyIFJlYWN0RE9NT3B0aW9uID0gcmVxdWlyZShcIi4vUmVhY3RET01PcHRpb25cIik7XG52YXIgUmVhY3RET01TZWxlY3QgPSByZXF1aXJlKFwiLi9SZWFjdERPTVNlbGVjdFwiKTtcbnZhciBSZWFjdERPTVRleHRhcmVhID0gcmVxdWlyZShcIi4vUmVhY3RET01UZXh0YXJlYVwiKTtcbnZhciBSZWFjdERPTVRleHRDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdERPTVRleHRDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoXCIuL1JlYWN0RXZlbnRMaXN0ZW5lclwiKTtcbnZhciBSZWFjdEluamVjdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0SW5qZWN0aW9uXCIpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25cIik7XG52YXIgU2VsZWN0RXZlbnRQbHVnaW4gPSByZXF1aXJlKFwiLi9TZWxlY3RFdmVudFBsdWdpblwiKTtcbnZhciBTZXJ2ZXJSZWFjdFJvb3RJbmRleCA9IHJlcXVpcmUoXCIuL1NlcnZlclJlYWN0Um9vdEluZGV4XCIpO1xudmFyIFNpbXBsZUV2ZW50UGx1Z2luID0gcmVxdWlyZShcIi4vU2ltcGxlRXZlbnRQbHVnaW5cIik7XG52YXIgU1ZHRE9NUHJvcGVydHlDb25maWcgPSByZXF1aXJlKFwiLi9TVkdET01Qcm9wZXJ0eUNvbmZpZ1wiKTtcblxudmFyIGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vY3JlYXRlRnVsbFBhZ2VDb21wb25lbnRcIik7XG5cbmZ1bmN0aW9uIGF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcyh0eXBlKSB7XG4gIHJldHVybiBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzKHtcbiAgICB0YWdOYW1lOiB0eXBlLnRvVXBwZXJDYXNlKCksXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgUmVhY3RFbGVtZW50KFxuICAgICAgICB0eXBlLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICB0aGlzLnByb3BzXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGluamVjdCgpIHtcbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRFbWl0dGVyLmluamVjdFJlYWN0RXZlbnRMaXN0ZW5lcihcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXJcbiAgKTtcblxuICAvKipcbiAgICogSW5qZWN0IG1vZHVsZXMgZm9yIHJlc29sdmluZyBET00gaGllcmFyY2h5IGFuZCBwbHVnaW4gb3JkZXJpbmcuXG4gICAqL1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RFdmVudFBsdWdpbk9yZGVyKERlZmF1bHRFdmVudFBsdWdpbk9yZGVyKTtcbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0SW5zdGFuY2VIYW5kbGUoUmVhY3RJbnN0YW5jZUhhbmRsZXMpO1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RNb3VudChSZWFjdE1vdW50KTtcblxuICAvKipcbiAgICogU29tZSBpbXBvcnRhbnQgZXZlbnQgcGx1Z2lucyBpbmNsdWRlZCBieSBkZWZhdWx0ICh3aXRob3V0IGhhdmluZyB0byByZXF1aXJlXG4gICAqIHRoZW0pLlxuICAgKi9cbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtcbiAgICBTaW1wbGVFdmVudFBsdWdpbjogU2ltcGxlRXZlbnRQbHVnaW4sXG4gICAgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOiBFbnRlckxlYXZlRXZlbnRQbHVnaW4sXG4gICAgQ2hhbmdlRXZlbnRQbHVnaW46IENoYW5nZUV2ZW50UGx1Z2luLFxuICAgIE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW46IE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW4sXG4gICAgU2VsZWN0RXZlbnRQbHVnaW46IFNlbGVjdEV2ZW50UGx1Z2luLFxuICAgIEJlZm9yZUlucHV0RXZlbnRQbHVnaW46IEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cbiAgfSk7XG5cbiAgUmVhY3RJbmplY3Rpb24uTmF0aXZlQ29tcG9uZW50LmluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzcyhcbiAgICBSZWFjdERPTUNvbXBvbmVudFxuICApO1xuXG4gIFJlYWN0SW5qZWN0aW9uLk5hdGl2ZUNvbXBvbmVudC5pbmplY3RUZXh0Q29tcG9uZW50Q2xhc3MoXG4gICAgUmVhY3RET01UZXh0Q29tcG9uZW50XG4gICk7XG5cbiAgUmVhY3RJbmplY3Rpb24uTmF0aXZlQ29tcG9uZW50LmluamVjdEF1dG9XcmFwcGVyKFxuICAgIGF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzc1xuICApO1xuXG4gIC8vIFRoaXMgbmVlZHMgdG8gaGFwcGVuIGJlZm9yZSBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCgpIG90aGVyd2lzZSB0aGUgbWl4aW5cbiAgLy8gd29uJ3QgYmUgaW5jbHVkZWQuXG4gIFJlYWN0SW5qZWN0aW9uLkNsYXNzLmluamVjdE1peGluKFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluKTtcblxuICBSZWFjdEluamVjdGlvbi5OYXRpdmVDb21wb25lbnQuaW5qZWN0Q29tcG9uZW50Q2xhc3Nlcyh7XG4gICAgJ2J1dHRvbic6IFJlYWN0RE9NQnV0dG9uLFxuICAgICdmb3JtJzogUmVhY3RET01Gb3JtLFxuICAgICdpZnJhbWUnOiBSZWFjdERPTUlmcmFtZSxcbiAgICAnaW1nJzogUmVhY3RET01JbWcsXG4gICAgJ2lucHV0JzogUmVhY3RET01JbnB1dCxcbiAgICAnb3B0aW9uJzogUmVhY3RET01PcHRpb24sXG4gICAgJ3NlbGVjdCc6IFJlYWN0RE9NU2VsZWN0LFxuICAgICd0ZXh0YXJlYSc6IFJlYWN0RE9NVGV4dGFyZWEsXG5cbiAgICAnaHRtbCc6IGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50KCdodG1sJyksXG4gICAgJ2hlYWQnOiBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCgnaGVhZCcpLFxuICAgICdib2R5JzogY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQoJ2JvZHknKVxuICB9KTtcblxuICBSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhIVE1MRE9NUHJvcGVydHlDb25maWcpO1xuICBSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhTVkdET01Qcm9wZXJ0eUNvbmZpZyk7XG5cbiAgUmVhY3RJbmplY3Rpb24uRW1wdHlDb21wb25lbnQuaW5qZWN0RW1wdHlDb21wb25lbnQoJ25vc2NyaXB0Jyk7XG5cbiAgUmVhY3RJbmplY3Rpb24uVXBkYXRlcy5pbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbihcbiAgICBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXG4gICk7XG4gIFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0QmF0Y2hpbmdTdHJhdGVneShcbiAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5XG4gICk7XG5cbiAgUmVhY3RJbmplY3Rpb24uUm9vdEluZGV4LmluamVjdENyZWF0ZVJlYWN0Um9vdEluZGV4KFxuICAgIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/XG4gICAgICBDbGllbnRSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCA6XG4gICAgICBTZXJ2ZXJSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleFxuICApO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkNvbXBvbmVudC5pbmplY3RFbnZpcm9ubWVudChSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCk7XG4gIFJlYWN0SW5qZWN0aW9uLkRPTUNvbXBvbmVudC5pbmplY3RJRE9wZXJhdGlvbnMoUmVhY3RET01JRE9wZXJhdGlvbnMpO1xuXG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICB2YXIgdXJsID0gKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiB3aW5kb3cubG9jYXRpb24uaHJlZikgfHwgJyc7XG4gICAgaWYgKCgvWz8mXXJlYWN0X3BlcmZcXGIvKS50ZXN0KHVybCkpIHtcbiAgICAgIHZhciBSZWFjdERlZmF1bHRQZXJmID0gcmVxdWlyZShcIi4vUmVhY3REZWZhdWx0UGVyZlwiKTtcbiAgICAgIFJlYWN0RGVmYXVsdFBlcmYuc3RhcnQoKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluamVjdDogaW5qZWN0XG59O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9CZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9CZWZvcmVJbnB1dEV2ZW50UGx1Z2luLmpzXCIsXCIuL0NoYW5nZUV2ZW50UGx1Z2luXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DaGFuZ2VFdmVudFBsdWdpbi5qc1wiLFwiLi9DbGllbnRSZWFjdFJvb3RJbmRleFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvQ2xpZW50UmVhY3RSb290SW5kZXguanNcIixcIi4vRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0RlZmF1bHRFdmVudFBsdWdpbk9yZGVyLmpzXCIsXCIuL0VudGVyTGVhdmVFdmVudFBsdWdpblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLmpzXCIsXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qc1wiLFwiLi9IVE1MRE9NUHJvcGVydHlDb25maWdcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0hUTUxET01Qcm9wZXJ0eUNvbmZpZy5qc1wiLFwiLi9Nb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9Nb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luLmpzXCIsXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbi5qc1wiLFwiLi9SZWFjdENsYXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENsYXNzLmpzXCIsXCIuL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudC5qc1wiLFwiLi9SZWFjdERPTUJ1dHRvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01CdXR0b24uanNcIixcIi4vUmVhY3RET01Db21wb25lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NQ29tcG9uZW50LmpzXCIsXCIuL1JlYWN0RE9NRm9ybVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01Gb3JtLmpzXCIsXCIuL1JlYWN0RE9NSURPcGVyYXRpb25zXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTUlET3BlcmF0aW9ucy5qc1wiLFwiLi9SZWFjdERPTUlmcmFtZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01JZnJhbWUuanNcIixcIi4vUmVhY3RET01JbWdcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NSW1nLmpzXCIsXCIuL1JlYWN0RE9NSW5wdXRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NSW5wdXQuanNcIixcIi4vUmVhY3RET01PcHRpb25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NT3B0aW9uLmpzXCIsXCIuL1JlYWN0RE9NU2VsZWN0XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTVNlbGVjdC5qc1wiLFwiLi9SZWFjdERPTVRleHRDb21wb25lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NVGV4dENvbXBvbmVudC5qc1wiLFwiLi9SZWFjdERPTVRleHRhcmVhXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTVRleHRhcmVhLmpzXCIsXCIuL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuanNcIixcIi4vUmVhY3REZWZhdWx0UGVyZlwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3REZWZhdWx0UGVyZi5qc1wiLFwiLi9SZWFjdEVsZW1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qc1wiLFwiLi9SZWFjdEV2ZW50TGlzdGVuZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RXZlbnRMaXN0ZW5lci5qc1wiLFwiLi9SZWFjdEluamVjdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJbmplY3Rpb24uanNcIixcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5zdGFuY2VIYW5kbGVzLmpzXCIsXCIuL1JlYWN0TW91bnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TW91bnQuanNcIixcIi4vUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5qc1wiLFwiLi9TVkdET01Qcm9wZXJ0eUNvbmZpZ1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU1ZHRE9NUHJvcGVydHlDb25maWcuanNcIixcIi4vU2VsZWN0RXZlbnRQbHVnaW5cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1NlbGVjdEV2ZW50UGx1Z2luLmpzXCIsXCIuL1NlcnZlclJlYWN0Um9vdEluZGV4XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TZXJ2ZXJSZWFjdFJvb3RJbmRleC5qc1wiLFwiLi9TaW1wbGVFdmVudFBsdWdpblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU2ltcGxlRXZlbnRQbHVnaW4uanNcIixcIi4vY3JlYXRlRnVsbFBhZ2VDb21wb25lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2NyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50LmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3REZWZhdWx0UGVyZi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRQZXJmXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIik7XG52YXIgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzID0gcmVxdWlyZShcIi4vUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzXCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcblxudmFyIHBlcmZvcm1hbmNlTm93ID0gcmVxdWlyZShcIi4vcGVyZm9ybWFuY2VOb3dcIik7XG5cbmZ1bmN0aW9uIHJvdW5kRmxvYXQodmFsKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKHZhbCAqIDEwMCkgLyAxMDA7XG59XG5cbmZ1bmN0aW9uIGFkZFZhbHVlKG9iaiwga2V5LCB2YWwpIHtcbiAgb2JqW2tleV0gPSAob2JqW2tleV0gfHwgMCkgKyB2YWw7XG59XG5cbnZhciBSZWFjdERlZmF1bHRQZXJmID0ge1xuICBfYWxsTWVhc3VyZW1lbnRzOiBbXSwgLy8gbGFzdCBpdGVtIGluIHRoZSBsaXN0IGlzIHRoZSBjdXJyZW50IG9uZVxuICBfbW91bnRTdGFjazogWzBdLFxuICBfaW5qZWN0ZWQ6IGZhbHNlLFxuXG4gIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIVJlYWN0RGVmYXVsdFBlcmYuX2luamVjdGVkKSB7XG4gICAgICBSZWFjdFBlcmYuaW5qZWN0aW9uLmluamVjdE1lYXN1cmUoUmVhY3REZWZhdWx0UGVyZi5tZWFzdXJlKTtcbiAgICB9XG5cbiAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMubGVuZ3RoID0gMDtcbiAgICBSZWFjdFBlcmYuZW5hYmxlTWVhc3VyZSA9IHRydWU7XG4gIH0sXG5cbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgUmVhY3RQZXJmLmVuYWJsZU1lYXN1cmUgPSBmYWxzZTtcbiAgfSxcblxuICBnZXRMYXN0TWVhc3VyZW1lbnRzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICB9LFxuXG4gIHByaW50RXhjbHVzaXZlOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldEV4Y2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdDb21wb25lbnQgY2xhc3MgbmFtZSc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ1RvdGFsIGluY2x1c2l2ZSB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uaW5jbHVzaXZlKSxcbiAgICAgICAgJ0V4Y2x1c2l2ZSBtb3VudCB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uZXhjbHVzaXZlKSxcbiAgICAgICAgJ0V4Y2x1c2l2ZSByZW5kZXIgdGltZSAobXMpJzogcm91bmRGbG9hdChpdGVtLnJlbmRlciksXG4gICAgICAgICdNb3VudCB0aW1lIHBlciBpbnN0YW5jZSAobXMpJzogcm91bmRGbG9hdChpdGVtLmV4Y2x1c2l2ZSAvIGl0ZW0uY291bnQpLFxuICAgICAgICAnUmVuZGVyIHRpbWUgcGVyIGluc3RhbmNlIChtcyknOiByb3VuZEZsb2F0KGl0ZW0ucmVuZGVyIC8gaXRlbS5jb3VudCksXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pKTtcbiAgICAvLyBUT0RPOiBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKCkgZG9lcyBub3QgcmV0dXJuIHRoZSBjb3JyZWN0XG4gICAgLy8gbnVtYmVyLlxuICB9LFxuXG4gIHByaW50SW5jbHVzaXZlOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldEluY2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdPd25lciA+IGNvbXBvbmVudCc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ0luY2x1c2l2ZSB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0udGltZSksXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICdUb3RhbCB0aW1lOicsXG4gICAgICBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnXG4gICAgKTtcbiAgfSxcblxuICBnZXRNZWFzdXJlbWVudHNTdW1tYXJ5TWFwOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRJbmNsdXNpdmVTdW1tYXJ5KFxuICAgICAgbWVhc3VyZW1lbnRzLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgcmV0dXJuIHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdPd25lciA+IGNvbXBvbmVudCc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ1dhc3RlZCB0aW1lIChtcyknOiBpdGVtLnRpbWUsXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pO1xuICB9LFxuXG4gIHByaW50V2FzdGVkOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIGNvbnNvbGUudGFibGUoUmVhY3REZWZhdWx0UGVyZi5nZXRNZWFzdXJlbWVudHNTdW1tYXJ5TWFwKG1lYXN1cmVtZW50cykpO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgJ1RvdGFsIHRpbWU6JyxcbiAgICAgIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRUb3RhbFRpbWUobWVhc3VyZW1lbnRzKS50b0ZpeGVkKDIpICsgJyBtcydcbiAgICApO1xuICB9LFxuXG4gIHByaW50RE9NOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldERPTVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIHJlc3VsdFtET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRV0gPSBpdGVtLmlkO1xuICAgICAgcmVzdWx0Wyd0eXBlJ10gPSBpdGVtLnR5cGU7XG4gICAgICByZXN1bHRbJ2FyZ3MnXSA9IEpTT04uc3RyaW5naWZ5KGl0ZW0uYXJncyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICdUb3RhbCB0aW1lOicsXG4gICAgICBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnXG4gICAgKTtcbiAgfSxcblxuICBfcmVjb3JkV3JpdGU6IGZ1bmN0aW9uKGlkLCBmbk5hbWUsIHRvdGFsVGltZSwgYXJncykge1xuICAgIC8vIFRPRE86IHRvdGFsVGltZSBpc24ndCB0aGF0IHVzZWZ1bCBzaW5jZSBpdCBkb2Vzbid0IGNvdW50IHBhaW50cy9yZWZsb3dzXG4gICAgdmFyIHdyaXRlcyA9XG4gICAgICBSZWFjdERlZmF1bHRQZXJmXG4gICAgICAgIC5fYWxsTWVhc3VyZW1lbnRzW1JlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5sZW5ndGggLSAxXVxuICAgICAgICAud3JpdGVzO1xuICAgIHdyaXRlc1tpZF0gPSB3cml0ZXNbaWRdIHx8IFtdO1xuICAgIHdyaXRlc1tpZF0ucHVzaCh7XG4gICAgICB0eXBlOiBmbk5hbWUsXG4gICAgICB0aW1lOiB0b3RhbFRpbWUsXG4gICAgICBhcmdzOiBhcmdzXG4gICAgfSk7XG4gIH0sXG5cbiAgbWVhc3VyZTogZnVuY3Rpb24obW9kdWxlTmFtZSwgZm5OYW1lLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge2ZvciAodmFyIGFyZ3M9W10sJF9fMD0wLCRfXzE9YXJndW1lbnRzLmxlbmd0aDskX18wPCRfXzE7JF9fMCsrKSBhcmdzLnB1c2goYXJndW1lbnRzWyRfXzBdKTtcbiAgICAgIHZhciB0b3RhbFRpbWU7XG4gICAgICB2YXIgcnY7XG4gICAgICB2YXIgc3RhcnQ7XG5cbiAgICAgIGlmIChmbk5hbWUgPT09ICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCcgfHxcbiAgICAgICAgICBmbk5hbWUgPT09ICdmbHVzaEJhdGNoZWRVcGRhdGVzJykge1xuICAgICAgICAvLyBBIFwibWVhc3VyZW1lbnRcIiBpcyBhIHNldCBvZiBtZXRyaWNzIHJlY29yZGVkIGZvciBlYWNoIGZsdXNoLiBXZSB3YW50XG4gICAgICAgIC8vIHRvIGdyb3VwIHRoZSBtZXRyaWNzIGZvciBhIGdpdmVuIGZsdXNoIHRvZ2V0aGVyIHNvIHdlIGNhbiBsb29rIGF0IHRoZVxuICAgICAgICAvLyBjb21wb25lbnRzIHRoYXQgcmVuZGVyZWQgYW5kIHRoZSBET00gb3BlcmF0aW9ucyB0aGF0IGFjdHVhbGx5XG4gICAgICAgIC8vIGhhcHBlbmVkIHRvIGRldGVybWluZSB0aGUgYW1vdW50IG9mIFwid2FzdGVkIHdvcmtcIiBwZXJmb3JtZWQuXG4gICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5wdXNoKHtcbiAgICAgICAgICBleGNsdXNpdmU6IHt9LFxuICAgICAgICAgIGluY2x1c2l2ZToge30sXG4gICAgICAgICAgcmVuZGVyOiB7fSxcbiAgICAgICAgICBjb3VudHM6IHt9LFxuICAgICAgICAgIHdyaXRlczoge30sXG4gICAgICAgICAgZGlzcGxheU5hbWVzOiB7fSxcbiAgICAgICAgICB0b3RhbFRpbWU6IDBcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHNbXG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFcbiAgICAgICAgXS50b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSBpZiAoZm5OYW1lID09PSAnX21vdW50SW1hZ2VJbnRvTm9kZScgfHxcbiAgICAgICAgICBtb2R1bGVOYW1lID09PSAnUmVhY3RET01JRE9wZXJhdGlvbnMnKSB7XG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB0b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG5cbiAgICAgICAgaWYgKGZuTmFtZSA9PT0gJ19tb3VudEltYWdlSW50b05vZGUnKSB7XG4gICAgICAgICAgdmFyIG1vdW50SUQgPSBSZWFjdE1vdW50LmdldElEKGFyZ3NbMV0pO1xuICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX3JlY29yZFdyaXRlKG1vdW50SUQsIGZuTmFtZSwgdG90YWxUaW1lLCBhcmdzWzBdKTtcbiAgICAgICAgfSBlbHNlIGlmIChmbk5hbWUgPT09ICdkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMnKSB7XG4gICAgICAgICAgLy8gc3BlY2lhbCBmb3JtYXRcbiAgICAgICAgICBhcmdzWzBdLmZvckVhY2goZnVuY3Rpb24odXBkYXRlKSB7XG4gICAgICAgICAgICB2YXIgd3JpdGVBcmdzID0ge307XG4gICAgICAgICAgICBpZiAodXBkYXRlLmZyb21JbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MuZnJvbUluZGV4ID0gdXBkYXRlLmZyb21JbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGUudG9JbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MudG9JbmRleCA9IHVwZGF0ZS50b0luZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZS50ZXh0Q29udGVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MudGV4dENvbnRlbnQgPSB1cGRhdGUudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlLm1hcmt1cEluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHdyaXRlQXJncy5tYXJrdXAgPSBhcmdzWzFdW3VwZGF0ZS5tYXJrdXBJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9yZWNvcmRXcml0ZShcbiAgICAgICAgICAgICAgdXBkYXRlLnBhcmVudElELFxuICAgICAgICAgICAgICB1cGRhdGUudHlwZSxcbiAgICAgICAgICAgICAgdG90YWxUaW1lLFxuICAgICAgICAgICAgICB3cml0ZUFyZ3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYmFzaWMgZm9ybWF0XG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fcmVjb3JkV3JpdGUoXG4gICAgICAgICAgICBhcmdzWzBdLFxuICAgICAgICAgICAgZm5OYW1lLFxuICAgICAgICAgICAgdG90YWxUaW1lLFxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSBpZiAobW9kdWxlTmFtZSA9PT0gJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JyAmJiAoXG4gICAgICAgICgvLyBUT0RPOiByZWNlaXZlQ29tcG9uZW50KCk/XG4gICAgICAgIChmbk5hbWUgPT09ICdtb3VudENvbXBvbmVudCcgfHxcbiAgICAgICAgZm5OYW1lID09PSAndXBkYXRlQ29tcG9uZW50JyB8fCBmbk5hbWUgPT09ICdfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50JykpKSkge1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByb290Tm9kZUlEID0gZm5OYW1lID09PSAnbW91bnRDb21wb25lbnQnID9cbiAgICAgICAgICBhcmdzWzBdIDpcbiAgICAgICAgICB0aGlzLl9yb290Tm9kZUlEO1xuICAgICAgICB2YXIgaXNSZW5kZXIgPSBmbk5hbWUgPT09ICdfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50JztcbiAgICAgICAgdmFyIGlzTW91bnQgPSBmbk5hbWUgPT09ICdtb3VudENvbXBvbmVudCc7XG5cbiAgICAgICAgdmFyIG1vdW50U3RhY2sgPSBSZWFjdERlZmF1bHRQZXJmLl9tb3VudFN0YWNrO1xuICAgICAgICB2YXIgZW50cnkgPSBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHNbXG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoaXNSZW5kZXIpIHtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5jb3VudHMsIHJvb3ROb2RlSUQsIDEpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTW91bnQpIHtcbiAgICAgICAgICBtb3VudFN0YWNrLnB1c2goMCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydCA9IHBlcmZvcm1hbmNlTm93KCk7XG4gICAgICAgIHJ2ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgdG90YWxUaW1lID0gcGVyZm9ybWFuY2VOb3coKSAtIHN0YXJ0O1xuXG4gICAgICAgIGlmIChpc1JlbmRlcikge1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LnJlbmRlciwgcm9vdE5vZGVJRCwgdG90YWxUaW1lKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc01vdW50KSB7XG4gICAgICAgICAgdmFyIHN1Yk1vdW50VGltZSA9IG1vdW50U3RhY2sucG9wKCk7XG4gICAgICAgICAgbW91bnRTdGFja1ttb3VudFN0YWNrLmxlbmd0aCAtIDFdICs9IHRvdGFsVGltZTtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5leGNsdXNpdmUsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSAtIHN1Yk1vdW50VGltZSk7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkuaW5jbHVzaXZlLCByb290Tm9kZUlELCB0b3RhbFRpbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmluY2x1c2l2ZSwgcm9vdE5vZGVJRCwgdG90YWxUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVudHJ5LmRpc3BsYXlOYW1lc1tyb290Tm9kZUlEXSA9IHtcbiAgICAgICAgICBjdXJyZW50OiB0aGlzLmdldE5hbWUoKSxcbiAgICAgICAgICBvd25lcjogdGhpcy5fY3VycmVudEVsZW1lbnQuX293bmVyID9cbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lci5nZXROYW1lKCkgOlxuICAgICAgICAgICAgJzxyb290PidcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcnY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RGVmYXVsdFBlcmY7XG5cbn0se1wiLi9ET01Qcm9wZXJ0eVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NUHJvcGVydHkuanNcIixcIi4vUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuanNcIixcIi4vUmVhY3RNb3VudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNb3VudC5qc1wiLFwiLi9SZWFjdFBlcmZcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UGVyZi5qc1wiLFwiLi9wZXJmb3JtYW5jZU5vd1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvcGVyZm9ybWFuY2VOb3cuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpc1xuICovXG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xuXG4vLyBEb24ndCB0cnkgdG8gc2F2ZSB1c2VycyBsZXNzIHRoYW4gMS4ybXMgKGEgbnVtYmVyIEkgbWFkZSB1cClcbnZhciBET05UX0NBUkVfVEhSRVNIT0xEID0gMS4yO1xudmFyIERPTV9PUEVSQVRJT05fVFlQRVMgPSB7XG4gICdfbW91bnRJbWFnZUludG9Ob2RlJzogJ3NldCBpbm5lckhUTUwnLFxuICBJTlNFUlRfTUFSS1VQOiAnc2V0IGlubmVySFRNTCcsXG4gIE1PVkVfRVhJU1RJTkc6ICdtb3ZlJyxcbiAgUkVNT1ZFX05PREU6ICdyZW1vdmUnLFxuICBURVhUX0NPTlRFTlQ6ICdzZXQgdGV4dENvbnRlbnQnLFxuICAndXBkYXRlUHJvcGVydHlCeUlEJzogJ3VwZGF0ZSBhdHRyaWJ1dGUnLFxuICAnZGVsZXRlUHJvcGVydHlCeUlEJzogJ2RlbGV0ZSBhdHRyaWJ1dGUnLFxuICAndXBkYXRlU3R5bGVzQnlJRCc6ICd1cGRhdGUgc3R5bGVzJyxcbiAgJ3VwZGF0ZUlubmVySFRNTEJ5SUQnOiAnc2V0IGlubmVySFRNTCcsXG4gICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQnOiAncmVwbGFjZSdcbn07XG5cbmZ1bmN0aW9uIGdldFRvdGFsVGltZShtZWFzdXJlbWVudHMpIHtcbiAgLy8gVE9ETzogcmV0dXJuIG51bWJlciBvZiBET00gb3BzPyBjb3VsZCBiZSBtaXNsZWFkaW5nLlxuICAvLyBUT0RPOiBtZWFzdXJlIGRyb3BwZWQgZnJhbWVzIGFmdGVyIHJlY29uY2lsZT9cbiAgLy8gVE9ETzogbG9nIHRvdGFsIHRpbWUgb2YgZWFjaCByZWNvbmNpbGUgYW5kIHRoZSB0b3AtbGV2ZWwgY29tcG9uZW50XG4gIC8vIGNsYXNzIHRoYXQgdHJpZ2dlcmVkIGl0LlxuICB2YXIgdG90YWxUaW1lID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdG90YWxUaW1lICs9IG1lYXN1cmVtZW50LnRvdGFsVGltZTtcbiAgfVxuICByZXR1cm4gdG90YWxUaW1lO1xufVxuXG5mdW5jdGlvbiBnZXRET01TdW1tYXJ5KG1lYXN1cmVtZW50cykge1xuICB2YXIgaXRlbXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdmFyIGlkO1xuXG4gICAgZm9yIChpZCBpbiBtZWFzdXJlbWVudC53cml0ZXMpIHtcbiAgICAgIG1lYXN1cmVtZW50LndyaXRlc1tpZF0uZm9yRWFjaChmdW5jdGlvbih3cml0ZSkge1xuICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgdHlwZTogRE9NX09QRVJBVElPTl9UWVBFU1t3cml0ZS50eXBlXSB8fCB3cml0ZS50eXBlLFxuICAgICAgICAgIGFyZ3M6IHdyaXRlLmFyZ3NcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGl0ZW1zO1xufVxuXG5mdW5jdGlvbiBnZXRFeGNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cykge1xuICB2YXIgY2FuZGlkYXRlcyA9IHt9O1xuICB2YXIgZGlzcGxheU5hbWU7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdmFyIGFsbElEcyA9IGFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgbWVhc3VyZW1lbnQuZXhjbHVzaXZlLFxuICAgICAgbWVhc3VyZW1lbnQuaW5jbHVzaXZlXG4gICAgKTtcblxuICAgIGZvciAodmFyIGlkIGluIGFsbElEcykge1xuICAgICAgZGlzcGxheU5hbWUgPSBtZWFzdXJlbWVudC5kaXNwbGF5TmFtZXNbaWRdLmN1cnJlbnQ7XG5cbiAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdID0gY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0gfHwge1xuICAgICAgICBjb21wb25lbnROYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgICAgaW5jbHVzaXZlOiAwLFxuICAgICAgICBleGNsdXNpdmU6IDAsXG4gICAgICAgIHJlbmRlcjogMCxcbiAgICAgICAgY291bnQ6IDBcbiAgICAgIH07XG4gICAgICBpZiAobWVhc3VyZW1lbnQucmVuZGVyW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5yZW5kZXIgKz0gbWVhc3VyZW1lbnQucmVuZGVyW2lkXTtcbiAgICAgIH1cbiAgICAgIGlmIChtZWFzdXJlbWVudC5leGNsdXNpdmVbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmV4Y2x1c2l2ZSArPSBtZWFzdXJlbWVudC5leGNsdXNpdmVbaWRdO1xuICAgICAgfVxuICAgICAgaWYgKG1lYXN1cmVtZW50LmluY2x1c2l2ZVtpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0uaW5jbHVzaXZlICs9IG1lYXN1cmVtZW50LmluY2x1c2l2ZVtpZF07XG4gICAgICB9XG4gICAgICBpZiAobWVhc3VyZW1lbnQuY291bnRzW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5jb3VudCArPSBtZWFzdXJlbWVudC5jb3VudHNbaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIE5vdyBtYWtlIGEgc29ydGVkIGFycmF5IHdpdGggdGhlIHJlc3VsdHMuXG4gIHZhciBhcnIgPSBbXTtcbiAgZm9yIChkaXNwbGF5TmFtZSBpbiBjYW5kaWRhdGVzKSB7XG4gICAgaWYgKGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmV4Y2x1c2l2ZSA+PSBET05UX0NBUkVfVEhSRVNIT0xEKSB7XG4gICAgICBhcnIucHVzaChjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXSk7XG4gICAgfVxuICB9XG5cbiAgYXJyLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiLmV4Y2x1c2l2ZSAtIGEuZXhjbHVzaXZlO1xuICB9KTtcblxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBnZXRJbmNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cywgb25seUNsZWFuKSB7XG4gIHZhciBjYW5kaWRhdGVzID0ge307XG4gIHZhciBpbmNsdXNpdmVLZXk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdmFyIGFsbElEcyA9IGFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgbWVhc3VyZW1lbnQuZXhjbHVzaXZlLFxuICAgICAgbWVhc3VyZW1lbnQuaW5jbHVzaXZlXG4gICAgKTtcbiAgICB2YXIgY2xlYW5Db21wb25lbnRzO1xuXG4gICAgaWYgKG9ubHlDbGVhbikge1xuICAgICAgY2xlYW5Db21wb25lbnRzID0gZ2V0VW5jaGFuZ2VkQ29tcG9uZW50cyhtZWFzdXJlbWVudCk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaWQgaW4gYWxsSURzKSB7XG4gICAgICBpZiAob25seUNsZWFuICYmICFjbGVhbkNvbXBvbmVudHNbaWRdKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlzcGxheU5hbWUgPSBtZWFzdXJlbWVudC5kaXNwbGF5TmFtZXNbaWRdO1xuXG4gICAgICAvLyBJbmNsdXNpdmUgdGltZSBpcyBub3QgdXNlZnVsIGZvciBtYW55IGNvbXBvbmVudHMgd2l0aG91dCBrbm93aW5nIHdoZXJlXG4gICAgICAvLyB0aGV5IGFyZSBpbnN0YW50aWF0ZWQuIFNvIHdlIGFnZ3JlZ2F0ZSBpbmNsdXNpdmUgdGltZSB3aXRoIGJvdGggdGhlXG4gICAgICAvLyBvd25lciBhbmQgY3VycmVudCBkaXNwbGF5TmFtZSBhcyB0aGUga2V5LlxuICAgICAgaW5jbHVzaXZlS2V5ID0gZGlzcGxheU5hbWUub3duZXIgKyAnID4gJyArIGRpc3BsYXlOYW1lLmN1cnJlbnQ7XG5cbiAgICAgIGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XSA9IGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XSB8fCB7XG4gICAgICAgIGNvbXBvbmVudE5hbWU6IGluY2x1c2l2ZUtleSxcbiAgICAgICAgdGltZTogMCxcbiAgICAgICAgY291bnQ6IDBcbiAgICAgIH07XG5cbiAgICAgIGlmIChtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XS50aW1lICs9IG1lYXN1cmVtZW50LmluY2x1c2l2ZVtpZF07XG4gICAgICB9XG4gICAgICBpZiAobWVhc3VyZW1lbnQuY291bnRzW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0uY291bnQgKz0gbWVhc3VyZW1lbnQuY291bnRzW2lkXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBOb3cgbWFrZSBhIHNvcnRlZCBhcnJheSB3aXRoIHRoZSByZXN1bHRzLlxuICB2YXIgYXJyID0gW107XG4gIGZvciAoaW5jbHVzaXZlS2V5IGluIGNhbmRpZGF0ZXMpIHtcbiAgICBpZiAoY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldLnRpbWUgPj0gRE9OVF9DQVJFX1RIUkVTSE9MRCkge1xuICAgICAgYXJyLnB1c2goY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldKTtcbiAgICB9XG4gIH1cblxuICBhcnIuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIudGltZSAtIGEudGltZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5jaGFuZ2VkQ29tcG9uZW50cyhtZWFzdXJlbWVudCkge1xuICAvLyBGb3IgYSBnaXZlbiByZWNvbmNpbGUsIGxvb2sgYXQgd2hpY2ggY29tcG9uZW50cyBkaWQgbm90IGFjdHVhbGx5XG4gIC8vIHJlbmRlciBhbnl0aGluZyB0byB0aGUgRE9NIGFuZCByZXR1cm4gYSBtYXBwaW5nIG9mIHRoZWlyIElEIHRvXG4gIC8vIHRoZSBhbW91bnQgb2YgdGltZSBpdCB0b29rIHRvIHJlbmRlciB0aGUgZW50aXJlIHN1YnRyZWUuXG4gIHZhciBjbGVhbkNvbXBvbmVudHMgPSB7fTtcbiAgdmFyIGRpcnR5TGVhZklEcyA9IE9iamVjdC5rZXlzKG1lYXN1cmVtZW50LndyaXRlcyk7XG4gIHZhciBhbGxJRHMgPSBhc3NpZ24oe30sIG1lYXN1cmVtZW50LmV4Y2x1c2l2ZSwgbWVhc3VyZW1lbnQuaW5jbHVzaXZlKTtcblxuICBmb3IgKHZhciBpZCBpbiBhbGxJRHMpIHtcbiAgICB2YXIgaXNEaXJ0eSA9IGZhbHNlO1xuICAgIC8vIEZvciBlYWNoIGNvbXBvbmVudCB0aGF0IHJlbmRlcmVkLCBzZWUgaWYgYSBjb21wb25lbnQgdGhhdCB0cmlnZ2VyZWRcbiAgICAvLyBhIERPTSBvcCBpcyBpbiBpdHMgc3VidHJlZS5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnR5TGVhZklEcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGRpcnR5TGVhZklEc1tpXS5pbmRleE9mKGlkKSA9PT0gMCkge1xuICAgICAgICBpc0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghaXNEaXJ0eSAmJiBtZWFzdXJlbWVudC5jb3VudHNbaWRdID4gMCkge1xuICAgICAgY2xlYW5Db21wb25lbnRzW2lkXSA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBjbGVhbkNvbXBvbmVudHM7XG59XG5cbnZhciBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMgPSB7XG4gIGdldEV4Y2x1c2l2ZVN1bW1hcnk6IGdldEV4Y2x1c2l2ZVN1bW1hcnksXG4gIGdldEluY2x1c2l2ZVN1bW1hcnk6IGdldEluY2x1c2l2ZVN1bW1hcnksXG4gIGdldERPTVN1bW1hcnk6IGdldERPTVN1bW1hcnksXG4gIGdldFRvdGFsVGltZTogZ2V0VG90YWxUaW1lXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcztcblxufSx7XCIuL09iamVjdC5hc3NpZ25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEVsZW1lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdENvbnRleHQgPSByZXF1aXJlKFwiLi9SZWFjdENvbnRleHRcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciBSRVNFUlZFRF9QUk9QUyA9IHtcbiAga2V5OiB0cnVlLFxuICByZWY6IHRydWVcbn07XG5cbi8qKlxuICogV2FybiBmb3IgbXV0YXRpb25zLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtvYmplY3R9IG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICovXG5mdW5jdGlvbiBkZWZpbmVXYXJuaW5nUHJvcGVydHkob2JqZWN0LCBrZXkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG5cbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLl9zdG9yZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9zdG9yZVtrZXldO1xuICAgIH0sXG5cbiAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdEb25cXCd0IHNldCB0aGUgJXMgcHJvcGVydHkgb2YgdGhlIFJlYWN0IGVsZW1lbnQuIEluc3RlYWQsICcgK1xuICAgICAgICAnc3BlY2lmeSB0aGUgY29ycmVjdCB2YWx1ZSB3aGVuIGluaXRpYWxseSBjcmVhdGluZyB0aGUgZWxlbWVudC4nLFxuICAgICAgICBrZXlcbiAgICAgICkgOiBudWxsKTtcbiAgICAgIHRoaXMuX3N0b3JlW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgfSk7XG59XG5cbi8qKlxuICogVGhpcyBpcyB1cGRhdGVkIHRvIHRydWUgaWYgdGhlIG1lbWJyYW5lIGlzIHN1Y2Nlc3NmdWxseSBjcmVhdGVkLlxuICovXG52YXIgdXNlTXV0YXRpb25NZW1icmFuZSA9IGZhbHNlO1xuXG4vKipcbiAqIFdhcm4gZm9yIG11dGF0aW9ucy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGRlZmluZU11dGF0aW9uTWVtYnJhbmUocHJvdG90eXBlKSB7XG4gIHRyeSB7XG4gICAgdmFyIHBzZXVkb0Zyb3plblByb3BlcnRpZXMgPSB7XG4gICAgICBwcm9wczogdHJ1ZVxuICAgIH07XG4gICAgZm9yICh2YXIga2V5IGluIHBzZXVkb0Zyb3plblByb3BlcnRpZXMpIHtcbiAgICAgIGRlZmluZVdhcm5pbmdQcm9wZXJ0eShwcm90b3R5cGUsIGtleSk7XG4gICAgfVxuICAgIHVzZU11dGF0aW9uTWVtYnJhbmUgPSB0cnVlO1xuICB9IGNhdGNoICh4KSB7XG4gICAgLy8gSUUgd2lsbCBmYWlsIG9uIGRlZmluZVByb3BlcnR5XG4gIH1cbn1cblxuLyoqXG4gKiBCYXNlIGNvbnN0cnVjdG9yIGZvciBhbGwgUmVhY3QgZWxlbWVudHMuIFRoaXMgaXMgb25seSB1c2VkIHRvIG1ha2UgdGhpc1xuICogd29yayB3aXRoIGEgZHluYW1pYyBpbnN0YW5jZW9mIGNoZWNrLiBOb3RoaW5nIHNob3VsZCBsaXZlIG9uIHRoaXMgcHJvdG90eXBlLlxuICpcbiAqIEBwYXJhbSB7Kn0gdHlwZVxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZWZcbiAqIEBwYXJhbSB7Kn0ga2V5XG4gKiBAcGFyYW0geyp9IHByb3BzXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uKHR5cGUsIGtleSwgcmVmLCBvd25lciwgY29udGV4dCwgcHJvcHMpIHtcbiAgLy8gQnVpbHQtaW4gcHJvcGVydGllcyB0aGF0IGJlbG9uZyBvbiB0aGUgZWxlbWVudFxuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLmtleSA9IGtleTtcbiAgdGhpcy5yZWYgPSByZWY7XG5cbiAgLy8gUmVjb3JkIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoaXMgZWxlbWVudC5cbiAgdGhpcy5fb3duZXIgPSBvd25lcjtcblxuICAvLyBUT0RPOiBEZXByZWNhdGUgd2l0aENvbnRleHQsIGFuZCB0aGVuIHRoZSBjb250ZXh0IGJlY29tZXMgYWNjZXNzaWJsZVxuICAvLyB0aHJvdWdoIHRoZSBvd25lci5cbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG5cbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIC8vIFRoZSB2YWxpZGF0aW9uIGZsYWcgYW5kIHByb3BzIGFyZSBjdXJyZW50bHkgbXV0YXRpdmUuIFdlIHB1dCB0aGVtIG9uXG4gICAgLy8gYW4gZXh0ZXJuYWwgYmFja2luZyBzdG9yZSBzbyB0aGF0IHdlIGNhbiBmcmVlemUgdGhlIHdob2xlIG9iamVjdC5cbiAgICAvLyBUaGlzIGNhbiBiZSByZXBsYWNlZCB3aXRoIGEgV2Vha01hcCBvbmNlIHRoZXkgYXJlIGltcGxlbWVudGVkIGluXG4gICAgLy8gY29tbW9ubHkgdXNlZCBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMuXG4gICAgdGhpcy5fc3RvcmUgPSB7cHJvcHM6IHByb3BzLCBvcmlnaW5hbFByb3BzOiBhc3NpZ24oe30sIHByb3BzKX07XG5cbiAgICAvLyBUbyBtYWtlIGNvbXBhcmluZyBSZWFjdEVsZW1lbnRzIGVhc2llciBmb3IgdGVzdGluZyBwdXJwb3Nlcywgd2UgbWFrZVxuICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGRcbiAgICAvLyBpbmNsdWRlIGV2ZXJ5IGVudmlyb25tZW50IHdlIHJ1biB0ZXN0cyBpbiksIHNvIHRoZSB0ZXN0IGZyYW1ld29ya1xuICAgIC8vIGlnbm9yZXMgaXQuXG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLl9zdG9yZSwgJ3ZhbGlkYXRlZCcsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgfVxuICAgIHRoaXMuX3N0b3JlLnZhbGlkYXRlZCA9IGZhbHNlO1xuXG4gICAgLy8gV2UncmUgbm90IGFsbG93ZWQgdG8gc2V0IHByb3BzIGRpcmVjdGx5IG9uIHRoZSBvYmplY3Qgc28gd2UgZWFybHlcbiAgICAvLyByZXR1cm4gYW5kIHJlbHkgb24gdGhlIHByb3RvdHlwZSBtZW1icmFuZSB0byBmb3J3YXJkIHRvIHRoZSBiYWNraW5nXG4gICAgLy8gc3RvcmUuXG4gICAgaWYgKHVzZU11dGF0aW9uTWVtYnJhbmUpIHtcbiAgICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xufTtcblxuLy8gV2UgaW50ZW50aW9uYWxseSBkb24ndCBleHBvc2UgdGhlIGZ1bmN0aW9uIG9uIHRoZSBjb25zdHJ1Y3RvciBwcm9wZXJ0eS5cbi8vIFJlYWN0RWxlbWVudCBzaG91bGQgYmUgaW5kaXN0aW5ndWlzaGFibGUgZnJvbSBhIHBsYWluIG9iamVjdC5cblJlYWN0RWxlbWVudC5wcm90b3R5cGUgPSB7XG4gIF9pc1JlYWN0RWxlbWVudDogdHJ1ZVxufTtcblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICBkZWZpbmVNdXRhdGlvbk1lbWJyYW5lKFJlYWN0RWxlbWVudC5wcm90b3R5cGUpO1xufVxuXG5SZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uKHR5cGUsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lO1xuXG4gIC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWRcbiAgdmFyIHByb3BzID0ge307XG5cbiAgdmFyIGtleSA9IG51bGw7XG4gIHZhciByZWYgPSBudWxsO1xuXG4gIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgIHJlZiA9IGNvbmZpZy5yZWYgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcucmVmO1xuICAgIGtleSA9IGNvbmZpZy5rZXkgPT09IHVuZGVmaW5lZCA/IG51bGwgOiAnJyArIGNvbmZpZy5rZXk7XG4gICAgLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgYXJlIGFkZGVkIHRvIGEgbmV3IHByb3BzIG9iamVjdFxuICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICBpZiAoY29uZmlnLmhhc093blByb3BlcnR5KHByb3BOYW1lKSAmJlxuICAgICAgICAgICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDaGlsZHJlbiBjYW4gYmUgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCwgYW5kIHRob3NlIGFyZSB0cmFuc2ZlcnJlZCBvbnRvXG4gIC8vIHRoZSBuZXdseSBhbGxvY2F0ZWQgcHJvcHMgb2JqZWN0LlxuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgfSBlbHNlIGlmIChjaGlsZHJlbkxlbmd0aCA+IDEpIHtcbiAgICB2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIH1cbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cblxuICAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHNcbiAgaWYgKHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHMpIHtcbiAgICB2YXIgZGVmYXVsdFByb3BzID0gdHlwZS5kZWZhdWx0UHJvcHM7XG4gICAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHNbcHJvcE5hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgUmVhY3RFbGVtZW50KFxuICAgIHR5cGUsXG4gICAga2V5LFxuICAgIHJlZixcbiAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LFxuICAgIFJlYWN0Q29udGV4dC5jdXJyZW50LFxuICAgIHByb3BzXG4gICk7XG59O1xuXG5SZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudC5iaW5kKG51bGwsIHR5cGUpO1xuICAvLyBFeHBvc2UgdGhlIHR5cGUgb24gdGhlIGZhY3RvcnkgYW5kIHRoZSBwcm90b3R5cGUgc28gdGhhdCBpdCBjYW4gYmVcbiAgLy8gZWFzaWx5IGFjY2Vzc2VkIG9uIGVsZW1lbnRzLiBFLmcuIDxGb28gLz4udHlwZSA9PT0gRm9vLnR5cGUuXG4gIC8vIFRoaXMgc2hvdWxkIG5vdCBiZSBuYW1lZCBgY29uc3RydWN0b3JgIHNpbmNlIHRoaXMgbWF5IG5vdCBiZSB0aGUgZnVuY3Rpb25cbiAgLy8gdGhhdCBjcmVhdGVkIHRoZSBlbGVtZW50LCBhbmQgaXQgbWF5IG5vdCBldmVuIGJlIGEgY29uc3RydWN0b3IuXG4gIC8vIExlZ2FjeSBob29rIFRPRE86IFdhcm4gaWYgdGhpcyBpcyBhY2Nlc3NlZFxuICBmYWN0b3J5LnR5cGUgPSB0eXBlO1xuICByZXR1cm4gZmFjdG9yeTtcbn07XG5cblJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VQcm9wcyA9IGZ1bmN0aW9uKG9sZEVsZW1lbnQsIG5ld1Byb3BzKSB7XG4gIHZhciBuZXdFbGVtZW50ID0gbmV3IFJlYWN0RWxlbWVudChcbiAgICBvbGRFbGVtZW50LnR5cGUsXG4gICAgb2xkRWxlbWVudC5rZXksXG4gICAgb2xkRWxlbWVudC5yZWYsXG4gICAgb2xkRWxlbWVudC5fb3duZXIsXG4gICAgb2xkRWxlbWVudC5fY29udGV4dCxcbiAgICBuZXdQcm9wc1xuICApO1xuXG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAvLyBJZiB0aGUga2V5IG9uIHRoZSBvcmlnaW5hbCBpcyB2YWxpZCwgdGhlbiB0aGUgY2xvbmUgaXMgdmFsaWRcbiAgICBuZXdFbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSBvbGRFbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQ7XG4gIH1cbiAgcmV0dXJuIG5ld0VsZW1lbnQ7XG59O1xuXG5SZWFjdEVsZW1lbnQuY2xvbmVFbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCwgY29uZmlnLCBjaGlsZHJlbikge1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgLy8gT3JpZ2luYWwgcHJvcHMgYXJlIGNvcGllZFxuICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMpO1xuXG4gIC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWRcbiAgdmFyIGtleSA9IGVsZW1lbnQua2V5O1xuICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG5cbiAgLy8gT3duZXIgd2lsbCBiZSBwcmVzZXJ2ZWQsIHVubGVzcyByZWYgaXMgb3ZlcnJpZGRlblxuICB2YXIgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICBpZiAoY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBTaWxlbnRseSBzdGVhbCB0aGUgcmVmIGZyb20gdGhlIHBhcmVudC5cbiAgICAgIHJlZiA9IGNvbmZpZy5yZWY7XG4gICAgICBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgfVxuICAgIGlmIChjb25maWcua2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTtcbiAgICB9XG4gICAgLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgb3ZlcnJpZGUgZXhpc3RpbmcgcHJvcHNcbiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgJiZcbiAgICAgICAgICAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ2hpbGRyZW4gY2FuIGJlIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQsIGFuZCB0aG9zZSBhcmUgdHJhbnNmZXJyZWQgb250b1xuICAvLyB0aGUgbmV3bHkgYWxsb2NhdGVkIHByb3BzIG9iamVjdC5cbiAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7XG4gICAgdmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICB9XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWFjdEVsZW1lbnQoXG4gICAgZWxlbWVudC50eXBlLFxuICAgIGtleSxcbiAgICByZWYsXG4gICAgb3duZXIsXG4gICAgZWxlbWVudC5fY29udGV4dCxcbiAgICBwcm9wc1xuICApO1xufTtcblxuLyoqXG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIHZhbGlkIGNvbXBvbmVudC5cbiAqIEBmaW5hbFxuICovXG5SZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgLy8gUmVhY3RUZXN0VXRpbHMgaXMgb2Z0ZW4gdXNlZCBvdXRzaWRlIG9mIGJlZm9yZUVhY2ggd2hlcmUgYXMgUmVhY3QgaXNcbiAgLy8gd2l0aGluIGl0LiBUaGlzIGxlYWRzIHRvIHR3byBkaWZmZXJlbnQgaW5zdGFuY2VzIG9mIFJlYWN0IG9uIHRoZSBzYW1lXG4gIC8vIHBhZ2UuIFRvIGlkZW50aWZ5IGEgZWxlbWVudCBmcm9tIGEgZGlmZmVyZW50IFJlYWN0IGluc3RhbmNlIHdlIHVzZVxuICAvLyBhIGZsYWcgaW5zdGVhZCBvZiBhbiBpbnN0YW5jZW9mIGNoZWNrLlxuICB2YXIgaXNFbGVtZW50ID0gISEob2JqZWN0ICYmIG9iamVjdC5faXNSZWFjdEVsZW1lbnQpO1xuICAvLyBpZiAoaXNFbGVtZW50ICYmICEob2JqZWN0IGluc3RhbmNlb2YgUmVhY3RFbGVtZW50KSkge1xuICAvLyBUaGlzIGlzIGFuIGluZGljYXRvciB0aGF0IHlvdSdyZSB1c2luZyBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBSZWFjdCBhdCB0aGVcbiAgLy8gc2FtZSB0aW1lLiBUaGlzIHdpbGwgc2NyZXcgd2l0aCBvd25lcnNoaXAgYW5kIHN0dWZmLiBGaXggaXQsIHBsZWFzZS5cbiAgLy8gVE9ETzogV2UgY291bGQgcG9zc2libHkgd2FybiBoZXJlLlxuICAvLyB9XG4gIHJldHVybiBpc0VsZW1lbnQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RWxlbWVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1wiLFwiLi9SZWFjdENvbnRleHRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29udGV4dC5qc1wiLFwiLi9SZWFjdEN1cnJlbnRPd25lclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXIuanNcIixcIi4vd2FybmluZ1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvd2FybmluZy5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudFZhbGlkYXRvci5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbGVtZW50VmFsaWRhdG9yXG4gKi9cblxuLyoqXG4gKiBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgcHJvdmlkZXMgYSB3cmFwcGVyIGFyb3VuZCBhIGVsZW1lbnQgZmFjdG9yeVxuICogd2hpY2ggdmFsaWRhdGVzIHRoZSBwcm9wcyBwYXNzZWQgdG8gdGhlIGVsZW1lbnQuIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmVcbiAqIHVzZWQgb25seSBpbiBERVYgYW5kIGNvdWxkIGJlIHJlcGxhY2VkIGJ5IGEgc3RhdGljIHR5cGUgY2hlY2tlciBmb3IgbGFuZ3VhZ2VzXG4gKiB0aGF0IHN1cHBvcnQgaXQuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RnJhZ21lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEZyYWdtZW50XCIpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSByZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zXCIpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gcmVxdWlyZShcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCIpO1xuXG52YXIgZ2V0SXRlcmF0b3JGbiA9IHJlcXVpcmUoXCIuL2dldEl0ZXJhdG9yRm5cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSB7XG4gIGlmIChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgdmFyIG5hbWUgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LmdldE5hbWUoKTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFdhcm4gaWYgdGhlcmUncyBubyBrZXkgZXhwbGljaXRseSBzZXQgb24gZHluYW1pYyBhcnJheXMgb2YgY2hpbGRyZW4gb3JcbiAqIG9iamVjdCBrZXlzIGFyZSBub3QgdmFsaWQuIFRoaXMgYWxsb3dzIHVzIHRvIGtlZXAgdHJhY2sgb2YgY2hpbGRyZW4gYmV0d2VlblxuICogdXBkYXRlcy5cbiAqL1xudmFyIG93bmVySGFzS2V5VXNlV2FybmluZyA9IHt9O1xuXG52YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG5cbnZhciBOVU1FUklDX1BST1BFUlRZX1JFR0VYID0gL15cXGQrJC87XG5cbi8qKlxuICogR2V0cyB0aGUgaW5zdGFuY2UncyBuYW1lIGZvciB1c2UgaW4gd2FybmluZ3MuXG4gKlxuICogQGludGVybmFsXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBEaXNwbGF5IG5hbWUgb3IgdW5kZWZpbmVkXG4gKi9cbmZ1bmN0aW9uIGdldE5hbWUoaW5zdGFuY2UpIHtcbiAgdmFyIHB1YmxpY0luc3RhbmNlID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgaWYgKCFwdWJsaWNJbnN0YW5jZSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgdmFyIGNvbnN0cnVjdG9yID0gcHVibGljSW5zdGFuY2UuY29uc3RydWN0b3I7XG4gIGlmICghY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBjb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCBjb25zdHJ1Y3Rvci5uYW1lIHx8IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBjdXJyZW50IG93bmVyJ3MgZGlzcGxheU5hbWUgZm9yIHVzZSBpbiB3YXJuaW5ncy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEByZXR1cm4gez9zdHJpbmd9IERpc3BsYXkgbmFtZSBvciB1bmRlZmluZWRcbiAqL1xuZnVuY3Rpb24gZ2V0Q3VycmVudE93bmVyRGlzcGxheU5hbWUoKSB7XG4gIHZhciBjdXJyZW50ID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgcmV0dXJuIChcbiAgICBjdXJyZW50ICYmIGdldE5hbWUoY3VycmVudCkgfHwgdW5kZWZpbmVkXG4gICk7XG59XG5cbi8qKlxuICogV2FybiBpZiB0aGUgZWxlbWVudCBkb2Vzbid0IGhhdmUgYW4gZXhwbGljaXQga2V5IGFzc2lnbmVkIHRvIGl0LlxuICogVGhpcyBlbGVtZW50IGlzIGluIGFuIGFycmF5LiBUaGUgYXJyYXkgY291bGQgZ3JvdyBhbmQgc2hyaW5rIG9yIGJlXG4gKiByZW9yZGVyZWQuIEFsbCBjaGlsZHJlbiB0aGF0IGhhdmVuJ3QgYWxyZWFkeSBiZWVuIHZhbGlkYXRlZCBhcmUgcmVxdWlyZWQgdG9cbiAqIGhhdmUgYSBcImtleVwiIHByb3BlcnR5IGFzc2lnbmVkIHRvIGl0LlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0aGF0IHJlcXVpcmVzIGEga2V5LlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGVsZW1lbnQncyBwYXJlbnQncyB0eXBlLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUV4cGxpY2l0S2V5KGVsZW1lbnQsIHBhcmVudFR5cGUpIHtcbiAgaWYgKGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCB8fCBlbGVtZW50LmtleSAhPSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG5cbiAgd2FybkFuZE1vbml0b3JGb3JLZXlVc2UoXG4gICAgJ0VhY2ggY2hpbGQgaW4gYW4gYXJyYXkgb3IgaXRlcmF0b3Igc2hvdWxkIGhhdmUgYSB1bmlxdWUgXCJrZXlcIiBwcm9wLicsXG4gICAgZWxlbWVudCxcbiAgICBwYXJlbnRUeXBlXG4gICk7XG59XG5cbi8qKlxuICogV2FybiBpZiB0aGUga2V5IGlzIGJlaW5nIGRlZmluZWQgYXMgYW4gb2JqZWN0IHByb3BlcnR5IGJ1dCBoYXMgYW4gaW5jb3JyZWN0XG4gKiB2YWx1ZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGtleS5cbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IENvbXBvbmVudCB0aGF0IHJlcXVpcmVzIGEga2V5LlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGVsZW1lbnQncyBwYXJlbnQncyB0eXBlLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnR5S2V5KG5hbWUsIGVsZW1lbnQsIHBhcmVudFR5cGUpIHtcbiAgaWYgKCFOVU1FUklDX1BST1BFUlRZX1JFR0VYLnRlc3QobmFtZSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgd2FybkFuZE1vbml0b3JGb3JLZXlVc2UoXG4gICAgJ0NoaWxkIG9iamVjdHMgc2hvdWxkIGhhdmUgbm9uLW51bWVyaWMga2V5cyBzbyBvcmRlcmluZyBpcyBwcmVzZXJ2ZWQuJyxcbiAgICBlbGVtZW50LFxuICAgIHBhcmVudFR5cGVcbiAgKTtcbn1cblxuLyoqXG4gKiBTaGFyZWQgd2FybmluZyBhbmQgbW9uaXRvcmluZyBjb2RlIGZvciB0aGUga2V5IHdhcm5pbmdzLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGJhc2Ugd2FybmluZyB0aGF0IGdldHMgb3V0cHV0LlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgQ29tcG9uZW50IHRoYXQgcmVxdWlyZXMgYSBrZXkuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgZWxlbWVudCdzIHBhcmVudCdzIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHdhcm5BbmRNb25pdG9yRm9yS2V5VXNlKG1lc3NhZ2UsIGVsZW1lbnQsIHBhcmVudFR5cGUpIHtcbiAgdmFyIG93bmVyTmFtZSA9IGdldEN1cnJlbnRPd25lckRpc3BsYXlOYW1lKCk7XG4gIHZhciBwYXJlbnROYW1lID0gdHlwZW9mIHBhcmVudFR5cGUgPT09ICdzdHJpbmcnID9cbiAgICBwYXJlbnRUeXBlIDogcGFyZW50VHlwZS5kaXNwbGF5TmFtZSB8fCBwYXJlbnRUeXBlLm5hbWU7XG5cbiAgdmFyIHVzZU5hbWUgPSBvd25lck5hbWUgfHwgcGFyZW50TmFtZTtcbiAgdmFyIG1lbW9pemVyID0gb3duZXJIYXNLZXlVc2VXYXJuaW5nW21lc3NhZ2VdIHx8IChcbiAgICAob3duZXJIYXNLZXlVc2VXYXJuaW5nW21lc3NhZ2VdID0ge30pXG4gICk7XG4gIGlmIChtZW1vaXplci5oYXNPd25Qcm9wZXJ0eSh1c2VOYW1lKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBtZW1vaXplclt1c2VOYW1lXSA9IHRydWU7XG5cbiAgdmFyIHBhcmVudE9yT3duZXJBZGRlbmR1bSA9XG4gICAgb3duZXJOYW1lID8gKFwiIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIFwiICsgb3duZXJOYW1lICsgXCIuXCIpIDpcbiAgICBwYXJlbnROYW1lID8gKFwiIENoZWNrIHRoZSBSZWFjdC5yZW5kZXIgY2FsbCB1c2luZyA8XCIgKyBwYXJlbnROYW1lICsgXCI+LlwiKSA6XG4gICAgJyc7XG5cbiAgLy8gVXN1YWxseSB0aGUgY3VycmVudCBvd25lciBpcyB0aGUgb2ZmZW5kZXIsIGJ1dCBpZiBpdCBhY2NlcHRzIGNoaWxkcmVuIGFzIGFcbiAgLy8gcHJvcGVydHksIGl0IG1heSBiZSB0aGUgY3JlYXRvciBvZiB0aGUgY2hpbGQgdGhhdCdzIHJlc3BvbnNpYmxlIGZvclxuICAvLyBhc3NpZ25pbmcgaXQgYSBrZXkuXG4gIHZhciBjaGlsZE93bmVyQWRkZW5kdW0gPSAnJztcbiAgaWYgKGVsZW1lbnQgJiZcbiAgICAgIGVsZW1lbnQuX293bmVyICYmXG4gICAgICBlbGVtZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgIC8vIE5hbWUgb2YgdGhlIGNvbXBvbmVudCB0aGF0IG9yaWdpbmFsbHkgY3JlYXRlZCB0aGlzIGNoaWxkLlxuICAgIHZhciBjaGlsZE93bmVyTmFtZSA9IGdldE5hbWUoZWxlbWVudC5fb3duZXIpO1xuXG4gICAgY2hpbGRPd25lckFkZGVuZHVtID0gKFwiIEl0IHdhcyBwYXNzZWQgYSBjaGlsZCBmcm9tIFwiICsgY2hpbGRPd25lck5hbWUgKyBcIi5cIik7XG4gIH1cblxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICBmYWxzZSxcbiAgICBtZXNzYWdlICsgJyVzJXMgU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1rZXlzIGZvciBtb3JlIGluZm9ybWF0aW9uLicsXG4gICAgcGFyZW50T3JPd25lckFkZGVuZHVtLFxuICAgIGNoaWxkT3duZXJBZGRlbmR1bVxuICApIDogbnVsbCk7XG59XG5cbi8qKlxuICogRW5zdXJlIHRoYXQgZXZlcnkgZWxlbWVudCBlaXRoZXIgaXMgcGFzc2VkIGluIGEgc3RhdGljIGxvY2F0aW9uLCBpbiBhblxuICogYXJyYXkgd2l0aCBhbiBleHBsaWNpdCBrZXlzIHByb3BlcnR5IGRlZmluZWQsIG9yIGluIGFuIG9iamVjdCBsaXRlcmFsXG4gKiB3aXRoIHZhbGlkIGtleSBwcm9wZXJ0eS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3ROb2RlfSBub2RlIFN0YXRpY2FsbHkgcGFzc2VkIGNoaWxkIG9mIGFueSB0eXBlLlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIG5vZGUncyBwYXJlbnQncyB0eXBlLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUNoaWxkS2V5cyhub2RlLCBwYXJlbnRUeXBlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlW2ldO1xuICAgICAgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgdmFsaWRhdGVFeHBsaWNpdEtleShjaGlsZCwgcGFyZW50VHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgIC8vIFRoaXMgZWxlbWVudCB3YXMgcGFzc2VkIGluIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgbm9kZS5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChub2RlKSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG5vZGUpO1xuICAgIC8vIEVudHJ5IGl0ZXJhdG9ycyBwcm92aWRlIGltcGxpY2l0IGtleXMuXG4gICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgIGlmIChpdGVyYXRvckZuICE9PSBub2RlLmVudHJpZXMpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpO1xuICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoc3RlcC52YWx1ZSwgcGFyZW50VHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBmcmFnbWVudCA9IFJlYWN0RnJhZ21lbnQuZXh0cmFjdElmRnJhZ21lbnQobm9kZSk7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gZnJhZ21lbnQpIHtcbiAgICAgICAgaWYgKGZyYWdtZW50Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICB2YWxpZGF0ZVByb3BlcnR5S2V5KGtleSwgZnJhZ21lbnRba2V5XSwgcGFyZW50VHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhhdCB0aGUgcHJvcHMgYXJlIHZhbGlkXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wVHlwZXMgTWFwIG9mIHByb3AgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXMoY29tcG9uZW50TmFtZSwgcHJvcFR5cGVzLCBwcm9wcywgbG9jYXRpb24pIHtcbiAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcFR5cGVzKSB7XG4gICAgaWYgKHByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgIHZhciBlcnJvcjtcbiAgICAgIC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAvLyBmYWlsIHRoZSByZW5kZXIgcGhhc2Ugd2hlcmUgaXQgZGlkbid0IGZhaWwgYmVmb3JlLiBTbyB3ZSBsb2cgaXQuXG4gICAgICAvLyBBZnRlciB0aGVzZSBoYXZlIGJlZW4gY2xlYW5lZCB1cCwgd2UnbGwgbGV0IHRoZW0gdGhyb3cuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLlxuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIHR5cGVvZiBwcm9wVHlwZXNbcHJvcE5hbWVdID09PSAnZnVuY3Rpb24nLFxuICAgICAgICAgICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tICcgK1xuICAgICAgICAgICdSZWFjdC5Qcm9wVHlwZXMuJyxcbiAgICAgICAgICBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsXG4gICAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLFxuICAgICAgICAgIHByb3BOYW1lXG4gICAgICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIHByb3BUeXBlc1twcm9wTmFtZV0gPT09ICdmdW5jdGlvbicpKTtcbiAgICAgICAgZXJyb3IgPSBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgIH1cbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IubWVzc2FnZV0gPSB0cnVlO1xuXG4gICAgICAgIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSh0aGlzKTtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoZmFsc2UsICdGYWlsZWQgcHJvcFR5cGU6ICVzJXMnLCBlcnJvci5tZXNzYWdlLCBhZGRlbmR1bSkgOiBudWxsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIHdhcm5lZFByb3BzTXV0YXRpb25zID0ge307XG5cbi8qKlxuICogV2FybiBhYm91dCBtdXRhdGluZyBwcm9wcyB3aGVuIHNldHRpbmcgYHByb3BOYW1lYCBvbiBgZWxlbWVudGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BOYW1lIFRoZSBzdHJpbmcga2V5IHdpdGhpbiBwcm9wcyB0aGF0IHdhcyBzZXRcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHdhcm5Gb3JQcm9wc011dGF0aW9uKHByb3BOYW1lLCBlbGVtZW50KSB7XG4gIHZhciB0eXBlID0gZWxlbWVudC50eXBlO1xuICB2YXIgZWxlbWVudE5hbWUgPSB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgPyB0eXBlIDogdHlwZS5kaXNwbGF5TmFtZTtcbiAgdmFyIG93bmVyTmFtZSA9IGVsZW1lbnQuX293bmVyID9cbiAgICBlbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIDogbnVsbDtcblxuICB2YXIgd2FybmluZ0tleSA9IHByb3BOYW1lICsgJ3wnICsgZWxlbWVudE5hbWUgKyAnfCcgKyBvd25lck5hbWU7XG4gIGlmICh3YXJuZWRQcm9wc011dGF0aW9ucy5oYXNPd25Qcm9wZXJ0eSh3YXJuaW5nS2V5KSkge1xuICAgIHJldHVybjtcbiAgfVxuICB3YXJuZWRQcm9wc011dGF0aW9uc1t3YXJuaW5nS2V5XSA9IHRydWU7XG5cbiAgdmFyIGVsZW1lbnRJbmZvID0gJyc7XG4gIGlmIChlbGVtZW50TmFtZSkge1xuICAgIGVsZW1lbnRJbmZvID0gJyA8JyArIGVsZW1lbnROYW1lICsgJyAvPic7XG4gIH1cbiAgdmFyIG93bmVySW5mbyA9ICcnO1xuICBpZiAob3duZXJOYW1lKSB7XG4gICAgb3duZXJJbmZvID0gJyBUaGUgZWxlbWVudCB3YXMgY3JlYXRlZCBieSAnICsgb3duZXJOYW1lICsgJy4nO1xuICB9XG5cbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgZmFsc2UsXG4gICAgJ0RvblxcJ3Qgc2V0IC5wcm9wcy4lcyBvZiB0aGUgUmVhY3QgY29tcG9uZW50JXMuIEluc3RlYWQsIHNwZWNpZnkgdGhlICcgK1xuICAgICdjb3JyZWN0IHZhbHVlIHdoZW4gaW5pdGlhbGx5IGNyZWF0aW5nIHRoZSBlbGVtZW50IG9yIHVzZSAnICtcbiAgICAnUmVhY3QuY2xvbmVFbGVtZW50IHRvIG1ha2UgYSBuZXcgZWxlbWVudCB3aXRoIHVwZGF0ZWQgcHJvcHMuJXMnLFxuICAgIHByb3BOYW1lLFxuICAgIGVsZW1lbnRJbmZvLFxuICAgIG93bmVySW5mb1xuICApIDogbnVsbCk7XG59XG5cbi8vIElubGluZSBPYmplY3QuaXMgcG9seWZpbGxcbmZ1bmN0aW9uIGlzKGEsIGIpIHtcbiAgaWYgKGEgIT09IGEpIHtcbiAgICAvLyBOYU5cbiAgICByZXR1cm4gYiAhPT0gYjtcbiAgfVxuICBpZiAoYSA9PT0gMCAmJiBiID09PSAwKSB7XG4gICAgLy8gKy0wXG4gICAgcmV0dXJuIDEgLyBhID09PSAxIC8gYjtcbiAgfVxuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuLyoqXG4gKiBHaXZlbiBhbiBlbGVtZW50LCBjaGVjayBpZiBpdHMgcHJvcHMgaGF2ZSBiZWVuIG11dGF0ZWQgc2luY2UgZWxlbWVudFxuICogY3JlYXRpb24gKG9yIHRoZSBsYXN0IGNhbGwgdG8gdGhpcyBmdW5jdGlvbikuIEluIHBhcnRpY3VsYXIsIGNoZWNrIGlmIGFueVxuICogbmV3IHByb3BzIGhhdmUgYmVlbiBhZGRlZCwgd2hpY2ggd2UgY2FuJ3QgZGlyZWN0bHkgY2F0Y2ggYnkgZGVmaW5pbmcgd2FybmluZ1xuICogcHJvcGVydGllcyBvbiB0aGUgcHJvcHMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGNoZWNrQW5kV2FybkZvck11dGF0ZWRQcm9wcyhlbGVtZW50KSB7XG4gIGlmICghZWxlbWVudC5fc3RvcmUpIHtcbiAgICAvLyBFbGVtZW50IHdhcyBjcmVhdGVkIHVzaW5nIGBuZXcgUmVhY3RFbGVtZW50YCBkaXJlY3RseSBvciB3aXRoXG4gICAgLy8gYFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50YDsgc2tpcCBtdXRhdGlvbiBjaGVja2luZ1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbFByb3BzID0gZWxlbWVudC5fc3RvcmUub3JpZ2luYWxQcm9wcztcbiAgdmFyIHByb3BzID0gZWxlbWVudC5wcm9wcztcblxuICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wcykge1xuICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgIGlmICghb3JpZ2luYWxQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgfHxcbiAgICAgICAgICAhaXMob3JpZ2luYWxQcm9wc1twcm9wTmFtZV0sIHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgd2FybkZvclByb3BzTXV0YXRpb24ocHJvcE5hbWUsIGVsZW1lbnQpO1xuXG4gICAgICAgIC8vIENvcHkgb3ZlciB0aGUgbmV3IHZhbHVlIHNvIHRoYXQgdGhlIHR3byBwcm9wcyBvYmplY3RzIG1hdGNoIGFnYWluXG4gICAgICAgIG9yaWdpbmFsUHJvcHNbcHJvcE5hbWVdID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEdpdmVuIGFuIGVsZW1lbnQsIHZhbGlkYXRlIHRoYXQgaXRzIHByb3BzIGZvbGxvdyB0aGUgcHJvcFR5cGVzIGRlZmluaXRpb24sXG4gKiBwcm92aWRlZCBieSB0aGUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgPT0gbnVsbCkge1xuICAgIC8vIFRoaXMgaGFzIGFscmVhZHkgd2FybmVkLiBEb24ndCB0aHJvdy5cbiAgICByZXR1cm47XG4gIH1cbiAgLy8gRXh0cmFjdCB0aGUgY29tcG9uZW50IGNsYXNzIGZyb20gdGhlIGVsZW1lbnQuIENvbnZlcnRzIHN0cmluZyB0eXBlc1xuICAvLyB0byBhIGNvbXBvc2l0ZSBjbGFzcyB3aGljaCBtYXkgaGF2ZSBwcm9wVHlwZXMuXG4gIC8vIFRPRE86IFZhbGlkYXRpbmcgYSBzdHJpbmcncyBwcm9wVHlwZXMgaXMgbm90IGRlY291cGxlZCBmcm9tIHRoZVxuICAvLyByZW5kZXJpbmcgdGFyZ2V0IHdoaWNoIGlzIHByb2JsZW1hdGljLlxuICB2YXIgY29tcG9uZW50Q2xhc3MgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5nZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQoXG4gICAgZWxlbWVudFxuICApO1xuICB2YXIgbmFtZSA9IGNvbXBvbmVudENsYXNzLmRpc3BsYXlOYW1lIHx8IGNvbXBvbmVudENsYXNzLm5hbWU7XG4gIGlmIChjb21wb25lbnRDbGFzcy5wcm9wVHlwZXMpIHtcbiAgICBjaGVja1Byb3BUeXBlcyhcbiAgICAgIG5hbWUsXG4gICAgICBjb21wb25lbnRDbGFzcy5wcm9wVHlwZXMsXG4gICAgICBlbGVtZW50LnByb3BzLFxuICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wXG4gICAgKTtcbiAgfVxuICBpZiAodHlwZW9mIGNvbXBvbmVudENsYXNzLmdldERlZmF1bHRQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgY29tcG9uZW50Q2xhc3MuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkLFxuICAgICAgJ2dldERlZmF1bHRQcm9wcyBpcyBvbmx5IHVzZWQgb24gY2xhc3NpYyBSZWFjdC5jcmVhdGVDbGFzcyAnICtcbiAgICAgICdkZWZpbml0aW9ucy4gVXNlIGEgc3RhdGljIHByb3BlcnR5IG5hbWVkIGBkZWZhdWx0UHJvcHNgIGluc3RlYWQuJ1xuICAgICkgOiBudWxsKTtcbiAgfVxufVxuXG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0ge1xuXG4gIGNoZWNrQW5kV2FybkZvck11dGF0ZWRQcm9wczogY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFByb3BzLFxuXG4gIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uKHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuICAgIC8vIFdlIHdhcm4gaW4gdGhpcyBjYXNlIGJ1dCBkb24ndCB0aHJvdy4gV2UgZXhwZWN0IHRoZSBlbGVtZW50IGNyZWF0aW9uIHRvXG4gICAgLy8gc3VjY2VlZCBhbmQgdGhlcmUgd2lsbCBsaWtlbHkgYmUgZXJyb3JzIGluIHJlbmRlci5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIHR5cGUgIT0gbnVsbCxcbiAgICAgICdSZWFjdC5jcmVhdGVFbGVtZW50OiB0eXBlIHNob3VsZCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuIEl0IHNob3VsZCAnICtcbiAgICAgICAgJ2JlIGEgc3RyaW5nIChmb3IgRE9NIGVsZW1lbnRzKSBvciBhIFJlYWN0Q2xhc3MgKGZvciBjb21wb3NpdGUgJyArXG4gICAgICAgICdjb21wb25lbnRzKS4nXG4gICAgKSA6IG51bGwpO1xuXG4gICAgdmFyIGVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgLy8gVGhlIHJlc3VsdCBjYW4gYmUgbnVsbGlzaCBpZiBhIG1vY2sgb3IgYSBjdXN0b20gZnVuY3Rpb24gaXMgdXNlZC5cbiAgICAvLyBUT0RPOiBEcm9wIHRoaXMgd2hlbiB0aGVzZSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgYXMgdGhlIHR5cGUgYXJndW1lbnQuXG4gICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tpXSwgdHlwZSk7XG4gICAgfVxuXG4gICAgdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCk7XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfSxcblxuICBjcmVhdGVGYWN0b3J5OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgdmFyIHZhbGlkYXRlZEZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRWxlbWVudC5iaW5kKFxuICAgICAgbnVsbCxcbiAgICAgIHR5cGVcbiAgICApO1xuICAgIC8vIExlZ2FjeSBob29rIFRPRE86IFdhcm4gaWYgdGhpcyBpcyBhY2Nlc3NlZFxuICAgIHZhbGlkYXRlZEZhY3RvcnkudHlwZSA9IHR5cGU7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB0cnkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgICAgdmFsaWRhdGVkRmFjdG9yeSxcbiAgICAgICAgICAndHlwZScsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAnRmFjdG9yeS50eXBlIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB0aGUgY2xhc3MgZGlyZWN0bHkgJyArXG4gICAgICAgICAgICAgICAgJ2JlZm9yZSBwYXNzaW5nIGl0IHRvIGNyZWF0ZUZhY3RvcnkuJ1xuICAgICAgICAgICAgICApIDogbnVsbCk7XG4gICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndHlwZScsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdHlwZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAvLyBJRSB3aWxsIGZhaWwgb24gZGVmaW5lUHJvcGVydHkgKGVzNS1zaGltL3NoYW0gdG9vKVxuICAgICAgfVxuICAgIH1cblxuXG4gICAgcmV0dXJuIHZhbGlkYXRlZEZhY3Rvcnk7XG4gIH0sXG5cbiAgY2xvbmVFbGVtZW50OiBmdW5jdGlvbihlbGVtZW50LCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCBuZXdFbGVtZW50LnR5cGUpO1xuICAgIH1cbiAgICB2YWxpZGF0ZVByb3BUeXBlcyhuZXdFbGVtZW50KTtcbiAgICByZXR1cm4gbmV3RWxlbWVudDtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RWxlbWVudFZhbGlkYXRvcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RDdXJyZW50T3duZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyLmpzXCIsXCIuL1JlYWN0RWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCIsXCIuL1JlYWN0RnJhZ21lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RnJhZ21lbnQuanNcIixcIi4vUmVhY3ROYXRpdmVDb21wb25lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TmF0aXZlQ29tcG9uZW50LmpzXCIsXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcy5qc1wiLFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlTG9jYXRpb25zLmpzXCIsXCIuL2dldEl0ZXJhdG9yRm5cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEl0ZXJhdG9yRm4uanNcIixcIi4vaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIixcIi4vd2FybmluZ1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvd2FybmluZy5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RW1wdHlDb21wb25lbnQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RW1wdHlDb21wb25lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VNYXBcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbnZhciBjb21wb25lbnQ7XG4vLyBUaGlzIHJlZ2lzdHJ5IGtlZXBzIHRyYWNrIG9mIHRoZSBSZWFjdCBJRHMgb2YgdGhlIGNvbXBvbmVudHMgdGhhdCByZW5kZXJlZCB0b1xuLy8gYG51bGxgIChpbiByZWFsaXR5IGEgcGxhY2Vob2xkZXIgc3VjaCBhcyBgbm9zY3JpcHRgKVxudmFyIG51bGxDb21wb25lbnRJRHNSZWdpc3RyeSA9IHt9O1xuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbiA9IHtcbiAgaW5qZWN0RW1wdHlDb21wb25lbnQ6IGZ1bmN0aW9uKGVtcHR5Q29tcG9uZW50KSB7XG4gICAgY29tcG9uZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoZW1wdHlDb21wb25lbnQpO1xuICB9XG59O1xuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudFR5cGUgPSBmdW5jdGlvbigpIHt9O1xuUmVhY3RFbXB0eUNvbXBvbmVudFR5cGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQodGhpcyk7XG4gIC8vIFRPRE86IE1ha2Ugc3VyZSB3ZSBydW4gdGhlc2UgbWV0aG9kcyBpbiB0aGUgY29ycmVjdCBvcmRlciwgd2Ugc2hvdWxkbid0XG4gIC8vIG5lZWQgdGhpcyBjaGVjay4gV2UncmUgZ29pbmcgdG8gYXNzdW1lIGlmIHdlJ3JlIGhlcmUgaXQgbWVhbnMgd2UgcmFuXG4gIC8vIGNvbXBvbmVudFdpbGxVbm1vdW50IGFscmVhZHkgc28gdGhlcmUgaXMgbm8gaW50ZXJuYWwgaW5zdGFuY2UgKGl0IGdldHNcbiAgLy8gcmVtb3ZlZCBhcyBwYXJ0IG9mIHRoZSB1bm1vdW50aW5nIHByb2Nlc3MpLlxuICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQoaW50ZXJuYWxJbnN0YW5jZS5fcm9vdE5vZGVJRCk7XG59O1xuUmVhY3RFbXB0eUNvbXBvbmVudFR5cGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQodGhpcyk7XG4gIC8vIFRPRE86IEdldCByaWQgb2YgdGhpcyBjaGVjay4gU2VlIFRPRE8gaW4gY29tcG9uZW50RGlkTW91bnQuXG4gIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBkZXJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGludGVybmFsSW5zdGFuY2UuX3Jvb3ROb2RlSUQpO1xufTtcblJlYWN0RW1wdHlDb21wb25lbnRUeXBlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBjb21wb25lbnQsXG4gICAgJ1RyeWluZyB0byByZXR1cm4gbnVsbCBmcm9tIGEgcmVuZGVyLCBidXQgbm8gbnVsbCBwbGFjZWhvbGRlciBjb21wb25lbnQgJyArXG4gICAgJ3dhcyBpbmplY3RlZC4nXG4gICkgOiBpbnZhcmlhbnQoY29tcG9uZW50KSk7XG4gIHJldHVybiBjb21wb25lbnQoKTtcbn07XG5cbnZhciBlbXB0eUVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudChSZWFjdEVtcHR5Q29tcG9uZW50VHlwZSk7XG5cbi8qKlxuICogTWFyayB0aGUgY29tcG9uZW50IGFzIGhhdmluZyByZW5kZXJlZCB0byBudWxsLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENvbXBvbmVudCdzIGBfcm9vdE5vZGVJRGAuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGlkKSB7XG4gIG51bGxDb21wb25lbnRJRHNSZWdpc3RyeVtpZF0gPSB0cnVlO1xufVxuXG4vKipcbiAqIFVubWFyayB0aGUgY29tcG9uZW50IGFzIGhhdmluZyByZW5kZXJlZCB0byBudWxsOiBpdCByZW5kZXJzIHRvIHNvbWV0aGluZyBub3cuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cbiAqL1xuZnVuY3Rpb24gZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRChpZCkge1xuICBkZWxldGUgbnVsbENvbXBvbmVudElEc1JlZ2lzdHJ5W2lkXTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNvbXBvbmVudCBpcyByZW5kZXJlZCB0byBudWxsLlxuICovXG5mdW5jdGlvbiBpc051bGxDb21wb25lbnRJRChpZCkge1xuICByZXR1cm4gISFudWxsQ29tcG9uZW50SURzUmVnaXN0cnlbaWRdO1xufVxuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHtcbiAgZW1wdHlFbGVtZW50OiBlbXB0eUVsZW1lbnQsXG4gIGluamVjdGlvbjogUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbixcbiAgaXNOdWxsQ29tcG9uZW50SUQ6IGlzTnVsbENvbXBvbmVudElEXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RW1wdHlDb21wb25lbnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0RWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCIsXCIuL1JlYWN0SW5zdGFuY2VNYXBcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5zdGFuY2VNYXAuanNcIixcIi4vaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVycm9yVXRpbHMuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFcnJvclV0aWxzXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RFcnJvclV0aWxzID0ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIGd1YXJkZWQgdmVyc2lvbiBvZiBhIGZ1bmN0aW9uLiBUaGlzIGlzIHN1cHBvc2VkIHRvIG1ha2UgZGVidWdnaW5nXG4gICAqIG9mIGV2ZW50IGhhbmRsZXJzIGVhc2llci4gVG8gYWlkIGRlYnVnZ2luZyB3aXRoIHRoZSBicm93c2VyJ3MgZGVidWdnZXIsXG4gICAqIHRoaXMgY3VycmVudGx5IHNpbXBseSByZXR1cm5zIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuYyBGdW5jdGlvbiB0byBiZSBleGVjdXRlZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZ3VhcmRcbiAgICogQHJldHVybiB7ZnVuY3Rpb259XG4gICAqL1xuICBndWFyZDogZnVuY3Rpb24oZnVuYywgbmFtZSkge1xuICAgIHJldHVybiBmdW5jO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXJyb3JVdGlscztcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEV2ZW50RW1pdHRlck1peGluLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luSHViXCIpO1xuXG5mdW5jdGlvbiBydW5FdmVudFF1ZXVlSW5CYXRjaChldmVudHMpIHtcbiAgRXZlbnRQbHVnaW5IdWIuZW5xdWV1ZUV2ZW50cyhldmVudHMpO1xuICBFdmVudFBsdWdpbkh1Yi5wcm9jZXNzRXZlbnRRdWV1ZSgpO1xufVxuXG52YXIgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiA9IHtcblxuICAvKipcbiAgICogU3RyZWFtcyBhIGZpcmVkIHRvcC1sZXZlbCBldmVudCB0byBgRXZlbnRQbHVnaW5IdWJgIHdoZXJlIHBsdWdpbnMgaGF2ZSB0aGVcbiAgICogb3Bwb3J0dW5pdHkgdG8gY3JlYXRlIGBSZWFjdEV2ZW50YHMgdG8gYmUgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGVudmlyb25tZW50IGV2ZW50LlxuICAgKi9cbiAgaGFuZGxlVG9wTGV2ZWw6IGZ1bmN0aW9uKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnQpIHtcbiAgICB2YXIgZXZlbnRzID0gRXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50cyhcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcblxuICAgIHJ1bkV2ZW50UXVldWVJbkJhdGNoKGV2ZW50cyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFdmVudEVtaXR0ZXJNaXhpbjtcblxufSx7XCIuL0V2ZW50UGx1Z2luSHViXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFBsdWdpbkh1Yi5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEV2ZW50TGlzdGVuZXIuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFdmVudExpc3RlbmVyXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKFwiLi9FdmVudExpc3RlbmVyXCIpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZ2V0RXZlbnRUYXJnZXQgPSByZXF1aXJlKFwiLi9nZXRFdmVudFRhcmdldFwiKTtcbnZhciBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbiA9IHJlcXVpcmUoXCIuL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uXCIpO1xuXG4vKipcbiAqIEZpbmRzIHRoZSBwYXJlbnQgUmVhY3QgY29tcG9uZW50IG9mIGBub2RlYC5cbiAqXG4gKiBAcGFyYW0geyp9IG5vZGVcbiAqIEByZXR1cm4gez9ET01FdmVudFRhcmdldH0gUGFyZW50IGNvbnRhaW5lciwgb3IgYG51bGxgIGlmIHRoZSBzcGVjaWZpZWQgbm9kZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBub3QgbmVzdGVkLlxuICovXG5mdW5jdGlvbiBmaW5kUGFyZW50KG5vZGUpIHtcbiAgLy8gVE9ETzogSXQgbWF5IGJlIGEgZ29vZCBpZGVhIHRvIGNhY2hlIHRoaXMgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBET01cbiAgLy8gdHJhdmVyc2FsLCBidXQgY2FjaGluZyBpcyBkaWZmaWN1bHQgdG8gZG8gY29ycmVjdGx5IHdpdGhvdXQgdXNpbmcgYVxuICAvLyBtdXRhdGlvbiBvYnNlcnZlciB0byBsaXN0ZW4gZm9yIGFsbCBET00gY2hhbmdlcy5cbiAgdmFyIG5vZGVJRCA9IFJlYWN0TW91bnQuZ2V0SUQobm9kZSk7XG4gIHZhciByb290SUQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5nZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQobm9kZUlEKTtcbiAgdmFyIGNvbnRhaW5lciA9IFJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQocm9vdElEKTtcbiAgdmFyIHBhcmVudCA9IFJlYWN0TW91bnQuZ2V0Rmlyc3RSZWFjdERPTShjb250YWluZXIpO1xuICByZXR1cm4gcGFyZW50O1xufVxuXG4vLyBVc2VkIHRvIHN0b3JlIGFuY2VzdG9yIGhpZXJhcmNoeSBpbiB0b3AgbGV2ZWwgY2FsbGJhY2tcbmZ1bmN0aW9uIFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHRoaXMudG9wTGV2ZWxUeXBlID0gdG9wTGV2ZWxUeXBlO1xuICB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG4gIHRoaXMuYW5jZXN0b3JzID0gW107XG59XG5hc3NpZ24oVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLnByb3RvdHlwZSwge1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRvcExldmVsVHlwZSA9IG51bGw7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IG51bGw7XG4gICAgdGhpcy5hbmNlc3RvcnMubGVuZ3RoID0gMDtcbiAgfVxufSk7XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oXG4gIFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZyxcbiAgUG9vbGVkQ2xhc3MudHdvQXJndW1lbnRQb29sZXJcbik7XG5cbmZ1bmN0aW9uIGhhbmRsZVRvcExldmVsSW1wbChib29rS2VlcGluZykge1xuICB2YXIgdG9wTGV2ZWxUYXJnZXQgPSBSZWFjdE1vdW50LmdldEZpcnN0UmVhY3RET00oXG4gICAgZ2V0RXZlbnRUYXJnZXQoYm9va0tlZXBpbmcubmF0aXZlRXZlbnQpXG4gICkgfHwgd2luZG93O1xuXG4gIC8vIExvb3AgdGhyb3VnaCB0aGUgaGllcmFyY2h5LCBpbiBjYXNlIHRoZXJlJ3MgYW55IG5lc3RlZCBjb21wb25lbnRzLlxuICAvLyBJdCdzIGltcG9ydGFudCB0aGF0IHdlIGJ1aWxkIHRoZSBhcnJheSBvZiBhbmNlc3RvcnMgYmVmb3JlIGNhbGxpbmcgYW55XG4gIC8vIGV2ZW50IGhhbmRsZXJzLCBiZWNhdXNlIGV2ZW50IGhhbmRsZXJzIGNhbiBtb2RpZnkgdGhlIERPTSwgbGVhZGluZyB0b1xuICAvLyBpbmNvbnNpc3RlbmNpZXMgd2l0aCBSZWFjdE1vdW50J3Mgbm9kZSBjYWNoZS4gU2VlICMxMTA1LlxuICB2YXIgYW5jZXN0b3IgPSB0b3BMZXZlbFRhcmdldDtcbiAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgYm9va0tlZXBpbmcuYW5jZXN0b3JzLnB1c2goYW5jZXN0b3IpO1xuICAgIGFuY2VzdG9yID0gZmluZFBhcmVudChhbmNlc3Rvcik7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB0b3BMZXZlbFRhcmdldCA9IGJvb2tLZWVwaW5nLmFuY2VzdG9yc1tpXTtcbiAgICB2YXIgdG9wTGV2ZWxUYXJnZXRJRCA9IFJlYWN0TW91bnQuZ2V0SUQodG9wTGV2ZWxUYXJnZXQpIHx8ICcnO1xuICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5faGFuZGxlVG9wTGV2ZWwoXG4gICAgICBib29rS2VlcGluZy50b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBib29rS2VlcGluZy5uYXRpdmVFdmVudFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2Nyb2xsVmFsdWVNb25pdG9yKGNiKSB7XG4gIHZhciBzY3JvbGxQb3NpdGlvbiA9IGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uKHdpbmRvdyk7XG4gIGNiKHNjcm9sbFBvc2l0aW9uKTtcbn1cblxudmFyIFJlYWN0RXZlbnRMaXN0ZW5lciA9IHtcbiAgX2VuYWJsZWQ6IHRydWUsXG4gIF9oYW5kbGVUb3BMZXZlbDogbnVsbCxcblxuICBXSU5ET1dfSEFORExFOiBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyB3aW5kb3cgOiBudWxsLFxuXG4gIHNldEhhbmRsZVRvcExldmVsOiBmdW5jdGlvbihoYW5kbGVUb3BMZXZlbCkge1xuICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5faGFuZGxlVG9wTGV2ZWwgPSBoYW5kbGVUb3BMZXZlbDtcbiAgfSxcblxuICBzZXRFbmFibGVkOiBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgUmVhY3RFdmVudExpc3RlbmVyLl9lbmFibGVkID0gISFlbmFibGVkO1xuICB9LFxuXG4gIGlzRW5hYmxlZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZDtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBUcmFwcyB0b3AtbGV2ZWwgZXZlbnRzIGJ5IHVzaW5nIGV2ZW50IGJ1YmJsaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBoYW5kbGVyQmFzZU5hbWUgRXZlbnQgbmFtZSAoZS5nLiBcImNsaWNrXCIpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gaGFuZGxlIEVsZW1lbnQgb24gd2hpY2ggdG8gYXR0YWNoIGxpc3RlbmVyLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIGEgcmVtb3ZlIGZ1bmN0aW9uIHdoaWNoIHdpbGwgZm9yY2VmdWxseVxuICAgKiAgICAgICAgICAgICAgICAgIHJlbW92ZSB0aGUgbGlzdGVuZXIuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdHJhcEJ1YmJsZWRFdmVudDogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSkge1xuICAgIHZhciBlbGVtZW50ID0gaGFuZGxlO1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBFdmVudExpc3RlbmVyLmxpc3RlbihcbiAgICAgIGVsZW1lbnQsXG4gICAgICBoYW5kbGVyQmFzZU5hbWUsXG4gICAgICBSZWFjdEV2ZW50TGlzdGVuZXIuZGlzcGF0Y2hFdmVudC5iaW5kKG51bGwsIHRvcExldmVsVHlwZSlcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmFwcyBhIHRvcC1sZXZlbCBldmVudCBieSB1c2luZyBldmVudCBjYXB0dXJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhbmRsZXJCYXNlTmFtZSBFdmVudCBuYW1lIChlLmcuIFwiY2xpY2tcIikuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBoYW5kbGUgRWxlbWVudCBvbiB3aGljaCB0byBhdHRhY2ggbGlzdGVuZXIuXG4gICAqIEByZXR1cm4ge29iamVjdH0gQW4gb2JqZWN0IHdpdGggYSByZW1vdmUgZnVuY3Rpb24gd2hpY2ggd2lsbCBmb3JjZWZ1bGx5XG4gICAqICAgICAgICAgICAgICAgICAgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmFwQ2FwdHVyZWRFdmVudDogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSkge1xuICAgIHZhciBlbGVtZW50ID0gaGFuZGxlO1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBFdmVudExpc3RlbmVyLmNhcHR1cmUoXG4gICAgICBlbGVtZW50LFxuICAgICAgaGFuZGxlckJhc2VOYW1lLFxuICAgICAgUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQuYmluZChudWxsLCB0b3BMZXZlbFR5cGUpXG4gICAgKTtcbiAgfSxcblxuICBtb25pdG9yU2Nyb2xsVmFsdWU6IGZ1bmN0aW9uKHJlZnJlc2gpIHtcbiAgICB2YXIgY2FsbGJhY2sgPSBzY3JvbGxWYWx1ZU1vbml0b3IuYmluZChudWxsLCByZWZyZXNoKTtcbiAgICBFdmVudExpc3RlbmVyLmxpc3Rlbih3aW5kb3csICdzY3JvbGwnLCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICAgIGlmICghUmVhY3RFdmVudExpc3RlbmVyLl9lbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGJvb2tLZWVwaW5nID0gVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLmdldFBvb2xlZChcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgICB0cnkge1xuICAgICAgLy8gRXZlbnQgcXVldWUgYmVpbmcgcHJvY2Vzc2VkIGluIHRoZSBzYW1lIGN5Y2xlIGFsbG93c1xuICAgICAgLy8gYHByZXZlbnREZWZhdWx0YC5cbiAgICAgIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhoYW5kbGVUb3BMZXZlbEltcGwsIGJvb2tLZWVwaW5nKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLnJlbGVhc2UoYm9va0tlZXBpbmcpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEV2ZW50TGlzdGVuZXI7XG5cbn0se1wiLi9FdmVudExpc3RlbmVyXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudExpc3RlbmVyLmpzXCIsXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qc1wiLFwiLi9PYmplY3QuYXNzaWduXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9PYmplY3QuYXNzaWduLmpzXCIsXCIuL1Bvb2xlZENsYXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9Qb29sZWRDbGFzcy5qc1wiLFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJbnN0YW5jZUhhbmRsZXMuanNcIixcIi4vUmVhY3RNb3VudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNb3VudC5qc1wiLFwiLi9SZWFjdFVwZGF0ZXNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0VXBkYXRlcy5qc1wiLFwiLi9nZXRFdmVudFRhcmdldFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRUYXJnZXQuanNcIixcIi4vZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RnJhZ21lbnQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RnJhZ21lbnRcbiovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG4vKipcbiAqIFdlIHVzZWQgdG8gYWxsb3cga2V5ZWQgb2JqZWN0cyB0byBzZXJ2ZSBhcyBhIGNvbGxlY3Rpb24gb2YgUmVhY3RFbGVtZW50cyxcbiAqIG9yIG5lc3RlZCBzZXRzLiBUaGlzIGFsbG93ZWQgdXMgYSB3YXkgdG8gZXhwbGljaXRseSBrZXkgYSBzZXQgYSBmcmFnbWVudCBvZlxuICogY29tcG9uZW50cy4gVGhpcyBpcyBub3cgYmVpbmcgcmVwbGFjZWQgd2l0aCBhbiBvcGFxdWUgZGF0YSBzdHJ1Y3R1cmUuXG4gKiBUaGUgdXBncmFkZSBwYXRoIGlzIHRvIGNhbGwgUmVhY3QuYWRkb25zLmNyZWF0ZUZyYWdtZW50KHsga2V5OiB2YWx1ZSB9KSB0b1xuICogY3JlYXRlIGEga2V5ZWQgZnJhZ21lbnQuIFRoZSByZXN1bHRpbmcgZGF0YSBzdHJ1Y3R1cmUgaXMgb3BhcXVlLCBmb3Igbm93LlxuICovXG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgdmFyIGZyYWdtZW50S2V5ID0gJ19yZWFjdEZyYWdtZW50JztcbiAgdmFyIGRpZFdhcm5LZXkgPSAnX3JlYWN0RGlkV2Fybic7XG4gIHZhciBjYW5XYXJuRm9yUmVhY3RGcmFnbWVudCA9IGZhbHNlO1xuXG4gIHRyeSB7XG4gICAgLy8gRmVhdHVyZSB0ZXN0LiBEb24ndCBldmVuIHRyeSB0byBpc3N1ZSB0aGlzIHdhcm5pbmcgaWYgd2UgY2FuJ3QgdXNlXG4gICAgLy8gZW51bWVyYWJsZTogZmFsc2UuXG5cbiAgICB2YXIgZHVtbXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICB7fSxcbiAgICAgIGZyYWdtZW50S2V5LFxuICAgICAge2VudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogdHJ1ZX1cbiAgICApO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAge30sXG4gICAgICAna2V5JyxcbiAgICAgIHtlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGR1bW15fVxuICAgICk7XG5cbiAgICBjYW5XYXJuRm9yUmVhY3RGcmFnbWVudCA9IHRydWU7XG4gIH0gY2F0Y2ggKHgpIHsgfVxuXG4gIHZhciBwcm94eVByb3BlcnR5QWNjZXNzV2l0aFdhcm5pbmcgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgIHRoaXNbZGlkV2FybktleV0sXG4gICAgICAgICAgJ0EgUmVhY3RGcmFnbWVudCBpcyBhbiBvcGFxdWUgdHlwZS4gQWNjZXNzaW5nIGFueSBvZiBpdHMgJyArXG4gICAgICAgICAgJ3Byb3BlcnRpZXMgaXMgZGVwcmVjYXRlZC4gUGFzcyBpdCB0byBvbmUgb2YgdGhlIFJlYWN0LkNoaWxkcmVuICcgK1xuICAgICAgICAgICdoZWxwZXJzLidcbiAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICB0aGlzW2RpZFdhcm5LZXldID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXNbZnJhZ21lbnRLZXldW2tleV07XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICB0aGlzW2RpZFdhcm5LZXldLFxuICAgICAgICAgICdBIFJlYWN0RnJhZ21lbnQgaXMgYW4gaW1tdXRhYmxlIG9wYXF1ZSB0eXBlLiBNdXRhdGluZyBpdHMgJyArXG4gICAgICAgICAgJ3Byb3BlcnRpZXMgaXMgZGVwcmVjYXRlZC4nXG4gICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgdGhpc1tkaWRXYXJuS2V5XSA9IHRydWU7XG4gICAgICAgIHRoaXNbZnJhZ21lbnRLZXldW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgaXNzdWVkV2FybmluZ3MgPSB7fTtcblxuICB2YXIgZGlkV2FybkZvckZyYWdtZW50ID0gZnVuY3Rpb24oZnJhZ21lbnQpIHtcbiAgICAvLyBXZSB1c2UgdGhlIGtleXMgYW5kIHRoZSB0eXBlIG9mIHRoZSB2YWx1ZSBhcyBhIGhldXJpc3RpYyB0byBkZWR1cGUgdGhlXG4gICAgLy8gd2FybmluZyB0byBhdm9pZCBzcGFtbWluZyB0b28gbXVjaC5cbiAgICB2YXIgZnJhZ21lbnRDYWNoZUtleSA9ICcnO1xuICAgIGZvciAodmFyIGtleSBpbiBmcmFnbWVudCkge1xuICAgICAgZnJhZ21lbnRDYWNoZUtleSArPSBrZXkgKyAnOicgKyAodHlwZW9mIGZyYWdtZW50W2tleV0pICsgJywnO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeVdhcm5lZE9uY2UgPSAhIWlzc3VlZFdhcm5pbmdzW2ZyYWdtZW50Q2FjaGVLZXldO1xuICAgIGlzc3VlZFdhcm5pbmdzW2ZyYWdtZW50Q2FjaGVLZXldID0gdHJ1ZTtcbiAgICByZXR1cm4gYWxyZWFkeVdhcm5lZE9uY2U7XG4gIH07XG59XG5cbnZhciBSZWFjdEZyYWdtZW50ID0ge1xuICAvLyBXcmFwIGEga2V5ZWQgb2JqZWN0IGluIGFuIG9wYXF1ZSBwcm94eSB0aGF0IHdhcm5zIHlvdSBpZiB5b3UgYWNjZXNzIGFueVxuICAvLyBvZiBpdHMgcHJvcGVydGllcy5cbiAgY3JlYXRlOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICBpZiAodHlwZW9mIG9iamVjdCAhPT0gJ29iamVjdCcgfHwgIW9iamVjdCB8fCBBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgJ1JlYWN0LmFkZG9ucy5jcmVhdGVGcmFnbWVudCBvbmx5IGFjY2VwdHMgYSBzaW5nbGUgb2JqZWN0LicsXG4gICAgICAgICAgb2JqZWN0XG4gICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQob2JqZWN0KSkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAnUmVhY3QuYWRkb25zLmNyZWF0ZUZyYWdtZW50IGRvZXMgbm90IGFjY2VwdCBhIFJlYWN0RWxlbWVudCAnICtcbiAgICAgICAgICAnd2l0aG91dCBhIHdyYXBwZXIgb2JqZWN0LidcbiAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgaWYgKGNhbldhcm5Gb3JSZWFjdEZyYWdtZW50KSB7XG4gICAgICAgIHZhciBwcm94eSA9IHt9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJveHksIGZyYWdtZW50S2V5LCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgdmFsdWU6IG9iamVjdFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3h5LCBkaWRXYXJuS2V5LCB7XG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgcHJveHlQcm9wZXJ0eUFjY2Vzc1dpdGhXYXJuaW5nKHByb3h5LCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhwcm94eSk7XG4gICAgICAgIHJldHVybiBwcm94eTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSxcbiAgLy8gRXh0cmFjdCB0aGUgb3JpZ2luYWwga2V5ZWQgb2JqZWN0IGZyb20gdGhlIGZyYWdtZW50IG9wYXF1ZSB0eXBlLiBXYXJuIGlmXG4gIC8vIGEgcGxhaW4gb2JqZWN0IGlzIHBhc3NlZCBoZXJlLlxuICBleHRyYWN0OiBmdW5jdGlvbihmcmFnbWVudCkge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIGlmIChjYW5XYXJuRm9yUmVhY3RGcmFnbWVudCkge1xuICAgICAgICBpZiAoIWZyYWdtZW50W2ZyYWdtZW50S2V5XSkge1xuICAgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgICAgZGlkV2FybkZvckZyYWdtZW50KGZyYWdtZW50KSxcbiAgICAgICAgICAgICdBbnkgdXNlIG9mIGEga2V5ZWQgb2JqZWN0IHNob3VsZCBiZSB3cmFwcGVkIGluICcgK1xuICAgICAgICAgICAgJ1JlYWN0LmFkZG9ucy5jcmVhdGVGcmFnbWVudChvYmplY3QpIGJlZm9yZSBiZWluZyBwYXNzZWQgYXMgYSAnICtcbiAgICAgICAgICAgICdjaGlsZC4nXG4gICAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnJhZ21lbnRbZnJhZ21lbnRLZXldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnJhZ21lbnQ7XG4gIH0sXG4gIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBmcmFnbWVudCBhbmQgaWYgc28sIGV4dHJhY3QgdGhlIGtleWVkIG9iamVjdC4gSWYgaXRcbiAgLy8gaXMgYSBmcmFnbWVudC1saWtlIG9iamVjdCwgd2FybiB0aGF0IGl0IHNob3VsZCBiZSB3cmFwcGVkLiBJZ25vcmUgaWYgd2VcbiAgLy8gY2FuJ3QgZGV0ZXJtaW5lIHdoYXQga2luZCBvZiBvYmplY3QgdGhpcyBpcy5cbiAgZXh0cmFjdElmRnJhZ21lbnQ6IGZ1bmN0aW9uKGZyYWdtZW50KSB7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgaWYgKGNhbldhcm5Gb3JSZWFjdEZyYWdtZW50KSB7XG4gICAgICAgIC8vIElmIGl0IGlzIHRoZSBvcGFxdWUgdHlwZSwgcmV0dXJuIHRoZSBrZXllZCBvYmplY3QuXG4gICAgICAgIGlmIChmcmFnbWVudFtmcmFnbWVudEtleV0pIHtcbiAgICAgICAgICByZXR1cm4gZnJhZ21lbnRbZnJhZ21lbnRLZXldO1xuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgZWFjaCBwcm9wZXJ0eSBpZiBpdCBoYXMgYW4gZWxlbWVudCwgaWYgaXQgZG9lc1xuICAgICAgICAvLyBpdCBpcyBwcm9iYWJseSBtZWFudCBhcyBhIGZyYWdtZW50LCBzbyB3ZSBjYW4gd2FybiBlYXJseS4gRGVmZXIsXG4gICAgICAgIC8vIHRoZSB3YXJuaW5nIHRvIGV4dHJhY3QuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBmcmFnbWVudCkge1xuICAgICAgICAgIGlmIChmcmFnbWVudC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmXG4gICAgICAgICAgICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChmcmFnbWVudFtrZXldKSkge1xuICAgICAgICAgICAgLy8gVGhpcyBsb29rcyBsaWtlIGEgZnJhZ21lbnQgb2JqZWN0LCB3ZSBzaG91bGQgcHJvdmlkZSBhblxuICAgICAgICAgICAgLy8gZWFybHkgd2FybmluZy5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdEZyYWdtZW50LmV4dHJhY3QoZnJhZ21lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnJhZ21lbnQ7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RGcmFnbWVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RFbGVtZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVsZW1lbnQuanNcIixcIi4vd2FybmluZ1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvd2FybmluZy5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5qZWN0aW9uLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SW5qZWN0aW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKTtcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luSHViXCIpO1xudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50XCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVtcHR5Q29tcG9uZW50XCIpO1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKTtcbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCIpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RET01Db21wb25lbnRcIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xudmFyIFJlYWN0Um9vdEluZGV4ID0gcmVxdWlyZShcIi4vUmVhY3RSb290SW5kZXhcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgUmVhY3RJbmplY3Rpb24gPSB7XG4gIENvbXBvbmVudDogUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5pbmplY3Rpb24sXG4gIENsYXNzOiBSZWFjdENsYXNzLmluamVjdGlvbixcbiAgRE9NQ29tcG9uZW50OiBSZWFjdERPTUNvbXBvbmVudC5pbmplY3Rpb24sXG4gIERPTVByb3BlcnR5OiBET01Qcm9wZXJ0eS5pbmplY3Rpb24sXG4gIEVtcHR5Q29tcG9uZW50OiBSZWFjdEVtcHR5Q29tcG9uZW50LmluamVjdGlvbixcbiAgRXZlbnRQbHVnaW5IdWI6IEV2ZW50UGx1Z2luSHViLmluamVjdGlvbixcbiAgRXZlbnRFbWl0dGVyOiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaW5qZWN0aW9uLFxuICBOYXRpdmVDb21wb25lbnQ6IFJlYWN0TmF0aXZlQ29tcG9uZW50LmluamVjdGlvbixcbiAgUGVyZjogUmVhY3RQZXJmLmluamVjdGlvbixcbiAgUm9vdEluZGV4OiBSZWFjdFJvb3RJbmRleC5pbmplY3Rpb24sXG4gIFVwZGF0ZXM6IFJlYWN0VXBkYXRlcy5pbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbmplY3Rpb247XG5cbn0se1wiLi9ET01Qcm9wZXJ0eVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NUHJvcGVydHkuanNcIixcIi4vRXZlbnRQbHVnaW5IdWJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50UGx1Z2luSHViLmpzXCIsXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmpzXCIsXCIuL1JlYWN0Q2xhc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q2xhc3MuanNcIixcIi4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5qc1wiLFwiLi9SZWFjdERPTUNvbXBvbmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01Db21wb25lbnQuanNcIixcIi4vUmVhY3RFbXB0eUNvbXBvbmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbXB0eUNvbXBvbmVudC5qc1wiLFwiLi9SZWFjdE5hdGl2ZUNvbXBvbmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3ROYXRpdmVDb21wb25lbnQuanNcIixcIi4vUmVhY3RQZXJmXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFBlcmYuanNcIixcIi4vUmVhY3RSb290SW5kZXhcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Um9vdEluZGV4LmpzXCIsXCIuL1JlYWN0VXBkYXRlc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RVcGRhdGVzLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5wdXRTZWxlY3Rpb24uanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbnB1dFNlbGVjdGlvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NU2VsZWN0aW9uID0gcmVxdWlyZShcIi4vUmVhY3RET01TZWxlY3Rpb25cIik7XG5cbnZhciBjb250YWluc05vZGUgPSByZXF1aXJlKFwiLi9jb250YWluc05vZGVcIik7XG52YXIgZm9jdXNOb2RlID0gcmVxdWlyZShcIi4vZm9jdXNOb2RlXCIpO1xudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKFwiLi9nZXRBY3RpdmVFbGVtZW50XCIpO1xuXG5mdW5jdGlvbiBpc0luRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gY29udGFpbnNOb2RlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgbm9kZSk7XG59XG5cbi8qKlxuICogQFJlYWN0SW5wdXRTZWxlY3Rpb246IFJlYWN0IGlucHV0IHNlbGVjdGlvbiBtb2R1bGUuIEJhc2VkIG9uIFNlbGVjdGlvbi5qcyxcbiAqIGJ1dCBtb2RpZmllZCB0byBiZSBzdWl0YWJsZSBmb3IgcmVhY3QgYW5kIGhhcyBhIGNvdXBsZSBvZiBidWcgZml4ZXMgKGRvZXNuJ3RcbiAqIGFzc3VtZSBidXR0b25zIGhhdmUgcmFuZ2Ugc2VsZWN0aW9ucyBhbGxvd2VkKS5cbiAqIElucHV0IHNlbGVjdGlvbiBtb2R1bGUgZm9yIFJlYWN0LlxuICovXG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHtcblxuICBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXM6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICByZXR1cm4gZWxlbSAmJiAoXG4gICAgICAoKGVsZW0ubm9kZU5hbWUgPT09ICdJTlBVVCcgJiYgZWxlbS50eXBlID09PSAndGV4dCcpIHx8XG4gICAgICBlbGVtLm5vZGVOYW1lID09PSAnVEVYVEFSRUEnIHx8IGVsZW0uY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpXG4gICAgKTtcbiAgfSxcblxuICBnZXRTZWxlY3Rpb25JbmZvcm1hdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIHJldHVybiB7XG4gICAgICBmb2N1c2VkRWxlbTogZm9jdXNlZEVsZW0sXG4gICAgICBzZWxlY3Rpb25SYW5nZTpcbiAgICAgICAgICBSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhmb2N1c2VkRWxlbSkgP1xuICAgICAgICAgIFJlYWN0SW5wdXRTZWxlY3Rpb24uZ2V0U2VsZWN0aW9uKGZvY3VzZWRFbGVtKSA6XG4gICAgICAgICAgbnVsbFxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXN0b3JlU2VsZWN0aW9uOiBJZiBhbnkgc2VsZWN0aW9uIGluZm9ybWF0aW9uIHdhcyBwb3RlbnRpYWxseSBsb3N0LFxuICAgKiByZXN0b3JlIGl0LiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHBlcmZvcm1pbmcgb3BlcmF0aW9ucyB0aGF0IGNvdWxkIHJlbW92ZSBkb21cbiAgICogbm9kZXMgYW5kIHBsYWNlIHRoZW0gYmFjayBpbiwgcmVzdWx0aW5nIGluIGZvY3VzIGJlaW5nIGxvc3QuXG4gICAqL1xuICByZXN0b3JlU2VsZWN0aW9uOiBmdW5jdGlvbihwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uKSB7XG4gICAgdmFyIGN1ckZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIHZhciBwcmlvckZvY3VzZWRFbGVtID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5mb2N1c2VkRWxlbTtcbiAgICB2YXIgcHJpb3JTZWxlY3Rpb25SYW5nZSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2VsZWN0aW9uUmFuZ2U7XG4gICAgaWYgKGN1ckZvY3VzZWRFbGVtICE9PSBwcmlvckZvY3VzZWRFbGVtICYmXG4gICAgICAgIGlzSW5Eb2N1bWVudChwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgaWYgKFJlYWN0SW5wdXRTZWxlY3Rpb24uaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKHByaW9yRm9jdXNlZEVsZW0pKSB7XG4gICAgICAgIFJlYWN0SW5wdXRTZWxlY3Rpb24uc2V0U2VsZWN0aW9uKFxuICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0sXG4gICAgICAgICAgcHJpb3JTZWxlY3Rpb25SYW5nZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZm9jdXNOb2RlKHByaW9yRm9jdXNlZEVsZW0pO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGdldFNlbGVjdGlvbjogR2V0cyB0aGUgc2VsZWN0aW9uIGJvdW5kcyBvZiBhIGZvY3VzZWQgdGV4dGFyZWEsIGlucHV0IG9yXG4gICAqIGNvbnRlbnRFZGl0YWJsZSBub2RlLlxuICAgKiAtQGlucHV0OiBMb29rIHVwIHNlbGVjdGlvbiBib3VuZHMgb2YgdGhpcyBpbnB1dFxuICAgKiAtQHJldHVybiB7c3RhcnQ6IHNlbGVjdGlvblN0YXJ0LCBlbmQ6IHNlbGVjdGlvbkVuZH1cbiAgICovXG4gIGdldFNlbGVjdGlvbjogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICB2YXIgc2VsZWN0aW9uO1xuXG4gICAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gaW5wdXQpIHtcbiAgICAgIC8vIE1vZGVybiBicm93c2VyIHdpdGggaW5wdXQgb3IgdGV4dGFyZWEuXG4gICAgICBzZWxlY3Rpb24gPSB7XG4gICAgICAgIHN0YXJ0OiBpbnB1dC5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgZW5kOiBpbnB1dC5zZWxlY3Rpb25FbmRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgaW5wdXQubm9kZU5hbWUgPT09ICdJTlBVVCcpIHtcbiAgICAgIC8vIElFOCBpbnB1dC5cbiAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgLy8gVGhlcmUgY2FuIG9ubHkgYmUgb25lIHNlbGVjdGlvbiBwZXIgZG9jdW1lbnQgaW4gSUUsIHNvIGl0IG11c3RcbiAgICAgIC8vIGJlIGluIG91ciBlbGVtZW50LlxuICAgICAgaWYgKHJhbmdlLnBhcmVudEVsZW1lbnQoKSA9PT0gaW5wdXQpIHtcbiAgICAgICAgc2VsZWN0aW9uID0ge1xuICAgICAgICAgIHN0YXJ0OiAtcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCAtaW5wdXQudmFsdWUubGVuZ3RoKSxcbiAgICAgICAgICBlbmQ6IC1yYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCAtaW5wdXQudmFsdWUubGVuZ3RoKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb250ZW50IGVkaXRhYmxlIG9yIG9sZCBJRSB0ZXh0YXJlYS5cbiAgICAgIHNlbGVjdGlvbiA9IFJlYWN0RE9NU2VsZWN0aW9uLmdldE9mZnNldHMoaW5wdXQpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxlY3Rpb24gfHwge3N0YXJ0OiAwLCBlbmQ6IDB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAc2V0U2VsZWN0aW9uOiBTZXRzIHRoZSBzZWxlY3Rpb24gYm91bmRzIG9mIGEgdGV4dGFyZWEgb3IgaW5wdXQgYW5kIGZvY3VzZXNcbiAgICogdGhlIGlucHV0LlxuICAgKiAtQGlucHV0ICAgICBTZXQgc2VsZWN0aW9uIGJvdW5kcyBvZiB0aGlzIGlucHV0IG9yIHRleHRhcmVhXG4gICAqIC1Ab2Zmc2V0cyAgIE9iamVjdCBvZiBzYW1lIGZvcm0gdGhhdCBpcyByZXR1cm5lZCBmcm9tIGdldCpcbiAgICovXG4gIHNldFNlbGVjdGlvbjogZnVuY3Rpb24oaW5wdXQsIG9mZnNldHMpIHtcbiAgICB2YXIgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIHZhciBlbmQgPSBvZmZzZXRzLmVuZDtcbiAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVuZCA9IHN0YXJ0O1xuICAgIH1cblxuICAgIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIGlucHV0KSB7XG4gICAgICBpbnB1dC5zZWxlY3Rpb25TdGFydCA9IHN0YXJ0O1xuICAgICAgaW5wdXQuc2VsZWN0aW9uRW5kID0gTWF0aC5taW4oZW5kLCBpbnB1dC52YWx1ZS5sZW5ndGgpO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uICYmIGlucHV0Lm5vZGVOYW1lID09PSAnSU5QVVQnKSB7XG4gICAgICB2YXIgcmFuZ2UgPSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCBzdGFydCk7XG4gICAgICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBlbmQgLSBzdGFydCk7XG4gICAgICByYW5nZS5zZWxlY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3RET01TZWxlY3Rpb24uc2V0T2Zmc2V0cyhpbnB1dCwgb2Zmc2V0cyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5wdXRTZWxlY3Rpb247XG5cbn0se1wiLi9SZWFjdERPTVNlbGVjdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01TZWxlY3Rpb24uanNcIixcIi4vY29udGFpbnNOb2RlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jb250YWluc05vZGUuanNcIixcIi4vZm9jdXNOb2RlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9mb2N1c05vZGUuanNcIixcIi4vZ2V0QWN0aXZlRWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0QWN0aXZlRWxlbWVudC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEluc3RhbmNlSGFuZGxlcy5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbnN0YW5jZUhhbmRsZXNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSb290SW5kZXggPSByZXF1aXJlKFwiLi9SZWFjdFJvb3RJbmRleFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIFNFUEFSQVRPUiA9ICcuJztcbnZhciBTRVBBUkFUT1JfTEVOR1RIID0gU0VQQVJBVE9SLmxlbmd0aDtcblxuLyoqXG4gKiBNYXhpbXVtIGRlcHRoIG9mIHRyYXZlcnNhbHMgYmVmb3JlIHdlIGNvbnNpZGVyIHRoZSBwb3NzaWJpbGl0eSBvZiBhIGJhZCBJRC5cbiAqL1xudmFyIE1BWF9UUkVFX0RFUFRIID0gMTAwO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBET00gSUQgcHJlZml4IHRvIHVzZSB3aGVuIG1vdW50aW5nIFJlYWN0IGNvbXBvbmVudHMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEEgdW5pcXVlIGludGVnZXJcbiAqIEByZXR1cm4ge3N0cmluZ30gUmVhY3Qgcm9vdCBJRC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXRSZWFjdFJvb3RJRFN0cmluZyhpbmRleCkge1xuICByZXR1cm4gU0VQQVJBVE9SICsgaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGNoYXJhY3RlciBpbiB0aGUgc3VwcGxpZWQgSUQgaXMgYSBzZXBhcmF0b3Igb3IgdGhlIGVuZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQSBSZWFjdCBET00gSUQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggb2YgdGhlIGNoYXJhY3RlciB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNoYXJhY3RlciBpcyBhIHNlcGFyYXRvciBvciBlbmQgb2YgdGhlIElELlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaXNCb3VuZGFyeShpZCwgaW5kZXgpIHtcbiAgcmV0dXJuIGlkLmNoYXJBdChpbmRleCkgPT09IFNFUEFSQVRPUiB8fCBpbmRleCA9PT0gaWQubGVuZ3RoO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgc3VwcGxpZWQgc3RyaW5nIGlzIGEgdmFsaWQgUmVhY3QgRE9NIElELlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBIFJlYWN0IERPTSBJRCwgbWF5YmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBzdHJpbmcgaXMgYSB2YWxpZCBSZWFjdCBET00gSUQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkSUQoaWQpIHtcbiAgcmV0dXJuIGlkID09PSAnJyB8fCAoXG4gICAgaWQuY2hhckF0KDApID09PSBTRVBBUkFUT1IgJiYgaWQuY2hhckF0KGlkLmxlbmd0aCAtIDEpICE9PSBTRVBBUkFUT1JcbiAgKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGZpcnN0IElEIGlzIGFuIGFuY2VzdG9yIG9mIG9yIGVxdWFsIHRvIHRoZSBzZWNvbmQgSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFuY2VzdG9ySURcbiAqIEBwYXJhbSB7c3RyaW5nfSBkZXNjZW5kYW50SURcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYGFuY2VzdG9ySURgIGlzIGFuIGFuY2VzdG9yIG9mIGBkZXNjZW5kYW50SURgLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGlzQW5jZXN0b3JJRE9mKGFuY2VzdG9ySUQsIGRlc2NlbmRhbnRJRCkge1xuICByZXR1cm4gKFxuICAgIGRlc2NlbmRhbnRJRC5pbmRleE9mKGFuY2VzdG9ySUQpID09PSAwICYmXG4gICAgaXNCb3VuZGFyeShkZXNjZW5kYW50SUQsIGFuY2VzdG9ySUQubGVuZ3RoKVxuICApO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHBhcmVudCBJRCBvZiB0aGUgc3VwcGxpZWQgUmVhY3QgRE9NIElELCBgaWRgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiBhIGNvbXBvbmVudC5cbiAqIEByZXR1cm4ge3N0cmluZ30gSUQgb2YgdGhlIHBhcmVudCwgb3IgYW4gZW1wdHkgc3RyaW5nLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50SUQoaWQpIHtcbiAgcmV0dXJuIGlkID8gaWQuc3Vic3RyKDAsIGlkLmxhc3RJbmRleE9mKFNFUEFSQVRPUikpIDogJyc7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmV4dCBET00gSUQgb24gdGhlIHRyZWUgcGF0aCBmcm9tIHRoZSBzdXBwbGllZCBgYW5jZXN0b3JJRGAgdG8gdGhlXG4gKiBzdXBwbGllZCBgZGVzdGluYXRpb25JRGAuIElmIHRoZXkgYXJlIGVxdWFsLCB0aGUgSUQgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFuY2VzdG9ySUQgSUQgb2YgYW4gYW5jZXN0b3Igbm9kZSBvZiBgZGVzdGluYXRpb25JRGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVzdGluYXRpb25JRCBJRCBvZiB0aGUgZGVzdGluYXRpb24gbm9kZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gTmV4dCBJRCBvbiB0aGUgcGF0aCBmcm9tIGBhbmNlc3RvcklEYCB0byBgZGVzdGluYXRpb25JRGAuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXROZXh0RGVzY2VuZGFudElEKGFuY2VzdG9ySUQsIGRlc3RpbmF0aW9uSUQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpc1ZhbGlkSUQoYW5jZXN0b3JJRCkgJiYgaXNWYWxpZElEKGRlc3RpbmF0aW9uSUQpLFxuICAgICdnZXROZXh0RGVzY2VuZGFudElEKCVzLCAlcyk6IFJlY2VpdmVkIGFuIGludmFsaWQgUmVhY3QgRE9NIElELicsXG4gICAgYW5jZXN0b3JJRCxcbiAgICBkZXN0aW5hdGlvbklEXG4gICkgOiBpbnZhcmlhbnQoaXNWYWxpZElEKGFuY2VzdG9ySUQpICYmIGlzVmFsaWRJRChkZXN0aW5hdGlvbklEKSkpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGlzQW5jZXN0b3JJRE9mKGFuY2VzdG9ySUQsIGRlc3RpbmF0aW9uSUQpLFxuICAgICdnZXROZXh0RGVzY2VuZGFudElEKC4uLik6IFJlYWN0IGhhcyBtYWRlIGFuIGludmFsaWQgYXNzdW1wdGlvbiBhYm91dCAnICtcbiAgICAndGhlIERPTSBoaWVyYXJjaHkuIEV4cGVjdGVkIGAlc2AgdG8gYmUgYW4gYW5jZXN0b3Igb2YgYCVzYC4nLFxuICAgIGFuY2VzdG9ySUQsXG4gICAgZGVzdGluYXRpb25JRFxuICApIDogaW52YXJpYW50KGlzQW5jZXN0b3JJRE9mKGFuY2VzdG9ySUQsIGRlc3RpbmF0aW9uSUQpKSk7XG4gIGlmIChhbmNlc3RvcklEID09PSBkZXN0aW5hdGlvbklEKSB7XG4gICAgcmV0dXJuIGFuY2VzdG9ySUQ7XG4gIH1cbiAgLy8gU2tpcCBvdmVyIHRoZSBhbmNlc3RvciBhbmQgdGhlIGltbWVkaWF0ZSBzZXBhcmF0b3IuIFRyYXZlcnNlIHVudGlsIHdlIGhpdFxuICAvLyBhbm90aGVyIHNlcGFyYXRvciBvciB3ZSByZWFjaCB0aGUgZW5kIG9mIGBkZXN0aW5hdGlvbklEYC5cbiAgdmFyIHN0YXJ0ID0gYW5jZXN0b3JJRC5sZW5ndGggKyBTRVBBUkFUT1JfTEVOR1RIO1xuICB2YXIgaTtcbiAgZm9yIChpID0gc3RhcnQ7IGkgPCBkZXN0aW5hdGlvbklELmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGlzQm91bmRhcnkoZGVzdGluYXRpb25JRCwgaSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVzdGluYXRpb25JRC5zdWJzdHIoMCwgaSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmVhcmVzdCBjb21tb24gYW5jZXN0b3IgSUQgb2YgdHdvIElEcy5cbiAqXG4gKiBVc2luZyB0aGlzIElEIHNjaGVtZSwgdGhlIG5lYXJlc3QgY29tbW9uIGFuY2VzdG9yIElEIGlzIHRoZSBsb25nZXN0IGNvbW1vblxuICogcHJlZml4IG9mIHRoZSB0d28gSURzIHRoYXQgaW1tZWRpYXRlbHkgcHJlY2VkZWQgYSBcIm1hcmtlclwiIGluIGJvdGggc3RyaW5ncy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gb25lSURcbiAqIEBwYXJhbSB7c3RyaW5nfSB0d29JRFxuICogQHJldHVybiB7c3RyaW5nfSBOZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBJRCwgb3IgdGhlIGVtcHR5IHN0cmluZyBpZiBub25lLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKG9uZUlELCB0d29JRCkge1xuICB2YXIgbWluTGVuZ3RoID0gTWF0aC5taW4ob25lSUQubGVuZ3RoLCB0d29JRC5sZW5ndGgpO1xuICBpZiAobWluTGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHZhciBsYXN0Q29tbW9uTWFya2VySW5kZXggPSAwO1xuICAvLyBVc2UgYDw9YCB0byB0cmF2ZXJzZSB1bnRpbCB0aGUgXCJFT0xcIiBvZiB0aGUgc2hvcnRlciBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IG1pbkxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGlzQm91bmRhcnkob25lSUQsIGkpICYmIGlzQm91bmRhcnkodHdvSUQsIGkpKSB7XG4gICAgICBsYXN0Q29tbW9uTWFya2VySW5kZXggPSBpO1xuICAgIH0gZWxzZSBpZiAob25lSUQuY2hhckF0KGkpICE9PSB0d29JRC5jaGFyQXQoaSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB2YXIgbG9uZ2VzdENvbW1vbklEID0gb25lSUQuc3Vic3RyKDAsIGxhc3RDb21tb25NYXJrZXJJbmRleCk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgaXNWYWxpZElEKGxvbmdlc3RDb21tb25JRCksXG4gICAgJ2dldEZpcnN0Q29tbW9uQW5jZXN0b3JJRCglcywgJXMpOiBFeHBlY3RlZCBhIHZhbGlkIFJlYWN0IERPTSBJRDogJXMnLFxuICAgIG9uZUlELFxuICAgIHR3b0lELFxuICAgIGxvbmdlc3RDb21tb25JRFxuICApIDogaW52YXJpYW50KGlzVmFsaWRJRChsb25nZXN0Q29tbW9uSUQpKSk7XG4gIHJldHVybiBsb25nZXN0Q29tbW9uSUQ7XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIHRoZSBwYXJlbnQgcGF0aCBiZXR3ZWVuIHR3byBJRHMgKGVpdGhlciB1cCBvciBkb3duKS4gVGhlIElEcyBtdXN0XG4gKiBub3QgYmUgdGhlIHNhbWUsIGFuZCB0aGVyZSBtdXN0IGV4aXN0IGEgcGFyZW50IHBhdGggYmV0d2VlbiB0aGVtLiBJZiB0aGVcbiAqIGNhbGxiYWNrIHJldHVybnMgYGZhbHNlYCwgdHJhdmVyc2FsIGlzIHN0b3BwZWQuXG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfSBzdGFydCBJRCBhdCB3aGljaCB0byBzdGFydCB0cmF2ZXJzYWwuXG4gKiBAcGFyYW0gez9zdHJpbmd9IHN0b3AgSUQgYXQgd2hpY2ggdG8gZW5kIHRyYXZlcnNhbC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZSBlYWNoIElEIHdpdGguXG4gKiBAcGFyYW0gez9ib29sZWFufSBza2lwRmlyc3QgV2hldGhlciBvciBub3QgdG8gc2tpcCB0aGUgZmlyc3Qgbm9kZS5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IHNraXBMYXN0IFdoZXRoZXIgb3Igbm90IHRvIHNraXAgdGhlIGxhc3Qgbm9kZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlUGFyZW50UGF0aChzdGFydCwgc3RvcCwgY2IsIGFyZywgc2tpcEZpcnN0LCBza2lwTGFzdCkge1xuICBzdGFydCA9IHN0YXJ0IHx8ICcnO1xuICBzdG9wID0gc3RvcCB8fCAnJztcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBzdGFydCAhPT0gc3RvcCxcbiAgICAndHJhdmVyc2VQYXJlbnRQYXRoKC4uLik6IENhbm5vdCB0cmF2ZXJzZSBmcm9tIGFuZCB0byB0aGUgc2FtZSBJRCwgYCVzYC4nLFxuICAgIHN0YXJ0XG4gICkgOiBpbnZhcmlhbnQoc3RhcnQgIT09IHN0b3ApKTtcbiAgdmFyIHRyYXZlcnNlVXAgPSBpc0FuY2VzdG9ySURPZihzdG9wLCBzdGFydCk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgdHJhdmVyc2VVcCB8fCBpc0FuY2VzdG9ySURPZihzdGFydCwgc3RvcCksXG4gICAgJ3RyYXZlcnNlUGFyZW50UGF0aCglcywgJXMsIC4uLik6IENhbm5vdCB0cmF2ZXJzZSBmcm9tIHR3byBJRHMgdGhhdCBkbyAnICtcbiAgICAnbm90IGhhdmUgYSBwYXJlbnQgcGF0aC4nLFxuICAgIHN0YXJ0LFxuICAgIHN0b3BcbiAgKSA6IGludmFyaWFudCh0cmF2ZXJzZVVwIHx8IGlzQW5jZXN0b3JJRE9mKHN0YXJ0LCBzdG9wKSkpO1xuICAvLyBUcmF2ZXJzZSBmcm9tIGBzdGFydGAgdG8gYHN0b3BgIG9uZSBkZXB0aCBhdCBhIHRpbWUuXG4gIHZhciBkZXB0aCA9IDA7XG4gIHZhciB0cmF2ZXJzZSA9IHRyYXZlcnNlVXAgPyBnZXRQYXJlbnRJRCA6IGdldE5leHREZXNjZW5kYW50SUQ7XG4gIGZvciAodmFyIGlkID0gc3RhcnQ7IC8qIHVudGlsIGJyZWFrICovOyBpZCA9IHRyYXZlcnNlKGlkLCBzdG9wKSkge1xuICAgIHZhciByZXQ7XG4gICAgaWYgKCghc2tpcEZpcnN0IHx8IGlkICE9PSBzdGFydCkgJiYgKCFza2lwTGFzdCB8fCBpZCAhPT0gc3RvcCkpIHtcbiAgICAgIHJldCA9IGNiKGlkLCB0cmF2ZXJzZVVwLCBhcmcpO1xuICAgIH1cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCBpZCA9PT0gc3RvcCkge1xuICAgICAgLy8gT25seSBicmVhayAvL2FmdGVyLy8gdmlzaXRpbmcgYHN0b3BgLlxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBkZXB0aCsrIDwgTUFYX1RSRUVfREVQVEgsXG4gICAgICAndHJhdmVyc2VQYXJlbnRQYXRoKCVzLCAlcywgLi4uKTogRGV0ZWN0ZWQgYW4gaW5maW5pdGUgbG9vcCB3aGlsZSAnICtcbiAgICAgICd0cmF2ZXJzaW5nIHRoZSBSZWFjdCBET00gSUQgdHJlZS4gVGhpcyBtYXkgYmUgZHVlIHRvIG1hbGZvcm1lZCBJRHM6ICVzJyxcbiAgICAgIHN0YXJ0LCBzdG9wXG4gICAgKSA6IGludmFyaWFudChkZXB0aCsrIDwgTUFYX1RSRUVfREVQVEgpKTtcbiAgfVxufVxuXG4vKipcbiAqIE1hbmFnZXMgdGhlIElEcyBhc3NpZ25lZCB0byBET00gcmVwcmVzZW50YXRpb25zIG9mIFJlYWN0IGNvbXBvbmVudHMuIFRoaXNcbiAqIHVzZXMgYSBzcGVjaWZpYyBzY2hlbWUgaW4gb3JkZXIgdG8gdHJhdmVyc2UgdGhlIERPTSBlZmZpY2llbnRseSAoZS5nLiBpblxuICogb3JkZXIgdG8gc2ltdWxhdGUgZXZlbnRzKS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0ge1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgUmVhY3Qgcm9vdCBJRFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IEEgUmVhY3Qgcm9vdCBJRC5cbiAgICovXG4gIGNyZWF0ZVJlYWN0Um9vdElEOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2V0UmVhY3RSb290SURTdHJpbmcoUmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXgoKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBSZWFjdCBJRCBieSBqb2luaW5nIGEgcm9vdCBJRCB3aXRoIGEgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBSb290IElEIG9mIGEgcGFyZW50IGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBjb21wb25lbnQncyBuYW1lIChhcyBmbGF0dGVuZWQgY2hpbGRyZW4pLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IEEgUmVhY3QgSUQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY3JlYXRlUmVhY3RJRDogZnVuY3Rpb24ocm9vdElELCBuYW1lKSB7XG4gICAgcmV0dXJuIHJvb3RJRCArIG5hbWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIERPTSBJRCBvZiB0aGUgUmVhY3QgY29tcG9uZW50IHRoYXQgaXMgdGhlIHJvb3Qgb2YgdGhlIHRyZWUgdGhhdFxuICAgKiBjb250YWlucyB0aGUgUmVhY3QgY29tcG9uZW50IHdpdGggdGhlIHN1cHBsaWVkIERPTSBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIERPTSBJRCBvZiBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7P3N0cmluZ30gRE9NIElEIG9mIHRoZSBSZWFjdCBjb21wb25lbnQgdGhhdCBpcyB0aGUgcm9vdC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgaWYgKGlkICYmIGlkLmNoYXJBdCgwKSA9PT0gU0VQQVJBVE9SICYmIGlkLmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBpbmRleCA9IGlkLmluZGV4T2YoU0VQQVJBVE9SLCAxKTtcbiAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaWQuc3Vic3RyKDAsIGluZGV4KSA6IGlkO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogVHJhdmVyc2VzIHRoZSBJRCBoaWVyYXJjaHkgYW5kIGludm9rZXMgdGhlIHN1cHBsaWVkIGBjYmAgb24gYW55IElEcyB0aGF0XG4gICAqIHNob3VsZCB3b3VsZCByZWNlaXZlIGEgYG1vdXNlRW50ZXJgIG9yIGBtb3VzZUxlYXZlYCBldmVudC5cbiAgICpcbiAgICogTk9URTogRG9lcyBub3QgaW52b2tlIHRoZSBjYWxsYmFjayBvbiB0aGUgbmVhcmVzdCBjb21tb24gYW5jZXN0b3IgYmVjYXVzZVxuICAgKiBub3RoaW5nIFwiZW50ZXJlZFwiIG9yIFwibGVmdFwiIHRoYXQgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxlYXZlSUQgSUQgYmVpbmcgbGVmdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGVudGVySUQgSUQgYmVpbmcgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2IgQ2FsbGJhY2sgdG8gaW52b2tlIG9uIGVhY2ggZW50ZXJlZC9sZWZ0IElELlxuICAgKiBAcGFyYW0geyp9IHVwQXJnIEFyZ3VtZW50IHRvIGludm9rZSB0aGUgY2FsbGJhY2sgd2l0aCBvbiBsZWZ0IElEcy5cbiAgICogQHBhcmFtIHsqfSBkb3duQXJnIEFyZ3VtZW50IHRvIGludm9rZSB0aGUgY2FsbGJhY2sgd2l0aCBvbiBlbnRlcmVkIElEcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmF2ZXJzZUVudGVyTGVhdmU6IGZ1bmN0aW9uKGxlYXZlSUQsIGVudGVySUQsIGNiLCB1cEFyZywgZG93bkFyZykge1xuICAgIHZhciBhbmNlc3RvcklEID0gZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKGxlYXZlSUQsIGVudGVySUQpO1xuICAgIGlmIChhbmNlc3RvcklEICE9PSBsZWF2ZUlEKSB7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgobGVhdmVJRCwgYW5jZXN0b3JJRCwgY2IsIHVwQXJnLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChhbmNlc3RvcklEICE9PSBlbnRlcklEKSB7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgoYW5jZXN0b3JJRCwgZW50ZXJJRCwgY2IsIGRvd25BcmcsIHRydWUsIGZhbHNlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNpbXVsYXRlcyB0aGUgdHJhdmVyc2FsIG9mIGEgdHdvLXBoYXNlLCBjYXB0dXJlL2J1YmJsZSBldmVudCBkaXNwYXRjaC5cbiAgICpcbiAgICogTk9URTogVGhpcyB0cmF2ZXJzYWwgaGFwcGVucyBvbiBJRHMgd2l0aG91dCB0b3VjaGluZyB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0SUQgSUQgb2YgdGhlIHRhcmdldCBub2RlLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBDYWxsYmFjayB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gYXJnIEFyZ3VtZW50IHRvIGludm9rZSB0aGUgY2FsbGJhY2sgd2l0aC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmF2ZXJzZVR3b1BoYXNlOiBmdW5jdGlvbih0YXJnZXRJRCwgY2IsIGFyZykge1xuICAgIGlmICh0YXJnZXRJRCkge1xuICAgICAgdHJhdmVyc2VQYXJlbnRQYXRoKCcnLCB0YXJnZXRJRCwgY2IsIGFyZywgdHJ1ZSwgZmFsc2UpO1xuICAgICAgdHJhdmVyc2VQYXJlbnRQYXRoKHRhcmdldElELCAnJywgY2IsIGFyZywgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogVHJhdmVyc2UgYSBub2RlIElELCBjYWxsaW5nIHRoZSBzdXBwbGllZCBgY2JgIGZvciBlYWNoIGFuY2VzdG9yIElELiBGb3JcbiAgICogZXhhbXBsZSwgcGFzc2luZyBgLjAuJHJvdy0wLjFgIHdvdWxkIHJlc3VsdCBpbiBgY2JgIGdldHRpbmcgY2FsbGVkXG4gICAqIHdpdGggYC4wYCwgYC4wLiRyb3ctMGAsIGFuZCBgLjAuJHJvdy0wLjFgLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIHRyYXZlcnNhbCBoYXBwZW5zIG9uIElEcyB3aXRob3V0IHRvdWNoaW5nIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRJRCBJRCBvZiB0aGUgdGFyZ2V0IG5vZGUuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSBhcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXZlcnNlQW5jZXN0b3JzOiBmdW5jdGlvbih0YXJnZXRJRCwgY2IsIGFyZykge1xuICAgIHRyYXZlcnNlUGFyZW50UGF0aCgnJywgdGFyZ2V0SUQsIGNiLCBhcmcsIHRydWUsIGZhbHNlKTtcbiAgfSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldEZpcnN0Q29tbW9uQW5jZXN0b3JJRDogZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklELFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0TmV4dERlc2NlbmRhbnRJRDogZ2V0TmV4dERlc2NlbmRhbnRJRCxcblxuICBpc0FuY2VzdG9ySURPZjogaXNBbmNlc3RvcklET2YsXG5cbiAgU0VQQVJBVE9SOiBTRVBBUkFUT1JcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEluc3RhbmNlSGFuZGxlcztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RSb290SW5kZXhcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Um9vdEluZGV4LmpzXCIsXCIuL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJbnN0YW5jZU1hcC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEluc3RhbmNlTWFwXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIGBSZWFjdEluc3RhbmNlTWFwYCBtYWludGFpbnMgYSBtYXBwaW5nIGZyb20gYSBwdWJsaWMgZmFjaW5nIHN0YXRlZnVsXG4gKiBpbnN0YW5jZSAoa2V5KSBhbmQgdGhlIGludGVybmFsIHJlcHJlc2VudGF0aW9uICh2YWx1ZSkuIFRoaXMgYWxsb3dzIHB1YmxpY1xuICogbWV0aG9kcyB0byBhY2NlcHQgdGhlIHVzZXIgZmFjaW5nIGluc3RhbmNlIGFzIGFuIGFyZ3VtZW50IGFuZCBtYXAgdGhlbSBiYWNrXG4gKiB0byBpbnRlcm5hbCBtZXRob2RzLlxuICovXG5cbi8vIFRPRE86IFJlcGxhY2UgdGhpcyB3aXRoIEVTNjogdmFyIFJlYWN0SW5zdGFuY2VNYXAgPSBuZXcgTWFwKCk7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHtcblxuICAvKipcbiAgICogVGhpcyBBUEkgc2hvdWxkIGJlIGNhbGxlZCBgZGVsZXRlYCBidXQgd2UnZCBoYXZlIHRvIG1ha2Ugc3VyZSB0byBhbHdheXNcbiAgICogdHJhbnNmb3JtIHRoZXNlIHRvIHN0cmluZ3MgZm9yIElFIHN1cHBvcnQuIFdoZW4gdGhpcyB0cmFuc2Zvcm0gaXMgZnVsbHlcbiAgICogc3VwcG9ydGVkIHdlIGNhbiByZW5hbWUgaXQuXG4gICAqL1xuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIGtleS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB9LFxuXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIGtleS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlO1xuICB9LFxuXG4gIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIGtleS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlICE9PSB1bmRlZmluZWQ7XG4gIH0sXG5cbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgPSB2YWx1ZTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5zdGFuY2VNYXA7XG5cbn0se31dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RMaWZlQ3ljbGUuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TGlmZUN5Y2xlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFRoaXMgbW9kdWxlIG1hbmFnZXMgdGhlIGJvb2trZWVwaW5nIHdoZW4gYSBjb21wb25lbnQgaXMgaW4gdGhlIHByb2Nlc3NcbiAqIG9mIGJlaW5nIG1vdW50ZWQgb3IgYmVpbmcgdW5tb3VudGVkLiBUaGlzIGlzIHVzZWQgYXMgYSB3YXkgdG8gZW5mb3JjZVxuICogaW52YXJpYW50cyAob3Igd2FybmluZ3MpIHdoZW4gaXQgaXMgbm90IHJlY29tbWVuZGVkIHRvIGNhbGxcbiAqIHNldFN0YXRlL2ZvcmNlVXBkYXRlLlxuICpcbiAqIGN1cnJlbnRseU1vdW50aW5nSW5zdGFuY2U6IER1cmluZyB0aGUgY29uc3RydWN0aW9uIHBoYXNlLCBpdCBpcyBub3QgcG9zc2libGVcbiAqIHRvIHRyaWdnZXIgYW4gdXBkYXRlIHNpbmNlIHRoZSBpbnN0YW5jZSBpcyBub3QgZnVsbHkgbW91bnRlZCB5ZXQuIEhvd2V2ZXIsIHdlXG4gKiBjdXJyZW50bHkgYWxsb3cgdGhpcyBhcyBhIGNvbnZlbmllbmNlIGZvciBtdXRhdGluZyB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqXG4gKiBjdXJyZW50bHlVbm1vdW50aW5nSW5zdGFuY2U6IER1cmluZyB0aGUgdW5tb3VudGluZyBwaGFzZSwgdGhlIGluc3RhbmNlIGlzXG4gKiBzdGlsbCBtb3VudGVkIGFuZCBjYW4gdGhlcmVmb3JlIHNjaGVkdWxlIGFuIHVwZGF0ZS4gSG93ZXZlciwgdGhpcyBpcyBub3RcbiAqIHJlY29tbWVuZGVkIGFuZCBwcm9iYWJseSBhbiBlcnJvciBzaW5jZSBpdCdzIGFib3V0IHRvIGJlIHVubW91bnRlZC5cbiAqIFRoZXJlZm9yZSB3ZSBzdGlsbCB3YW50IHRvIHRyaWdnZXIgaW4gYW4gZXJyb3IgZm9yIHRoYXQgY2FzZS5cbiAqL1xuXG52YXIgUmVhY3RMaWZlQ3ljbGUgPSB7XG4gIGN1cnJlbnRseU1vdW50aW5nSW5zdGFuY2U6IG51bGwsXG4gIGN1cnJlbnRseVVubW91bnRpbmdJbnN0YW5jZTogbnVsbFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdExpZmVDeWNsZTtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE1hcmt1cENoZWNrc3VtLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TWFya3VwQ2hlY2tzdW1cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhZGxlcjMyID0gcmVxdWlyZShcIi4vYWRsZXIzMlwiKTtcblxudmFyIFJlYWN0TWFya3VwQ2hlY2tzdW0gPSB7XG4gIENIRUNLU1VNX0FUVFJfTkFNRTogJ2RhdGEtcmVhY3QtY2hlY2tzdW0nLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIE1hcmt1cCBzdHJpbmdcbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgc3RyaW5nIHdpdGggY2hlY2tzdW0gYXR0cmlidXRlIGF0dGFjaGVkXG4gICAqL1xuICBhZGRDaGVja3N1bVRvTWFya3VwOiBmdW5jdGlvbihtYXJrdXApIHtcbiAgICB2YXIgY2hlY2tzdW0gPSBhZGxlcjMyKG1hcmt1cCk7XG4gICAgcmV0dXJuIG1hcmt1cC5yZXBsYWNlKFxuICAgICAgJz4nLFxuICAgICAgJyAnICsgUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUgKyAnPVwiJyArIGNoZWNrc3VtICsgJ1wiPidcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIHRvIHVzZVxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgcm9vdCBSZWFjdCBlbGVtZW50XG4gICAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIG9yIG5vdCB0aGUgbWFya3VwIGlzIHRoZSBzYW1lXG4gICAqL1xuICBjYW5SZXVzZU1hcmt1cDogZnVuY3Rpb24obWFya3VwLCBlbGVtZW50KSB7XG4gICAgdmFyIGV4aXN0aW5nQ2hlY2tzdW0gPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcbiAgICAgIFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FXG4gICAgKTtcbiAgICBleGlzdGluZ0NoZWNrc3VtID0gZXhpc3RpbmdDaGVja3N1bSAmJiBwYXJzZUludChleGlzdGluZ0NoZWNrc3VtLCAxMCk7XG4gICAgdmFyIG1hcmt1cENoZWNrc3VtID0gYWRsZXIzMihtYXJrdXApO1xuICAgIHJldHVybiBtYXJrdXBDaGVja3N1bSA9PT0gZXhpc3RpbmdDaGVja3N1bTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1hcmt1cENoZWNrc3VtO1xuXG59LHtcIi4vYWRsZXIzMlwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvYWRsZXIzMi5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE1vdW50LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE1vdW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCIpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVtcHR5Q29tcG9uZW50XCIpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIik7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VNYXBcIik7XG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHJlcXVpcmUoXCIuL1JlYWN0TWFya3VwQ2hlY2tzdW1cIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoXCIuL1JlYWN0UmVjb25jaWxlclwiKTtcbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVRdWV1ZVwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoXCIuL2VtcHR5T2JqZWN0XCIpO1xudmFyIGNvbnRhaW5zTm9kZSA9IHJlcXVpcmUoXCIuL2NvbnRhaW5zTm9kZVwiKTtcbnZhciBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIgPSByZXF1aXJlKFwiLi9nZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXJcIik7XG52YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoXCIuL3NldElubmVySFRNTFwiKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgU0VQQVJBVE9SID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuU0VQQVJBVE9SO1xuXG52YXIgQVRUUl9OQU1FID0gRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUU7XG52YXIgbm9kZUNhY2hlID0ge307XG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG52YXIgRE9DX05PREVfVFlQRSA9IDk7XG5cbi8qKiBNYXBwaW5nIGZyb20gcmVhY3RSb290SUQgdG8gUmVhY3QgY29tcG9uZW50IGluc3RhbmNlLiAqL1xudmFyIGluc3RhbmNlc0J5UmVhY3RSb290SUQgPSB7fTtcblxuLyoqIE1hcHBpbmcgZnJvbSByZWFjdFJvb3RJRCB0byBgY29udGFpbmVyYCBub2Rlcy4gKi9cbnZhciBjb250YWluZXJzQnlSZWFjdFJvb3RJRCA9IHt9O1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIC8qKiBfX0RFVl9fLW9ubHkgbWFwcGluZyBmcm9tIHJlYWN0Um9vdElEIHRvIHJvb3QgZWxlbWVudHMuICovXG4gIHZhciByb290RWxlbWVudHNCeVJlYWN0Um9vdElEID0ge307XG59XG5cbi8vIFVzZWQgdG8gc3RvcmUgYnJlYWR0aC1maXJzdCBzZWFyY2ggc3RhdGUgaW4gZmluZENvbXBvbmVudFJvb3QuXG52YXIgZmluZENvbXBvbmVudFJvb3RSZXVzYWJsZUFycmF5ID0gW107XG5cbi8qKlxuICogRmluZHMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBjaGFyYWN0ZXJcbiAqIHRoYXQncyBub3QgY29tbW9uIGJldHdlZW4gdGhlIHR3byBnaXZlbiBzdHJpbmdzLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gdGhlIGluZGV4IG9mIHRoZSBjaGFyYWN0ZXIgd2hlcmUgdGhlIHN0cmluZ3MgZGl2ZXJnZVxuICovXG5mdW5jdGlvbiBmaXJzdERpZmZlcmVuY2VJbmRleChzdHJpbmcxLCBzdHJpbmcyKSB7XG4gIHZhciBtaW5MZW4gPSBNYXRoLm1pbihzdHJpbmcxLmxlbmd0aCwgc3RyaW5nMi5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1pbkxlbjsgaSsrKSB7XG4gICAgaWYgKHN0cmluZzEuY2hhckF0KGkpICE9PSBzdHJpbmcyLmNoYXJBdChpKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHJpbmcxLmxlbmd0aCA9PT0gc3RyaW5nMi5sZW5ndGggPyAtMSA6IG1pbkxlbjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0aGF0IG1heSBjb250YWluIGEgUmVhY3QgY29tcG9uZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gQSBcInJlYWN0Um9vdFwiIElELCBpZiBhIFJlYWN0IGNvbXBvbmVudCBpcyByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKSB7XG4gIHZhciByb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICByZXR1cm4gcm9vdEVsZW1lbnQgJiYgUmVhY3RNb3VudC5nZXRJRChyb290RWxlbWVudCk7XG59XG5cbi8qKlxuICogQWNjZXNzaW5nIG5vZGVbQVRUUl9OQU1FXSBvciBjYWxsaW5nIGdldEF0dHJpYnV0ZShBVFRSX05BTUUpIG9uIGEgZm9ybVxuICogZWxlbWVudCBjYW4gcmV0dXJuIGl0cyBjb250cm9sIHdob3NlIG5hbWUgb3IgSUQgZXF1YWxzIEFUVFJfTkFNRS4gQWxsXG4gKiBET00gbm9kZXMgc3VwcG9ydCBgZ2V0QXR0cmlidXRlTm9kZWAgYnV0IHRoaXMgY2FuIGFsc28gZ2V0IGNhbGxlZCBvblxuICogb3RoZXIgb2JqZWN0cyBzbyBqdXN0IHJldHVybiAnJyBpZiB3ZSdyZSBnaXZlbiBzb21ldGhpbmcgb3RoZXIgdGhhbiBhXG4gKiBET00gbm9kZSAoc3VjaCBhcyB3aW5kb3cpLlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR8RE9NV2luZG93fERPTURvY3VtZW50fERPTVRleHROb2RlfSBub2RlIERPTSBub2RlLlxuICogQHJldHVybiB7c3RyaW5nfSBJRCBvZiB0aGUgc3VwcGxpZWQgYGRvbU5vZGVgLlxuICovXG5mdW5jdGlvbiBnZXRJRChub2RlKSB7XG4gIHZhciBpZCA9IGludGVybmFsR2V0SUQobm9kZSk7XG4gIGlmIChpZCkge1xuICAgIGlmIChub2RlQ2FjaGUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICB2YXIgY2FjaGVkID0gbm9kZUNhY2hlW2lkXTtcbiAgICAgIGlmIChjYWNoZWQgIT09IG5vZGUpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICAhaXNWYWxpZChjYWNoZWQsIGlkKSxcbiAgICAgICAgICAnUmVhY3RNb3VudDogVHdvIHZhbGlkIGJ1dCB1bmVxdWFsIG5vZGVzIHdpdGggdGhlIHNhbWUgYCVzYDogJXMnLFxuICAgICAgICAgIEFUVFJfTkFNRSwgaWRcbiAgICAgICAgKSA6IGludmFyaWFudCghaXNWYWxpZChjYWNoZWQsIGlkKSkpO1xuXG4gICAgICAgIG5vZGVDYWNoZVtpZF0gPSBub2RlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlQ2FjaGVbaWRdID0gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaWQ7XG59XG5cbmZ1bmN0aW9uIGludGVybmFsR2V0SUQobm9kZSkge1xuICAvLyBJZiBub2RlIGlzIHNvbWV0aGluZyBsaWtlIGEgd2luZG93LCBkb2N1bWVudCwgb3IgdGV4dCBub2RlLCBub25lIG9mXG4gIC8vIHdoaWNoIHN1cHBvcnQgYXR0cmlidXRlcyBvciBhIC5nZXRBdHRyaWJ1dGUgbWV0aG9kLCBncmFjZWZ1bGx5IHJldHVyblxuICAvLyB0aGUgZW1wdHkgc3RyaW5nLCBhcyBpZiB0aGUgYXR0cmlidXRlIHdlcmUgbWlzc2luZy5cbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoQVRUUl9OQU1FKSB8fCAnJztcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBSZWFjdC1zcGVjaWZpYyBJRCBvZiB0aGUgZ2l2ZW4gbm9kZS5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgVGhlIERPTSBub2RlIHdob3NlIElEIHdpbGwgYmUgc2V0LlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSB2YWx1ZSBvZiB0aGUgSUQgYXR0cmlidXRlLlxuICovXG5mdW5jdGlvbiBzZXRJRChub2RlLCBpZCkge1xuICB2YXIgb2xkSUQgPSBpbnRlcm5hbEdldElEKG5vZGUpO1xuICBpZiAob2xkSUQgIT09IGlkKSB7XG4gICAgZGVsZXRlIG5vZGVDYWNoZVtvbGRJRF07XG4gIH1cbiAgbm9kZS5zZXRBdHRyaWJ1dGUoQVRUUl9OQU1FLCBpZCk7XG4gIG5vZGVDYWNoZVtpZF0gPSBub2RlO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBub2RlIHdpdGggdGhlIHN1cHBsaWVkIFJlYWN0LWdlbmVyYXRlZCBET00gSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIEEgUmVhY3QtZ2VuZXJhdGVkIERPTSBJRC5cbiAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IERPTSBub2RlIHdpdGggdGhlIHN1cHBsZWQgYGlkYC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXROb2RlKGlkKSB7XG4gIGlmICghbm9kZUNhY2hlLmhhc093blByb3BlcnR5KGlkKSB8fCAhaXNWYWxpZChub2RlQ2FjaGVbaWRdLCBpZCkpIHtcbiAgICBub2RlQ2FjaGVbaWRdID0gUmVhY3RNb3VudC5maW5kUmVhY3ROb2RlQnlJRChpZCk7XG4gIH1cbiAgcmV0dXJuIG5vZGVDYWNoZVtpZF07XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgcHVibGljIFJlYWN0IGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7Kn0gaW5zdGFuY2UgQSBwdWJsaWMgUmVhY3QgaW5zdGFuY2UuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH0gRE9NIG5vZGUgd2l0aCB0aGUgc3VwcGxlZCBgaWRgLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgdmFyIGlkID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQoaW5zdGFuY2UpLl9yb290Tm9kZUlEO1xuICBpZiAoUmVhY3RFbXB0eUNvbXBvbmVudC5pc051bGxDb21wb25lbnRJRChpZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoIW5vZGVDYWNoZS5oYXNPd25Qcm9wZXJ0eShpZCkgfHwgIWlzVmFsaWQobm9kZUNhY2hlW2lkXSwgaWQpKSB7XG4gICAgbm9kZUNhY2hlW2lkXSA9IFJlYWN0TW91bnQuZmluZFJlYWN0Tm9kZUJ5SUQoaWQpO1xuICB9XG4gIHJldHVybiBub2RlQ2FjaGVbaWRdO1xufVxuXG4vKipcbiAqIEEgbm9kZSBpcyBcInZhbGlkXCIgaWYgaXQgaXMgY29udGFpbmVkIGJ5IGEgY3VycmVudGx5IG1vdW50ZWQgY29udGFpbmVyLlxuICpcbiAqIFRoaXMgbWVhbnMgdGhhdCB0aGUgbm9kZSBkb2VzIG5vdCBoYXZlIHRvIGJlIGNvbnRhaW5lZCBieSBhIGRvY3VtZW50IGluXG4gKiBvcmRlciB0byBiZSBjb25zaWRlcmVkIHZhbGlkLlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR9IG5vZGUgVGhlIGNhbmRpZGF0ZSBET00gbm9kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgZXhwZWN0ZWQgSUQgb2YgdGhlIG5vZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBub2RlIGlzIGNvbnRhaW5lZCBieSBhIG1vdW50ZWQgY29udGFpbmVyLlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkKG5vZGUsIGlkKSB7XG4gIGlmIChub2RlKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGludGVybmFsR2V0SUQobm9kZSkgPT09IGlkLFxuICAgICAgJ1JlYWN0TW91bnQ6IFVuZXhwZWN0ZWQgbW9kaWZpY2F0aW9uIG9mIGAlc2AnLFxuICAgICAgQVRUUl9OQU1FXG4gICAgKSA6IGludmFyaWFudChpbnRlcm5hbEdldElEKG5vZGUpID09PSBpZCkpO1xuXG4gICAgdmFyIGNvbnRhaW5lciA9IFJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQoaWQpO1xuICAgIGlmIChjb250YWluZXIgJiYgY29udGFpbnNOb2RlKGNvbnRhaW5lciwgbm9kZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDYXVzZXMgdGhlIGNhY2hlIHRvIGZvcmdldCBhYm91dCBvbmUgUmVhY3Qtc3BlY2lmaWMgSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJRCB0byBmb3JnZXQuXG4gKi9cbmZ1bmN0aW9uIHB1cmdlSUQoaWQpIHtcbiAgZGVsZXRlIG5vZGVDYWNoZVtpZF07XG59XG5cbnZhciBkZWVwZXN0Tm9kZVNvRmFyID0gbnVsbDtcbmZ1bmN0aW9uIGZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3JJbXBsKGFuY2VzdG9ySUQpIHtcbiAgdmFyIGFuY2VzdG9yID0gbm9kZUNhY2hlW2FuY2VzdG9ySURdO1xuICBpZiAoYW5jZXN0b3IgJiYgaXNWYWxpZChhbmNlc3RvciwgYW5jZXN0b3JJRCkpIHtcbiAgICBkZWVwZXN0Tm9kZVNvRmFyID0gYW5jZXN0b3I7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhpcyBub2RlIGlzbid0IHBvcHVsYXRlZCBpbiB0aGUgY2FjaGUsIHNvIHByZXN1bWFibHkgbm9uZSBvZiBpdHNcbiAgICAvLyBkZXNjZW5kYW50cyBhcmUuIEJyZWFrIG91dCBvZiB0aGUgbG9vcC5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGRlZXBlc3QgY2FjaGVkIG5vZGUgd2hvc2UgSUQgaXMgYSBwcmVmaXggb2YgYHRhcmdldElEYC5cbiAqL1xuZnVuY3Rpb24gZmluZERlZXBlc3RDYWNoZWRBbmNlc3Rvcih0YXJnZXRJRCkge1xuICBkZWVwZXN0Tm9kZVNvRmFyID0gbnVsbDtcbiAgUmVhY3RJbnN0YW5jZUhhbmRsZXMudHJhdmVyc2VBbmNlc3RvcnMoXG4gICAgdGFyZ2V0SUQsXG4gICAgZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvckltcGxcbiAgKTtcblxuICB2YXIgZm91bmROb2RlID0gZGVlcGVzdE5vZGVTb0ZhcjtcbiAgZGVlcGVzdE5vZGVTb0ZhciA9IG51bGw7XG4gIHJldHVybiBmb3VuZE5vZGU7XG59XG5cbi8qKlxuICogTW91bnRzIHRoaXMgY29tcG9uZW50IGFuZCBpbnNlcnRzIGl0IGludG8gdGhlIERPTS5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnRJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdG8gbW91bnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gbW91bnQgaW50by5cbiAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgSWYgdHJ1ZSwgZG8gbm90IGluc2VydCBtYXJrdXBcbiAqL1xuZnVuY3Rpb24gbW91bnRDb21wb25lbnRJbnRvTm9kZShcbiAgICBjb21wb25lbnRJbnN0YW5jZSxcbiAgICByb290SUQsXG4gICAgY29udGFpbmVyLFxuICAgIHRyYW5zYWN0aW9uLFxuICAgIHNob3VsZFJldXNlTWFya3VwKSB7XG4gIHZhciBtYXJrdXAgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQoXG4gICAgY29tcG9uZW50SW5zdGFuY2UsIHJvb3RJRCwgdHJhbnNhY3Rpb24sIGVtcHR5T2JqZWN0XG4gICk7XG4gIGNvbXBvbmVudEluc3RhbmNlLl9pc1RvcExldmVsID0gdHJ1ZTtcbiAgUmVhY3RNb3VudC5fbW91bnRJbWFnZUludG9Ob2RlKG1hcmt1cCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCk7XG59XG5cbi8qKlxuICogQmF0Y2hlZCBtb3VudC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnRJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdG8gbW91bnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gbW91bnQgaW50by5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgSWYgdHJ1ZSwgZG8gbm90IGluc2VydCBtYXJrdXBcbiAqL1xuZnVuY3Rpb24gYmF0Y2hlZE1vdW50Q29tcG9uZW50SW50b05vZGUoXG4gICAgY29tcG9uZW50SW5zdGFuY2UsXG4gICAgcm9vdElELFxuICAgIGNvbnRhaW5lcixcbiAgICBzaG91bGRSZXVzZU1hcmt1cCkge1xuICB2YXIgdHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5nZXRQb29sZWQoKTtcbiAgdHJhbnNhY3Rpb24ucGVyZm9ybShcbiAgICBtb3VudENvbXBvbmVudEludG9Ob2RlLFxuICAgIG51bGwsXG4gICAgY29tcG9uZW50SW5zdGFuY2UsXG4gICAgcm9vdElELFxuICAgIGNvbnRhaW5lcixcbiAgICB0cmFuc2FjdGlvbixcbiAgICBzaG91bGRSZXVzZU1hcmt1cFxuICApO1xuICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbn1cblxuLyoqXG4gKiBNb3VudGluZyBpcyB0aGUgcHJvY2VzcyBvZiBpbml0aWFsaXppbmcgYSBSZWFjdCBjb21wb25lbnQgYnkgY3JlYXRpbmcgaXRzXG4gKiByZXByZXNlbnRhdGl2ZSBET00gZWxlbWVudHMgYW5kIGluc2VydGluZyB0aGVtIGludG8gYSBzdXBwbGllZCBgY29udGFpbmVyYC5cbiAqIEFueSBwcmlvciBjb250ZW50IGluc2lkZSBgY29udGFpbmVyYCBpcyBkZXN0cm95ZWQgaW4gdGhlIHByb2Nlc3MuXG4gKlxuICogICBSZWFjdE1vdW50LnJlbmRlcihcbiAqICAgICBjb21wb25lbnQsXG4gKiAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpXG4gKiAgICk7XG4gKlxuICogICA8ZGl2IGlkPVwiY29udGFpbmVyXCI+ICAgICAgICAgICAgICAgICAgIDwtLSBTdXBwbGllZCBgY29udGFpbmVyYC5cbiAqICAgICA8ZGl2IGRhdGEtcmVhY3RpZD1cIi4zXCI+ICAgICAgICAgICAgICA8LS0gUmVuZGVyZWQgcmVhY3RSb290IG9mIFJlYWN0XG4gKiAgICAgICAvLyAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuXG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICpcbiAqIEluc2lkZSBvZiBgY29udGFpbmVyYCwgdGhlIGZpcnN0IGVsZW1lbnQgcmVuZGVyZWQgaXMgdGhlIFwicmVhY3RSb290XCIuXG4gKi9cbnZhciBSZWFjdE1vdW50ID0ge1xuICAvKiogRXhwb3NlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzICoqL1xuICBfaW5zdGFuY2VzQnlSZWFjdFJvb3RJRDogaW5zdGFuY2VzQnlSZWFjdFJvb3RJRCxcblxuICAvKipcbiAgICogVGhpcyBpcyBhIGhvb2sgcHJvdmlkZWQgdG8gc3VwcG9ydCByZW5kZXJpbmcgUmVhY3QgY29tcG9uZW50cyB3aGlsZVxuICAgKiBlbnN1cmluZyB0aGF0IHRoZSBhcHBhcmVudCBzY3JvbGwgcG9zaXRpb24gb2YgaXRzIGBjb250YWluZXJgIGRvZXMgbm90XG4gICAqIGNoYW5nZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgVGhlIGBjb250YWluZXJgIGJlaW5nIHJlbmRlcmVkIGludG8uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlbmRlckNhbGxiYWNrIFRoaXMgbXVzdCBiZSBjYWxsZWQgb25jZSB0byBkbyB0aGUgcmVuZGVyLlxuICAgKi9cbiAgc2Nyb2xsTW9uaXRvcjogZnVuY3Rpb24oY29udGFpbmVyLCByZW5kZXJDYWxsYmFjaykge1xuICAgIHJlbmRlckNhbGxiYWNrKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRha2UgYSBjb21wb25lbnQgdGhhdCdzIGFscmVhZHkgbW91bnRlZCBpbnRvIHRoZSBET00gYW5kIHJlcGxhY2UgaXRzIHByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IHByZXZDb21wb25lbnQgY29tcG9uZW50IGluc3RhbmNlIGFscmVhZHkgaW4gdGhlIERPTVxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgY29tcG9uZW50IGluc3RhbmNlIHRvIHJlbmRlclxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBjb250YWluZXIgdG8gcmVuZGVyIGludG9cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG4gICAqL1xuICBfdXBkYXRlUm9vdENvbXBvbmVudDogZnVuY3Rpb24oXG4gICAgICBwcmV2Q29tcG9uZW50LFxuICAgICAgbmV4dEVsZW1lbnQsXG4gICAgICBjb250YWluZXIsXG4gICAgICBjYWxsYmFjaykge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIFJlYWN0RWxlbWVudFZhbGlkYXRvci5jaGVja0FuZFdhcm5Gb3JNdXRhdGVkUHJvcHMobmV4dEVsZW1lbnQpO1xuICAgIH1cblxuICAgIFJlYWN0TW91bnQuc2Nyb2xsTW9uaXRvcihjb250YWluZXIsIGZ1bmN0aW9uKCkge1xuICAgICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlRWxlbWVudEludGVybmFsKHByZXZDb21wb25lbnQsIG5leHRFbGVtZW50KTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFja0ludGVybmFsKHByZXZDb21wb25lbnQsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIC8vIFJlY29yZCB0aGUgcm9vdCBlbGVtZW50IGluIGNhc2UgaXQgbGF0ZXIgZ2V0cyB0cmFuc3BsYW50ZWQuXG4gICAgICByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW2dldFJlYWN0Um9vdElEKGNvbnRhaW5lcildID1cbiAgICAgICAgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZXZDb21wb25lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgY29tcG9uZW50IGludG8gdGhlIGluc3RhbmNlIG1hcCBhbmQgc3RhcnRzIHNjcm9sbCB2YWx1ZVxuICAgKiBtb25pdG9yaW5nXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IG5leHRDb21wb25lbnQgY29tcG9uZW50IGluc3RhbmNlIHRvIHJlbmRlclxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBjb250YWluZXIgdG8gcmVuZGVyIGludG9cbiAgICogQHJldHVybiB7c3RyaW5nfSByZWFjdFJvb3QgSUQgcHJlZml4XG4gICAqL1xuICBfcmVnaXN0ZXJDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRDb21wb25lbnQsIGNvbnRhaW5lcikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBjb250YWluZXIgJiYgKFxuICAgICAgICAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpXG4gICAgICApLFxuICAgICAgJ19yZWdpc3RlckNvbXBvbmVudCguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LidcbiAgICApIDogaW52YXJpYW50KGNvbnRhaW5lciAmJiAoXG4gICAgICAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpXG4gICAgKSkpO1xuXG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZygpO1xuXG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RNb3VudC5yZWdpc3RlckNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIGluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gbmV4dENvbXBvbmVudDtcbiAgICByZXR1cm4gcmVhY3RSb290SUQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIG5ldyBjb21wb25lbnQgaW50byB0aGUgRE9NLlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgZWxlbWVudCB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgaWYgd2Ugc2hvdWxkIHNraXAgdGhlIG1hcmt1cCBpbnNlcnRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IG5leHRDb21wb25lbnRcbiAgICovXG4gIF9yZW5kZXJOZXdSb290Q29tcG9uZW50OiBmdW5jdGlvbihcbiAgICBuZXh0RWxlbWVudCxcbiAgICBjb250YWluZXIsXG4gICAgc2hvdWxkUmV1c2VNYXJrdXBcbiAgKSB7XG4gICAgLy8gVmFyaW91cyBwYXJ0cyBvZiBvdXIgY29kZSAoc3VjaCBhcyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdzXG4gICAgLy8gX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCkgYXNzdW1lIHRoYXQgY2FsbHMgdG8gcmVuZGVyIGFyZW4ndCBuZXN0ZWQ7XG4gICAgLy8gdmVyaWZ5IHRoYXQgdGhhdCdzIHRoZSBjYXNlLlxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLFxuICAgICAgJ19yZW5kZXJOZXdSb290Q29tcG9uZW50KCk6IFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gJyArXG4gICAgICAnb2YgcHJvcHMgYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tICcgK1xuICAgICAgJ3JlbmRlciBpcyBub3QgYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgK1xuICAgICAgJ2NvbXBvbmVudERpZFVwZGF0ZS4nXG4gICAgKSA6IG51bGwpO1xuXG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChuZXh0RWxlbWVudCwgbnVsbCk7XG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RNb3VudC5fcmVnaXN0ZXJDb21wb25lbnQoXG4gICAgICBjb21wb25lbnRJbnN0YW5jZSxcbiAgICAgIGNvbnRhaW5lclxuICAgICk7XG5cbiAgICAvLyBUaGUgaW5pdGlhbCByZW5kZXIgaXMgc3luY2hyb25vdXMgYnV0IGFueSB1cGRhdGVzIHRoYXQgaGFwcGVuIGR1cmluZ1xuICAgIC8vIHJlbmRlcmluZywgaW4gY29tcG9uZW50V2lsbE1vdW50IG9yIGNvbXBvbmVudERpZE1vdW50LCB3aWxsIGJlIGJhdGNoZWRcbiAgICAvLyBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgYmF0Y2hpbmcgc3RyYXRlZ3kuXG5cbiAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMoXG4gICAgICBiYXRjaGVkTW91bnRDb21wb25lbnRJbnRvTm9kZSxcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLFxuICAgICAgcmVhY3RSb290SUQsXG4gICAgICBjb250YWluZXIsXG4gICAgICBzaG91bGRSZXVzZU1hcmt1cFxuICAgICk7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAvLyBSZWNvcmQgdGhlIHJvb3QgZWxlbWVudCBpbiBjYXNlIGl0IGxhdGVyIGdldHMgdHJhbnNwbGFudGVkLlxuICAgICAgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF0gPVxuICAgICAgICBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcG9uZW50SW5zdGFuY2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgYSBSZWFjdCBjb21wb25lbnQgaW50byB0aGUgRE9NIGluIHRoZSBzdXBwbGllZCBgY29udGFpbmVyYC5cbiAgICpcbiAgICogSWYgdGhlIFJlYWN0IGNvbXBvbmVudCB3YXMgcHJldmlvdXNseSByZW5kZXJlZCBpbnRvIGBjb250YWluZXJgLCB0aGlzIHdpbGxcbiAgICogcGVyZm9ybSBhbiB1cGRhdGUgb24gaXQgYW5kIG9ubHkgbXV0YXRlIHRoZSBET00gYXMgbmVjZXNzYXJ5IHRvIHJlZmxlY3QgdGhlXG4gICAqIGxhdGVzdCBSZWFjdCBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudCBDb21wb25lbnQgZWxlbWVudCB0byByZW5kZXIuXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdHJpZ2dlcmVkIG9uIGNvbXBsZXRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IENvbXBvbmVudCBpbnN0YW5jZSByZW5kZXJlZCBpbiBgY29udGFpbmVyYC5cbiAgICovXG4gIHJlbmRlcjogZnVuY3Rpb24obmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5leHRFbGVtZW50KSxcbiAgICAgICdSZWFjdC5yZW5kZXIoKTogSW52YWxpZCBjb21wb25lbnQgZWxlbWVudC4lcycsXG4gICAgICAoXG4gICAgICAgIHR5cGVvZiBuZXh0RWxlbWVudCA9PT0gJ3N0cmluZycgP1xuICAgICAgICAgICcgSW5zdGVhZCBvZiBwYXNzaW5nIGFuIGVsZW1lbnQgc3RyaW5nLCBtYWtlIHN1cmUgdG8gaW5zdGFudGlhdGUgJyArXG4gICAgICAgICAgJ2l0IGJ5IHBhc3NpbmcgaXQgdG8gUmVhY3QuY3JlYXRlRWxlbWVudC4nIDpcbiAgICAgICAgdHlwZW9mIG5leHRFbGVtZW50ID09PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICAnIEluc3RlYWQgb2YgcGFzc2luZyBhIGNvbXBvbmVudCBjbGFzcywgbWFrZSBzdXJlIHRvIGluc3RhbnRpYXRlICcgK1xuICAgICAgICAgICdpdCBieSBwYXNzaW5nIGl0IHRvIFJlYWN0LmNyZWF0ZUVsZW1lbnQuJyA6XG4gICAgICAgIC8vIENoZWNrIGlmIGl0IHF1YWNrcyBsaWtlIGFuIGVsZW1lbnRcbiAgICAgICAgbmV4dEVsZW1lbnQgIT0gbnVsbCAmJiBuZXh0RWxlbWVudC5wcm9wcyAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgICAnIFRoaXMgbWF5IGJlIGNhdXNlZCBieSB1bmludGVudGlvbmFsbHkgbG9hZGluZyB0d28gaW5kZXBlbmRlbnQgJyArXG4gICAgICAgICAgJ2NvcGllcyBvZiBSZWFjdC4nIDpcbiAgICAgICAgICAnJ1xuICAgICAgKVxuICAgICkgOiBpbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5leHRFbGVtZW50KSkpO1xuXG4gICAgdmFyIHByZXZDb21wb25lbnQgPSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW2dldFJlYWN0Um9vdElEKGNvbnRhaW5lcildO1xuXG4gICAgaWYgKHByZXZDb21wb25lbnQpIHtcbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IHByZXZDb21wb25lbnQuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0TW91bnQuX3VwZGF0ZVJvb3RDb21wb25lbnQoXG4gICAgICAgICAgcHJldkNvbXBvbmVudCxcbiAgICAgICAgICBuZXh0RWxlbWVudCxcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgY2FsbGJhY2tcbiAgICAgICAgKS5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50QXROb2RlKGNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlYWN0Um9vdEVsZW1lbnQgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICB2YXIgY29udGFpbmVySGFzUmVhY3RNYXJrdXAgPVxuICAgICAgcmVhY3RSb290RWxlbWVudCAmJiBSZWFjdE1vdW50LmlzUmVuZGVyZWRCeVJlYWN0KHJlYWN0Um9vdEVsZW1lbnQpO1xuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgaWYgKCFjb250YWluZXJIYXNSZWFjdE1hcmt1cCB8fCByZWFjdFJvb3RFbGVtZW50Lm5leHRTaWJsaW5nKSB7XG4gICAgICAgIHZhciByb290RWxlbWVudFNpYmxpbmcgPSByZWFjdFJvb3RFbGVtZW50O1xuICAgICAgICB3aGlsZSAocm9vdEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgICAgICAgaWYgKFJlYWN0TW91bnQuaXNSZW5kZXJlZEJ5UmVhY3Qocm9vdEVsZW1lbnRTaWJsaW5nKSkge1xuICAgICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAncmVuZGVyKCk6IFRhcmdldCBub2RlIGhhcyBtYXJrdXAgcmVuZGVyZWQgYnkgUmVhY3QsIGJ1dCB0aGVyZSAnICtcbiAgICAgICAgICAgICAgJ2FyZSB1bnJlbGF0ZWQgbm9kZXMgYXMgd2VsbC4gVGhpcyBpcyBtb3N0IGNvbW1vbmx5IGNhdXNlZCBieSAnICtcbiAgICAgICAgICAgICAgJ3doaXRlLXNwYWNlIGluc2VydGVkIGFyb3VuZCBzZXJ2ZXItcmVuZGVyZWQgbWFya3VwLidcbiAgICAgICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJvb3RFbGVtZW50U2libGluZyA9IHJvb3RFbGVtZW50U2libGluZy5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzaG91bGRSZXVzZU1hcmt1cCA9IGNvbnRhaW5lckhhc1JlYWN0TWFya3VwICYmICFwcmV2Q29tcG9uZW50O1xuXG4gICAgdmFyIGNvbXBvbmVudCA9IFJlYWN0TW91bnQuX3JlbmRlck5ld1Jvb3RDb21wb25lbnQoXG4gICAgICBuZXh0RWxlbWVudCxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIHNob3VsZFJldXNlTWFya3VwXG4gICAgKS5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2suY2FsbChjb21wb25lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgY29tcG9uZW50IGluc3RhbmNlIG9mIGBjb25zdHJ1Y3RvcmAgd2l0aCBgaW5pdGlhbFByb3BzYCBhbmRcbiAgICogcmVuZGVycyBpdCBpbnRvIHRoZSBzdXBwbGllZCBgY29udGFpbmVyYC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3IgUmVhY3QgY29tcG9uZW50IGNvbnN0cnVjdG9yLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IHByb3BzIEluaXRpYWwgcHJvcHMgb2YgdGhlIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gcmVuZGVyIGludG8uXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBDb21wb25lbnQgaW5zdGFuY2UgcmVuZGVyZWQgaW4gYGNvbnRhaW5lcmAuXG4gICAqL1xuICBjb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnQ6IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBwcm9wcywgY29udGFpbmVyKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudChjb25zdHJ1Y3RvciwgcHJvcHMpO1xuICAgIHJldHVybiBSZWFjdE1vdW50LnJlbmRlcihlbGVtZW50LCBjb250YWluZXIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgY29tcG9uZW50IGluc3RhbmNlIG9mIGBjb25zdHJ1Y3RvcmAgd2l0aCBgaW5pdGlhbFByb3BzYCBhbmRcbiAgICogcmVuZGVycyBpdCBpbnRvIGEgY29udGFpbmVyIG5vZGUgaWRlbnRpZmllZCBieSBzdXBwbGllZCBgaWRgLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wb25lbnRDb25zdHJ1Y3RvciBSZWFjdCBjb21wb25lbnQgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcm9wcyBJbml0aWFsIHByb3BzIG9mIHRoZSBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQgdG8gcmVuZGVyIGludG8uXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBDb21wb25lbnQgaW5zdGFuY2UgcmVuZGVyZWQgaW4gdGhlIGNvbnRhaW5lciBub2RlLlxuICAgKi9cbiAgY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50QnlJRDogZnVuY3Rpb24oY29uc3RydWN0b3IsIHByb3BzLCBpZCkge1xuICAgIHZhciBkb21Ob2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBkb21Ob2RlLFxuICAgICAgJ1RyaWVkIHRvIGdldCBlbGVtZW50IHdpdGggaWQgb2YgXCIlc1wiIGJ1dCBpdCBpcyBub3QgcHJlc2VudCBvbiB0aGUgcGFnZS4nLFxuICAgICAgaWRcbiAgICApIDogaW52YXJpYW50KGRvbU5vZGUpKTtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5jb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnQoY29uc3RydWN0b3IsIHByb3BzLCBkb21Ob2RlKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgY29udGFpbmVyIG5vZGUgaW50byB3aGljaCBSZWFjdCBjb21wb25lbnRzIHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqIFRoaXMgYWxzbyBjcmVhdGVzIHRoZSBcInJlYWN0Um9vdFwiIElEIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUgZWxlbWVudFxuICAgKiByZW5kZXJlZCB3aXRoaW4uXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGFzIGEgY29udGFpbmVyLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBcInJlYWN0Um9vdFwiIElEIG9mIGVsZW1lbnRzIHJlbmRlcmVkIHdpdGhpbi5cbiAgICovXG4gIHJlZ2lzdGVyQ29udGFpbmVyOiBmdW5jdGlvbihjb250YWluZXIpIHtcbiAgICB2YXIgcmVhY3RSb290SUQgPSBnZXRSZWFjdFJvb3RJRChjb250YWluZXIpO1xuICAgIGlmIChyZWFjdFJvb3RJRCkge1xuICAgICAgLy8gSWYgb25lIGV4aXN0cywgbWFrZSBzdXJlIGl0IGlzIGEgdmFsaWQgXCJyZWFjdFJvb3RcIiBJRC5cbiAgICAgIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKHJlYWN0Um9vdElEKTtcbiAgICB9XG4gICAgaWYgKCFyZWFjdFJvb3RJRCkge1xuICAgICAgLy8gTm8gdmFsaWQgXCJyZWFjdFJvb3RcIiBJRCBmb3VuZCwgY3JlYXRlIG9uZS5cbiAgICAgIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RSb290SUQoKTtcbiAgICB9XG4gICAgY29udGFpbmVyc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gY29udGFpbmVyO1xuICAgIHJldHVybiByZWFjdFJvb3RJRDtcbiAgfSxcblxuICAvKipcbiAgICogVW5tb3VudHMgYW5kIGRlc3Ryb3lzIHRoZSBSZWFjdCBjb21wb25lbnQgcmVuZGVyZWQgaW4gdGhlIGBjb250YWluZXJgLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCBjb250YWluaW5nIGEgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGEgY29tcG9uZW50IHdhcyBmb3VuZCBpbiBhbmQgdW5tb3VudGVkIGZyb21cbiAgICogICAgICAgICAgICAgICAgICAgYGNvbnRhaW5lcmBcbiAgICovXG4gIHVubW91bnRDb21wb25lbnRBdE5vZGU6IGZ1bmN0aW9uKGNvbnRhaW5lcikge1xuICAgIC8vIFZhcmlvdXMgcGFydHMgb2Ygb3VyIGNvZGUgKHN1Y2ggYXMgUmVhY3RDb21wb3NpdGVDb21wb25lbnQnc1xuICAgIC8vIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQpIGFzc3VtZSB0aGF0IGNhbGxzIHRvIHJlbmRlciBhcmVuJ3QgbmVzdGVkO1xuICAgIC8vIHZlcmlmeSB0aGF0IHRoYXQncyB0aGUgY2FzZS4gKFN0cmljdGx5IHNwZWFraW5nLCB1bm1vdW50aW5nIHdvbid0IGNhdXNlIGFcbiAgICAvLyByZW5kZXIgYnV0IHdlIHN0aWxsIGRvbid0IGV4cGVjdCB0byBiZSBpbiBhIHJlbmRlciBjYWxsIGhlcmUuKVxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLFxuICAgICAgJ3VubW91bnRDb21wb25lbnRBdE5vZGUoKTogUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiAnICtcbiAgICAgICdwcm9wcyBhbmQgc3RhdGU7IHRyaWdnZXJpbmcgbmVzdGVkIGNvbXBvbmVudCB1cGRhdGVzIGZyb20gcmVuZGVyIGlzICcgK1xuICAgICAgJ25vdCBhbGxvd2VkLiBJZiBuZWNlc3NhcnksIHRyaWdnZXIgbmVzdGVkIHVwZGF0ZXMgaW4gJyArXG4gICAgICAnY29tcG9uZW50RGlkVXBkYXRlLidcbiAgICApIDogbnVsbCk7XG5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgY29udGFpbmVyICYmIChcbiAgICAgICAgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKVxuICAgICAgKSxcbiAgICAgICd1bm1vdW50Q29tcG9uZW50QXROb2RlKC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJ1xuICAgICkgOiBpbnZhcmlhbnQoY29udGFpbmVyICYmIChcbiAgICAgIChjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSlcbiAgICApKSk7XG5cbiAgICB2YXIgcmVhY3RSb290SUQgPSBnZXRSZWFjdFJvb3RJRChjb250YWluZXIpO1xuICAgIHZhciBjb21wb25lbnQgPSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcbiAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRGcm9tTm9kZShjb21wb25lbnQsIGNvbnRhaW5lcik7XG4gICAgZGVsZXRlIGluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgIGRlbGV0ZSBjb250YWluZXJzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgZGVsZXRlIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogVW5tb3VudHMgYSBjb21wb25lbnQgYW5kIHJlbW92ZXMgaXQgZnJvbSB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnN0YW5jZSBSZWFjdCBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHVubW91bnQgZnJvbS5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc2VlIHtSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGV9XG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50RnJvbU5vZGU6IGZ1bmN0aW9uKGluc3RhbmNlLCBjb250YWluZXIpIHtcbiAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChpbnN0YW5jZSk7XG5cbiAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKSB7XG4gICAgICBjb250YWluZXIgPSBjb250YWluZXIuZG9jdW1lbnRFbGVtZW50O1xuICAgIH1cblxuICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2VtcHR5aW5nLWEtbm9kZVxuICAgIHdoaWxlIChjb250YWluZXIubGFzdENoaWxkKSB7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoY29udGFpbmVyLmxhc3RDaGlsZCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgY29udGFpbmVyIERPTSBlbGVtZW50IHRoYXQgY29udGFpbnMgUmVhY3QgY29tcG9uZW50IHRvIHdoaWNoIHRoZVxuICAgKiBzdXBwbGllZCBET00gYGlkYCBiZWxvbmdzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIGFuIGVsZW1lbnQgcmVuZGVyZWQgYnkgYSBSZWFjdCBjb21wb25lbnQuXG4gICAqIEByZXR1cm4gez9ET01FbGVtZW50fSBET00gZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSBgaWRgLlxuICAgKi9cbiAgZmluZFJlYWN0Q29udGFpbmVyRm9ySUQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKGlkKTtcbiAgICB2YXIgY29udGFpbmVyID0gY29udGFpbmVyc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG4gICAgICBpZiAocm9vdEVsZW1lbnQgJiYgcm9vdEVsZW1lbnQucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgLy8gQ2FsbCBpbnRlcm5hbEdldElEIGhlcmUgYmVjYXVzZSBnZXRJRCBjYWxscyBpc1ZhbGlkIHdoaWNoIGNhbGxzXG4gICAgICAgICAgLy8gZmluZFJlYWN0Q29udGFpbmVyRm9ySUQgKHRoaXMgZnVuY3Rpb24pLlxuICAgICAgICAgIGludGVybmFsR2V0SUQocm9vdEVsZW1lbnQpID09PSByZWFjdFJvb3RJRCxcbiAgICAgICAgICAnUmVhY3RNb3VudDogUm9vdCBlbGVtZW50IElEIGRpZmZlcmVkIGZyb20gcmVhY3RSb290SUQuJ1xuICAgICAgICApIDogaW52YXJpYW50KC8vIENhbGwgaW50ZXJuYWxHZXRJRCBoZXJlIGJlY2F1c2UgZ2V0SUQgY2FsbHMgaXNWYWxpZCB3aGljaCBjYWxsc1xuICAgICAgICAvLyBmaW5kUmVhY3RDb250YWluZXJGb3JJRCAodGhpcyBmdW5jdGlvbikuXG4gICAgICAgIGludGVybmFsR2V0SUQocm9vdEVsZW1lbnQpID09PSByZWFjdFJvb3RJRCkpO1xuXG4gICAgICAgIHZhciBjb250YWluZXJDaGlsZCA9IGNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICBpZiAoY29udGFpbmVyQ2hpbGQgJiZcbiAgICAgICAgICAgIHJlYWN0Um9vdElEID09PSBpbnRlcm5hbEdldElEKGNvbnRhaW5lckNoaWxkKSkge1xuICAgICAgICAgIC8vIElmIHRoZSBjb250YWluZXIgaGFzIGEgbmV3IGNoaWxkIHdpdGggdGhlIHNhbWUgSUQgYXMgdGhlIG9sZFxuICAgICAgICAgIC8vIHJvb3QgZWxlbWVudCwgdGhlbiByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSBpc1xuICAgICAgICAgIC8vIGp1c3Qgc3RhbGUgYW5kIG5lZWRzIHRvIGJlIHVwZGF0ZWQuIFRoZSBjYXNlIHRoYXQgZGVzZXJ2ZXMgYVxuICAgICAgICAgIC8vIHdhcm5pbmcgaXMgd2hlbiB0aGUgY29udGFpbmVyIGlzIGVtcHR5LlxuICAgICAgICAgIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gY29udGFpbmVyQ2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICdSZWFjdE1vdW50OiBSb290IGVsZW1lbnQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIGl0cyBvcmlnaW5hbCAnICtcbiAgICAgICAgICAgICdjb250YWluZXIuIE5ldyBjb250YWluZXI6Jywgcm9vdEVsZW1lbnQucGFyZW50Tm9kZVxuICAgICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb250YWluZXI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFuIGVsZW1lbnQgcmVuZGVyZWQgYnkgUmVhY3Qgd2l0aCB0aGUgc3VwcGxpZWQgSUQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiBhIERPTSBub2RlIGluIHRoZSBSZWFjdCBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IFJvb3QgRE9NIG5vZGUgb2YgdGhlIFJlYWN0IGNvbXBvbmVudC5cbiAgICovXG4gIGZpbmRSZWFjdE5vZGVCeUlEOiBmdW5jdGlvbihpZCkge1xuICAgIHZhciByZWFjdFJvb3QgPSBSZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKGlkKTtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5maW5kQ29tcG9uZW50Um9vdChyZWFjdFJvb3QsIGlkKTtcbiAgfSxcblxuICAvKipcbiAgICogVHJ1ZSBpZiB0aGUgc3VwcGxpZWQgYG5vZGVgIGlzIHJlbmRlcmVkIGJ5IFJlYWN0LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IG5vZGUgRE9NIEVsZW1lbnQgdG8gY2hlY2suXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIERPTSBFbGVtZW50IGFwcGVhcnMgdG8gYmUgcmVuZGVyZWQgYnkgUmVhY3QuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgaXNSZW5kZXJlZEJ5UmVhY3Q6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgLy8gTm90IGEgRE9NRWxlbWVudCwgdGhlcmVmb3JlIG5vdCBhIFJlYWN0IGNvbXBvbmVudFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgaWQgPSBSZWFjdE1vdW50LmdldElEKG5vZGUpO1xuICAgIHJldHVybiBpZCA/IGlkLmNoYXJBdCgwKSA9PT0gU0VQQVJBVE9SIDogZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXZlcnNlcyB1cCB0aGUgYW5jZXN0b3JzIG9mIHRoZSBzdXBwbGllZCBub2RlIHRvIGZpbmQgYSBub2RlIHRoYXQgaXMgYVxuICAgKiBET00gcmVwcmVzZW50YXRpb24gb2YgYSBSZWFjdCBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gbm9kZVxuICAgKiBAcmV0dXJuIHs/RE9NRXZlbnRUYXJnZXR9XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0Rmlyc3RSZWFjdERPTTogZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBjdXJyZW50ID0gbm9kZTtcbiAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50LnBhcmVudE5vZGUgIT09IGN1cnJlbnQpIHtcbiAgICAgIGlmIChSZWFjdE1vdW50LmlzUmVuZGVyZWRCeVJlYWN0KGN1cnJlbnQpKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGEgbm9kZSB3aXRoIHRoZSBzdXBwbGllZCBgdGFyZ2V0SURgIGluc2lkZSBvZiB0aGUgc3VwcGxpZWRcbiAgICogYGFuY2VzdG9yTm9kZWAuICBFeHBsb2l0cyB0aGUgSUQgbmFtaW5nIHNjaGVtZSB0byBwZXJmb3JtIHRoZSBzZWFyY2hcbiAgICogcXVpY2tseS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gYW5jZXN0b3JOb2RlIFNlYXJjaCBmcm9tIHRoaXMgcm9vdC5cbiAgICogQHBhcmFybSB7c3RyaW5nfSB0YXJnZXRJRCBJRCBvZiB0aGUgRE9NIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge0RPTUV2ZW50VGFyZ2V0fSBET00gbm9kZSB3aXRoIHRoZSBzdXBwbGllZCBgdGFyZ2V0SURgLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGZpbmRDb21wb25lbnRSb290OiBmdW5jdGlvbihhbmNlc3Rvck5vZGUsIHRhcmdldElEKSB7XG4gICAgdmFyIGZpcnN0Q2hpbGRyZW4gPSBmaW5kQ29tcG9uZW50Um9vdFJldXNhYmxlQXJyYXk7XG4gICAgdmFyIGNoaWxkSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlZXBlc3RBbmNlc3RvciA9IGZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3IodGFyZ2V0SUQpIHx8IGFuY2VzdG9yTm9kZTtcblxuICAgIGZpcnN0Q2hpbGRyZW5bMF0gPSBkZWVwZXN0QW5jZXN0b3IuZmlyc3RDaGlsZDtcbiAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDE7XG5cbiAgICB3aGlsZSAoY2hpbGRJbmRleCA8IGZpcnN0Q2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICB2YXIgY2hpbGQgPSBmaXJzdENoaWxkcmVuW2NoaWxkSW5kZXgrK107XG4gICAgICB2YXIgdGFyZ2V0Q2hpbGQ7XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICB2YXIgY2hpbGRJRCA9IFJlYWN0TW91bnQuZ2V0SUQoY2hpbGQpO1xuICAgICAgICBpZiAoY2hpbGRJRCkge1xuICAgICAgICAgIC8vIEV2ZW4gaWYgd2UgZmluZCB0aGUgbm9kZSB3ZSdyZSBsb29raW5nIGZvciwgd2UgZmluaXNoIGxvb3BpbmdcbiAgICAgICAgICAvLyB0aHJvdWdoIGl0cyBzaWJsaW5ncyB0byBlbnN1cmUgdGhleSdyZSBjYWNoZWQgc28gdGhhdCB3ZSBkb24ndCBoYXZlXG4gICAgICAgICAgLy8gdG8gcmV2aXNpdCB0aGlzIG5vZGUgYWdhaW4uIE90aGVyd2lzZSwgd2UgbWFrZSBuXjIgY2FsbHMgdG8gZ2V0SURcbiAgICAgICAgICAvLyB3aGVuIHZpc2l0aW5nIHRoZSBtYW55IGNoaWxkcmVuIG9mIGEgc2luZ2xlIG5vZGUgaW4gb3JkZXIuXG5cbiAgICAgICAgICBpZiAodGFyZ2V0SUQgPT09IGNoaWxkSUQpIHtcbiAgICAgICAgICAgIHRhcmdldENoaWxkID0gY2hpbGQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChSZWFjdEluc3RhbmNlSGFuZGxlcy5pc0FuY2VzdG9ySURPZihjaGlsZElELCB0YXJnZXRJRCkpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGZpbmQgYSBjaGlsZCB3aG9zZSBJRCBpcyBhbiBhbmNlc3RvciBvZiB0aGUgZ2l2ZW4gSUQsXG4gICAgICAgICAgICAvLyB0aGVuIHdlIGNhbiBiZSBzdXJlIHRoYXQgd2Ugb25seSB3YW50IHRvIHNlYXJjaCB0aGUgc3VidHJlZVxuICAgICAgICAgICAgLy8gcm9vdGVkIGF0IHRoaXMgY2hpbGQsIHNvIHdlIGNhbiB0aHJvdyBvdXQgdGhlIHJlc3Qgb2YgdGhlXG4gICAgICAgICAgICAvLyBzZWFyY2ggc3RhdGUuXG4gICAgICAgICAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IGNoaWxkSW5kZXggPSAwO1xuICAgICAgICAgICAgZmlyc3RDaGlsZHJlbi5wdXNoKGNoaWxkLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHRoaXMgY2hpbGQgaGFkIG5vIElELCB0aGVuIHRoZXJlJ3MgYSBjaGFuY2UgdGhhdCBpdCB3YXNcbiAgICAgICAgICAvLyBpbmplY3RlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBicm93c2VyLCBhcyB3aGVuIGEgYDx0YWJsZT5gXG4gICAgICAgICAgLy8gZWxlbWVudCBzcHJvdXRzIGFuIGV4dHJhIGA8dGJvZHk+YCBjaGlsZCBhcyBhIHNpZGUgZWZmZWN0IG9mXG4gICAgICAgICAgLy8gYC5pbm5lckhUTUxgIHBhcnNpbmcuIE9wdGltaXN0aWNhbGx5IGNvbnRpbnVlIGRvd24gdGhpc1xuICAgICAgICAgIC8vIGJyYW5jaCwgYnV0IG5vdCBiZWZvcmUgZXhhbWluaW5nIHRoZSBvdGhlciBzaWJsaW5ncy5cbiAgICAgICAgICBmaXJzdENoaWxkcmVuLnB1c2goY2hpbGQuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0Q2hpbGQpIHtcbiAgICAgICAgLy8gRW1wdHlpbmcgZmlyc3RDaGlsZHJlbi9maW5kQ29tcG9uZW50Um9vdFJldXNhYmxlQXJyYXkgaXNcbiAgICAgICAgLy8gbm90IG5lY2Vzc2FyeSBmb3IgY29ycmVjdG5lc3MsIGJ1dCBpdCBoZWxwcyB0aGUgR0MgcmVjbGFpbVxuICAgICAgICAvLyBhbnkgbm9kZXMgdGhhdCB3ZXJlIGxlZnQgYXQgdGhlIGVuZCBvZiB0aGUgc2VhcmNoLlxuICAgICAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENoaWxkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZpcnN0Q2hpbGRyZW4ubGVuZ3RoID0gMDtcblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdmaW5kQ29tcG9uZW50Um9vdCguLi4sICVzKTogVW5hYmxlIHRvIGZpbmQgZWxlbWVudC4gVGhpcyBwcm9iYWJseSAnICtcbiAgICAgICdtZWFucyB0aGUgRE9NIHdhcyB1bmV4cGVjdGVkbHkgbXV0YXRlZCAoZS5nLiwgYnkgdGhlIGJyb3dzZXIpLCAnICtcbiAgICAgICd1c3VhbGx5IGR1ZSB0byBmb3JnZXR0aW5nIGEgPHRib2R5PiB3aGVuIHVzaW5nIHRhYmxlcywgbmVzdGluZyB0YWdzICcgK1xuICAgICAgJ2xpa2UgPGZvcm0+LCA8cD4sIG9yIDxhPiwgb3IgdXNpbmcgbm9uLVNWRyBlbGVtZW50cyBpbiBhbiA8c3ZnPiAnICtcbiAgICAgICdwYXJlbnQuICcgK1xuICAgICAgJ1RyeSBpbnNwZWN0aW5nIHRoZSBjaGlsZCBub2RlcyBvZiB0aGUgZWxlbWVudCB3aXRoIFJlYWN0IElEIGAlc2AuJyxcbiAgICAgIHRhcmdldElELFxuICAgICAgUmVhY3RNb3VudC5nZXRJRChhbmNlc3Rvck5vZGUpXG4gICAgKSA6IGludmFyaWFudChmYWxzZSkpO1xuICB9LFxuXG4gIF9tb3VudEltYWdlSW50b05vZGU6IGZ1bmN0aW9uKG1hcmt1cCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBjb250YWluZXIgJiYgKFxuICAgICAgICAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpXG4gICAgICApLFxuICAgICAgJ21vdW50Q29tcG9uZW50SW50b05vZGUoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgdmFsaWQuJ1xuICAgICkgOiBpbnZhcmlhbnQoY29udGFpbmVyICYmIChcbiAgICAgIChjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSlcbiAgICApKSk7XG5cbiAgICBpZiAoc2hvdWxkUmV1c2VNYXJrdXApIHtcbiAgICAgIHZhciByb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgaWYgKFJlYWN0TWFya3VwQ2hlY2tzdW0uY2FuUmV1c2VNYXJrdXAobWFya3VwLCByb290RWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNoZWNrc3VtID0gcm9vdEVsZW1lbnQuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgIFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FXG4gICAgICAgICk7XG4gICAgICAgIHJvb3RFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSk7XG5cbiAgICAgICAgdmFyIHJvb3RNYXJrdXAgPSByb290RWxlbWVudC5vdXRlckhUTUw7XG4gICAgICAgIHJvb3RFbGVtZW50LnNldEF0dHJpYnV0ZShcbiAgICAgICAgICBSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSxcbiAgICAgICAgICBjaGVja3N1bVxuICAgICAgICApO1xuXG4gICAgICAgIHZhciBkaWZmSW5kZXggPSBmaXJzdERpZmZlcmVuY2VJbmRleChtYXJrdXAsIHJvb3RNYXJrdXApO1xuICAgICAgICB2YXIgZGlmZmVyZW5jZSA9ICcgKGNsaWVudCkgJyArXG4gICAgICAgICAgbWFya3VwLnN1YnN0cmluZyhkaWZmSW5kZXggLSAyMCwgZGlmZkluZGV4ICsgMjApICtcbiAgICAgICAgICAnXFxuIChzZXJ2ZXIpICcgKyByb290TWFya3VwLnN1YnN0cmluZyhkaWZmSW5kZXggLSAyMCwgZGlmZkluZGV4ICsgMjApO1xuXG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgY29udGFpbmVyLm5vZGVUeXBlICE9PSBET0NfTk9ERV9UWVBFLFxuICAgICAgICAgICdZb3VcXCdyZSB0cnlpbmcgdG8gcmVuZGVyIGEgY29tcG9uZW50IHRvIHRoZSBkb2N1bWVudCB1c2luZyAnICtcbiAgICAgICAgICAnc2VydmVyIHJlbmRlcmluZyBidXQgdGhlIGNoZWNrc3VtIHdhcyBpbnZhbGlkLiBUaGlzIHVzdWFsbHkgJyArXG4gICAgICAgICAgJ21lYW5zIHlvdSByZW5kZXJlZCBhIGRpZmZlcmVudCBjb21wb25lbnQgdHlwZSBvciBwcm9wcyBvbiAnICtcbiAgICAgICAgICAndGhlIGNsaWVudCBmcm9tIHRoZSBvbmUgb24gdGhlIHNlcnZlciwgb3IgeW91ciByZW5kZXIoKSAnICtcbiAgICAgICAgICAnbWV0aG9kcyBhcmUgaW1wdXJlLiBSZWFjdCBjYW5ub3QgaGFuZGxlIHRoaXMgY2FzZSBkdWUgdG8gJyArXG4gICAgICAgICAgJ2Nyb3NzLWJyb3dzZXIgcXVpcmtzIGJ5IHJlbmRlcmluZyBhdCB0aGUgZG9jdW1lbnQgcm9vdC4gWW91ICcgK1xuICAgICAgICAgICdzaG91bGQgbG9vayBmb3IgZW52aXJvbm1lbnQgZGVwZW5kZW50IGNvZGUgaW4geW91ciBjb21wb25lbnRzICcgK1xuICAgICAgICAgICdhbmQgZW5zdXJlIHRoZSBwcm9wcyBhcmUgdGhlIHNhbWUgY2xpZW50IGFuZCBzZXJ2ZXIgc2lkZTpcXG4lcycsXG4gICAgICAgICAgZGlmZmVyZW5jZVxuICAgICAgICApIDogaW52YXJpYW50KGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSkpO1xuXG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgJ1JlYWN0IGF0dGVtcHRlZCB0byByZXVzZSBtYXJrdXAgaW4gYSBjb250YWluZXIgYnV0IHRoZSAnICtcbiAgICAgICAgICAgICdjaGVja3N1bSB3YXMgaW52YWxpZC4gVGhpcyBnZW5lcmFsbHkgbWVhbnMgdGhhdCB5b3UgYXJlICcgK1xuICAgICAgICAgICAgJ3VzaW5nIHNlcnZlciByZW5kZXJpbmcgYW5kIHRoZSBtYXJrdXAgZ2VuZXJhdGVkIG9uIHRoZSAnICtcbiAgICAgICAgICAgICdzZXJ2ZXIgd2FzIG5vdCB3aGF0IHRoZSBjbGllbnQgd2FzIGV4cGVjdGluZy4gUmVhY3QgaW5qZWN0ZWQgJyArXG4gICAgICAgICAgICAnbmV3IG1hcmt1cCB0byBjb21wZW5zYXRlIHdoaWNoIHdvcmtzIGJ1dCB5b3UgaGF2ZSBsb3N0IG1hbnkgJyArXG4gICAgICAgICAgICAnb2YgdGhlIGJlbmVmaXRzIG9mIHNlcnZlciByZW5kZXJpbmcuIEluc3RlYWQsIGZpZ3VyZSBvdXQgJyArXG4gICAgICAgICAgICAnd2h5IHRoZSBtYXJrdXAgYmVpbmcgZ2VuZXJhdGVkIGlzIGRpZmZlcmVudCBvbiB0aGUgY2xpZW50ICcgK1xuICAgICAgICAgICAgJ29yIHNlcnZlcjpcXG4lcycsXG4gICAgICAgICAgICBkaWZmZXJlbmNlXG4gICAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSxcbiAgICAgICdZb3VcXCdyZSB0cnlpbmcgdG8gcmVuZGVyIGEgY29tcG9uZW50IHRvIHRoZSBkb2N1bWVudCBidXQgJyArXG4gICAgICAgICd5b3UgZGlkblxcJ3QgdXNlIHNlcnZlciByZW5kZXJpbmcuIFdlIGNhblxcJ3QgZG8gdGhpcyAnICtcbiAgICAgICAgJ3dpdGhvdXQgdXNpbmcgc2VydmVyIHJlbmRlcmluZyBkdWUgdG8gY3Jvc3MtYnJvd3NlciBxdWlya3MuICcgK1xuICAgICAgICAnU2VlIFJlYWN0LnJlbmRlclRvU3RyaW5nKCkgZm9yIHNlcnZlciByZW5kZXJpbmcuJ1xuICAgICkgOiBpbnZhcmlhbnQoY29udGFpbmVyLm5vZGVUeXBlICE9PSBET0NfTk9ERV9UWVBFKSk7XG5cbiAgICBzZXRJbm5lckhUTUwoY29udGFpbmVyLCBtYXJrdXApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWFjdCBJRCB1dGlsaXRpZXMuXG4gICAqL1xuXG4gIGdldFJlYWN0Um9vdElEOiBnZXRSZWFjdFJvb3RJRCxcblxuICBnZXRJRDogZ2V0SUQsXG5cbiAgc2V0SUQ6IHNldElELFxuXG4gIGdldE5vZGU6IGdldE5vZGUsXG5cbiAgZ2V0Tm9kZUZyb21JbnN0YW5jZTogZ2V0Tm9kZUZyb21JbnN0YW5jZSxcblxuICBwdXJnZUlEOiBwdXJnZUlEXG59O1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoUmVhY3RNb3VudCwgJ1JlYWN0TW91bnQnLCB7XG4gIF9yZW5kZXJOZXdSb290Q29tcG9uZW50OiAnX3JlbmRlck5ld1Jvb3RDb21wb25lbnQnLFxuICBfbW91bnRJbWFnZUludG9Ob2RlOiAnX21vdW50SW1hZ2VJbnRvTm9kZSdcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TW91bnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0RPTVByb3BlcnR5XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9ET01Qcm9wZXJ0eS5qc1wiLFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5qc1wiLFwiLi9SZWFjdEN1cnJlbnRPd25lclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXIuanNcIixcIi4vUmVhY3RFbGVtZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVsZW1lbnQuanNcIixcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVsZW1lbnRWYWxpZGF0b3IuanNcIixcIi4vUmVhY3RFbXB0eUNvbXBvbmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbXB0eUNvbXBvbmVudC5qc1wiLFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJbnN0YW5jZUhhbmRsZXMuanNcIixcIi4vUmVhY3RJbnN0YW5jZU1hcFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJbnN0YW5jZU1hcC5qc1wiLFwiLi9SZWFjdE1hcmt1cENoZWNrc3VtXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE1hcmt1cENoZWNrc3VtLmpzXCIsXCIuL1JlYWN0UGVyZlwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQZXJmLmpzXCIsXCIuL1JlYWN0UmVjb25jaWxlclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSZWNvbmNpbGVyLmpzXCIsXCIuL1JlYWN0VXBkYXRlUXVldWVcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0VXBkYXRlUXVldWUuanNcIixcIi4vUmVhY3RVcGRhdGVzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFVwZGF0ZXMuanNcIixcIi4vY29udGFpbnNOb2RlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jb250YWluc05vZGUuanNcIixcIi4vZW1wdHlPYmplY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2VtcHR5T2JqZWN0LmpzXCIsXCIuL2dldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyLmpzXCIsXCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQuanNcIixcIi4vaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIixcIi4vc2V0SW5uZXJIVE1MXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9zZXRJbm5lckhUTUwuanNcIixcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50LmpzXCIsXCIuL3dhcm5pbmdcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3dhcm5pbmcuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE11bHRpQ2hpbGQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RNdWx0aUNoaWxkXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50XCIpO1xudmFyIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzID0gcmVxdWlyZShcIi4vUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNcIik7XG5cbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIik7XG52YXIgUmVhY3RDaGlsZFJlY29uY2lsZXIgPSByZXF1aXJlKFwiLi9SZWFjdENoaWxkUmVjb25jaWxlclwiKTtcblxuLyoqXG4gKiBVcGRhdGluZyBjaGlsZHJlbiBvZiBhIGNvbXBvbmVudCBtYXkgdHJpZ2dlciByZWN1cnNpdmUgdXBkYXRlcy4gVGhlIGRlcHRoIGlzXG4gKiB1c2VkIHRvIGJhdGNoIHJlY3Vyc2l2ZSB1cGRhdGVzIHRvIHJlbmRlciBtYXJrdXAgbW9yZSBlZmZpY2llbnRseS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xudmFyIHVwZGF0ZURlcHRoID0gMDtcblxuLyoqXG4gKiBRdWV1ZSBvZiB1cGRhdGUgY29uZmlndXJhdGlvbiBvYmplY3RzLlxuICpcbiAqIEVhY2ggb2JqZWN0IGhhcyBhIGB0eXBlYCBwcm9wZXJ0eSB0aGF0IGlzIGluIGBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlc2AuXG4gKlxuICogQHR5cGUge2FycmF5PG9iamVjdD59XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgdXBkYXRlUXVldWUgPSBbXTtcblxuLyoqXG4gKiBRdWV1ZSBvZiBtYXJrdXAgdG8gYmUgcmVuZGVyZWQuXG4gKlxuICogQHR5cGUge2FycmF5PHN0cmluZz59XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbWFya3VwUXVldWUgPSBbXTtcblxuLyoqXG4gKiBFbnF1ZXVlcyBtYXJrdXAgdG8gYmUgcmVuZGVyZWQgYW5kIGluc2VydGVkIGF0IGEgc3VwcGxpZWQgaW5kZXguXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgdGhhdCByZW5kZXJzIGludG8gYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZU1hcmt1cChwYXJlbnRJRCwgbWFya3VwLCB0b0luZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuSU5TRVJUX01BUktVUCxcbiAgICBtYXJrdXBJbmRleDogbWFya3VwUXVldWUucHVzaChtYXJrdXApIC0gMSxcbiAgICB0ZXh0Q29udGVudDogbnVsbCxcbiAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgdG9JbmRleDogdG9JbmRleFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyBtb3ZpbmcgYW4gZXhpc3RpbmcgZWxlbWVudCB0byBhbm90aGVyIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggU291cmNlIGluZGV4IG9mIHRoZSBleGlzdGluZyBlbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXggb2YgdGhlIGVsZW1lbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlTW92ZShwYXJlbnRJRCwgZnJvbUluZGV4LCB0b0luZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORyxcbiAgICBtYXJrdXBJbmRleDogbnVsbCxcbiAgICB0ZXh0Q29udGVudDogbnVsbCxcbiAgICBmcm9tSW5kZXg6IGZyb21JbmRleCxcbiAgICB0b0luZGV4OiB0b0luZGV4XG4gIH0pO1xufVxuXG4vKipcbiAqIEVucXVldWVzIHJlbW92aW5nIGFuIGVsZW1lbnQgYXQgYW4gaW5kZXguXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBJbmRleCBvZiB0aGUgZWxlbWVudCB0byByZW1vdmUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlUmVtb3ZlKHBhcmVudElELCBmcm9tSW5kZXgpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICB1cGRhdGVRdWV1ZS5wdXNoKHtcbiAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5SRU1PVkVfTk9ERSxcbiAgICBtYXJrdXBJbmRleDogbnVsbCxcbiAgICB0ZXh0Q29udGVudDogbnVsbCxcbiAgICBmcm9tSW5kZXg6IGZyb21JbmRleCxcbiAgICB0b0luZGV4OiBudWxsXG4gIH0pO1xufVxuXG4vKipcbiAqIEVucXVldWVzIHNldHRpbmcgdGhlIHRleHQgY29udGVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dENvbnRlbnQgVGV4dCBjb250ZW50IHRvIHNldC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVUZXh0Q29udGVudChwYXJlbnRJRCwgdGV4dENvbnRlbnQpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICB1cGRhdGVRdWV1ZS5wdXNoKHtcbiAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5URVhUX0NPTlRFTlQsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgdGV4dENvbnRlbnQ6IHRleHRDb250ZW50LFxuICAgIGZyb21JbmRleDogbnVsbCxcbiAgICB0b0luZGV4OiBudWxsXG4gIH0pO1xufVxuXG4vKipcbiAqIFByb2Nlc3NlcyBhbnkgZW5xdWV1ZWQgdXBkYXRlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwcm9jZXNzUXVldWUoKSB7XG4gIGlmICh1cGRhdGVRdWV1ZS5sZW5ndGgpIHtcbiAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXMoXG4gICAgICB1cGRhdGVRdWV1ZSxcbiAgICAgIG1hcmt1cFF1ZXVlXG4gICAgKTtcbiAgICBjbGVhclF1ZXVlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDbGVhcnMgYW55IGVucXVldWVkIHVwZGF0ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJRdWV1ZSgpIHtcbiAgdXBkYXRlUXVldWUubGVuZ3RoID0gMDtcbiAgbWFya3VwUXVldWUubGVuZ3RoID0gMDtcbn1cblxuLyoqXG4gKiBSZWFjdE11bHRpQ2hpbGQgYXJlIGNhcGFibGUgb2YgcmVjb25jaWxpbmcgbXVsdGlwbGUgY2hpbGRyZW4uXG4gKlxuICogQGNsYXNzIFJlYWN0TXVsdGlDaGlsZFxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdE11bHRpQ2hpbGQgPSB7XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGNvbW1vbiBmdW5jdGlvbmFsaXR5IGZvciBjb21wb25lbnRzIHRoYXQgbXVzdCByZWNvbmNpbGUgbXVsdGlwbGVcbiAgICogY2hpbGRyZW4uIFRoaXMgaXMgdXNlZCBieSBgUmVhY3RET01Db21wb25lbnRgIHRvIG1vdW50LCB1cGRhdGUsIGFuZFxuICAgKiB1bm1vdW50IGNoaWxkIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEBsZW5kcyB7UmVhY3RNdWx0aUNoaWxkLnByb3RvdHlwZX1cbiAgICovXG4gIE1peGluOiB7XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBcIm1vdW50IGltYWdlXCIgZm9yIGVhY2ggb2YgdGhlIHN1cHBsaWVkIGNoaWxkcmVuLiBJbiB0aGUgY2FzZVxuICAgICAqIG9mIGBSZWFjdERPTUNvbXBvbmVudGAsIGEgbW91bnQgaW1hZ2UgaXMgYSBzdHJpbmcgb2YgbWFya3VwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXN0ZWRDaGlsZHJlbiBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICAgKiBAcmV0dXJuIHthcnJheX0gQW4gYXJyYXkgb2YgbW91bnRlZCByZXByZXNlbnRhdGlvbnMuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgbW91bnRDaGlsZHJlbjogZnVuY3Rpb24obmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBSZWFjdENoaWxkUmVjb25jaWxlci5pbnN0YW50aWF0ZUNoaWxkcmVuKFxuICAgICAgICBuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHRcbiAgICAgICk7XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICB2YXIgbW91bnRJbWFnZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIGNoaWxkcmVuKSB7XG4gICAgICAgIGlmIChjaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW25hbWVdO1xuICAgICAgICAgIC8vIElubGluZWQgZm9yIHBlcmZvcm1hbmNlLCBzZWUgYFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0SURgLlxuICAgICAgICAgIHZhciByb290SUQgPSB0aGlzLl9yb290Tm9kZUlEICsgbmFtZTtcbiAgICAgICAgICB2YXIgbW91bnRJbWFnZSA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChcbiAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgcm9vdElELFxuICAgICAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBjaGlsZC5fbW91bnRJbmRleCA9IGluZGV4O1xuICAgICAgICAgIG1vdW50SW1hZ2VzLnB1c2gobW91bnRJbWFnZSk7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1vdW50SW1hZ2VzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBhbnkgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBhIHRleHQgY29udGVudCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV4dENvbnRlbnQgU3RyaW5nIG9mIGNvbnRlbnQuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdXBkYXRlVGV4dENvbnRlbnQ6IGZ1bmN0aW9uKG5leHRDb250ZW50KSB7XG4gICAgICB1cGRhdGVEZXB0aCsrO1xuICAgICAgdmFyIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgICAvLyBSZW1vdmUgYW55IHJlbmRlcmVkIGNoaWxkcmVuLlxuICAgICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51bm1vdW50Q2hpbGRyZW4ocHJldkNoaWxkcmVuKTtcbiAgICAgICAgLy8gVE9ETzogVGhlIHNldFRleHRDb250ZW50IG9wZXJhdGlvbiBzaG91bGQgYmUgZW5vdWdoXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5fdW5tb3VudENoaWxkQnlOYW1lKHByZXZDaGlsZHJlbltuYW1lXSwgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBuZXcgdGV4dCBjb250ZW50LlxuICAgICAgICB0aGlzLnNldFRleHRDb250ZW50KG5leHRDb250ZW50KTtcbiAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHVwZGF0ZURlcHRoLS07XG4gICAgICAgIGlmICghdXBkYXRlRGVwdGgpIHtcbiAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIGNsZWFyUXVldWUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzc1F1ZXVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHJlbmRlcmVkIGNoaWxkcmVuIHdpdGggbmV3IGNoaWxkcmVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0TmVzdGVkQ2hpbGRyZW4gTmVzdGVkIGNoaWxkIG1hcHMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbihuZXh0TmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB1cGRhdGVEZXB0aCsrO1xuICAgICAgdmFyIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdXBkYXRlRGVwdGgtLTtcbiAgICAgICAgaWYgKCF1cGRhdGVEZXB0aCkge1xuICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgY2xlYXJRdWV1ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzUXVldWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbXByb3ZlIHBlcmZvcm1hbmNlIGJ5IGlzb2xhdGluZyB0aGlzIGhvdCBjb2RlIHBhdGggZnJvbSB0aGUgdHJ5L2NhdGNoXG4gICAgICogYmxvY2sgaW4gYHVwZGF0ZUNoaWxkcmVuYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dE5lc3RlZENoaWxkcmVuIE5lc3RlZCBjaGlsZCBtYXBzLlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAZmluYWxcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3VwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbihuZXh0TmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgIHZhciBuZXh0Q2hpbGRyZW4gPSBSZWFjdENoaWxkUmVjb25jaWxlci51cGRhdGVDaGlsZHJlbihcbiAgICAgICAgcHJldkNoaWxkcmVuLCBuZXh0TmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0XG4gICAgICApO1xuICAgICAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IG5leHRDaGlsZHJlbjtcbiAgICAgIGlmICghbmV4dENoaWxkcmVuICYmICFwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5hbWU7XG4gICAgICAvLyBgbmV4dEluZGV4YCB3aWxsIGluY3JlbWVudCBmb3IgZWFjaCBjaGlsZCBpbiBgbmV4dENoaWxkcmVuYCwgYnV0XG4gICAgICAvLyBgbGFzdEluZGV4YCB3aWxsIGJlIHRoZSBsYXN0IGluZGV4IHZpc2l0ZWQgaW4gYHByZXZDaGlsZHJlbmAuXG4gICAgICB2YXIgbGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSAwO1xuICAgICAgZm9yIChuYW1lIGluIG5leHRDaGlsZHJlbikge1xuICAgICAgICBpZiAoIW5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRyZW4gJiYgcHJldkNoaWxkcmVuW25hbWVdO1xuICAgICAgICB2YXIgbmV4dENoaWxkID0gbmV4dENoaWxkcmVuW25hbWVdO1xuICAgICAgICBpZiAocHJldkNoaWxkID09PSBuZXh0Q2hpbGQpIHtcbiAgICAgICAgICB0aGlzLm1vdmVDaGlsZChwcmV2Q2hpbGQsIG5leHRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICBsYXN0SW5kZXggPSBNYXRoLm1heChwcmV2Q2hpbGQuX21vdW50SW5kZXgsIGxhc3RJbmRleCk7XG4gICAgICAgICAgcHJldkNoaWxkLl9tb3VudEluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwcmV2Q2hpbGQpIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBgbGFzdEluZGV4YCBiZWZvcmUgYF9tb3VudEluZGV4YCBnZXRzIHVuc2V0IGJ5IHVubW91bnRpbmcuXG4gICAgICAgICAgICBsYXN0SW5kZXggPSBNYXRoLm1heChwcmV2Q2hpbGQuX21vdW50SW5kZXgsIGxhc3RJbmRleCk7XG4gICAgICAgICAgICB0aGlzLl91bm1vdW50Q2hpbGRCeU5hbWUocHJldkNoaWxkLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVGhlIGNoaWxkIG11c3QgYmUgaW5zdGFudGlhdGVkIGJlZm9yZSBpdCdzIG1vdW50ZWQuXG4gICAgICAgICAgdGhpcy5fbW91bnRDaGlsZEJ5TmFtZUF0SW5kZXgoXG4gICAgICAgICAgICBuZXh0Q2hpbGQsIG5hbWUsIG5leHRJbmRleCwgdHJhbnNhY3Rpb24sIGNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIG5leHRJbmRleCsrO1xuICAgICAgfVxuICAgICAgLy8gUmVtb3ZlIGNoaWxkcmVuIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50LlxuICAgICAgZm9yIChuYW1lIGluIHByZXZDaGlsZHJlbikge1xuICAgICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpICYmXG4gICAgICAgICAgICAhKG5leHRDaGlsZHJlbiAmJiBuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpKSB7XG4gICAgICAgICAgdGhpcy5fdW5tb3VudENoaWxkQnlOYW1lKHByZXZDaGlsZHJlbltuYW1lXSwgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5tb3VudHMgYWxsIHJlbmRlcmVkIGNoaWxkcmVuLiBUaGlzIHNob3VsZCBiZSB1c2VkIHRvIGNsZWFuIHVwIGNoaWxkcmVuXG4gICAgICogd2hlbiB0aGlzIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1bm1vdW50Q2hpbGRyZW46IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHJlbmRlcmVkQ2hpbGRyZW4pO1xuICAgICAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGEgY2hpbGQgY29tcG9uZW50IHRvIHRoZSBzdXBwbGllZCBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBtb3ZlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4IG9mIHRoZSBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsYXN0SW5kZXggTGFzdCBpbmRleCB2aXNpdGVkIG9mIHRoZSBzaWJsaW5ncyBvZiBgY2hpbGRgLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBtb3ZlQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkLCB0b0luZGV4LCBsYXN0SW5kZXgpIHtcbiAgICAgIC8vIElmIHRoZSBpbmRleCBvZiBgY2hpbGRgIGlzIGxlc3MgdGhhbiBgbGFzdEluZGV4YCwgdGhlbiBpdCBuZWVkcyB0b1xuICAgICAgLy8gYmUgbW92ZWQuIE90aGVyd2lzZSwgd2UgZG8gbm90IG5lZWQgdG8gbW92ZSBpdCBiZWNhdXNlIGEgY2hpbGQgd2lsbCBiZVxuICAgICAgLy8gaW5zZXJ0ZWQgb3IgbW92ZWQgYmVmb3JlIGBjaGlsZGAuXG4gICAgICBpZiAoY2hpbGQuX21vdW50SW5kZXggPCBsYXN0SW5kZXgpIHtcbiAgICAgICAgZW5xdWV1ZU1vdmUodGhpcy5fcm9vdE5vZGVJRCwgY2hpbGQuX21vdW50SW5kZXgsIHRvSW5kZXgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2hpbGQgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIGNyZWF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW91bnRJbWFnZSBNYXJrdXAgdG8gaW5zZXJ0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBjcmVhdGVDaGlsZDogZnVuY3Rpb24oY2hpbGQsIG1vdW50SW1hZ2UpIHtcbiAgICAgIGVucXVldWVNYXJrdXAodGhpcy5fcm9vdE5vZGVJRCwgbW91bnRJbWFnZSwgY2hpbGQuX21vdW50SW5kZXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgY2hpbGQgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ2hpbGQgdG8gcmVtb3ZlLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICByZW1vdmVDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIGVucXVldWVSZW1vdmUodGhpcy5fcm9vdE5vZGVJRCwgY2hpbGQuX21vdW50SW5kZXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoaXMgdGV4dCBjb250ZW50IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0Q29udGVudCBUZXh0IGNvbnRlbnQgdG8gc2V0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBzZXRUZXh0Q29udGVudDogZnVuY3Rpb24odGV4dENvbnRlbnQpIHtcbiAgICAgIGVucXVldWVUZXh0Q29udGVudCh0aGlzLl9yb290Tm9kZUlELCB0ZXh0Q29udGVudCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdW50cyBhIGNoaWxkIHdpdGggdGhlIHN1cHBsaWVkIG5hbWUuXG4gICAgICpcbiAgICAgKiBOT1RFOiBUaGlzIGlzIHBhcnQgb2YgYHVwZGF0ZUNoaWxkcmVuYCBhbmQgaXMgaGVyZSBmb3IgcmVhZGFiaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gbW91bnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgY2hpbGQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGF0IHdoaWNoIHRvIGluc2VydCB0aGUgY2hpbGQuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX21vdW50Q2hpbGRCeU5hbWVBdEluZGV4OiBmdW5jdGlvbihcbiAgICAgIGNoaWxkLFxuICAgICAgbmFtZSxcbiAgICAgIGluZGV4LFxuICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICBjb250ZXh0KSB7XG4gICAgICAvLyBJbmxpbmVkIGZvciBwZXJmb3JtYW5jZSwgc2VlIGBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdElEYC5cbiAgICAgIHZhciByb290SUQgPSB0aGlzLl9yb290Tm9kZUlEICsgbmFtZTtcbiAgICAgIHZhciBtb3VudEltYWdlID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgcm9vdElELFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gaW5kZXg7XG4gICAgICB0aGlzLmNyZWF0ZUNoaWxkKGNoaWxkLCBtb3VudEltYWdlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5tb3VudHMgYSByZW5kZXJlZCBjaGlsZCBieSBuYW1lLlxuICAgICAqXG4gICAgICogTk9URTogVGhpcyBpcyBwYXJ0IG9mIGB1cGRhdGVDaGlsZHJlbmAgYW5kIGlzIGhlcmUgZm9yIHJlYWRhYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIHVubW91bnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgY2hpbGQgaW4gYHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW5gLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VubW91bnRDaGlsZEJ5TmFtZTogZnVuY3Rpb24oY2hpbGQsIG5hbWUpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBudWxsO1xuICAgIH1cblxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RNdWx0aUNoaWxkO1xuXG59LHtcIi4vUmVhY3RDaGlsZFJlY29uY2lsZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q2hpbGRSZWNvbmNpbGVyLmpzXCIsXCIuL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQuanNcIixcIi4vUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLmpzXCIsXCIuL1JlYWN0UmVjb25jaWxlclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSZWNvbmNpbGVyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZShcIi4va2V5TWlycm9yXCIpO1xuXG4vKipcbiAqIFdoZW4gYSBjb21wb25lbnQncyBjaGlsZHJlbiBhcmUgdXBkYXRlZCwgYSBzZXJpZXMgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25cbiAqIG9iamVjdHMgYXJlIGNyZWF0ZWQgaW4gb3JkZXIgdG8gYmF0Y2ggYW5kIHNlcmlhbGl6ZSB0aGUgcmVxdWlyZWQgY2hhbmdlcy5cbiAqXG4gKiBFbnVtZXJhdGVzIGFsbCB0aGUgcG9zc2libGUgdHlwZXMgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSBrZXlNaXJyb3Ioe1xuICBJTlNFUlRfTUFSS1VQOiBudWxsLFxuICBNT1ZFX0VYSVNUSU5HOiBudWxsLFxuICBSRU1PVkVfTk9ERTogbnVsbCxcbiAgVEVYVF9DT05URU5UOiBudWxsXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcztcblxufSx7XCIuL2tleU1pcnJvclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIva2V5TWlycm9yLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TmF0aXZlQ29tcG9uZW50LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE5hdGl2ZUNvbXBvbmVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgYXV0b0dlbmVyYXRlV3JhcHBlckNsYXNzID0gbnVsbDtcbnZhciBnZW5lcmljQ29tcG9uZW50Q2xhc3MgPSBudWxsO1xuLy8gVGhpcyByZWdpc3RyeSBrZWVwcyB0cmFjayBvZiB3cmFwcGVyIGNsYXNzZXMgYXJvdW5kIG5hdGl2ZSB0YWdzXG52YXIgdGFnVG9Db21wb25lbnRDbGFzcyA9IHt9O1xudmFyIHRleHRDb21wb25lbnRDbGFzcyA9IG51bGw7XG5cbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvbiA9IHtcbiAgLy8gVGhpcyBhY2NlcHRzIGEgY2xhc3MgdGhhdCByZWNlaXZlcyB0aGUgdGFnIHN0cmluZy4gVGhpcyBpcyBhIGNhdGNoIGFsbFxuICAvLyB0aGF0IGNhbiByZW5kZXIgYW55IGtpbmQgb2YgdGFnLlxuICBpbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3M6IGZ1bmN0aW9uKGNvbXBvbmVudENsYXNzKSB7XG4gICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gY29tcG9uZW50Q2xhc3M7XG4gIH0sXG4gIC8vIFRoaXMgYWNjZXB0cyBhIHRleHQgY29tcG9uZW50IGNsYXNzIHRoYXQgdGFrZXMgdGhlIHRleHQgc3RyaW5nIHRvIGJlXG4gIC8vIHJlbmRlcmVkIGFzIHByb3BzLlxuICBpbmplY3RUZXh0Q29tcG9uZW50Q2xhc3M6IGZ1bmN0aW9uKGNvbXBvbmVudENsYXNzKSB7XG4gICAgdGV4dENvbXBvbmVudENsYXNzID0gY29tcG9uZW50Q2xhc3M7XG4gIH0sXG4gIC8vIFRoaXMgYWNjZXB0cyBhIGtleWVkIG9iamVjdCB3aXRoIGNsYXNzZXMgYXMgdmFsdWVzLiBFYWNoIGtleSByZXByZXNlbnRzIGFcbiAgLy8gdGFnLiBUaGF0IHBhcnRpY3VsYXIgdGFnIHdpbGwgdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiB0aGUgZ2VuZXJpYyBvbmUuXG4gIGluamVjdENvbXBvbmVudENsYXNzZXM6IGZ1bmN0aW9uKGNvbXBvbmVudENsYXNzZXMpIHtcbiAgICBhc3NpZ24odGFnVG9Db21wb25lbnRDbGFzcywgY29tcG9uZW50Q2xhc3Nlcyk7XG4gIH0sXG4gIC8vIFRlbXBvcmFyeSBoYWNrIHNpbmNlIHdlIGV4cGVjdCBET00gcmVmcyB0byBiZWhhdmUgbGlrZSBjb21wb3NpdGVzLFxuICAvLyBmb3IgdGhpcyByZWxlYXNlLlxuICBpbmplY3RBdXRvV3JhcHBlcjogZnVuY3Rpb24od3JhcHBlckZhY3RvcnkpIHtcbiAgICBhdXRvR2VuZXJhdGVXcmFwcGVyQ2xhc3MgPSB3cmFwcGVyRmFjdG9yeTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgYSBjb21wb3NpdGUgY29tcG9uZW50IHdyYXBwZXIgY2xhc3MgZm9yIGEgc3BlY2lmaWMgdGFnLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IFRoZSB0YWcgZm9yIHdoaWNoIHRvIGdldCB0aGUgY2xhc3MuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIFJlYWN0IGNsYXNzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQoZWxlbWVudCkge1xuICBpZiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbGVtZW50LnR5cGU7XG4gIH1cbiAgdmFyIHRhZyA9IGVsZW1lbnQudHlwZTtcbiAgdmFyIGNvbXBvbmVudENsYXNzID0gdGFnVG9Db21wb25lbnRDbGFzc1t0YWddO1xuICBpZiAoY29tcG9uZW50Q2xhc3MgPT0gbnVsbCkge1xuICAgIHRhZ1RvQ29tcG9uZW50Q2xhc3NbdGFnXSA9IGNvbXBvbmVudENsYXNzID0gYXV0b0dlbmVyYXRlV3JhcHBlckNsYXNzKHRhZyk7XG4gIH1cbiAgcmV0dXJuIGNvbXBvbmVudENsYXNzO1xufVxuXG4vKipcbiAqIEdldCBhIG5hdGl2ZSBpbnRlcm5hbCBjb21wb25lbnQgY2xhc3MgZm9yIGEgc3BlY2lmaWMgdGFnLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGNyZWF0ZS5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgaW50ZXJuYWwgY2xhc3MgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUludGVybmFsQ29tcG9uZW50KGVsZW1lbnQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBnZW5lcmljQ29tcG9uZW50Q2xhc3MsXG4gICAgJ1RoZXJlIGlzIG5vIHJlZ2lzdGVyZWQgY29tcG9uZW50IGZvciB0aGUgdGFnICVzJyxcbiAgICBlbGVtZW50LnR5cGVcbiAgKSA6IGludmFyaWFudChnZW5lcmljQ29tcG9uZW50Q2xhc3MpKTtcbiAgcmV0dXJuIG5ldyBnZW5lcmljQ29tcG9uZW50Q2xhc3MoZWxlbWVudC50eXBlLCBlbGVtZW50LnByb3BzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0VGV4dH0gdGV4dFxuICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlRm9yVGV4dCh0ZXh0KSB7XG4gIHJldHVybiBuZXcgdGV4dENvbXBvbmVudENsYXNzKHRleHQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Q29tcG9uZW50KGNvbXBvbmVudCkge1xuICByZXR1cm4gY29tcG9uZW50IGluc3RhbmNlb2YgdGV4dENvbXBvbmVudENsYXNzO1xufVxuXG52YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSB7XG4gIGdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudDogZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50LFxuICBjcmVhdGVJbnRlcm5hbENvbXBvbmVudDogY3JlYXRlSW50ZXJuYWxDb21wb25lbnQsXG4gIGNyZWF0ZUluc3RhbmNlRm9yVGV4dDogY3JlYXRlSW5zdGFuY2VGb3JUZXh0LFxuICBpc1RleHRDb21wb25lbnQ6IGlzVGV4dENvbXBvbmVudCxcbiAgaW5qZWN0aW9uOiBSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1wiLFwiLi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0T3duZXIuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0T3duZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogUmVhY3RPd25lcnMgYXJlIGNhcGFibGUgb2Ygc3RvcmluZyByZWZlcmVuY2VzIHRvIG93bmVkIGNvbXBvbmVudHMuXG4gKlxuICogQWxsIGNvbXBvbmVudHMgYXJlIGNhcGFibGUgb2YgLy9iZWluZy8vIHJlZmVyZW5jZWQgYnkgb3duZXIgY29tcG9uZW50cywgYnV0XG4gKiBvbmx5IFJlYWN0T3duZXIgY29tcG9uZW50cyBhcmUgY2FwYWJsZSBvZiAvL3JlZmVyZW5jaW5nLy8gb3duZWQgY29tcG9uZW50cy5cbiAqIFRoZSBuYW1lZCByZWZlcmVuY2UgaXMga25vd24gYXMgYSBcInJlZlwiLlxuICpcbiAqIFJlZnMgYXJlIGF2YWlsYWJsZSB3aGVuIG1vdW50ZWQgYW5kIHVwZGF0ZWQgZHVyaW5nIHJlY29uY2lsaWF0aW9uLlxuICpcbiAqICAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gKiAgICAgICByZXR1cm4gKFxuICogICAgICAgICA8ZGl2IG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9PlxuICogICAgICAgICAgIDxDdXN0b21Db21wb25lbnQgcmVmPVwiY3VzdG9tXCIgLz5cbiAqICAgICAgICAgPC9kaXY+XG4gKiAgICAgICApO1xuICogICAgIH0sXG4gKiAgICAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uKCkge1xuICogICAgICAgdGhpcy5yZWZzLmN1c3RvbS5oYW5kbGVDbGljaygpO1xuICogICAgIH0sXG4gKiAgICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICogICAgICAgdGhpcy5yZWZzLmN1c3RvbS5pbml0aWFsaXplKCk7XG4gKiAgICAgfVxuICogICB9KTtcbiAqXG4gKiBSZWZzIHNob3VsZCByYXJlbHkgYmUgdXNlZC4gV2hlbiByZWZzIGFyZSB1c2VkLCB0aGV5IHNob3VsZCBvbmx5IGJlIGRvbmUgdG9cbiAqIGNvbnRyb2wgZGF0YSB0aGF0IGlzIG5vdCBoYW5kbGVkIGJ5IFJlYWN0J3MgZGF0YSBmbG93LlxuICpcbiAqIEBjbGFzcyBSZWFjdE93bmVyXG4gKi9cbnZhciBSZWFjdE93bmVyID0ge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvYmplY3RgIGlzIGEgdmFsaWQgb3duZXIuXG4gICAqIEBmaW5hbFxuICAgKi9cbiAgaXNWYWxpZE93bmVyOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gISEoXG4gICAgICAob2JqZWN0ICYmXG4gICAgICB0eXBlb2Ygb2JqZWN0LmF0dGFjaFJlZiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqZWN0LmRldGFjaFJlZiA9PT0gJ2Z1bmN0aW9uJylcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY29tcG9uZW50IGJ5IHJlZiB0byBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gcmVmZXJlbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgYnkgd2hpY2ggdG8gcmVmZXIgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdG8gcmVjb3JkIHRoZSByZWYuXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFkZENvbXBvbmVudEFzUmVmVG86IGZ1bmN0aW9uKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBSZWFjdE93bmVyLmlzVmFsaWRPd25lcihvd25lciksXG4gICAgICAnYWRkQ29tcG9uZW50QXNSZWZUbyguLi4pOiBPbmx5IGEgUmVhY3RPd25lciBjYW4gaGF2ZSByZWZzLiBUaGlzICcgK1xuICAgICAgJ3VzdWFsbHkgbWVhbnMgdGhhdCB5b3VcXCdyZSB0cnlpbmcgdG8gYWRkIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgJyArXG4gICAgICAnZG9lc25cXCd0IGhhdmUgYW4gb3duZXIgKHRoYXQgaXMsIHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgb2YgYW5vdGhlciAnICtcbiAgICAgICdjb21wb25lbnRcXCdzIGByZW5kZXJgIG1ldGhvZCkuIFRyeSByZW5kZXJpbmcgdGhpcyBjb21wb25lbnQgaW5zaWRlIG9mICcgK1xuICAgICAgJ2EgbmV3IHRvcC1sZXZlbCBjb21wb25lbnQgd2hpY2ggd2lsbCBob2xkIHRoZSByZWYuJ1xuICAgICkgOiBpbnZhcmlhbnQoUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpKSk7XG4gICAgb3duZXIuYXR0YWNoUmVmKHJlZiwgY29tcG9uZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNvbXBvbmVudCBieSByZWYgZnJvbSBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gZGVyZWZlcmVuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSBvZiB0aGUgcmVmIHRvIHJlbW92ZS5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdGhlIHJlZiBpcyByZWNvcmRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tOiBmdW5jdGlvbihjb21wb25lbnQsIHJlZiwgb3duZXIpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpLFxuICAgICAgJ3JlbW92ZUNvbXBvbmVudEFzUmVmRnJvbSguLi4pOiBPbmx5IGEgUmVhY3RPd25lciBjYW4gaGF2ZSByZWZzLiBUaGlzICcgK1xuICAgICAgJ3VzdWFsbHkgbWVhbnMgdGhhdCB5b3VcXCdyZSB0cnlpbmcgdG8gcmVtb3ZlIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgJyArXG4gICAgICAnZG9lc25cXCd0IGhhdmUgYW4gb3duZXIgKHRoYXQgaXMsIHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgb2YgYW5vdGhlciAnICtcbiAgICAgICdjb21wb25lbnRcXCdzIGByZW5kZXJgIG1ldGhvZCkuIFRyeSByZW5kZXJpbmcgdGhpcyBjb21wb25lbnQgaW5zaWRlIG9mICcgK1xuICAgICAgJ2EgbmV3IHRvcC1sZXZlbCBjb21wb25lbnQgd2hpY2ggd2lsbCBob2xkIHRoZSByZWYuJ1xuICAgICkgOiBpbnZhcmlhbnQoUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpKSk7XG4gICAgLy8gQ2hlY2sgdGhhdCBgY29tcG9uZW50YCBpcyBzdGlsbCB0aGUgY3VycmVudCByZWYgYmVjYXVzZSB3ZSBkbyBub3Qgd2FudCB0b1xuICAgIC8vIGRldGFjaCB0aGUgcmVmIGlmIGFub3RoZXIgY29tcG9uZW50IHN0b2xlIGl0LlxuICAgIGlmIChvd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLnJlZnNbcmVmXSA9PT0gY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCkpIHtcbiAgICAgIG93bmVyLmRldGFjaFJlZihyZWYpO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0T3duZXI7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQZXJmLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFBlcmZcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFJlYWN0UGVyZiBpcyBhIGdlbmVyYWwgQU9QIHN5c3RlbSBkZXNpZ25lZCB0byBtZWFzdXJlIHBlcmZvcm1hbmNlLiBUaGlzXG4gKiBtb2R1bGUgb25seSBoYXMgdGhlIGhvb2tzOiBzZWUgUmVhY3REZWZhdWx0UGVyZiBmb3IgdGhlIGFuYWx5c2lzIHRvb2wuXG4gKi9cbnZhciBSZWFjdFBlcmYgPSB7XG4gIC8qKlxuICAgKiBCb29sZWFuIHRvIGVuYWJsZS9kaXNhYmxlIG1lYXN1cmVtZW50LiBTZXQgdG8gZmFsc2UgYnkgZGVmYXVsdCB0byBwcmV2ZW50XG4gICAqIGFjY2lkZW50YWwgbG9nZ2luZyBhbmQgcGVyZiBsb3NzLlxuICAgKi9cbiAgZW5hYmxlTWVhc3VyZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEhvbGRzIG9udG8gdGhlIG1lYXN1cmUgZnVuY3Rpb24gaW4gdXNlLiBCeSBkZWZhdWx0LCBkb24ndCBtZWFzdXJlXG4gICAqIGFueXRoaW5nLCBidXQgd2UnbGwgb3ZlcnJpZGUgdGhpcyBpZiB3ZSBpbmplY3QgYSBtZWFzdXJlIGZ1bmN0aW9uLlxuICAgKi9cbiAgc3RvcmVkTWVhc3VyZTogX25vTWVhc3VyZSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gb2JqZWN0TmFtZVxuICAgKiBAcGFyYW0ge29iamVjdDxzdHJpbmc+fSBtZXRob2ROYW1lc1xuICAgKi9cbiAgbWVhc3VyZU1ldGhvZHM6IGZ1bmN0aW9uKG9iamVjdCwgb2JqZWN0TmFtZSwgbWV0aG9kTmFtZXMpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kTmFtZXMpIHtcbiAgICAgICAgaWYgKCFtZXRob2ROYW1lcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0W2tleV0gPSBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAgICAgICBvYmplY3ROYW1lLFxuICAgICAgICAgIG1ldGhvZE5hbWVzW2tleV0sXG4gICAgICAgICAgb2JqZWN0W2tleV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVzZSB0aGlzIHRvIHdyYXAgbWV0aG9kcyB5b3Ugd2FudCB0byBtZWFzdXJlLiBaZXJvIG92ZXJoZWFkIGluIHByb2R1Y3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmpOYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbk5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY1xuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICovXG4gIG1lYXN1cmU6IGZ1bmN0aW9uKG9iak5hbWUsIGZuTmFtZSwgZnVuYykge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHZhciBtZWFzdXJlZEZ1bmMgPSBudWxsO1xuICAgICAgdmFyIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKFJlYWN0UGVyZi5lbmFibGVNZWFzdXJlKSB7XG4gICAgICAgICAgaWYgKCFtZWFzdXJlZEZ1bmMpIHtcbiAgICAgICAgICAgIG1lYXN1cmVkRnVuYyA9IFJlYWN0UGVyZi5zdG9yZWRNZWFzdXJlKG9iak5hbWUsIGZuTmFtZSwgZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtZWFzdXJlZEZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIHdyYXBwZXIuZGlzcGxheU5hbWUgPSBvYmpOYW1lICsgJ18nICsgZm5OYW1lO1xuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuICAgIHJldHVybiBmdW5jO1xuICB9LFxuXG4gIGluamVjdGlvbjoge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1lYXN1cmVcbiAgICAgKi9cbiAgICBpbmplY3RNZWFzdXJlOiBmdW5jdGlvbihtZWFzdXJlKSB7XG4gICAgICBSZWFjdFBlcmYuc3RvcmVkTWVhc3VyZSA9IG1lYXN1cmU7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFNpbXBseSBwYXNzZXMgdGhyb3VnaCB0aGUgbWVhc3VyZWQgZnVuY3Rpb24sIHdpdGhvdXQgbWVhc3VyaW5nIGl0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvYmpOYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gZm5OYW1lXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gX25vTWVhc3VyZShvYmpOYW1lLCBmbk5hbWUsIGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQZXJmO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0ge307XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7XG4gICAgcHJvcDogJ3Byb3AnLFxuICAgIGNvbnRleHQ6ICdjb250ZXh0JyxcbiAgICBjaGlsZENvbnRleHQ6ICdjaGlsZCBjb250ZXh0J1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnMuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQcm9wVHlwZUxvY2F0aW9uc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoXCIuL2tleU1pcnJvclwiKTtcblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSBrZXlNaXJyb3Ioe1xuICBwcm9wOiBudWxsLFxuICBjb250ZXh0OiBudWxsLFxuICBjaGlsZENvbnRleHQ6IG51bGxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbnM7XG5cbn0se1wiLi9rZXlNaXJyb3JcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2tleU1pcnJvci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlcy5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFByb3BUeXBlc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEZyYWdtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RGcmFnbWVudFwiKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXCIpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG5cbi8qKlxuICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAqIHN1cHBsaWVkIHRvIFJlYWN0IGNvbXBvbmVudHMuIEV4YW1wbGUgdXNhZ2U6XG4gKlxuICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICogICB2YXIgTXlBcnRpY2xlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHByb3BUeXBlczoge1xuICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICogICAgICAgZGVzY3JpcHRpb246IFByb3BzLnN0cmluZyxcbiAqXG4gKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gKiAgICAgICBjYXRlZ29yeTogUHJvcHMub25lT2YoWydOZXdzJywnUGhvdG9zJ10pLmlzUmVxdWlyZWQsXG4gKlxuICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gKiAgICAgICBkaWFsb2c6IFByb3BzLmluc3RhbmNlT2YoRGlhbG9nKS5pc1JlcXVpcmVkXG4gKiAgICAgfSxcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICogICB9KTtcbiAqXG4gKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gKlxuICogICB0eXBlIDo9IGFycmF5fGJvb2x8ZnVuY3xvYmplY3R8bnVtYmVyfHN0cmluZ3xvbmVPZihbLi4uXSl8aW5zdGFuY2VPZiguLi4pXG4gKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAqXG4gKiBFYWNoIGFuZCBldmVyeSBkZWNsYXJhdGlvbiBwcm9kdWNlcyBhIGZ1bmN0aW9uIHdpdGggdGhlIHNhbWUgc2lnbmF0dXJlLiBUaGlzXG4gKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gKlxuICogIHZhciBNeUxpbmsgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICBwcm9wVHlwZXM6IHtcbiAqICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIG9yIFVSSSBwcm9wIG5hbWVkIFwiaHJlZlwiLlxuICogICAgICBocmVmOiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICogICAgICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlICE9PSAnc3RyaW5nJyAmJlxuICogICAgICAgICAgICAhKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFVSSSkpIHtcbiAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gKiAgICAgICAgICAgICdFeHBlY3RlZCBhIHN0cmluZyBvciBhbiBVUkkgZm9yICcgKyBwcm9wTmFtZSArICcgaW4gJyArXG4gKiAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAqICAgICAgICAgICk7XG4gKiAgICAgICAgfVxuICogICAgICB9XG4gKiAgICB9LFxuICogICAgcmVuZGVyOiBmdW5jdGlvbigpIHsuLi59XG4gKiAgfSk7XG4gKlxuICogQGludGVybmFsXG4gKi9cblxudmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxudmFyIGVsZW1lbnRUeXBlQ2hlY2tlciA9IGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpO1xudmFyIG5vZGVUeXBlQ2hlY2tlciA9IGNyZWF0ZU5vZGVDaGVja2VyKCk7XG5cbnZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgYXJyYXk6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdhcnJheScpLFxuICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICBmdW5jOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignZnVuY3Rpb24nKSxcbiAgbnVtYmVyOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignbnVtYmVyJyksXG4gIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICBzdHJpbmc6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzdHJpbmcnKSxcblxuICBhbnk6IGNyZWF0ZUFueVR5cGVDaGVja2VyKCksXG4gIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgZWxlbWVudDogZWxlbWVudFR5cGVDaGVja2VyLFxuICBpbnN0YW5jZU9mOiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyLFxuICBub2RlOiBub2RlVHlwZUNoZWNrZXIsXG4gIG9iamVjdE9mOiBjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyLFxuICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICBvbmVPZlR5cGU6IGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIsXG4gIHNoYXBlOiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSkge1xuICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IEFOT05ZTU9VUztcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAgIChcIlJlcXVpcmVkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgd2FzIG5vdCBzcGVjaWZpZWQgaW4gXCIpICtcbiAgICAgICAgICAoXCJgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLlwiKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY2hhaW5lZENoZWNrVHlwZSA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIGZhbHNlKTtcbiAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG5cbiAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKGV4cGVjdGVkVHlwZSkge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgIGlmIChwcm9wVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgLy8gYHByb3BWYWx1ZWAgYmVpbmcgaW5zdGFuY2Ugb2YsIHNheSwgZGF0ZS9yZWdleHAsIHBhc3MgdGhlICdvYmplY3QnXG4gICAgICAvLyBjaGVjaywgYnV0IHdlIGNhbiBvZmZlciBhIG1vcmUgcHJlY2lzZSBlcnJvciBtZXNzYWdlIGhlcmUgcmF0aGVyIHRoYW5cbiAgICAgIC8vICdvZiB0eXBlIGBvYmplY3RgJy5cbiAgICAgIHZhciBwcmVjaXNlVHlwZSA9IGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSk7XG5cbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBvZiB0eXBlIGBcIiArIHByZWNpc2VUeXBlICsgXCJgIFwiKSArXG4gICAgICAgIChcInN1cHBsaWVkIHRvIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGBcIiArIGV4cGVjdGVkVHlwZSArIFwiYC5cIilcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCkge1xuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyhudWxsKSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgb2YgdHlwZSBcIikgK1xuICAgICAgICAoXCJgXCIgKyBwcm9wVHlwZSArIFwiYCBzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBhbiBhcnJheS5cIilcbiAgICAgICk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgaWYgKCFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBzdXBwbGllZCB0byBcIikgK1xuICAgICAgICAoXCJgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBhIFJlYWN0RWxlbWVudC5cIilcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgaWYgKCEocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICB2YXIgZXhwZWN0ZWRDbGFzc05hbWUgPSBleHBlY3RlZENsYXNzLm5hbWUgfHwgQU5PTllNT1VTO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIHN1cHBsaWVkIHRvIFwiKSArXG4gICAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGluc3RhbmNlIG9mIGBcIiArIGV4cGVjdGVkQ2xhc3NOYW1lICsgXCJgLlwiKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRW51bVR5cGVDaGVja2VyKGV4cGVjdGVkVmFsdWVzKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwcm9wVmFsdWUgPT09IGV4cGVjdGVkVmFsdWVzW2ldKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgdmFyIHZhbHVlc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGV4cGVjdGVkVmFsdWVzKTtcbiAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHZhbHVlIGBcIiArIHByb3BWYWx1ZSArIFwiYCBcIikgK1xuICAgICAgKFwic3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgb25lIG9mIFwiICsgdmFsdWVzU3RyaW5nICsgXCIuXCIpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBvZiB0eXBlIFwiKSArXG4gICAgICAgIChcImBcIiArIHByb3BUeXBlICsgXCJgIHN1cHBsaWVkIHRvIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGFuIG9iamVjdC5cIilcbiAgICAgICk7XG4gICAgfVxuICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcbiAgICAgIGlmIChwcm9wVmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVbmlvblR5cGVDaGVja2VyKGFycmF5T2ZUeXBlQ2hlY2tlcnMpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoZWNrZXIgPSBhcnJheU9mVHlwZUNoZWNrZXJzW2ldO1xuICAgICAgaWYgKGNoZWNrZXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgc3VwcGxpZWQgdG8gXCIpICtcbiAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAuXCIpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOb2RlQ2hlY2tlcigpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIGlmICghaXNOb2RlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgc3VwcGxpZWQgdG8gXCIpICtcbiAgICAgICAgKFwiYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuXCIpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXMpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgcHJvcFR5cGUgKyBcImAgXCIpICtcbiAgICAgICAgKFwic3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYG9iamVjdGAuXCIpXG4gICAgICApO1xuICAgIH1cbiAgICBmb3IgKHZhciBrZXkgaW4gc2hhcGVUeXBlcykge1xuICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICBpZiAoIWNoZWNrZXIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgZXJyb3IgPSBjaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gIHN3aXRjaCAodHlwZW9mIHByb3BWYWx1ZSkge1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gIXByb3BWYWx1ZTtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gcHJvcFZhbHVlLmV2ZXJ5KGlzTm9kZSk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcFZhbHVlID09PSBudWxsIHx8IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcHJvcFZhbHVlID0gUmVhY3RGcmFnbWVudC5leHRyYWN0SWZGcmFnbWVudChwcm9wVmFsdWUpO1xuICAgICAgZm9yICh2YXIgayBpbiBwcm9wVmFsdWUpIHtcbiAgICAgICAgaWYgKCFpc05vZGUocHJvcFZhbHVlW2tdKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBFcXVpdmFsZW50IG9mIGB0eXBlb2ZgIGJ1dCB3aXRoIHNwZWNpYWwgaGFuZGxpbmcgZm9yIGFycmF5IGFuZCByZWdleHAuXG5mdW5jdGlvbiBnZXRQcm9wVHlwZShwcm9wVmFsdWUpIHtcbiAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIHJldHVybiAnYXJyYXknO1xuICB9XG4gIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAvLyBPbGQgd2Via2l0cyAoYXQgbGVhc3QgdW50aWwgQW5kcm9pZCA0LjApIHJldHVybiAnZnVuY3Rpb24nIHJhdGhlciB0aGFuXG4gICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4gICAgLy8gcGFzc2VzIFByb3BUeXBlcy5vYmplY3QuXG4gICAgcmV0dXJuICdvYmplY3QnO1xuICB9XG4gIHJldHVybiBwcm9wVHlwZTtcbn1cblxuLy8gVGhpcyBoYW5kbGVzIG1vcmUgdHlwZXMgdGhhbiBgZ2V0UHJvcFR5cGVgLiBPbmx5IHVzZWQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuLy8gU2VlIGBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcmAuXG5mdW5jdGlvbiBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpIHtcbiAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgaWYgKHByb3BUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICByZXR1cm4gJ2RhdGUnO1xuICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gJ3JlZ2V4cCc7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9wVHlwZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlcztcblxufSx7XCIuL1JlYWN0RWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCIsXCIuL1JlYWN0RnJhZ21lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RnJhZ21lbnQuanNcIixcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzLmpzXCIsXCIuL2VtcHR5RnVuY3Rpb25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2VtcHR5RnVuY3Rpb24uanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQdXRMaXN0ZW5lclF1ZXVlLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxuZnVuY3Rpb24gUmVhY3RQdXRMaXN0ZW5lclF1ZXVlKCkge1xuICB0aGlzLmxpc3RlbmVyc1RvUHV0ID0gW107XG59XG5cbmFzc2lnbihSZWFjdFB1dExpc3RlbmVyUXVldWUucHJvdG90eXBlLCB7XG4gIGVucXVldWVQdXRMaXN0ZW5lcjogZnVuY3Rpb24ocm9vdE5vZGVJRCwgcHJvcEtleSwgcHJvcFZhbHVlKSB7XG4gICAgdGhpcy5saXN0ZW5lcnNUb1B1dC5wdXNoKHtcbiAgICAgIHJvb3ROb2RlSUQ6IHJvb3ROb2RlSUQsXG4gICAgICBwcm9wS2V5OiBwcm9wS2V5LFxuICAgICAgcHJvcFZhbHVlOiBwcm9wVmFsdWVcbiAgICB9KTtcbiAgfSxcblxuICBwdXRMaXN0ZW5lcnM6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5saXN0ZW5lcnNUb1B1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyVG9QdXQgPSB0aGlzLmxpc3RlbmVyc1RvUHV0W2ldO1xuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnB1dExpc3RlbmVyKFxuICAgICAgICBsaXN0ZW5lclRvUHV0LnJvb3ROb2RlSUQsXG4gICAgICAgIGxpc3RlbmVyVG9QdXQucHJvcEtleSxcbiAgICAgICAgbGlzdGVuZXJUb1B1dC5wcm9wVmFsdWVcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmxpc3RlbmVyc1RvUHV0Lmxlbmd0aCA9IDA7XG4gIH0sXG5cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG59KTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFJlYWN0UHV0TGlzdGVuZXJRdWV1ZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQdXRMaXN0ZW5lclF1ZXVlO1xuXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1wiLFwiLi9Qb29sZWRDbGFzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUG9vbGVkQ2xhc3MuanNcIixcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENhbGxiYWNrUXVldWUgPSByZXF1aXJlKFwiLi9DYWxsYmFja1F1ZXVlXCIpO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlYWN0SW5wdXRTZWxlY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdElucHV0U2VsZWN0aW9uXCIpO1xudmFyIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZSA9IHJlcXVpcmUoXCIuL1JlYWN0UHV0TGlzdGVuZXJRdWV1ZVwiKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuL1RyYW5zYWN0aW9uXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQsIHdoZW4gcG9zc2libGUsIHRoZSBzZWxlY3Rpb24gcmFuZ2UgKGN1cnJlbnRseSBzZWxlY3RlZCB0ZXh0XG4gKiBpbnB1dCkgaXMgbm90IGRpc3R1cmJlZCBieSBwZXJmb3JtaW5nIHRoZSB0cmFuc2FjdGlvbi5cbiAqL1xudmFyIFNFTEVDVElPTl9SRVNUT1JBVElPTiA9IHtcbiAgLyoqXG4gICAqIEByZXR1cm4ge1NlbGVjdGlvbn0gU2VsZWN0aW9uIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb25JbmZvcm1hdGlvbixcbiAgLyoqXG4gICAqIEBwYXJhbSB7U2VsZWN0aW9ufSBzZWwgU2VsZWN0aW9uIGluZm9ybWF0aW9uIHJldHVybmVkIGZyb20gYGluaXRpYWxpemVgLlxuICAgKi9cbiAgY2xvc2U6IFJlYWN0SW5wdXRTZWxlY3Rpb24ucmVzdG9yZVNlbGVjdGlvblxufTtcblxuLyoqXG4gKiBTdXBwcmVzc2VzIGV2ZW50cyAoYmx1ci9mb2N1cykgdGhhdCBjb3VsZCBiZSBpbmFkdmVydGVudGx5IGRpc3BhdGNoZWQgZHVlIHRvXG4gKiBoaWdoIGxldmVsIERPTSBtYW5pcHVsYXRpb25zIChsaWtlIHRlbXBvcmFyaWx5IHJlbW92aW5nIGEgdGV4dCBpbnB1dCBmcm9tIHRoZVxuICogRE9NKS5cbiAqL1xudmFyIEVWRU5UX1NVUFBSRVNTSU9OID0ge1xuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGVuYWJsZWQgc3RhdHVzIG9mIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGJlZm9yZVxuICAgKiB0aGUgcmVjb25jaWxpYXRpb24uXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VycmVudGx5RW5hYmxlZCA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5pc0VuYWJsZWQoKTtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChmYWxzZSk7XG4gICAgcmV0dXJuIGN1cnJlbnRseUVuYWJsZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJldmlvdXNseUVuYWJsZWQgRW5hYmxlZCBzdGF0dXMgb2ZcbiAgICogICBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBiZWZvcmUgdGhlIHJlY29uY2lsaWF0aW9uIG9jY3VyZWQuIGBjbG9zZWBcbiAgICogICByZXN0b3JlcyB0aGUgcHJldmlvdXMgdmFsdWUuXG4gICAqL1xuICBjbG9zZTogZnVuY3Rpb24ocHJldmlvdXNseUVuYWJsZWQpIHtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChwcmV2aW91c2x5RW5hYmxlZCk7XG4gIH1cbn07XG5cbi8qKlxuICogUHJvdmlkZXMgYSBxdWV1ZSBmb3IgY29sbGVjdGluZyBgY29tcG9uZW50RGlkTW91bnRgIGFuZFxuICogYGNvbXBvbmVudERpZFVwZGF0ZWAgY2FsbGJhY2tzIGR1cmluZyB0aGUgdGhlIHRyYW5zYWN0aW9uLlxuICovXG52YXIgT05fRE9NX1JFQURZX1FVRVVFSU5HID0ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGludGVybmFsIGBvbkRPTVJlYWR5YCBxdWV1ZS5cbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5LnJlc2V0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFmdGVyIERPTSBpcyBmbHVzaGVkLCBpbnZva2UgYWxsIHJlZ2lzdGVyZWQgYG9uRE9NUmVhZHlgIGNhbGxiYWNrcy5cbiAgICovXG4gIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeS5ub3RpZnlBbGwoKTtcbiAgfVxufTtcblxudmFyIFBVVF9MSVNURU5FUl9RVUVVRUlORyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlLnJlc2V0KCk7XG4gIH0sXG5cbiAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZS5wdXRMaXN0ZW5lcnMoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeGVjdXRlZCB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBgVHJhbnNhY3Rpb25gIGluc3RhbmNlLiBDb25zaWRlciB0aGVzZSBhc1xuICogYmVpbmcgbWVtYmVyIG1ldGhvZHMsIGJ1dCB3aXRoIGFuIGltcGxpZWQgb3JkZXJpbmcgd2hpbGUgYmVpbmcgaXNvbGF0ZWQgZnJvbVxuICogZWFjaCBvdGhlci5cbiAqL1xudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW1xuICBQVVRfTElTVEVORVJfUVVFVUVJTkcsXG4gIFNFTEVDVElPTl9SRVNUT1JBVElPTixcbiAgRVZFTlRfU1VQUFJFU1NJT04sXG4gIE9OX0RPTV9SRUFEWV9RVUVVRUlOR1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHk6XG4gKiAtIFRoZSBvcmRlciB0aGF0IHRoZXNlIGFyZSBsaXN0ZWQgaW4gdGhlIHRyYW5zYWN0aW9uIGlzIGNyaXRpY2FsOlxuICogLSBTdXBwcmVzc2VzIGV2ZW50cy5cbiAqIC0gUmVzdG9yZXMgc2VsZWN0aW9uIHJhbmdlLlxuICpcbiAqIEZ1dHVyZTpcbiAqIC0gUmVzdG9yZSBkb2N1bWVudC9vdmVyZmxvdyBzY3JvbGwgcG9zaXRpb25zIHRoYXQgd2VyZSB1bmludGVudGlvbmFsbHlcbiAqICAgbW9kaWZpZWQgdmlhIERPTSBpbnNlcnRpb25zIGFib3ZlIHRoZSB0b3Agdmlld3BvcnQgYm91bmRhcnkuXG4gKiAtIEltcGxlbWVudC9pbnRlZ3JhdGUgd2l0aCBjdXN0b21pemVkIGNvbnN0cmFpbnQgYmFzZWQgbGF5b3V0IHN5c3RlbSBhbmQga2VlcFxuICogICB0cmFjayBvZiB3aGljaCBkaW1lbnNpb25zIG11c3QgYmUgcmVtZWFzdXJlZC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblxuICovXG5mdW5jdGlvbiBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIC8vIE9ubHkgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHJlYWxseSBuZWVkcyB0aGlzIG9wdGlvbiAoc2VlXG4gIC8vIGBSZWFjdFNlcnZlclJlbmRlcmluZ2ApLCBidXQgc2VydmVyLXNpZGUgdXNlc1xuICAvLyBgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbmAgaW5zdGVhZC4gVGhpcyBvcHRpb24gaXMgaGVyZSBzbyB0aGF0IGl0J3NcbiAgLy8gYWNjZXNzaWJsZSBhbmQgZGVmYXVsdHMgdG8gZmFsc2Ugd2hlbiBgUmVhY3RET01Db21wb25lbnRgIGFuZFxuICAvLyBgUmVhY3RUZXh0Q29tcG9uZW50YCBjaGVja3MgaXQgaW4gYG1vdW50Q29tcG9uZW50YC5gXG4gIHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSBmYWxzZTtcbiAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZChudWxsKTtcbiAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlID0gUmVhY3RQdXRMaXN0ZW5lclF1ZXVlLmdldFBvb2xlZCgpO1xufVxuXG52YXIgTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBAc2VlIFRyYW5zYWN0aW9uXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAZmluYWxcbiAgICogQHJldHVybiB7YXJyYXk8b2JqZWN0Pn0gTGlzdCBvZiBvcGVyYXRpb24gd3JhcCBwcm9jZWVkdXJlcy5cbiAgICogICBUT0RPOiBjb252ZXJ0IHRvIGFycmF5PFRyYW5zYWN0aW9uV3JhcHBlcj5cbiAgICovXG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBgb25ET01SZWFkeWAgY2FsbGJhY2tzIHdpdGguXG4gICAqL1xuICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWN0TW91bnRSZWFkeTtcbiAgfSxcblxuICBnZXRQdXRMaXN0ZW5lclF1ZXVlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wdXRMaXN0ZW5lclF1ZXVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciB0aGlzLCBhbmQgd2lsbCBpbnZva2UgdGhpcyBiZWZvcmUgYWxsb3dpbmcgdGhpc1xuICAgKiBpbnN0YW5jZSB0byBiZSByZXN1c2VkLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHRoaXMucmVhY3RNb3VudFJlYWR5KTtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IG51bGw7XG5cbiAgICBSZWFjdFB1dExpc3RlbmVyUXVldWUucmVsZWFzZSh0aGlzLnB1dExpc3RlbmVyUXVldWUpO1xuICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZSA9IG51bGw7XG4gIH1cbn07XG5cblxuYXNzaWduKFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbi5NaXhpbiwgTWl4aW4pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjtcblxufSx7XCIuL0NhbGxiYWNrUXVldWVcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0NhbGxiYWNrUXVldWUuanNcIixcIi4vT2JqZWN0LmFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1wiLFwiLi9Qb29sZWRDbGFzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUG9vbGVkQ2xhc3MuanNcIixcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuanNcIixcIi4vUmVhY3RJbnB1dFNlbGVjdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJbnB1dFNlbGVjdGlvbi5qc1wiLFwiLi9SZWFjdFB1dExpc3RlbmVyUXVldWVcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHV0TGlzdGVuZXJRdWV1ZS5qc1wiLFwiLi9UcmFuc2FjdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvVHJhbnNhY3Rpb24uanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSZWNvbmNpbGVyLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJlY29uY2lsZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFJlZiA9IHJlcXVpcmUoXCIuL1JlYWN0UmVmXCIpO1xudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiKTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gY2FsbCBSZWFjdFJlZi5hdHRhY2hSZWZzIHdpdGggdGhpcyBjb21wb3NpdGUgY29tcG9uZW50LCBzcGxpdCBvdXRcbiAqIHRvIGF2b2lkIGFsbG9jYXRpb25zIGluIHRoZSB0cmFuc2FjdGlvbiBtb3VudC1yZWFkeSBxdWV1ZS5cbiAqL1xuZnVuY3Rpb24gYXR0YWNoUmVmcygpIHtcbiAgUmVhY3RSZWYuYXR0YWNoUmVmcyh0aGlzLCB0aGlzLl9jdXJyZW50RWxlbWVudCk7XG59XG5cbnZhciBSZWFjdFJlY29uY2lsZXIgPSB7XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBjb21wb25lbnQsIHJlbmRlcnMgbWFya3VwLCBhbmQgcmVnaXN0ZXJzIGV2ZW50IGxpc3RlbmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7P3N0cmluZ30gUmVuZGVyZWQgbWFya3VwIHRvIGJlIGluc2VydGVkIGludG8gdGhlIERPTS5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UsIHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgbWFya3VwID0gaW50ZXJuYWxJbnN0YW5jZS5tb3VudENvbXBvbmVudChyb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFByb3BzKFxuICAgICAgICBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudFxuICAgICAgKTtcbiAgICB9XG4gICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShhdHRhY2hSZWZzLCBpbnRlcm5hbEluc3RhbmNlKTtcbiAgICByZXR1cm4gbWFya3VwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSBgbW91bnRDb21wb25lbnRgLlxuICAgKlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgUmVhY3RSZWYuZGV0YWNoUmVmcyhpbnRlcm5hbEluc3RhbmNlLCBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudCk7XG4gICAgaW50ZXJuYWxJbnN0YW5jZS51bm1vdW50Q29tcG9uZW50KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIGNvbXBvbmVudCB1c2luZyBhIG5ldyBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnRlcm5hbEluc3RhbmNlXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudFxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24oXG4gICAgaW50ZXJuYWxJbnN0YW5jZSwgbmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0XG4gICkge1xuICAgIHZhciBwcmV2RWxlbWVudCA9IGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50O1xuXG4gICAgaWYgKG5leHRFbGVtZW50ID09PSBwcmV2RWxlbWVudCAmJiBuZXh0RWxlbWVudC5fb3duZXIgIT0gbnVsbCkge1xuICAgICAgLy8gU2luY2UgZWxlbWVudHMgYXJlIGltbXV0YWJsZSBhZnRlciB0aGUgb3duZXIgaXMgcmVuZGVyZWQsXG4gICAgICAvLyB3ZSBjYW4gZG8gYSBjaGVhcCBpZGVudGl0eSBjb21wYXJlIGhlcmUgdG8gZGV0ZXJtaW5lIGlmIHRoaXMgaXMgYVxuICAgICAgLy8gc3VwZXJmbHVvdXMgcmVjb25jaWxlLiBJdCdzIHBvc3NpYmxlIGZvciBzdGF0ZSB0byBiZSBtdXRhYmxlIGJ1dCBzdWNoXG4gICAgICAvLyBjaGFuZ2Ugc2hvdWxkIHRyaWdnZXIgYW4gdXBkYXRlIG9mIHRoZSBvd25lciB3aGljaCB3b3VsZCByZWNyZWF0ZVxuICAgICAgLy8gdGhlIGVsZW1lbnQuIFdlIGV4cGxpY2l0bHkgY2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYW4gb3duZXIgc2luY2VcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgZm9yIGFuIGVsZW1lbnQgY3JlYXRlZCBvdXRzaWRlIGEgY29tcG9zaXRlIHRvIGJlXG4gICAgICAvLyBkZWVwbHkgbXV0YXRlZCBhbmQgcmV1c2VkLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIFJlYWN0RWxlbWVudFZhbGlkYXRvci5jaGVja0FuZFdhcm5Gb3JNdXRhdGVkUHJvcHMobmV4dEVsZW1lbnQpO1xuICAgIH1cblxuICAgIHZhciByZWZzQ2hhbmdlZCA9IFJlYWN0UmVmLnNob3VsZFVwZGF0ZVJlZnMoXG4gICAgICBwcmV2RWxlbWVudCxcbiAgICAgIG5leHRFbGVtZW50XG4gICAgKTtcblxuICAgIGlmIChyZWZzQ2hhbmdlZCkge1xuICAgICAgUmVhY3RSZWYuZGV0YWNoUmVmcyhpbnRlcm5hbEluc3RhbmNlLCBwcmV2RWxlbWVudCk7XG4gICAgfVxuXG4gICAgaW50ZXJuYWxJbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50KG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG5cbiAgICBpZiAocmVmc0NoYW5nZWQpIHtcbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoYXR0YWNoUmVmcywgaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGbHVzaCBhbnkgZGlydHkgY2hhbmdlcyBpbiBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OiBmdW5jdGlvbihcbiAgICBpbnRlcm5hbEluc3RhbmNlLFxuICAgIHRyYW5zYWN0aW9uXG4gICkge1xuICAgIGludGVybmFsSW5zdGFuY2UucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KHRyYW5zYWN0aW9uKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVjb25jaWxlcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVsZW1lbnRWYWxpZGF0b3IuanNcIixcIi4vUmVhY3RSZWZcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UmVmLmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSZWYuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RSZWZcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RPd25lclwiKTtcblxudmFyIFJlYWN0UmVmID0ge307XG5cbmZ1bmN0aW9uIGF0dGFjaFJlZihyZWYsIGNvbXBvbmVudCwgb3duZXIpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYoY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCkpO1xuICB9IGVsc2Uge1xuICAgIC8vIExlZ2FjeSByZWZcbiAgICBSZWFjdE93bmVyLmFkZENvbXBvbmVudEFzUmVmVG8oY29tcG9uZW50LCByZWYsIG93bmVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXRhY2hSZWYocmVmLCBjb21wb25lbnQsIG93bmVyKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKG51bGwpO1xuICB9IGVsc2Uge1xuICAgIC8vIExlZ2FjeSByZWZcbiAgICBSZWFjdE93bmVyLnJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbShjb21wb25lbnQsIHJlZiwgb3duZXIpO1xuICB9XG59XG5cblJlYWN0UmVmLmF0dGFjaFJlZnMgPSBmdW5jdGlvbihpbnN0YW5jZSwgZWxlbWVudCkge1xuICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG4gIGlmIChyZWYgIT0gbnVsbCkge1xuICAgIGF0dGFjaFJlZihyZWYsIGluc3RhbmNlLCBlbGVtZW50Ll9vd25lcik7XG4gIH1cbn07XG5cblJlYWN0UmVmLnNob3VsZFVwZGF0ZVJlZnMgPSBmdW5jdGlvbihwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpIHtcbiAgLy8gSWYgZWl0aGVyIHRoZSBvd25lciBvciBhIGByZWZgIGhhcyBjaGFuZ2VkLCBtYWtlIHN1cmUgdGhlIG5ld2VzdCBvd25lclxuICAvLyBoYXMgc3RvcmVkIGEgcmVmZXJlbmNlIHRvIGB0aGlzYCwgYW5kIHRoZSBwcmV2aW91cyBvd25lciAoaWYgZGlmZmVyZW50KVxuICAvLyBoYXMgZm9yZ290dGVuIHRoZSByZWZlcmVuY2UgdG8gYHRoaXNgLiBXZSB1c2UgdGhlIGVsZW1lbnQgaW5zdGVhZFxuICAvLyBvZiB0aGUgcHVibGljIHRoaXMucHJvcHMgYmVjYXVzZSB0aGUgcG9zdCBwcm9jZXNzaW5nIGNhbm5vdCBkZXRlcm1pbmVcbiAgLy8gYSByZWYuIFRoZSByZWYgY29uY2VwdHVhbGx5IGxpdmVzIG9uIHRoZSBlbGVtZW50LlxuXG4gIC8vIFRPRE86IFNob3VsZCB0aGlzIGV2ZW4gYmUgcG9zc2libGU/IFRoZSBvd25lciBjYW5ub3QgY2hhbmdlIGJlY2F1c2VcbiAgLy8gaXQncyBmb3JiaWRkZW4gYnkgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQuIFRoZSByZWYgY2FuIGNoYW5nZVxuICAvLyBpZiB5b3Ugc3dhcCB0aGUga2V5cyBvZiBidXQgbm90IHRoZSByZWZzLiBSZWNvbnNpZGVyIHdoZXJlIHRoaXMgY2hlY2tcbiAgLy8gaXMgbWFkZS4gSXQgcHJvYmFibHkgYmVsb25ncyB3aGVyZSB0aGUga2V5IGNoZWNraW5nIGFuZFxuICAvLyBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50IGlzIGRvbmUuXG5cbiAgcmV0dXJuIChcbiAgICBuZXh0RWxlbWVudC5fb3duZXIgIT09IHByZXZFbGVtZW50Ll9vd25lciB8fFxuICAgIG5leHRFbGVtZW50LnJlZiAhPT0gcHJldkVsZW1lbnQucmVmXG4gICk7XG59O1xuXG5SZWFjdFJlZi5kZXRhY2hSZWZzID0gZnVuY3Rpb24oaW5zdGFuY2UsIGVsZW1lbnQpIHtcbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICBpZiAocmVmICE9IG51bGwpIHtcbiAgICBkZXRhY2hSZWYocmVmLCBpbnN0YW5jZSwgZWxlbWVudC5fb3duZXIpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVmO1xuXG59LHtcIi4vUmVhY3RPd25lclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RPd25lci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFJvb3RJbmRleC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJvb3RJbmRleFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFJvb3RJbmRleEluamVjdGlvbiA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IF9jcmVhdGVSZWFjdFJvb3RJbmRleFxuICAgKi9cbiAgaW5qZWN0Q3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uKF9jcmVhdGVSZWFjdFJvb3RJbmRleCkge1xuICAgIFJlYWN0Um9vdEluZGV4LmNyZWF0ZVJlYWN0Um9vdEluZGV4ID0gX2NyZWF0ZVJlYWN0Um9vdEluZGV4O1xuICB9XG59O1xuXG52YXIgUmVhY3RSb290SW5kZXggPSB7XG4gIGNyZWF0ZVJlYWN0Um9vdEluZGV4OiBudWxsLFxuICBpbmplY3Rpb246IFJlYWN0Um9vdEluZGV4SW5qZWN0aW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Um9vdEluZGV4O1xuXG59LHt9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0U2VydmVyUmVuZGVyaW5nLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIik7XG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHJlcXVpcmUoXCIuL1JlYWN0TWFya3VwQ2hlY2tzdW1cIik7XG52YXIgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbiA9XG4gIHJlcXVpcmUoXCIuL1JlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb25cIik7XG5cbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoXCIuL2VtcHR5T2JqZWN0XCIpO1xudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgSFRNTCBtYXJrdXBcbiAqL1xuZnVuY3Rpb24gcmVuZGVyVG9TdHJpbmcoZWxlbWVudCkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSxcbiAgICAncmVuZGVyVG9TdHJpbmcoKTogWW91IG11c3QgcGFzcyBhIHZhbGlkIFJlYWN0RWxlbWVudC4nXG4gICkgOiBpbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSk7XG5cbiAgdmFyIHRyYW5zYWN0aW9uO1xuICB0cnkge1xuICAgIHZhciBpZCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0Um9vdElEKCk7XG4gICAgdHJhbnNhY3Rpb24gPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLmdldFBvb2xlZChmYWxzZSk7XG5cbiAgICByZXR1cm4gdHJhbnNhY3Rpb24ucGVyZm9ybShmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZWxlbWVudCwgbnVsbCk7XG4gICAgICB2YXIgbWFya3VwID1cbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UubW91bnRDb21wb25lbnQoaWQsIHRyYW5zYWN0aW9uLCBlbXB0eU9iamVjdCk7XG4gICAgICByZXR1cm4gUmVhY3RNYXJrdXBDaGVja3N1bS5hZGRDaGVja3N1bVRvTWFya3VwKG1hcmt1cCk7XG4gICAgfSwgbnVsbCk7XG4gIH0gZmluYWxseSB7XG4gICAgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBIVE1MIG1hcmt1cCwgd2l0aG91dCB0aGUgZXh0cmEgUmVhY3QgSUQgYW5kIGNoZWNrc3VtXG4gKiAoZm9yIGdlbmVyYXRpbmcgc3RhdGljIHBhZ2VzKVxuICovXG5mdW5jdGlvbiByZW5kZXJUb1N0YXRpY01hcmt1cChlbGVtZW50KSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpLFxuICAgICdyZW5kZXJUb1N0YXRpY01hcmt1cCgpOiBZb3UgbXVzdCBwYXNzIGEgdmFsaWQgUmVhY3RFbGVtZW50LidcbiAgKSA6IGludmFyaWFudChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpKTtcblxuICB2YXIgdHJhbnNhY3Rpb247XG4gIHRyeSB7XG4gICAgdmFyIGlkID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RSb290SUQoKTtcbiAgICB0cmFuc2FjdGlvbiA9IFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKHRydWUpO1xuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLnBlcmZvcm0oZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGVsZW1lbnQsIG51bGwpO1xuICAgICAgcmV0dXJuIGNvbXBvbmVudEluc3RhbmNlLm1vdW50Q29tcG9uZW50KGlkLCB0cmFuc2FjdGlvbiwgZW1wdHlPYmplY3QpO1xuICAgIH0sIG51bGwpO1xuICB9IGZpbmFsbHkge1xuICAgIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlbmRlclRvU3RyaW5nOiByZW5kZXJUb1N0cmluZyxcbiAgcmVuZGVyVG9TdGF0aWNNYXJrdXA6IHJlbmRlclRvU3RhdGljTWFya3VwXG59O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEVsZW1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qc1wiLFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJbnN0YW5jZUhhbmRsZXMuanNcIixcIi4vUmVhY3RNYXJrdXBDaGVja3N1bVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNYXJrdXBDaGVja3N1bS5qc1wiLFwiLi9SZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLmpzXCIsXCIuL2VtcHR5T2JqZWN0XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9lbXB0eU9iamVjdC5qc1wiLFwiLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50LmpzXCIsXCIuL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgQ2FsbGJhY2tRdWV1ZSA9IHJlcXVpcmUoXCIuL0NhbGxiYWNrUXVldWVcIik7XG52YXIgUmVhY3RQdXRMaXN0ZW5lclF1ZXVlID0gcmVxdWlyZShcIi4vUmVhY3RQdXRMaXN0ZW5lclF1ZXVlXCIpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZShcIi4vVHJhbnNhY3Rpb25cIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xuXG4vKipcbiAqIFByb3ZpZGVzIGEgYENhbGxiYWNrUXVldWVgIHF1ZXVlIGZvciBjb2xsZWN0aW5nIGBvbkRPTVJlYWR5YCBjYWxsYmFja3NcbiAqIGR1cmluZyB0aGUgcGVyZm9ybWluZyBvZiB0aGUgdHJhbnNhY3Rpb24uXG4gKi9cbnZhciBPTl9ET01fUkVBRFlfUVVFVUVJTkcgPSB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgaW50ZXJuYWwgYG9uRE9NUmVhZHlgIHF1ZXVlLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkucmVzZXQoKTtcbiAgfSxcblxuICBjbG9zZTogZW1wdHlGdW5jdGlvblxufTtcblxudmFyIFBVVF9MSVNURU5FUl9RVUVVRUlORyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlLnJlc2V0KCk7XG4gIH0sXG5cbiAgY2xvc2U6IGVtcHR5RnVuY3Rpb25cbn07XG5cbi8qKlxuICogRXhlY3V0ZWQgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgYFRyYW5zYWN0aW9uYCBpbnN0YW5jZS4gQ29uc2lkZXIgdGhlc2UgYXNcbiAqIGJlaW5nIG1lbWJlciBtZXRob2RzLCBidXQgd2l0aCBhbiBpbXBsaWVkIG9yZGVyaW5nIHdoaWxlIGJlaW5nIGlzb2xhdGVkIGZyb21cbiAqIGVhY2ggb3RoZXIuXG4gKi9cbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtcbiAgUFVUX0xJU1RFTkVSX1FVRVVFSU5HLFxuICBPTl9ET01fUkVBRFlfUVVFVUVJTkdcbl07XG5cbi8qKlxuICogQGNsYXNzIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVuZGVyVG9TdGF0aWNNYXJrdXBcbiAqL1xuZnVuY3Rpb24gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbihyZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cDtcbiAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZChudWxsKTtcbiAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlID0gUmVhY3RQdXRMaXN0ZW5lclF1ZXVlLmdldFBvb2xlZCgpO1xufVxuXG52YXIgTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBAc2VlIFRyYW5zYWN0aW9uXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAZmluYWxcbiAgICogQHJldHVybiB7YXJyYXl9IEVtcHR5IGxpc3Qgb2Ygb3BlcmF0aW9uIHdyYXAgcHJvY2VlZHVyZXMuXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHF1ZXVlIHRvIGNvbGxlY3QgYG9uRE9NUmVhZHlgIGNhbGxiYWNrcyB3aXRoLlxuICAgKi9cbiAgZ2V0UmVhY3RNb3VudFJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFjdE1vdW50UmVhZHk7XG4gIH0sXG5cbiAgZ2V0UHV0TGlzdGVuZXJRdWV1ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucHV0TGlzdGVuZXJRdWV1ZTtcbiAgfSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcywgYW5kIHdpbGwgaW52b2tlIHRoaXMgYmVmb3JlIGFsbG93aW5nIHRoaXNcbiAgICogaW5zdGFuY2UgdG8gYmUgcmVzdXNlZC5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIENhbGxiYWNrUXVldWUucmVsZWFzZSh0aGlzLnJlYWN0TW91bnRSZWFkeSk7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBudWxsO1xuXG4gICAgUmVhY3RQdXRMaXN0ZW5lclF1ZXVlLnJlbGVhc2UodGhpcy5wdXRMaXN0ZW5lclF1ZXVlKTtcbiAgICB0aGlzLnB1dExpc3RlbmVyUXVldWUgPSBudWxsO1xuICB9XG59O1xuXG5cbmFzc2lnbihcbiAgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5wcm90b3R5cGUsXG4gIFRyYW5zYWN0aW9uLk1peGluLFxuICBNaXhpblxuKTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb247XG5cbn0se1wiLi9DYWxsYmFja1F1ZXVlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DYWxsYmFja1F1ZXVlLmpzXCIsXCIuL09iamVjdC5hc3NpZ25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanNcIixcIi4vUG9vbGVkQ2xhc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1Bvb2xlZENsYXNzLmpzXCIsXCIuL1JlYWN0UHV0TGlzdGVuZXJRdWV1ZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQdXRMaXN0ZW5lclF1ZXVlLmpzXCIsXCIuL1RyYW5zYWN0aW9uXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9UcmFuc2FjdGlvbi5qc1wiLFwiLi9lbXB0eUZ1bmN0aW9uXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9lbXB0eUZ1bmN0aW9uLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0VXBkYXRlUXVldWUuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFVwZGF0ZVF1ZXVlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RMaWZlQ3ljbGUgPSByZXF1aXJlKFwiLi9SZWFjdExpZmVDeWNsZVwiKTtcbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZU1hcFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxuZnVuY3Rpb24gZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKSB7XG4gIGlmIChpbnRlcm5hbEluc3RhbmNlICE9PSBSZWFjdExpZmVDeWNsZS5jdXJyZW50bHlNb3VudGluZ0luc3RhbmNlKSB7XG4gICAgLy8gSWYgd2UncmUgaW4gYSBjb21wb25lbnRXaWxsTW91bnQgaGFuZGxlciwgZG9uJ3QgZW5xdWV1ZSBhIHJlcmVuZGVyXG4gICAgLy8gYmVjYXVzZSBSZWFjdFVwZGF0ZXMgYXNzdW1lcyB3ZSdyZSBpbiBhIGJyb3dzZXIgY29udGV4dCAod2hpY2ggaXNcbiAgICAvLyB3cm9uZyBmb3Igc2VydmVyIHJlbmRlcmluZykgYW5kIHdlJ3JlIGFib3V0IHRvIGRvIGEgcmVuZGVyIGFueXdheS5cbiAgICAvLyBTZWUgYnVnIGluICMxNzQwLlxuICAgIFJlYWN0VXBkYXRlcy5lbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCxcbiAgICAnJXMoLi4uKTogQ2Fubm90IHVwZGF0ZSBkdXJpbmcgYW4gZXhpc3Rpbmcgc3RhdGUgdHJhbnNpdGlvbiAnICtcbiAgICAnKHN1Y2ggYXMgd2l0aGluIGByZW5kZXJgKS4gUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiAnICtcbiAgICAnb2YgcHJvcHMgYW5kIHN0YXRlLicsXG4gICAgY2FsbGVyTmFtZVxuICApIDogaW52YXJpYW50KFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCkpO1xuXG4gIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQocHVibGljSW5zdGFuY2UpO1xuICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAvLyBPbmx5IHdhcm4gd2hlbiB3ZSBoYXZlIGEgY2FsbGVyTmFtZS4gT3RoZXJ3aXNlIHdlIHNob3VsZCBiZSBzaWxlbnQuXG4gICAgICAvLyBXZSdyZSBwcm9iYWJseSBjYWxsaW5nIGZyb20gZW5xdWV1ZUNhbGxiYWNrLiBXZSBkb24ndCB3YW50IHRvIHdhcm5cbiAgICAgIC8vIHRoZXJlIGJlY2F1c2Ugd2UgYWxyZWFkeSB3YXJuZWQgZm9yIHRoZSBjb3JyZXNwb25kaW5nIGxpZmVjeWNsZSBtZXRob2QuXG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgIWNhbGxlck5hbWUsXG4gICAgICAgICclcyguLi4pOiBDYW4gb25seSB1cGRhdGUgYSBtb3VudGVkIG9yIG1vdW50aW5nIGNvbXBvbmVudC4gJyArXG4gICAgICAgICdUaGlzIHVzdWFsbHkgbWVhbnMgeW91IGNhbGxlZCAlcygpIG9uIGFuIHVubW91bnRlZCAnICtcbiAgICAgICAgJ2NvbXBvbmVudC4gVGhpcyBpcyBhIG5vLW9wLicsXG4gICAgICAgIGNhbGxlck5hbWUsXG4gICAgICAgIGNhbGxlck5hbWVcbiAgICAgICkgOiBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoaW50ZXJuYWxJbnN0YW5jZSA9PT0gUmVhY3RMaWZlQ3ljbGUuY3VycmVudGx5VW5tb3VudGluZ0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gaW50ZXJuYWxJbnN0YW5jZTtcbn1cblxuLyoqXG4gKiBSZWFjdFVwZGF0ZVF1ZXVlIGFsbG93cyBmb3Igc3RhdGUgdXBkYXRlcyB0byBiZSBzY2hlZHVsZWQgaW50byBhIGxhdGVyXG4gKiByZWNvbmNpbGlhdGlvbiBzdGVwLlxuICovXG52YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHtcblxuICAvKipcbiAgICogRW5xdWV1ZSBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhZnRlciBhbGwgdGhlIHBlbmRpbmcgdXBkYXRlc1xuICAgKiBoYXZlIHByb2Nlc3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdG8gdXNlIGFzIGB0aGlzYCBjb250ZXh0LlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZUNhbGxiYWNrOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2spIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ2VucXVldWVDYWxsYmFjayguLi4pOiBZb3UgY2FsbGVkIGBzZXRQcm9wc2AsIGByZXBsYWNlUHJvcHNgLCAnICtcbiAgICAgICdgc2V0U3RhdGVgLCBgcmVwbGFjZVN0YXRlYCwgb3IgYGZvcmNlVXBkYXRlYCB3aXRoIGEgY2FsbGJhY2sgdGhhdCAnICtcbiAgICAgICdpc25cXCd0IGNhbGxhYmxlLidcbiAgICApIDogaW52YXJpYW50KHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykpO1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlKTtcblxuICAgIC8vIFByZXZpb3VzbHkgd2Ugd291bGQgdGhyb3cgYW4gZXJyb3IgaWYgd2UgZGlkbid0IGhhdmUgYW4gaW50ZXJuYWxcbiAgICAvLyBpbnN0YW5jZS4gU2luY2Ugd2Ugd2FudCB0byBtYWtlIGl0IGEgbm8tb3AgaW5zdGVhZCwgd2UgbWlycm9yIHRoZSBzYW1lXG4gICAgLy8gYmVoYXZpb3Igd2UgaGF2ZSBpbiBvdGhlciBlbnF1ZXVlKiBtZXRob2RzLlxuICAgIC8vIFdlIGFsc28gbmVlZCB0byBpZ25vcmUgY2FsbGJhY2tzIGluIGNvbXBvbmVudFdpbGxNb3VudC4gU2VlXG4gICAgLy8gZW5xdWV1ZVVwZGF0ZXMuXG4gICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlIHx8XG4gICAgICAgIGludGVybmFsSW5zdGFuY2UgPT09IFJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseU1vdW50aW5nSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcbiAgICB9XG4gICAgLy8gVE9ETzogVGhlIGNhbGxiYWNrIGhlcmUgaXMgaWdub3JlZCB3aGVuIHNldFN0YXRlIGlzIGNhbGxlZCBmcm9tXG4gICAgLy8gY29tcG9uZW50V2lsbE1vdW50LiBFaXRoZXIgZml4IGl0IG9yIGRpc2FsbG93IGRvaW5nIHNvIGNvbXBsZXRlbHkgaW5cbiAgICAvLyBmYXZvciBvZiBnZXRJbml0aWFsU3RhdGUuIEFsdGVybmF0aXZlbHksIHdlIGNhbiBkaXNhbGxvd1xuICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudCBkdXJpbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWw6IGZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UsIGNhbGxiYWNrKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICdlbnF1ZXVlQ2FsbGJhY2soLi4uKTogWW91IGNhbGxlZCBgc2V0UHJvcHNgLCBgcmVwbGFjZVByb3BzYCwgJyArXG4gICAgICAnYHNldFN0YXRlYCwgYHJlcGxhY2VTdGF0ZWAsIG9yIGBmb3JjZVVwZGF0ZWAgd2l0aCBhIGNhbGxiYWNrIHRoYXQgJyArXG4gICAgICAnaXNuXFwndCBjYWxsYWJsZS4nXG4gICAgKSA6IGludmFyaWFudCh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpKTtcbiAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcykge1xuICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcyA9IFtjYWxsYmFja107XG4gICAgfVxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZvcmNlcyBhbiB1cGRhdGUuIFRoaXMgc2hvdWxkIG9ubHkgYmUgaW52b2tlZCB3aGVuIGl0IGlzIGtub3duIHdpdGhcbiAgICogY2VydGFpbnR5IHRoYXQgd2UgYXJlICoqbm90KiogaW4gYSBET00gdHJhbnNhY3Rpb24uXG4gICAqXG4gICAqIFlvdSBtYXkgd2FudCB0byBjYWxsIHRoaXMgd2hlbiB5b3Uga25vdyB0aGF0IHNvbWUgZGVlcGVyIGFzcGVjdCBvZiB0aGVcbiAgICogY29tcG9uZW50J3Mgc3RhdGUgaGFzIGNoYW5nZWQgYnV0IGBzZXRTdGF0ZWAgd2FzIG5vdCBjYWxsZWQuXG4gICAqXG4gICAqIFRoaXMgd2lsbCBub3QgaW52b2tlIGBzaG91bGRVcGRhdGVDb21wb25lbnRgLCBidXQgaXQgd2lsbCBpbnZva2VcbiAgICogYGNvbXBvbmVudFdpbGxVcGRhdGVgIGFuZCBgY29tcG9uZW50RGlkVXBkYXRlYC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSkge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKFxuICAgICAgcHVibGljSW5zdGFuY2UsXG4gICAgICAnZm9yY2VVcGRhdGUnXG4gICAgKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IHRydWU7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgb3IgYHNldFN0YXRlYCB0byBtdXRhdGUgc3RhdGUuXG4gICAqIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAgICpcbiAgICogVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYHRoaXMuc3RhdGVgIHdpbGwgYmUgaW1tZWRpYXRlbHkgdXBkYXRlZCwgc29cbiAgICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZVN0YXRlIE5leHQgc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24ocHVibGljSW5zdGFuY2UsIGNvbXBsZXRlU3RhdGUpIHtcbiAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShcbiAgICAgIHB1YmxpY0luc3RhbmNlLFxuICAgICAgJ3JlcGxhY2VTdGF0ZSdcbiAgICApO1xuXG4gICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ1N0YXRlUXVldWUgPSBbY29tcGxldGVTdGF0ZV07XG4gICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IHRydWU7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gVGhpcyBvbmx5IGV4aXN0cyBiZWNhdXNlIF9wZW5kaW5nU3RhdGUgaXNcbiAgICogaW50ZXJuYWwuIFRoaXMgcHJvdmlkZXMgYSBtZXJnaW5nIHN0cmF0ZWd5IHRoYXQgaXMgbm90IGF2YWlsYWJsZSB0byBkZWVwXG4gICAqIHByb3BlcnRpZXMgd2hpY2ggaXMgY29uZnVzaW5nLiBUT0RPOiBFeHBvc2UgcGVuZGluZ1N0YXRlIG9yIGRvbid0IHVzZSBpdFxuICAgKiBkdXJpbmcgdGhlIG1lcmdlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxTdGF0ZSBOZXh0IHBhcnRpYWwgc3RhdGUgdG8gYmUgbWVyZ2VkIHdpdGggc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlKSB7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUoXG4gICAgICBwdWJsaWNJbnN0YW5jZSxcbiAgICAgICdzZXRTdGF0ZSdcbiAgICApO1xuXG4gICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHF1ZXVlID1cbiAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdTdGF0ZVF1ZXVlIHx8XG4gICAgICAoaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ1N0YXRlUXVldWUgPSBbXSk7XG4gICAgcXVldWUucHVzaChwYXJ0aWFsU3RhdGUpO1xuXG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyBhIHN1YnNldCBvZiB0aGUgcHJvcHMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFByb3BzIFN1YnNldCBvZiB0aGUgbmV4dCBwcm9wcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlU2V0UHJvcHM6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsUHJvcHMpIHtcbiAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShcbiAgICAgIHB1YmxpY0luc3RhbmNlLFxuICAgICAgJ3NldFByb3BzJ1xuICAgICk7XG5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgaW50ZXJuYWxJbnN0YW5jZS5faXNUb3BMZXZlbCxcbiAgICAgICdzZXRQcm9wcyguLi4pOiBZb3UgY2FsbGVkIGBzZXRQcm9wc2Agb24gYSAnICtcbiAgICAgICdjb21wb25lbnQgd2l0aCBhIHBhcmVudC4gVGhpcyBpcyBhbiBhbnRpLXBhdHRlcm4gc2luY2UgcHJvcHMgd2lsbCAnICtcbiAgICAgICdnZXQgcmVhY3RpdmVseSB1cGRhdGVkIHdoZW4gcmVuZGVyZWQuIEluc3RlYWQsIGNoYW5nZSB0aGUgb3duZXJcXCdzICcgK1xuICAgICAgJ2ByZW5kZXJgIG1ldGhvZCB0byBwYXNzIHRoZSBjb3JyZWN0IHZhbHVlIGFzIHByb3BzIHRvIHRoZSBjb21wb25lbnQgJyArXG4gICAgICAnd2hlcmUgaXQgaXMgY3JlYXRlZC4nXG4gICAgKSA6IGludmFyaWFudChpbnRlcm5hbEluc3RhbmNlLl9pc1RvcExldmVsKSk7XG5cbiAgICAvLyBNZXJnZSB3aXRoIHRoZSBwZW5kaW5nIGVsZW1lbnQgaWYgaXQgZXhpc3RzLCBvdGhlcndpc2Ugd2l0aCBleGlzdGluZ1xuICAgIC8vIGVsZW1lbnQgcHJvcHMuXG4gICAgdmFyIGVsZW1lbnQgPSBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nRWxlbWVudCB8fFxuICAgICAgICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQ7XG4gICAgdmFyIHByb3BzID0gYXNzaWduKHt9LCBlbGVtZW50LnByb3BzLCBwYXJ0aWFsUHJvcHMpO1xuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzKFxuICAgICAgZWxlbWVudCxcbiAgICAgIHByb3BzXG4gICAgKTtcblxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgcHJvcHMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgTmV3IHByb3BzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVSZXBsYWNlUHJvcHM6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBwcm9wcykge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKFxuICAgICAgcHVibGljSW5zdGFuY2UsXG4gICAgICAncmVwbGFjZVByb3BzJ1xuICAgICk7XG5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgaW50ZXJuYWxJbnN0YW5jZS5faXNUb3BMZXZlbCxcbiAgICAgICdyZXBsYWNlUHJvcHMoLi4uKTogWW91IGNhbGxlZCBgcmVwbGFjZVByb3BzYCBvbiBhICcgK1xuICAgICAgJ2NvbXBvbmVudCB3aXRoIGEgcGFyZW50LiBUaGlzIGlzIGFuIGFudGktcGF0dGVybiBzaW5jZSBwcm9wcyB3aWxsICcgK1xuICAgICAgJ2dldCByZWFjdGl2ZWx5IHVwZGF0ZWQgd2hlbiByZW5kZXJlZC4gSW5zdGVhZCwgY2hhbmdlIHRoZSBvd25lclxcJ3MgJyArXG4gICAgICAnYHJlbmRlcmAgbWV0aG9kIHRvIHBhc3MgdGhlIGNvcnJlY3QgdmFsdWUgYXMgcHJvcHMgdG8gdGhlIGNvbXBvbmVudCAnICtcbiAgICAgICd3aGVyZSBpdCBpcyBjcmVhdGVkLidcbiAgICApIDogaW52YXJpYW50KGludGVybmFsSW5zdGFuY2UuX2lzVG9wTGV2ZWwpKTtcblxuICAgIC8vIE1lcmdlIHdpdGggdGhlIHBlbmRpbmcgZWxlbWVudCBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSB3aXRoIGV4aXN0aW5nXG4gICAgLy8gZWxlbWVudCBwcm9wcy5cbiAgICB2YXIgZWxlbWVudCA9IGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdFbGVtZW50IHx8XG4gICAgICAgICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudDtcbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VQcm9wcyhcbiAgICAgIGVsZW1lbnQsXG4gICAgICBwcm9wc1xuICAgICk7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIGVucXVldWVFbGVtZW50SW50ZXJuYWw6IGZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UsIG5ld0VsZW1lbnQpIHtcbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nRWxlbWVudCA9IG5ld0VsZW1lbnQ7XG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0VXBkYXRlUXVldWU7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanNcIixcIi4vUmVhY3RDdXJyZW50T3duZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyLmpzXCIsXCIuL1JlYWN0RWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCIsXCIuL1JlYWN0SW5zdGFuY2VNYXBcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5zdGFuY2VNYXAuanNcIixcIi4vUmVhY3RMaWZlQ3ljbGVcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TGlmZUN5Y2xlLmpzXCIsXCIuL1JlYWN0VXBkYXRlc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RVcGRhdGVzLmpzXCIsXCIuL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCIuL3dhcm5pbmdcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3dhcm5pbmcuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFVwZGF0ZXMuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0VXBkYXRlc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENhbGxiYWNrUXVldWUgPSByZXF1aXJlKFwiLi9DYWxsYmFja1F1ZXVlXCIpO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKFwiLi9SZWFjdFBlcmZcIik7XG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZShcIi4vUmVhY3RSZWNvbmNpbGVyXCIpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZShcIi4vVHJhbnNhY3Rpb25cIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIGRpcnR5Q29tcG9uZW50cyA9IFtdO1xudmFyIGFzYXBDYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbnZhciBhc2FwRW5xdWV1ZWQgPSBmYWxzZTtcblxudmFyIGJhdGNoaW5nU3RyYXRlZ3kgPSBudWxsO1xuXG5mdW5jdGlvbiBlbnN1cmVJbmplY3RlZCgpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiAmJiBiYXRjaGluZ1N0cmF0ZWd5LFxuICAgICdSZWFjdFVwZGF0ZXM6IG11c3QgaW5qZWN0IGEgcmVjb25jaWxlIHRyYW5zYWN0aW9uIGNsYXNzIGFuZCBiYXRjaGluZyAnICtcbiAgICAnc3RyYXRlZ3knXG4gICkgOiBpbnZhcmlhbnQoUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gJiYgYmF0Y2hpbmdTdHJhdGVneSkpO1xufVxuXG52YXIgTkVTVEVEX1VQREFURVMgPSB7XG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gZGlydHlDb21wb25lbnRzLmxlbmd0aDtcbiAgfSxcbiAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCAhPT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gQWRkaXRpb25hbCB1cGRhdGVzIHdlcmUgZW5xdWV1ZWQgYnkgY29tcG9uZW50RGlkVXBkYXRlIGhhbmRsZXJzIG9yXG4gICAgICAvLyBzaW1pbGFyOyBiZWZvcmUgb3VyIG93biBVUERBVEVfUVVFVUVJTkcgd3JhcHBlciBjbG9zZXMsIHdlIHdhbnQgdG8gcnVuXG4gICAgICAvLyB0aGVzZSBuZXcgdXBkYXRlcyBzbyB0aGF0IGlmIEEncyBjb21wb25lbnREaWRVcGRhdGUgY2FsbHMgc2V0U3RhdGUgb25cbiAgICAgIC8vIEIsIEIgd2lsbCB1cGRhdGUgYmVmb3JlIHRoZSBjYWxsYmFjayBBJ3MgdXBkYXRlciBwcm92aWRlZCB3aGVuIGNhbGxpbmdcbiAgICAgIC8vIHNldFN0YXRlLlxuICAgICAgZGlydHlDb21wb25lbnRzLnNwbGljZSgwLCB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCk7XG4gICAgICBmbHVzaEJhdGNoZWRVcGRhdGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpcnR5Q29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfVxufTtcblxudmFyIFVQREFURV9RVUVVRUlORyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jYWxsYmFja1F1ZXVlLnJlc2V0KCk7XG4gIH0sXG4gIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNhbGxiYWNrUXVldWUubm90aWZ5QWxsKCk7XG4gIH1cbn07XG5cbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtORVNURURfVVBEQVRFUywgVVBEQVRFX1FVRVVFSU5HXTtcblxuZnVuY3Rpb24gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbigpIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuICB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCA9IG51bGw7XG4gIHRoaXMuY2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG4gIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24gPVxuICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZCgpO1xufVxuXG5hc3NpZ24oXG4gIFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24ucHJvdG90eXBlLFxuICBUcmFuc2FjdGlvbi5NaXhpbiwge1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH0sXG5cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggPSBudWxsO1xuICAgIENhbGxiYWNrUXVldWUucmVsZWFzZSh0aGlzLmNhbGxiYWNrUXVldWUpO1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZSA9IG51bGw7XG4gICAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucmVsZWFzZSh0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uKTtcbiAgICB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uID0gbnVsbDtcbiAgfSxcblxuICBwZXJmb3JtOiBmdW5jdGlvbihtZXRob2QsIHNjb3BlLCBhKSB7XG4gICAgLy8gRXNzZW50aWFsbHkgY2FsbHMgYHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24ucGVyZm9ybShtZXRob2QsIHNjb3BlLCBhKWBcbiAgICAvLyB3aXRoIHRoaXMgdHJhbnNhY3Rpb24ncyB3cmFwcGVycyBhcm91bmQgaXQuXG4gICAgcmV0dXJuIFRyYW5zYWN0aW9uLk1peGluLnBlcmZvcm0uY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uLnBlcmZvcm0sXG4gICAgICB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uLFxuICAgICAgbWV0aG9kLFxuICAgICAgc2NvcGUsXG4gICAgICBhXG4gICAgKTtcbiAgfVxufSk7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uKTtcblxuZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMoY2FsbGJhY2ssIGEsIGIsIGMsIGQpIHtcbiAgZW5zdXJlSW5qZWN0ZWQoKTtcbiAgYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyhjYWxsYmFjaywgYSwgYiwgYywgZCk7XG59XG5cbi8qKlxuICogQXJyYXkgY29tcGFyYXRvciBmb3IgUmVhY3RDb21wb25lbnRzIGJ5IG1vdW50IG9yZGVyaW5nLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGMxIGZpcnN0IGNvbXBvbmVudCB5b3UncmUgY29tcGFyaW5nXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjMiBzZWNvbmQgY29tcG9uZW50IHlvdSdyZSBjb21wYXJpbmdcbiAqIEByZXR1cm4ge251bWJlcn0gUmV0dXJuIHZhbHVlIHVzYWJsZSBieSBBcnJheS5wcm90b3R5cGUuc29ydCgpLlxuICovXG5mdW5jdGlvbiBtb3VudE9yZGVyQ29tcGFyYXRvcihjMSwgYzIpIHtcbiAgcmV0dXJuIGMxLl9tb3VudE9yZGVyIC0gYzIuX21vdW50T3JkZXI7XG59XG5cbmZ1bmN0aW9uIHJ1bkJhdGNoZWRVcGRhdGVzKHRyYW5zYWN0aW9uKSB7XG4gIHZhciBsZW4gPSB0cmFuc2FjdGlvbi5kaXJ0eUNvbXBvbmVudHNMZW5ndGg7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgbGVuID09PSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoLFxuICAgICdFeHBlY3RlZCBmbHVzaCB0cmFuc2FjdGlvblxcJ3Mgc3RvcmVkIGRpcnR5LWNvbXBvbmVudHMgbGVuZ3RoICglcykgdG8gJyArXG4gICAgJ21hdGNoIGRpcnR5LWNvbXBvbmVudHMgYXJyYXkgbGVuZ3RoICglcykuJyxcbiAgICBsZW4sXG4gICAgZGlydHlDb21wb25lbnRzLmxlbmd0aFxuICApIDogaW52YXJpYW50KGxlbiA9PT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkpO1xuXG4gIC8vIFNpbmNlIHJlY29uY2lsaW5nIGEgY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgb3duZXIgaGllcmFyY2h5IHVzdWFsbHkgKG5vdFxuICAvLyBhbHdheXMgLS0gc2VlIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpKSB3aWxsIHJlY29uY2lsZSBjaGlsZHJlbiwgcmVjb25jaWxlXG4gIC8vIHRoZW0gYmVmb3JlIHRoZWlyIGNoaWxkcmVuIGJ5IHNvcnRpbmcgdGhlIGFycmF5LlxuICBkaXJ0eUNvbXBvbmVudHMuc29ydChtb3VudE9yZGVyQ29tcGFyYXRvcik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIC8vIElmIGEgY29tcG9uZW50IGlzIHVubW91bnRlZCBiZWZvcmUgcGVuZGluZyBjaGFuZ2VzIGFwcGx5LCBpdCB3aWxsIHN0aWxsXG4gICAgLy8gYmUgaGVyZSwgYnV0IHdlIGFzc3VtZSB0aGF0IGl0IGhhcyBjbGVhcmVkIGl0cyBfcGVuZGluZ0NhbGxiYWNrcyBhbmRcbiAgICAvLyB0aGF0IHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeSBpcyBhIG5vb3AuXG4gICAgdmFyIGNvbXBvbmVudCA9IGRpcnR5Q29tcG9uZW50c1tpXTtcblxuICAgIC8vIElmIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeSBoYXBwZW5zIHRvIGVucXVldWUgYW55IG5ldyB1cGRhdGVzLCB3ZVxuICAgIC8vIHNob3VsZG4ndCBleGVjdXRlIHRoZSBjYWxsYmFja3MgdW50aWwgdGhlIG5leHQgcmVuZGVyIGhhcHBlbnMsIHNvXG4gICAgLy8gc3Rhc2ggdGhlIGNhbGxiYWNrcyBmaXJzdFxuICAgIHZhciBjYWxsYmFja3MgPSBjb21wb25lbnQuX3BlbmRpbmdDYWxsYmFja3M7XG4gICAgY29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzID0gbnVsbDtcblxuICAgIFJlYWN0UmVjb25jaWxlci5wZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkoXG4gICAgICBjb21wb25lbnQsXG4gICAgICB0cmFuc2FjdGlvbi5yZWNvbmNpbGVUcmFuc2FjdGlvblxuICAgICk7XG5cbiAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNhbGxiYWNrcy5sZW5ndGg7IGorKykge1xuICAgICAgICB0cmFuc2FjdGlvbi5jYWxsYmFja1F1ZXVlLmVucXVldWUoXG4gICAgICAgICAgY2FsbGJhY2tzW2pdLFxuICAgICAgICAgIGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBmbHVzaEJhdGNoZWRVcGRhdGVzID0gZnVuY3Rpb24oKSB7XG4gIC8vIFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24ncyB3cmFwcGVycyB3aWxsIGNsZWFyIHRoZSBkaXJ0eUNvbXBvbmVudHNcbiAgLy8gYXJyYXkgYW5kIHBlcmZvcm0gYW55IHVwZGF0ZXMgZW5xdWV1ZWQgYnkgbW91bnQtcmVhZHkgaGFuZGxlcnMgKGkuZS4sXG4gIC8vIGNvbXBvbmVudERpZFVwZGF0ZSkgYnV0IHdlIG5lZWQgdG8gY2hlY2sgaGVyZSB0b28gaW4gb3JkZXIgdG8gY2F0Y2hcbiAgLy8gdXBkYXRlcyBlbnF1ZXVlZCBieSBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIGFzYXAgY2FsbHMuXG4gIHdoaWxlIChkaXJ0eUNvbXBvbmVudHMubGVuZ3RoIHx8IGFzYXBFbnF1ZXVlZCkge1xuICAgIGlmIChkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgICB2YXIgdHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLmdldFBvb2xlZCgpO1xuICAgICAgdHJhbnNhY3Rpb24ucGVyZm9ybShydW5CYXRjaGVkVXBkYXRlcywgbnVsbCwgdHJhbnNhY3Rpb24pO1xuICAgICAgUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoYXNhcEVucXVldWVkKSB7XG4gICAgICBhc2FwRW5xdWV1ZWQgPSBmYWxzZTtcbiAgICAgIHZhciBxdWV1ZSA9IGFzYXBDYWxsYmFja1F1ZXVlO1xuICAgICAgYXNhcENhbGxiYWNrUXVldWUgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpO1xuICAgICAgcXVldWUubm90aWZ5QWxsKCk7XG4gICAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UocXVldWUpO1xuICAgIH1cbiAgfVxufTtcbmZsdXNoQmF0Y2hlZFVwZGF0ZXMgPSBSZWFjdFBlcmYubWVhc3VyZShcbiAgJ1JlYWN0VXBkYXRlcycsXG4gICdmbHVzaEJhdGNoZWRVcGRhdGVzJyxcbiAgZmx1c2hCYXRjaGVkVXBkYXRlc1xuKTtcblxuLyoqXG4gKiBNYXJrIGEgY29tcG9uZW50IGFzIG5lZWRpbmcgYSByZXJlbmRlciwgYWRkaW5nIGFuIG9wdGlvbmFsIGNhbGxiYWNrIHRvIGFcbiAqIGxpc3Qgb2YgZnVuY3Rpb25zIHdoaWNoIHdpbGwgYmUgZXhlY3V0ZWQgb25jZSB0aGUgcmVyZW5kZXIgb2NjdXJzLlxuICovXG5mdW5jdGlvbiBlbnF1ZXVlVXBkYXRlKGNvbXBvbmVudCkge1xuICBlbnN1cmVJbmplY3RlZCgpO1xuXG4gIC8vIFZhcmlvdXMgcGFydHMgb2Ygb3VyIGNvZGUgKHN1Y2ggYXMgUmVhY3RDb21wb3NpdGVDb21wb25lbnQnc1xuICAvLyBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KSBhc3N1bWUgdGhhdCBjYWxscyB0byByZW5kZXIgYXJlbid0IG5lc3RlZDtcbiAgLy8gdmVyaWZ5IHRoYXQgdGhhdCdzIHRoZSBjYXNlLiAoVGhpcyBpcyBjYWxsZWQgYnkgZWFjaCB0b3AtbGV2ZWwgdXBkYXRlXG4gIC8vIGZ1bmN0aW9uLCBsaWtlIHNldFByb3BzLCBzZXRTdGF0ZSwgZm9yY2VVcGRhdGUsIGV0Yy47IGNyZWF0aW9uIGFuZFxuICAvLyBkZXN0cnVjdGlvbiBvZiB0b3AtbGV2ZWwgY29tcG9uZW50cyBpcyBndWFyZGVkIGluIFJlYWN0TW91bnQuKVxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsXG4gICAgJ2VucXVldWVVcGRhdGUoKTogUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyAnICtcbiAgICAnYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tIHJlbmRlciBpcyBub3QgJyArXG4gICAgJ2FsbG93ZWQuIElmIG5lY2Vzc2FyeSwgdHJpZ2dlciBuZXN0ZWQgdXBkYXRlcyBpbiAnICtcbiAgICAnY29tcG9uZW50RGlkVXBkYXRlLidcbiAgKSA6IG51bGwpO1xuXG4gIGlmICghYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcykge1xuICAgIGJhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMoZW5xdWV1ZVVwZGF0ZSwgY29tcG9uZW50KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBkaXJ0eUNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xufVxuXG4vKipcbiAqIEVucXVldWUgYSBjYWxsYmFjayB0byBiZSBydW4gYXQgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBiYXRjaGluZyBjeWNsZS4gVGhyb3dzXG4gKiBpZiBubyB1cGRhdGVzIGFyZSBjdXJyZW50bHkgYmVpbmcgcGVyZm9ybWVkLlxuICovXG5mdW5jdGlvbiBhc2FwKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyxcbiAgICAnUmVhY3RVcGRhdGVzLmFzYXA6IENhblxcJ3QgZW5xdWV1ZSBhbiBhc2FwIGNhbGxiYWNrIGluIGEgY29udGV4dCB3aGVyZScgK1xuICAgICd1cGRhdGVzIGFyZSBub3QgYmVpbmcgYmF0Y2hlZC4nXG4gICkgOiBpbnZhcmlhbnQoYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcykpO1xuICBhc2FwQ2FsbGJhY2tRdWV1ZS5lbnF1ZXVlKGNhbGxiYWNrLCBjb250ZXh0KTtcbiAgYXNhcEVucXVldWVkID0gdHJ1ZTtcbn1cblxudmFyIFJlYWN0VXBkYXRlc0luamVjdGlvbiA9IHtcbiAgaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb246IGZ1bmN0aW9uKFJlY29uY2lsZVRyYW5zYWN0aW9uKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIFJlY29uY2lsZVRyYW5zYWN0aW9uLFxuICAgICAgJ1JlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgcmVjb25jaWxlIHRyYW5zYWN0aW9uIGNsYXNzJ1xuICAgICkgOiBpbnZhcmlhbnQoUmVjb25jaWxlVHJhbnNhY3Rpb24pKTtcbiAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiA9IFJlY29uY2lsZVRyYW5zYWN0aW9uO1xuICB9LFxuXG4gIGluamVjdEJhdGNoaW5nU3RyYXRlZ3k6IGZ1bmN0aW9uKF9iYXRjaGluZ1N0cmF0ZWd5KSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIF9iYXRjaGluZ1N0cmF0ZWd5LFxuICAgICAgJ1JlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgYmF0Y2hpbmcgc3RyYXRlZ3knXG4gICAgKSA6IGludmFyaWFudChfYmF0Y2hpbmdTdHJhdGVneSkpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMgPT09ICdmdW5jdGlvbicsXG4gICAgICAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYSBiYXRjaGVkVXBkYXRlcygpIGZ1bmN0aW9uJ1xuICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzID09PSAnZnVuY3Rpb24nKSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHR5cGVvZiBfYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA9PT0gJ2Jvb2xlYW4nLFxuICAgICAgJ1JlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGFuIGlzQmF0Y2hpbmdVcGRhdGVzIGJvb2xlYW4gYXR0cmlidXRlJ1xuICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID09PSAnYm9vbGVhbicpKTtcbiAgICBiYXRjaGluZ1N0cmF0ZWd5ID0gX2JhdGNoaW5nU3RyYXRlZ3k7XG4gIH1cbn07XG5cbnZhciBSZWFjdFVwZGF0ZXMgPSB7XG4gIC8qKlxuICAgKiBSZWFjdCByZWZlcmVuY2VzIGBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uYCB1c2luZyB0aGlzIHByb3BlcnR5IGluIG9yZGVyXG4gICAqIHRvIGFsbG93IGRlcGVuZGVuY3kgaW5qZWN0aW9uLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb246IG51bGwsXG5cbiAgYmF0Y2hlZFVwZGF0ZXM6IGJhdGNoZWRVcGRhdGVzLFxuICBlbnF1ZXVlVXBkYXRlOiBlbnF1ZXVlVXBkYXRlLFxuICBmbHVzaEJhdGNoZWRVcGRhdGVzOiBmbHVzaEJhdGNoZWRVcGRhdGVzLFxuICBpbmplY3Rpb246IFJlYWN0VXBkYXRlc0luamVjdGlvbixcbiAgYXNhcDogYXNhcFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFVwZGF0ZXM7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0NhbGxiYWNrUXVldWVcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0NhbGxiYWNrUXVldWUuanNcIixcIi4vT2JqZWN0LmFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1wiLFwiLi9Qb29sZWRDbGFzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUG9vbGVkQ2xhc3MuanNcIixcIi4vUmVhY3RDdXJyZW50T3duZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyLmpzXCIsXCIuL1JlYWN0UGVyZlwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQZXJmLmpzXCIsXCIuL1JlYWN0UmVjb25jaWxlclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSZWNvbmNpbGVyLmpzXCIsXCIuL1RyYW5zYWN0aW9uXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9UcmFuc2FjdGlvbi5qc1wiLFwiLi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwiLi93YXJuaW5nXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi93YXJuaW5nLmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU1ZHRE9NUHJvcGVydHlDb25maWcuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU1ZHRE9NUHJvcGVydHlDb25maWdcbiAqL1xuXG4vKmpzbGludCBiaXR3aXNlOiB0cnVlKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKTtcblxudmFyIE1VU1RfVVNFX0FUVFJJQlVURSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5NVVNUX1VTRV9BVFRSSUJVVEU7XG5cbnZhciBTVkdET01Qcm9wZXJ0eUNvbmZpZyA9IHtcbiAgUHJvcGVydGllczoge1xuICAgIGNsaXBQYXRoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgY3g6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBjeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBkeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZmlsbDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZpbGxPcGFjaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9udEZhbWlseTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvbnRTaXplOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZng6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGdyYWRpZW50VHJhbnNmb3JtOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZ3JhZGllbnRVbml0czogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1hcmtlckVuZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1hcmtlck1pZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1hcmtlclN0YXJ0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgb2Zmc2V0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgb3BhY2l0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHBhdHRlcm5Db250ZW50VW5pdHM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBwYXR0ZXJuVW5pdHM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBwb2ludHM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHJ4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcnk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzcHJlYWRNZXRob2Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdG9wQ29sb3I6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdG9wT3BhY2l0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZURhc2hhcnJheTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZUxpbmVjYXA6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2VPcGFjaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlV2lkdGg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB0ZXh0QW5jaG9yOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgdHJhbnNmb3JtOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgdmVyc2lvbjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHZpZXdCb3g6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4MTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHgyOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHkxOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeTI6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB5OiBNVVNUX1VTRV9BVFRSSUJVVEVcbiAgfSxcbiAgRE9NQXR0cmlidXRlTmFtZXM6IHtcbiAgICBjbGlwUGF0aDogJ2NsaXAtcGF0aCcsXG4gICAgZmlsbE9wYWNpdHk6ICdmaWxsLW9wYWNpdHknLFxuICAgIGZvbnRGYW1pbHk6ICdmb250LWZhbWlseScsXG4gICAgZm9udFNpemU6ICdmb250LXNpemUnLFxuICAgIGdyYWRpZW50VHJhbnNmb3JtOiAnZ3JhZGllbnRUcmFuc2Zvcm0nLFxuICAgIGdyYWRpZW50VW5pdHM6ICdncmFkaWVudFVuaXRzJyxcbiAgICBtYXJrZXJFbmQ6ICdtYXJrZXItZW5kJyxcbiAgICBtYXJrZXJNaWQ6ICdtYXJrZXItbWlkJyxcbiAgICBtYXJrZXJTdGFydDogJ21hcmtlci1zdGFydCcsXG4gICAgcGF0dGVybkNvbnRlbnRVbml0czogJ3BhdHRlcm5Db250ZW50VW5pdHMnLFxuICAgIHBhdHRlcm5Vbml0czogJ3BhdHRlcm5Vbml0cycsXG4gICAgcHJlc2VydmVBc3BlY3RSYXRpbzogJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLFxuICAgIHNwcmVhZE1ldGhvZDogJ3NwcmVhZE1ldGhvZCcsXG4gICAgc3RvcENvbG9yOiAnc3RvcC1jb2xvcicsXG4gICAgc3RvcE9wYWNpdHk6ICdzdG9wLW9wYWNpdHknLFxuICAgIHN0cm9rZURhc2hhcnJheTogJ3N0cm9rZS1kYXNoYXJyYXknLFxuICAgIHN0cm9rZUxpbmVjYXA6ICdzdHJva2UtbGluZWNhcCcsXG4gICAgc3Ryb2tlT3BhY2l0eTogJ3N0cm9rZS1vcGFjaXR5JyxcbiAgICBzdHJva2VXaWR0aDogJ3N0cm9rZS13aWR0aCcsXG4gICAgdGV4dEFuY2hvcjogJ3RleHQtYW5jaG9yJyxcbiAgICB2aWV3Qm94OiAndmlld0JveCdcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTVkdET01Qcm9wZXJ0eUNvbmZpZztcblxufSx7XCIuL0RPTVByb3BlcnR5XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9ET01Qcm9wZXJ0eS5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TZWxlY3RFdmVudFBsdWdpbi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTZWxlY3RFdmVudFBsdWdpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIik7XG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0SW5wdXRTZWxlY3Rpb25cIik7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcblxudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKFwiLi9nZXRBY3RpdmVFbGVtZW50XCIpO1xudmFyIGlzVGV4dElucHV0RWxlbWVudCA9IHJlcXVpcmUoXCIuL2lzVGV4dElucHV0RWxlbWVudFwiKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xudmFyIHNoYWxsb3dFcXVhbCA9IHJlcXVpcmUoXCIuL3NoYWxsb3dFcXVhbFwiKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgc2VsZWN0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblNlbGVjdDogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblNlbGVjdENhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51LFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5RG93bixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2VcbiAgICBdXG4gIH1cbn07XG5cbnZhciBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xudmFyIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xudmFyIG1vdXNlRG93biA9IGZhbHNlO1xuXG4vKipcbiAqIEdldCBhbiBvYmplY3Qgd2hpY2ggaXMgYSB1bmlxdWUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGN1cnJlbnQgc2VsZWN0aW9uLlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBub3QgYmUgY29uc2lzdGVudCBhY3Jvc3Mgbm9kZXMgb3IgYnJvd3NlcnMsIGJ1dFxuICogdHdvIGlkZW50aWNhbCBzZWxlY3Rpb25zIG9uIHRoZSBzYW1lIG5vZGUgd2lsbCByZXR1cm4gaWRlbnRpY2FsIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKG5vZGUpIHtcbiAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gbm9kZSAmJlxuICAgICAgUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMobm9kZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IG5vZGUuc2VsZWN0aW9uU3RhcnQsXG4gICAgICBlbmQ6IG5vZGUuc2VsZWN0aW9uRW5kXG4gICAgfTtcbiAgfSBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAgYW5jaG9yTm9kZTogc2VsZWN0aW9uLmFuY2hvck5vZGUsXG4gICAgICBhbmNob3JPZmZzZXQ6IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgICBmb2N1c05vZGU6IHNlbGVjdGlvbi5mb2N1c05vZGUsXG4gICAgICBmb2N1c09mZnNldDogc2VsZWN0aW9uLmZvY3VzT2Zmc2V0XG4gICAgfTtcbiAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHtcbiAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICByZXR1cm4ge1xuICAgICAgcGFyZW50RWxlbWVudDogcmFuZ2UucGFyZW50RWxlbWVudCgpLFxuICAgICAgdGV4dDogcmFuZ2UudGV4dCxcbiAgICAgIHRvcDogcmFuZ2UuYm91bmRpbmdUb3AsXG4gICAgICBsZWZ0OiByYW5nZS5ib3VuZGluZ0xlZnRcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogUG9sbCBzZWxlY3Rpb24gdG8gc2VlIHdoZXRoZXIgaXQncyBjaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7P1N5bnRoZXRpY0V2ZW50fVxuICovXG5mdW5jdGlvbiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCkge1xuICAvLyBFbnN1cmUgd2UgaGF2ZSB0aGUgcmlnaHQgZWxlbWVudCwgYW5kIHRoYXQgdGhlIHVzZXIgaXMgbm90IGRyYWdnaW5nIGFcbiAgLy8gc2VsZWN0aW9uICh0aGlzIG1hdGNoZXMgbmF0aXZlIGBzZWxlY3RgIGV2ZW50IGJlaGF2aW9yKS4gSW4gSFRNTDUsIHNlbGVjdFxuICAvLyBmaXJlcyBvbmx5IG9uIGlucHV0IGFuZCB0ZXh0YXJlYSB0aHVzIGlmIHRoZXJlJ3Mgbm8gZm9jdXNlZCBlbGVtZW50IHdlXG4gIC8vIHdvbid0IGRpc3BhdGNoLlxuICBpZiAobW91c2VEb3duIHx8XG4gICAgICBhY3RpdmVFbGVtZW50ID09IG51bGwgfHxcbiAgICAgIGFjdGl2ZUVsZW1lbnQgIT09IGdldEFjdGl2ZUVsZW1lbnQoKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gT25seSBmaXJlIHdoZW4gc2VsZWN0aW9uIGhhcyBhY3R1YWxseSBjaGFuZ2VkLlxuICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbihhY3RpdmVFbGVtZW50KTtcbiAgaWYgKCFsYXN0U2VsZWN0aW9uIHx8ICFzaGFsbG93RXF1YWwobGFzdFNlbGVjdGlvbiwgY3VycmVudFNlbGVjdGlvbikpIHtcbiAgICBsYXN0U2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbjtcblxuICAgIHZhciBzeW50aGV0aWNFdmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChcbiAgICAgIGV2ZW50VHlwZXMuc2VsZWN0LFxuICAgICAgYWN0aXZlRWxlbWVudElELFxuICAgICAgbmF0aXZlRXZlbnRcbiAgICApO1xuXG4gICAgc3ludGhldGljRXZlbnQudHlwZSA9ICdzZWxlY3QnO1xuICAgIHN5bnRoZXRpY0V2ZW50LnRhcmdldCA9IGFjdGl2ZUVsZW1lbnQ7XG5cbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoc3ludGhldGljRXZlbnQpO1xuXG4gICAgcmV0dXJuIHN5bnRoZXRpY0V2ZW50O1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBwbHVnaW4gY3JlYXRlcyBhbiBgb25TZWxlY3RgIGV2ZW50IHRoYXQgbm9ybWFsaXplcyBzZWxlY3QgZXZlbnRzXG4gKiBhY3Jvc3MgZm9ybSBlbGVtZW50cy5cbiAqXG4gKiBTdXBwb3J0ZWQgZWxlbWVudHMgYXJlOlxuICogLSBpbnB1dCAoc2VlIGBpc1RleHRJbnB1dEVsZW1lbnRgKVxuICogLSB0ZXh0YXJlYVxuICogLSBjb250ZW50RWRpdGFibGVcbiAqXG4gKiBUaGlzIGRpZmZlcnMgZnJvbSBuYXRpdmUgYnJvd3NlciBpbXBsZW1lbnRhdGlvbnMgaW4gdGhlIGZvbGxvd2luZyB3YXlzOlxuICogLSBGaXJlcyBvbiBjb250ZW50RWRpdGFibGUgZmllbGRzIGFzIHdlbGwgYXMgaW5wdXRzLlxuICogLSBGaXJlcyBmb3IgY29sbGFwc2VkIHNlbGVjdGlvbi5cbiAqIC0gRmlyZXMgYWZ0ZXIgdXNlciBpbnB1dC5cbiAqL1xudmFyIFNlbGVjdEV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuXG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIC8vIFRyYWNrIHRoZSBpbnB1dCBub2RlIHRoYXQgaGFzIGZvY3VzLlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzOlxuICAgICAgICBpZiAoaXNUZXh0SW5wdXRFbGVtZW50KHRvcExldmVsVGFyZ2V0KSB8fFxuICAgICAgICAgICAgdG9wTGV2ZWxUYXJnZXQuY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpIHtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50ID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudElEID0gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgICAgICAgICBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BCbHVyOlxuICAgICAgICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbiAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAvLyBEb24ndCBmaXJlIHRoZSBldmVudCB3aGlsZSB0aGUgdXNlciBpcyBkcmFnZ2luZy4gVGhpcyBtYXRjaGVzIHRoZVxuICAgICAgLy8gc2VtYW50aWNzIG9mIHRoZSBuYXRpdmUgc2VsZWN0IGV2ZW50LlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bjpcbiAgICAgICAgbW91c2VEb3duID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29udGV4dE1lbnU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VVcDpcbiAgICAgICAgbW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCk7XG5cbiAgICAgIC8vIENocm9tZSBhbmQgSUUgZmlyZSBub24tc3RhbmRhcmQgZXZlbnQgd2hlbiBzZWxlY3Rpb24gaXMgY2hhbmdlZCAoYW5kXG4gICAgICAvLyBzb21ldGltZXMgd2hlbiBpdCBoYXNuJ3QpLlxuICAgICAgLy8gRmlyZWZveCBkb2Vzbid0IHN1cHBvcnQgc2VsZWN0aW9uY2hhbmdlLCBzbyBjaGVjayBzZWxlY3Rpb24gc3RhdHVzXG4gICAgICAvLyBhZnRlciBlYWNoIGtleSBlbnRyeS4gVGhlIHNlbGVjdGlvbiBjaGFuZ2VzIGFmdGVyIGtleWRvd24gYW5kIGJlZm9yZVxuICAgICAgLy8ga2V5dXAsIGJ1dCB3ZSBjaGVjayBvbiBrZXlkb3duIGFzIHdlbGwgaW4gdGhlIGNhc2Ugb2YgaG9sZGluZyBkb3duIGFcbiAgICAgIC8vIGtleSwgd2hlbiBtdWx0aXBsZSBrZXlkb3duIGV2ZW50cyBhcmUgZmlyZWQgYnV0IG9ubHkgb25lIGtleXVwIGlzLlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwOlxuICAgICAgICByZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3RFdmVudFBsdWdpbjtcblxufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudENvbnN0YW50cy5qc1wiLFwiLi9FdmVudFByb3BhZ2F0b3JzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFByb3BhZ2F0b3JzLmpzXCIsXCIuL1JlYWN0SW5wdXRTZWxlY3Rpb25cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5wdXRTZWxlY3Rpb24uanNcIixcIi4vU3ludGhldGljRXZlbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0V2ZW50LmpzXCIsXCIuL2dldEFjdGl2ZUVsZW1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEFjdGl2ZUVsZW1lbnQuanNcIixcIi4vaXNUZXh0SW5wdXRFbGVtZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc1RleHRJbnB1dEVsZW1lbnQuanNcIixcIi4va2V5T2ZcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2tleU9mLmpzXCIsXCIuL3NoYWxsb3dFcXVhbFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvc2hhbGxvd0VxdWFsLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1NlcnZlclJlYWN0Um9vdEluZGV4LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFNlcnZlclJlYWN0Um9vdEluZGV4XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaXplIG9mIHRoZSByZWFjdFJvb3QgSUQgc3BhY2UuIFdlIGdlbmVyYXRlIHJhbmRvbSBudW1iZXJzIGZvciBSZWFjdCByb290XG4gKiBJRHMgYW5kIGlmIHRoZXJlJ3MgYSBjb2xsaXNpb24gdGhlIGV2ZW50cyBhbmQgRE9NIHVwZGF0ZSBzeXN0ZW0gd2lsbFxuICogZ2V0IGNvbmZ1c2VkLiBJbiB0aGUgZnV0dXJlIHdlIG5lZWQgYSB3YXkgdG8gZ2VuZXJhdGUgR1VJRHMgYnV0IGZvclxuICogbm93IHRoaXMgd2lsbCB3b3JrIG9uIGEgc21hbGxlciBzY2FsZS5cbiAqL1xudmFyIEdMT0JBTF9NT1VOVF9QT0lOVF9NQVggPSBNYXRoLnBvdygyLCA1Myk7XG5cbnZhciBTZXJ2ZXJSZWFjdFJvb3RJbmRleCA9IHtcbiAgY3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIEdMT0JBTF9NT1VOVF9QT0lOVF9NQVgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZlclJlYWN0Um9vdEluZGV4O1xuXG59LHt9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1NpbXBsZUV2ZW50UGx1Z2luLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTaW1wbGVFdmVudFBsdWdpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQbHVnaW5VdGlscyA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luVXRpbHNcIik7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIik7XG52YXIgU3ludGhldGljQ2xpcGJvYXJkRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudFwiKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xudmFyIFN5bnRoZXRpY0ZvY3VzRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNGb2N1c0V2ZW50XCIpO1xudmFyIFN5bnRoZXRpY0tleWJvYXJkRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNLZXlib2FyZEV2ZW50XCIpO1xudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNNb3VzZUV2ZW50XCIpO1xudmFyIFN5bnRoZXRpY0RyYWdFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0RyYWdFdmVudFwiKTtcbnZhciBTeW50aGV0aWNUb3VjaEV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVG91Y2hFdmVudFwiKTtcbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcbnZhciBTeW50aGV0aWNXaGVlbEV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljV2hlZWxFdmVudFwiKTtcblxudmFyIGdldEV2ZW50Q2hhckNvZGUgPSByZXF1aXJlKFwiLi9nZXRFdmVudENoYXJDb2RlXCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGJsdXI6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQmx1cjogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkJsdXJDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGNsaWNrOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNsaWNrOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ2xpY2tDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGNvbnRleHRNZW51OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbnRleHRNZW51OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29udGV4dE1lbnVDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGNvcHk6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29weTogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNvcHlDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGN1dDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25DdXQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25DdXRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRvdWJsZUNsaWNrOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRvdWJsZUNsaWNrOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRG91YmxlQ2xpY2tDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWc6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZzogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdFbmQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZ0VuZDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdFbmRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdFbnRlcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnRW50ZXI6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnRW50ZXJDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdFeGl0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdFeGl0OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0V4aXRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdMZWF2ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnTGVhdmU6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnTGVhdmVDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdPdmVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdPdmVyOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ092ZXJDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdTdGFydDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnU3RhcnQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnU3RhcnRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyb3A6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJvcDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyb3BDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkZvY3VzOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRm9jdXNDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGlucHV0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbklucHV0OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uSW5wdXRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGtleURvd246IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uS2V5RG93bjogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbktleURvd25DYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGtleVByZXNzOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbktleVByZXNzOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uS2V5UHJlc3NDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGtleVVwOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbktleVVwOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uS2V5VXBDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGxvYWQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uTG9hZDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkxvYWRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGVycm9yOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkVycm9yOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRXJyb3JDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIC8vIE5vdGU6IFdlIGRvIG5vdCBhbGxvdyBsaXN0ZW5pbmcgdG8gbW91c2VPdmVyIGV2ZW50cy4gSW5zdGVhZCwgdXNlIHRoZVxuICAvLyBvbk1vdXNlRW50ZXIvb25Nb3VzZUxlYXZlIGNyZWF0ZWQgYnkgYEVudGVyTGVhdmVFdmVudFBsdWdpbmAuXG4gIG1vdXNlRG93bjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZURvd246IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZURvd25DYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlTW92ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZU1vdmU6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZU1vdmVDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlT3V0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbk1vdXNlT3V0OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTW91c2VPdXRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlT3Zlcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZU92ZXI6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZU92ZXJDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlVXA6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW91c2VVcDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlVXBDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHBhc3RlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblBhc3RlOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uUGFzdGVDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHJlc2V0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblJlc2V0OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uUmVzZXRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHNjcm9sbDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25TY3JvbGw6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TY3JvbGxDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHN1Ym1pdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25TdWJtaXQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TdWJtaXRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoQ2FuY2VsOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblRvdWNoQ2FuY2VsOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVG91Y2hDYW5jZWxDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoRW5kOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblRvdWNoRW5kOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVG91Y2hFbmRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoTW92ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Ub3VjaE1vdmU6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Ub3VjaE1vdmVDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uVG91Y2hTdGFydDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblRvdWNoU3RhcnRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHdoZWVsOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbldoZWVsOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uV2hlZWxDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH1cbn07XG5cbnZhciB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWcgPSB7XG4gIHRvcEJsdXI6ICAgICAgICBldmVudFR5cGVzLmJsdXIsXG4gIHRvcENsaWNrOiAgICAgICBldmVudFR5cGVzLmNsaWNrLFxuICB0b3BDb250ZXh0TWVudTogZXZlbnRUeXBlcy5jb250ZXh0TWVudSxcbiAgdG9wQ29weTogICAgICAgIGV2ZW50VHlwZXMuY29weSxcbiAgdG9wQ3V0OiAgICAgICAgIGV2ZW50VHlwZXMuY3V0LFxuICB0b3BEb3VibGVDbGljazogZXZlbnRUeXBlcy5kb3VibGVDbGljayxcbiAgdG9wRHJhZzogICAgICAgIGV2ZW50VHlwZXMuZHJhZyxcbiAgdG9wRHJhZ0VuZDogICAgIGV2ZW50VHlwZXMuZHJhZ0VuZCxcbiAgdG9wRHJhZ0VudGVyOiAgIGV2ZW50VHlwZXMuZHJhZ0VudGVyLFxuICB0b3BEcmFnRXhpdDogICAgZXZlbnRUeXBlcy5kcmFnRXhpdCxcbiAgdG9wRHJhZ0xlYXZlOiAgIGV2ZW50VHlwZXMuZHJhZ0xlYXZlLFxuICB0b3BEcmFnT3ZlcjogICAgZXZlbnRUeXBlcy5kcmFnT3ZlcixcbiAgdG9wRHJhZ1N0YXJ0OiAgIGV2ZW50VHlwZXMuZHJhZ1N0YXJ0LFxuICB0b3BEcm9wOiAgICAgICAgZXZlbnRUeXBlcy5kcm9wLFxuICB0b3BFcnJvcjogICAgICAgZXZlbnRUeXBlcy5lcnJvcixcbiAgdG9wRm9jdXM6ICAgICAgIGV2ZW50VHlwZXMuZm9jdXMsXG4gIHRvcElucHV0OiAgICAgICBldmVudFR5cGVzLmlucHV0LFxuICB0b3BLZXlEb3duOiAgICAgZXZlbnRUeXBlcy5rZXlEb3duLFxuICB0b3BLZXlQcmVzczogICAgZXZlbnRUeXBlcy5rZXlQcmVzcyxcbiAgdG9wS2V5VXA6ICAgICAgIGV2ZW50VHlwZXMua2V5VXAsXG4gIHRvcExvYWQ6ICAgICAgICBldmVudFR5cGVzLmxvYWQsXG4gIHRvcE1vdXNlRG93bjogICBldmVudFR5cGVzLm1vdXNlRG93bixcbiAgdG9wTW91c2VNb3ZlOiAgIGV2ZW50VHlwZXMubW91c2VNb3ZlLFxuICB0b3BNb3VzZU91dDogICAgZXZlbnRUeXBlcy5tb3VzZU91dCxcbiAgdG9wTW91c2VPdmVyOiAgIGV2ZW50VHlwZXMubW91c2VPdmVyLFxuICB0b3BNb3VzZVVwOiAgICAgZXZlbnRUeXBlcy5tb3VzZVVwLFxuICB0b3BQYXN0ZTogICAgICAgZXZlbnRUeXBlcy5wYXN0ZSxcbiAgdG9wUmVzZXQ6ICAgICAgIGV2ZW50VHlwZXMucmVzZXQsXG4gIHRvcFNjcm9sbDogICAgICBldmVudFR5cGVzLnNjcm9sbCxcbiAgdG9wU3VibWl0OiAgICAgIGV2ZW50VHlwZXMuc3VibWl0LFxuICB0b3BUb3VjaENhbmNlbDogZXZlbnRUeXBlcy50b3VjaENhbmNlbCxcbiAgdG9wVG91Y2hFbmQ6ICAgIGV2ZW50VHlwZXMudG91Y2hFbmQsXG4gIHRvcFRvdWNoTW92ZTogICBldmVudFR5cGVzLnRvdWNoTW92ZSxcbiAgdG9wVG91Y2hTdGFydDogIGV2ZW50VHlwZXMudG91Y2hTdGFydCxcbiAgdG9wV2hlZWw6ICAgICAgIGV2ZW50VHlwZXMud2hlZWxcbn07XG5cbmZvciAodmFyIHR5cGUgaW4gdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnKSB7XG4gIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0eXBlXS5kZXBlbmRlbmNpZXMgPSBbdHlwZV07XG59XG5cbnZhciBTaW1wbGVFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBTYW1lIGFzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uLCBleGNlcHQgY2FuY2VscyB0aGUgZXZlbnQgd2hlbiByZXR1cm5cbiAgICogdmFsdWUgaXMgZmFsc2UuIFRoaXMgYmVoYXZpb3Igd2lsbCBiZSBkaXNhYmxlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gRXZlbnQgdG8gYmUgZGlzcGF0Y2hlZC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gQXBwbGljYXRpb24tbGV2ZWwgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkb21JRCBET00gSUQgdG8gcGFzcyB0byB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBleGVjdXRlRGlzcGF0Y2g6IGZ1bmN0aW9uKGV2ZW50LCBsaXN0ZW5lciwgZG9tSUQpIHtcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBFdmVudFBsdWdpblV0aWxzLmV4ZWN1dGVEaXNwYXRjaChldmVudCwgbGlzdGVuZXIsIGRvbUlEKTtcblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgdHlwZW9mIHJldHVyblZhbHVlICE9PSAnYm9vbGVhbicsXG4gICAgICAnUmV0dXJuaW5nIGBmYWxzZWAgZnJvbSBhbiBldmVudCBoYW5kbGVyIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgJyArXG4gICAgICAnaWdub3JlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiBJbnN0ZWFkLCBtYW51YWxseSBjYWxsICcgK1xuICAgICAgJ2Uuc3RvcFByb3BhZ2F0aW9uKCkgb3IgZS5wcmV2ZW50RGVmYXVsdCgpLCBhcyBhcHByb3ByaWF0ZS4nXG4gICAgKSA6IG51bGwpO1xuXG4gICAgaWYgKHJldHVyblZhbHVlID09PSBmYWxzZSkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIGRpc3BhdGNoQ29uZmlnID0gdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnW3RvcExldmVsVHlwZV07XG4gICAgaWYgKCFkaXNwYXRjaENvbmZpZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBFdmVudENvbnN0cnVjdG9yO1xuICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wSW5wdXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTG9hZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BFcnJvcjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BSZXNldDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTdWJtaXQ6XG4gICAgICAgIC8vIEhUTUwgRXZlbnRzXG4gICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5kZXguaHRtbCNldmVudHMtMFxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgICAgICAvLyBGaXJlRm94IGNyZWF0ZXMgYSBrZXlwcmVzcyBldmVudCBmb3IgZnVuY3Rpb24ga2V5cyB0b28uIFRoaXMgcmVtb3Zlc1xuICAgICAgICAvLyB0aGUgdW53YW50ZWQga2V5cHJlc3MgZXZlbnRzLiBFbnRlciBpcyBob3dldmVyIGJvdGggcHJpbnRhYmxlIGFuZFxuICAgICAgICAvLyBub24tcHJpbnRhYmxlLiBPbmUgd291bGQgZXhwZWN0IFRhYiB0byBiZSBhcyB3ZWxsIChidXQgaXQgaXNuJ3QpLlxuICAgICAgICBpZiAoZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5RG93bjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRm9jdXM6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDbGljazpcbiAgICAgICAgLy8gRmlyZWZveCBjcmVhdGVzIGEgY2xpY2sgZXZlbnQgb24gcmlnaHQgbW91c2UgY2xpY2tzLiBUaGlzIHJlbW92ZXMgdGhlXG4gICAgICAgIC8vIHVud2FudGVkIGNsaWNrIGV2ZW50cy5cbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmJ1dHRvbiA9PT0gMikge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb250ZXh0TWVudTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEb3VibGVDbGljazpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VNb3ZlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlcjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljTW91c2VFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZzpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnRW5kOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFbnRlcjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnRXhpdDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnTGVhdmU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ092ZXI6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ1N0YXJ0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyb3A6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoQ2FuY2VsOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoRW5kOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoTW92ZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0OlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVG91Y2hFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU2Nyb2xsOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVUlFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wV2hlZWw6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNXaGVlbEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb3B5OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEN1dDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZTpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIEV2ZW50Q29uc3RydWN0b3IsXG4gICAgICAnU2ltcGxlRXZlbnRQbHVnaW46IFVuaGFuZGxlZCBldmVudCB0eXBlLCBgJXNgLicsXG4gICAgICB0b3BMZXZlbFR5cGVcbiAgICApIDogaW52YXJpYW50KEV2ZW50Q29uc3RydWN0b3IpKTtcbiAgICB2YXIgZXZlbnQgPSBFdmVudENvbnN0cnVjdG9yLmdldFBvb2xlZChcbiAgICAgIGRpc3BhdGNoQ29uZmlnLFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpbXBsZUV2ZW50UGx1Z2luO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9FdmVudENvbnN0YW50c1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRDb25zdGFudHMuanNcIixcIi4vRXZlbnRQbHVnaW5VdGlsc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQbHVnaW5VdGlscy5qc1wiLFwiLi9FdmVudFByb3BhZ2F0b3JzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFByb3BhZ2F0b3JzLmpzXCIsXCIuL1N5bnRoZXRpY0NsaXBib2FyZEV2ZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudC5qc1wiLFwiLi9TeW50aGV0aWNEcmFnRXZlbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0RyYWdFdmVudC5qc1wiLFwiLi9TeW50aGV0aWNFdmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljRXZlbnQuanNcIixcIi4vU3ludGhldGljRm9jdXNFdmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljRm9jdXNFdmVudC5qc1wiLFwiLi9TeW50aGV0aWNLZXlib2FyZEV2ZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNLZXlib2FyZEV2ZW50LmpzXCIsXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY01vdXNlRXZlbnQuanNcIixcIi4vU3ludGhldGljVG91Y2hFdmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljVG91Y2hFdmVudC5qc1wiLFwiLi9TeW50aGV0aWNVSUV2ZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNVSUV2ZW50LmpzXCIsXCIuL1N5bnRoZXRpY1doZWVsRXZlbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY1doZWVsRXZlbnQuanNcIixcIi4vZ2V0RXZlbnRDaGFyQ29kZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRDaGFyQ29kZS5qc1wiLFwiLi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwiLi9rZXlPZlwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIva2V5T2YuanNcIixcIi4vd2FybmluZ1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvd2FybmluZy5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0NsaXBib2FyZEV2ZW50LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9jbGlwYm9hcmQtYXBpcy9cbiAqL1xudmFyIENsaXBib2FyZEV2ZW50SW50ZXJmYWNlID0ge1xuICBjbGlwYm9hcmREYXRhOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiAoXG4gICAgICAnY2xpcGJvYXJkRGF0YScgaW4gZXZlbnQgP1xuICAgICAgICBldmVudC5jbGlwYm9hcmREYXRhIDpcbiAgICAgICAgd2luZG93LmNsaXBib2FyZERhdGFcbiAgICApO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNDbGlwYm9hcmRFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNDbGlwYm9hcmRFdmVudCwgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xuXG59LHtcIi4vU3ludGhldGljRXZlbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0V2ZW50LmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljQ29tcG9zaXRpb25FdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtY29tcG9zaXRpb25ldmVudHNcbiAqL1xudmFyIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRhdGE6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQoXG4gIGRpc3BhdGNoQ29uZmlnLFxuICBkaXNwYXRjaE1hcmtlcixcbiAgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFxuICBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LFxuICBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlXG4pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQ7XG5cbn0se1wiLi9TeW50aGV0aWNFdmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljRXZlbnQuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljRHJhZ0V2ZW50LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0RyYWdFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNNb3VzZUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljTW91c2VFdmVudFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIERyYWdFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBEcmFnRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRhdGFUcmFuc2ZlcjogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRHJhZ0V2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljTW91c2VFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNNb3VzZUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNEcmFnRXZlbnQsIERyYWdFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljRHJhZ0V2ZW50O1xuXG59LHtcIi4vU3ludGhldGljTW91c2VFdmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljTW91c2VFdmVudC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNFdmVudC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoXCIuL2dldEV2ZW50VGFyZ2V0XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHR5cGU6IG51bGwsXG4gIHRhcmdldDogZ2V0RXZlbnRUYXJnZXQsXG4gIC8vIGN1cnJlbnRUYXJnZXQgaXMgc2V0IHdoZW4gZGlzcGF0Y2hpbmc7IG5vIHVzZSBpbiBjb3B5aW5nIGl0IGhlcmVcbiAgY3VycmVudFRhcmdldDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwsXG4gIGV2ZW50UGhhc2U6IG51bGwsXG4gIGJ1YmJsZXM6IG51bGwsXG4gIGNhbmNlbGFibGU6IG51bGwsXG4gIHRpbWVTdGFtcDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gIH0sXG4gIGRlZmF1bHRQcmV2ZW50ZWQ6IG51bGwsXG4gIGlzVHJ1c3RlZDogbnVsbFxufTtcblxuLyoqXG4gKiBTeW50aGV0aWMgZXZlbnRzIGFyZSBkaXNwYXRjaGVkIGJ5IGV2ZW50IHBsdWdpbnMsIHR5cGljYWxseSBpbiByZXNwb25zZSB0byBhXG4gKiB0b3AtbGV2ZWwgZXZlbnQgZGVsZWdhdGlvbiBoYW5kbGVyLlxuICpcbiAqIFRoZXNlIHN5c3RlbXMgc2hvdWxkIGdlbmVyYWxseSB1c2UgcG9vbGluZyB0byByZWR1Y2UgdGhlIGZyZXF1ZW5jeSBvZiBnYXJiYWdlXG4gKiBjb2xsZWN0aW9uLiBUaGUgc3lzdGVtIHNob3VsZCBjaGVjayBgaXNQZXJzaXN0ZW50YCB0byBkZXRlcm1pbmUgd2hldGhlciB0aGVcbiAqIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBpbnRvIHRoZSBwb29sIGFmdGVyIGJlaW5nIGRpc3BhdGNoZWQuIFVzZXJzIHRoYXRcbiAqIG5lZWQgYSBwZXJzaXN0ZWQgZXZlbnQgc2hvdWxkIGludm9rZSBgcGVyc2lzdGAuXG4gKlxuICogU3ludGhldGljIGV2ZW50cyAoYW5kIHN1YmNsYXNzZXMpIGltcGxlbWVudCB0aGUgRE9NIExldmVsIDMgRXZlbnRzIEFQSSBieVxuICogbm9ybWFsaXppbmcgYnJvd3NlciBxdWlya3MuIFN1YmNsYXNzZXMgZG8gbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gaW1wbGVtZW50IGFcbiAqIERPTSBpbnRlcmZhY2U7IGN1c3RvbSBhcHBsaWNhdGlvbi1zcGVjaWZpYyBldmVudHMgY2FuIGFsc28gc3ViY2xhc3MgdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0V2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IGRpc3BhdGNoQ29uZmlnO1xuICB0aGlzLmRpc3BhdGNoTWFya2VyID0gZGlzcGF0Y2hNYXJrZXI7XG4gIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcblxuICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgIGlmICghSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBub3JtYWxpemUgPSBJbnRlcmZhY2VbcHJvcE5hbWVdO1xuICAgIGlmIChub3JtYWxpemUpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbm9ybWFsaXplKG5hdGl2ZUV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpc1twcm9wTmFtZV0gPSBuYXRpdmVFdmVudFtwcm9wTmFtZV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkICE9IG51bGwgP1xuICAgIG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgOlxuICAgIG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlID09PSBmYWxzZTtcbiAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlO1xuICB9XG4gIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2U7XG59XG5cbmFzc2lnbihTeW50aGV0aWNFdmVudC5wcm90b3R5cGUsIHtcblxuICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogV2UgcmVsZWFzZSBhbGwgZGlzcGF0Y2hlZCBgU3ludGhldGljRXZlbnRgcyBhZnRlciBlYWNoIGV2ZW50IGxvb3AsIGFkZGluZ1xuICAgKiB0aGVtIGJhY2sgaW50byB0aGUgcG9vbC4gVGhpcyBhbGxvd3MgYSB3YXkgdG8gaG9sZCBvbnRvIGEgcmVmZXJlbmNlIHRoYXRcbiAgICogd29uJ3QgYmUgYWRkZWQgYmFjayBpbnRvIHRoZSBwb29sLlxuICAgKi9cbiAgcGVyc2lzdDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc1BlcnNpc3RlbnQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgZXZlbnQgc2hvdWxkIGJlIHJlbGVhc2VkIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGlzIHNob3VsZCBub3QgYmUgcmVsZWFzZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGlzUGVyc2lzdGVudDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlLFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciBgZGVzdHJ1Y3RvcmAgb24gZWFjaCBpbnN0YW5jZSBpdCByZWxlYXNlcy5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IG51bGw7XG4gICAgdGhpcy5kaXNwYXRjaE1hcmtlciA9IG51bGw7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IG51bGw7XG4gIH1cblxufSk7XG5cblN5bnRoZXRpY0V2ZW50LkludGVyZmFjZSA9IEV2ZW50SW50ZXJmYWNlO1xuXG4vKipcbiAqIEhlbHBlciB0byByZWR1Y2UgYm9pbGVycGxhdGUgd2hlbiBjcmVhdGluZyBzdWJjbGFzc2VzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IENsYXNzXG4gKiBAcGFyYW0gez9vYmplY3R9IEludGVyZmFjZVxuICovXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MgPSBmdW5jdGlvbihDbGFzcywgSW50ZXJmYWNlKSB7XG4gIHZhciBTdXBlciA9IHRoaXM7XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgYXNzaWduKHByb3RvdHlwZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgQ2xhc3MucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDbGFzcztcblxuICBDbGFzcy5JbnRlcmZhY2UgPSBhc3NpZ24oe30sIFN1cGVyLkludGVyZmFjZSwgSW50ZXJmYWNlKTtcbiAgQ2xhc3MuYXVnbWVudENsYXNzID0gU3VwZXIuYXVnbWVudENsYXNzO1xuXG4gIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDbGFzcywgUG9vbGVkQ2xhc3MudGhyZWVBcmd1bWVudFBvb2xlcik7XG59O1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oU3ludGhldGljRXZlbnQsIFBvb2xlZENsYXNzLnRocmVlQXJndW1lbnRQb29sZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0V2ZW50O1xuXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1wiLFwiLi9Qb29sZWRDbGFzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUG9vbGVkQ2xhc3MuanNcIixcIi4vZW1wdHlGdW5jdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZW1wdHlGdW5jdGlvbi5qc1wiLFwiLi9nZXRFdmVudFRhcmdldFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRUYXJnZXQuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljRm9jdXNFdmVudC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNGb2N1c0V2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNVSUV2ZW50XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRm9jdXNFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBGb2N1c0V2ZW50SW50ZXJmYWNlID0ge1xuICByZWxhdGVkVGFyZ2V0OiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNGb2N1c0V2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNGb2N1c0V2ZW50LCBGb2N1c0V2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuXG59LHtcIi4vU3ludGhldGljVUlFdmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljVUlFdmVudC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNJbnB1dEV2ZW50LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0lucHV0RXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1XG4gKiAgICAgIC8jZXZlbnRzLWlucHV0ZXZlbnRzXG4gKi9cbnZhciBJbnB1dEV2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNJbnB1dEV2ZW50KFxuICBkaXNwYXRjaENvbmZpZyxcbiAgZGlzcGF0Y2hNYXJrZXIsXG4gIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhcbiAgU3ludGhldGljSW5wdXRFdmVudCxcbiAgSW5wdXRFdmVudEludGVyZmFjZVxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNJbnB1dEV2ZW50O1xuXG59LHtcIi4vU3ludGhldGljRXZlbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0V2ZW50LmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0tleWJvYXJkRXZlbnQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljS2V5Ym9hcmRFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcblxudmFyIGdldEV2ZW50Q2hhckNvZGUgPSByZXF1aXJlKFwiLi9nZXRFdmVudENoYXJDb2RlXCIpO1xudmFyIGdldEV2ZW50S2V5ID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRLZXlcIik7XG52YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRNb2RpZmllclN0YXRlXCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgS2V5Ym9hcmRFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBLZXlib2FyZEV2ZW50SW50ZXJmYWNlID0ge1xuICBrZXk6IGdldEV2ZW50S2V5LFxuICBsb2NhdGlvbjogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgcmVwZWF0OiBudWxsLFxuICBsb2NhbGU6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgLy8gTGVnYWN5IEludGVyZmFjZVxuICBjaGFyQ29kZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAvLyBgY2hhckNvZGVgIGlzIHRoZSByZXN1bHQgb2YgYSBLZXlQcmVzcyBldmVudCBhbmQgcmVwcmVzZW50cyB0aGUgdmFsdWUgb2ZcbiAgICAvLyB0aGUgYWN0dWFsIHByaW50YWJsZSBjaGFyYWN0ZXIuXG5cbiAgICAvLyBLZXlQcmVzcyBpcyBkZXByZWNhdGVkLCBidXQgaXRzIHJlcGxhY2VtZW50IGlzIG5vdCB5ZXQgZmluYWwgYW5kIG5vdFxuICAgIC8vIGltcGxlbWVudGVkIGluIGFueSBtYWpvciBicm93c2VyLiBPbmx5IEtleVByZXNzIGhhcyBjaGFyQ29kZS5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgICAgcmV0dXJuIGdldEV2ZW50Q2hhckNvZGUoZXZlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSxcbiAga2V5Q29kZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAvLyBga2V5Q29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleURvd24vVXAgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gcGh5c2ljYWwga2V5Ym9hcmQga2V5LlxuXG4gICAgLy8gVGhlIGFjdHVhbCBtZWFuaW5nIG9mIHRoZSB2YWx1ZSBkZXBlbmRzIG9uIHRoZSB1c2Vycycga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gd2hpY2ggY2Fubm90IGJlIGRldGVjdGVkLiBBc3N1bWluZyB0aGF0IGl0IGlzIGEgVVMga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gcHJvdmlkZXMgYSBzdXJwcmlzaW5nbHkgYWNjdXJhdGUgbWFwcGluZyBmb3IgVVMgYW5kIEV1cm9wZWFuIHVzZXJzLlxuICAgIC8vIER1ZSB0byB0aGlzLCBpdCBpcyBsZWZ0IHRvIHRoZSB1c2VyIHRvIGltcGxlbWVudCBhdCB0aGlzIHRpbWUuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIHdoaWNoOiBmdW5jdGlvbihldmVudCkge1xuICAgIC8vIGB3aGljaGAgaXMgYW4gYWxpYXMgZm9yIGVpdGhlciBga2V5Q29kZWAgb3IgYGNoYXJDb2RlYCBkZXBlbmRpbmcgb24gdGhlXG4gICAgLy8gdHlwZSBvZiB0aGUgZXZlbnQuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgIHJldHVybiBnZXRFdmVudENoYXJDb2RlKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0tleWJvYXJkRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0tleWJvYXJkRXZlbnQsIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7XG5cbn0se1wiLi9TeW50aGV0aWNVSUV2ZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNVSUV2ZW50LmpzXCIsXCIuL2dldEV2ZW50Q2hhckNvZGVcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEV2ZW50Q2hhckNvZGUuanNcIixcIi4vZ2V0RXZlbnRLZXlcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEV2ZW50S2V5LmpzXCIsXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRNb2RpZmllclN0YXRlLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY01vdXNlRXZlbnQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljTW91c2VFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcbnZhciBWaWV3cG9ydE1ldHJpY3MgPSByZXF1aXJlKFwiLi9WaWV3cG9ydE1ldHJpY3NcIik7XG5cbnZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSByZXF1aXJlKFwiLi9nZXRFdmVudE1vZGlmaWVyU3RhdGVcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBNb3VzZUV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIE1vdXNlRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHNjcmVlblg6IG51bGwsXG4gIHNjcmVlblk6IG51bGwsXG4gIGNsaWVudFg6IG51bGwsXG4gIGNsaWVudFk6IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgYnV0dG9uOiBmdW5jdGlvbihldmVudCkge1xuICAgIC8vIFdlYmtpdCwgRmlyZWZveCwgSUU5K1xuICAgIC8vIHdoaWNoOiAgMSAyIDNcbiAgICAvLyBidXR0b246IDAgMSAyIChzdGFuZGFyZClcbiAgICB2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuICAgIGlmICgnd2hpY2gnIGluIGV2ZW50KSB7XG4gICAgICByZXR1cm4gYnV0dG9uO1xuICAgIH1cbiAgICAvLyBJRTw5XG4gICAgLy8gd2hpY2g6ICB1bmRlZmluZWRcbiAgICAvLyBidXR0b246IDAgMCAwXG4gICAgLy8gYnV0dG9uOiAxIDQgMiAob25tb3VzZXVwKVxuICAgIHJldHVybiBidXR0b24gPT09IDIgPyAyIDogYnV0dG9uID09PSA0ID8gMSA6IDA7XG4gIH0sXG4gIGJ1dHRvbnM6IG51bGwsXG4gIHJlbGF0ZWRUYXJnZXQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgKFxuICAgICAgKChldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudCA/IGV2ZW50LnRvRWxlbWVudCA6IGV2ZW50LmZyb21FbGVtZW50KSlcbiAgICApO1xuICB9LFxuICAvLyBcIlByb3ByaWV0YXJ5XCIgSW50ZXJmYWNlLlxuICBwYWdlWDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VYJyBpbiBldmVudCA/XG4gICAgICBldmVudC5wYWdlWCA6XG4gICAgICBldmVudC5jbGllbnRYICsgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxMZWZ0O1xuICB9LFxuICBwYWdlWTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VZJyBpbiBldmVudCA/XG4gICAgICBldmVudC5wYWdlWSA6XG4gICAgICBldmVudC5jbGllbnRZICsgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3A7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY01vdXNlRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY01vdXNlRXZlbnQsIE1vdXNlRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG5cbn0se1wiLi9TeW50aGV0aWNVSUV2ZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNVSUV2ZW50LmpzXCIsXCIuL1ZpZXdwb3J0TWV0cmljc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvVmlld3BvcnRNZXRyaWNzLmpzXCIsXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRNb2RpZmllclN0YXRlLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY1RvdWNoRXZlbnQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljVG91Y2hFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcblxudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFRvdWNoRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvdG91Y2gtZXZlbnRzL1xuICovXG52YXIgVG91Y2hFdmVudEludGVyZmFjZSA9IHtcbiAgdG91Y2hlczogbnVsbCxcbiAgdGFyZ2V0VG91Y2hlczogbnVsbCxcbiAgY2hhbmdlZFRvdWNoZXM6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVG91Y2hFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVG91Y2hFdmVudCwgVG91Y2hFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljVG91Y2hFdmVudDtcblxufSx7XCIuL1N5bnRoZXRpY1VJRXZlbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY1VJRXZlbnQuanNcIixcIi4vZ2V0RXZlbnRNb2RpZmllclN0YXRlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRFdmVudE1vZGlmaWVyU3RhdGUuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljVUlFdmVudC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNVSUV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG5cbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoXCIuL2dldEV2ZW50VGFyZ2V0XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgVUlFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBVSUV2ZW50SW50ZXJmYWNlID0ge1xuICB2aWV3OiBmdW5jdGlvbihldmVudCkge1xuICAgIGlmIChldmVudC52aWV3KSB7XG4gICAgICByZXR1cm4gZXZlbnQudmlldztcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZXZlbnQpO1xuICAgIGlmICh0YXJnZXQgIT0gbnVsbCAmJiB0YXJnZXQud2luZG93ID09PSB0YXJnZXQpIHtcbiAgICAgIC8vIHRhcmdldCBpcyBhIHdpbmRvdyBvYmplY3RcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgdmFyIGRvYyA9IHRhcmdldC5vd25lckRvY3VtZW50O1xuICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cbiAgICBpZiAoZG9jKSB7XG4gICAgICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICB9LFxuICBkZXRhaWw6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LmRldGFpbCB8fCAwO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVUlFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNVSUV2ZW50LCBVSUV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNVSUV2ZW50O1xuXG59LHtcIi4vU3ludGhldGljRXZlbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0V2ZW50LmpzXCIsXCIuL2dldEV2ZW50VGFyZ2V0XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRFdmVudFRhcmdldC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNXaGVlbEV2ZW50LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY1doZWVsRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBXaGVlbEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIFdoZWVsRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRlbHRhWDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgJ2RlbHRhWCcgaW4gZXZlbnQgPyBldmVudC5kZWx0YVggOlxuICAgICAgLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFYYCBmb3IgV2Via2l0IGFuZCBub3JtYWxpemUgKHJpZ2h0IGlzIHBvc2l0aXZlKS5cbiAgICAgICd3aGVlbERlbHRhWCcgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YVggOiAwXG4gICAgKTtcbiAgfSxcbiAgZGVsdGFZOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiAoXG4gICAgICAnZGVsdGFZJyBpbiBldmVudCA/IGV2ZW50LmRlbHRhWSA6XG4gICAgICAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVlgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgICAnd2hlZWxEZWx0YVknIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFZIDpcbiAgICAgIC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhYCBmb3IgSUU8OSBhbmQgbm9ybWFsaXplIChkb3duIGlzIHBvc2l0aXZlKS5cbiAgICAgICd3aGVlbERlbHRhJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhIDogMFxuICAgICk7XG4gIH0sXG4gIGRlbHRhWjogbnVsbCxcblxuICAvLyBCcm93c2VycyB3aXRob3V0IFwiZGVsdGFNb2RlXCIgaXMgcmVwb3J0aW5nIGluIHJhdyB3aGVlbCBkZWx0YSB3aGVyZSBvbmVcbiAgLy8gbm90Y2ggb24gdGhlIHNjcm9sbCBpcyBhbHdheXMgKy8tIDEyMCwgcm91Z2hseSBlcXVpdmFsZW50IHRvIHBpeGVscy5cbiAgLy8gQSBnb29kIGFwcHJveGltYXRpb24gb2YgRE9NX0RFTFRBX0xJTkUgKDEpIGlzIDUlIG9mIHZpZXdwb3J0IHNpemUgb3JcbiAgLy8gfjQwIHBpeGVscywgZm9yIERPTV9ERUxUQV9TQ1JFRU4gKDIpIGl0IGlzIDg3LjUlIG9mIHZpZXdwb3J0IHNpemUuXG4gIGRlbHRhTW9kZTogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljTW91c2VFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljV2hlZWxFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY01vdXNlRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljV2hlZWxFdmVudCwgV2hlZWxFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljV2hlZWxFdmVudDtcblxufSx7XCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY01vdXNlRXZlbnQuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvVHJhbnNhY3Rpb24uanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFRyYW5zYWN0aW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIGBUcmFuc2FjdGlvbmAgY3JlYXRlcyBhIGJsYWNrIGJveCB0aGF0IGlzIGFibGUgdG8gd3JhcCBhbnkgbWV0aG9kIHN1Y2ggdGhhdFxuICogY2VydGFpbiBpbnZhcmlhbnRzIGFyZSBtYWludGFpbmVkIGJlZm9yZSBhbmQgYWZ0ZXIgdGhlIG1ldGhvZCBpcyBpbnZva2VkXG4gKiAoRXZlbiBpZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIHdoaWxlIGludm9raW5nIHRoZSB3cmFwcGVkIG1ldGhvZCkuIFdob2V2ZXJcbiAqIGluc3RhbnRpYXRlcyBhIHRyYW5zYWN0aW9uIGNhbiBwcm92aWRlIGVuZm9yY2VycyBvZiB0aGUgaW52YXJpYW50cyBhdFxuICogY3JlYXRpb24gdGltZS4gVGhlIGBUcmFuc2FjdGlvbmAgY2xhc3MgaXRzZWxmIHdpbGwgc3VwcGx5IG9uZSBhZGRpdGlvbmFsXG4gKiBhdXRvbWF0aWMgaW52YXJpYW50IGZvciB5b3UgLSB0aGUgaW52YXJpYW50IHRoYXQgYW55IHRyYW5zYWN0aW9uIGluc3RhbmNlXG4gKiBzaG91bGQgbm90IGJlIHJ1biB3aGlsZSBpdCBpcyBhbHJlYWR5IGJlaW5nIHJ1bi4gWW91IHdvdWxkIHR5cGljYWxseSBjcmVhdGUgYVxuICogc2luZ2xlIGluc3RhbmNlIG9mIGEgYFRyYW5zYWN0aW9uYCBmb3IgcmV1c2UgbXVsdGlwbGUgdGltZXMsIHRoYXQgcG90ZW50aWFsbHlcbiAqIGlzIHVzZWQgdG8gd3JhcCBzZXZlcmFsIGRpZmZlcmVudCBtZXRob2RzLiBXcmFwcGVycyBhcmUgZXh0cmVtZWx5IHNpbXBsZSAtXG4gKiB0aGV5IG9ubHkgcmVxdWlyZSBpbXBsZW1lbnRpbmcgdHdvIG1ldGhvZHMuXG4gKlxuICogPHByZT5cbiAqICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVycyAoaW5qZWN0ZWQgYXQgY3JlYXRpb24gdGltZSlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICAgICAgICArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLXwtLS0tLS0tLS0tLS0tLStcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICB2ICAgICAgICB8ICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICAgICstLS0tLS0tLS0tLS0tLS0rICAgfCAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICArLS18ICAgIHdyYXBwZXIxICAgfC0tLXwtLS0tKyAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgKy0tLS0tLS0tLS0tLS0tLSsgICB2ICAgIHwgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgICAgICAgKy0tLS0tLS0tLS0tLS0rICB8ICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICArLS0tLXwgICB3cmFwcGVyMiAgfC0tLS0tLS0tKyAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgfCAgICArLS0tLS0tLS0tLS0tLSsgIHwgICAgIHwgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgIHwgICAgICAgICAgICAgICAgICAgICB8ICAgICB8ICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB2ICAgICB2ICAgICAgICAgICAgICAgICAgICAgdiAgICAgdiAgIHwgd3JhcHBlclxuICogICAgICAgICAgICAgICAgICAgIHwgKy0tLSsgKy0tLSsgICArLS0tLS0tLS0tKyAgICstLS0rICstLS0rIHwgaW52YXJpYW50c1xuICogcGVyZm9ybShhbnlNZXRob2QpIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHwgbWFpbnRhaW5lZFxuICogKy0tLS0tLS0tLS0tLS0tLS0tPnwtfC0tLXwtfC0tLXwtLT58YW55TWV0aG9kfC0tLXwtLS18LXwtLS18LXwtLS0tLS0tLT5cbiAqICAgICAgICAgICAgICAgICAgICB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuICogICAgICAgICAgICAgICAgICAgIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICstLS0rICstLS0rICAgKy0tLS0tLS0tLSsgICArLS0tKyArLS0tKyB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgaW5pdGlhbGl6ZSAgICAgICAgICAgICAgICAgICAgY2xvc2UgICAgfFxuICogICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAqIDwvcHJlPlxuICpcbiAqIFVzZSBjYXNlczpcbiAqIC0gUHJlc2VydmluZyB0aGUgaW5wdXQgc2VsZWN0aW9uIHJhbmdlcyBiZWZvcmUvYWZ0ZXIgcmVjb25jaWxpYXRpb24uXG4gKiAgIFJlc3RvcmluZyBzZWxlY3Rpb24gZXZlbiBpbiB0aGUgZXZlbnQgb2YgYW4gdW5leHBlY3RlZCBlcnJvci5cbiAqIC0gRGVhY3RpdmF0aW5nIGV2ZW50cyB3aGlsZSByZWFycmFuZ2luZyB0aGUgRE9NLCBwcmV2ZW50aW5nIGJsdXJzL2ZvY3VzZXMsXG4gKiAgIHdoaWxlIGd1YXJhbnRlZWluZyB0aGF0IGFmdGVyd2FyZHMsIHRoZSBldmVudCBzeXN0ZW0gaXMgcmVhY3RpdmF0ZWQuXG4gKiAtIEZsdXNoaW5nIGEgcXVldWUgb2YgY29sbGVjdGVkIERPTSBtdXRhdGlvbnMgdG8gdGhlIG1haW4gVUkgdGhyZWFkIGFmdGVyIGFcbiAqICAgcmVjb25jaWxpYXRpb24gdGFrZXMgcGxhY2UgaW4gYSB3b3JrZXIgdGhyZWFkLlxuICogLSBJbnZva2luZyBhbnkgY29sbGVjdGVkIGBjb21wb25lbnREaWRVcGRhdGVgIGNhbGxiYWNrcyBhZnRlciByZW5kZXJpbmcgbmV3XG4gKiAgIGNvbnRlbnQuXG4gKiAtIChGdXR1cmUgdXNlIGNhc2UpOiBXcmFwcGluZyBwYXJ0aWN1bGFyIGZsdXNoZXMgb2YgdGhlIGBSZWFjdFdvcmtlcmAgcXVldWVcbiAqICAgdG8gcHJlc2VydmUgdGhlIGBzY3JvbGxUb3BgIChhbiBhdXRvbWF0aWMgc2Nyb2xsIGF3YXJlIERPTSkuXG4gKiAtIChGdXR1cmUgdXNlIGNhc2UpOiBMYXlvdXQgY2FsY3VsYXRpb25zIGJlZm9yZSBhbmQgYWZ0ZXIgRE9NIHVwZGF0ZXMuXG4gKlxuICogVHJhbnNhY3Rpb25hbCBwbHVnaW4gQVBJOlxuICogLSBBIG1vZHVsZSB0aGF0IGhhcyBhbiBgaW5pdGlhbGl6ZWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhbnkgcHJlY29tcHV0YXRpb24uXG4gKiAtIGFuZCBhIGBjbG9zZWAgbWV0aG9kIHRoYXQgYWNjZXB0cyB0aGUgcHJlY29tcHV0YXRpb24uIGBjbG9zZWAgaXMgaW52b2tlZFxuICogICB3aGVuIHRoZSB3cmFwcGVkIHByb2Nlc3MgaXMgY29tcGxldGVkLCBvciBoYXMgZmFpbGVkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VHJhbnNhY3Rpb25hbFdyYXBwZXI+fSB0cmFuc2FjdGlvbldyYXBwZXIgV3JhcHBlciBtb2R1bGVzXG4gKiB0aGF0IGltcGxlbWVudCBgaW5pdGlhbGl6ZWAgYW5kIGBjbG9zZWAuXG4gKiBAcmV0dXJuIHtUcmFuc2FjdGlvbn0gU2luZ2xlIHRyYW5zYWN0aW9uIGZvciByZXVzZSBpbiB0aHJlYWQuXG4gKlxuICogQGNsYXNzIFRyYW5zYWN0aW9uXG4gKi9cbnZhciBNaXhpbiA9IHtcbiAgLyoqXG4gICAqIFNldHMgdXAgdGhpcyBpbnN0YW5jZSBzbyB0aGF0IGl0IGlzIHByZXBhcmVkIGZvciBjb2xsZWN0aW5nIG1ldHJpY3MuIERvZXNcbiAgICogc28gc3VjaCB0aGF0IHRoaXMgc2V0dXAgbWV0aG9kIG1heSBiZSB1c2VkIG9uIGFuIGluc3RhbmNlIHRoYXQgaXMgYWxyZWFkeVxuICAgKiBpbml0aWFsaXplZCwgaW4gYSB3YXkgdGhhdCBkb2VzIG5vdCBjb25zdW1lIGFkZGl0aW9uYWwgbWVtb3J5IHVwb24gcmV1c2UuXG4gICAqIFRoYXQgY2FuIGJlIHVzZWZ1bCBpZiB5b3UgZGVjaWRlIHRvIG1ha2UgeW91ciBzdWJjbGFzcyBvZiB0aGlzIG1peGluIGFcbiAgICogXCJQb29sZWRDbGFzc1wiLlxuICAgKi9cbiAgcmVpbml0aWFsaXplVHJhbnNhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycyA9IHRoaXMuZ2V0VHJhbnNhY3Rpb25XcmFwcGVycygpO1xuICAgIGlmICghdGhpcy53cmFwcGVySW5pdERhdGEpIHtcbiAgICAgIHRoaXMud3JhcHBlckluaXREYXRhID0gW107XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud3JhcHBlckluaXREYXRhLmxlbmd0aCA9IDA7XG4gICAgfVxuICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IGZhbHNlO1xuICB9LFxuXG4gIF9pc0luVHJhbnNhY3Rpb246IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHJldHVybiB7QXJyYXk8VHJhbnNhY3Rpb25XcmFwcGVyPn0gQXJyYXkgb2YgdHJhbnNhY3Rpb24gd3JhcHBlcnMuXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBudWxsLFxuXG4gIGlzSW5UcmFuc2FjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICEhdGhpcy5faXNJblRyYW5zYWN0aW9uO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgZnVuY3Rpb24gd2l0aGluIGEgc2FmZXR5IHdpbmRvdy4gVXNlIHRoaXMgZm9yIHRoZSB0b3AgbGV2ZWxcbiAgICogbWV0aG9kcyB0aGF0IHJlc3VsdCBpbiBsYXJnZSBhbW91bnRzIG9mIGNvbXB1dGF0aW9uL211dGF0aW9ucyB0aGF0IHdvdWxkXG4gICAqIG5lZWQgdG8gYmUgc2FmZXR5IGNoZWNrZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1ldGhvZCBNZW1iZXIgb2Ygc2NvcGUgdG8gY2FsbC5cbiAgICogQHBhcmFtIHtPYmplY3R9IHNjb3BlIFNjb3BlIHRvIGludm9rZSBmcm9tLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBhcmdzLi4uIEFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBtZXRob2QgKG9wdGlvbmFsKS5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxwcyBwcmV2ZW50IG5lZWQgdG8gYmluZCBpbiBtYW55IGNhc2VzLlxuICAgKiBAcmV0dXJuIFJldHVybiB2YWx1ZSBmcm9tIGBtZXRob2RgLlxuICAgKi9cbiAgcGVyZm9ybTogZnVuY3Rpb24obWV0aG9kLCBzY29wZSwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAhdGhpcy5pc0luVHJhbnNhY3Rpb24oKSxcbiAgICAgICdUcmFuc2FjdGlvbi5wZXJmb3JtKC4uLik6IENhbm5vdCBpbml0aWFsaXplIGEgdHJhbnNhY3Rpb24gd2hlbiB0aGVyZSAnICtcbiAgICAgICdpcyBhbHJlYWR5IGFuIG91dHN0YW5kaW5nIHRyYW5zYWN0aW9uLidcbiAgICApIDogaW52YXJpYW50KCF0aGlzLmlzSW5UcmFuc2FjdGlvbigpKSk7XG4gICAgdmFyIGVycm9yVGhyb3duO1xuICAgIHZhciByZXQ7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IHRydWU7XG4gICAgICAvLyBDYXRjaGluZyBlcnJvcnMgbWFrZXMgZGVidWdnaW5nIG1vcmUgZGlmZmljdWx0LCBzbyB3ZSBzdGFydCB3aXRoXG4gICAgICAvLyBlcnJvclRocm93biBzZXQgdG8gdHJ1ZSBiZWZvcmUgc2V0dGluZyBpdCB0byBmYWxzZSBhZnRlciBjYWxsaW5nXG4gICAgICAvLyBjbG9zZSAtLSBpZiBpdCdzIHN0aWxsIHNldCB0byB0cnVlIGluIHRoZSBmaW5hbGx5IGJsb2NrLCBpdCBtZWFuc1xuICAgICAgLy8gb25lIG9mIHRoZXNlIGNhbGxzIHRocmV3LlxuICAgICAgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgdGhpcy5pbml0aWFsaXplQWxsKDApO1xuICAgICAgcmV0ID0gbWV0aG9kLmNhbGwoc2NvcGUsIGEsIGIsIGMsIGQsIGUsIGYpO1xuICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgLy8gSWYgYG1ldGhvZGAgdGhyb3dzLCBwcmVmZXIgdG8gc2hvdyB0aGF0IHN0YWNrIHRyYWNlIG92ZXIgYW55IHRocm93blxuICAgICAgICAgIC8vIGJ5IGludm9raW5nIGBjbG9zZUFsbGAuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VBbGwoMCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNpbmNlIGBtZXRob2RgIGRpZG4ndCB0aHJvdywgd2UgZG9uJ3Qgd2FudCB0byBzaWxlbmNlIHRoZSBleGNlcHRpb25cbiAgICAgICAgICAvLyBoZXJlLlxuICAgICAgICAgIHRoaXMuY2xvc2VBbGwoMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIGluaXRpYWxpemVBbGw6IGZ1bmN0aW9uKHN0YXJ0SW5kZXgpIHtcbiAgICB2YXIgdHJhbnNhY3Rpb25XcmFwcGVycyA9IHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycztcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRyYW5zYWN0aW9uV3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3cmFwcGVyID0gdHJhbnNhY3Rpb25XcmFwcGVyc1tpXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGggdGhlXG4gICAgICAgIC8vIE9CU0VSVkVEX0VSUk9SIHN0YXRlIGJlZm9yZSBvdmVyd3JpdGluZyBpdCB3aXRoIHRoZSByZWFsIHJldHVybiB2YWx1ZVxuICAgICAgICAvLyBvZiBpbml0aWFsaXplIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIE9CU0VSVkVEX0VSUk9SIGluIHRoZSBmaW5hbGx5XG4gICAgICAgIC8vIGJsb2NrLCBpdCBtZWFucyB3cmFwcGVyLmluaXRpYWxpemUgdGhyZXcuXG4gICAgICAgIHRoaXMud3JhcHBlckluaXREYXRhW2ldID0gVHJhbnNhY3Rpb24uT0JTRVJWRURfRVJST1I7XG4gICAgICAgIHRoaXMud3JhcHBlckluaXREYXRhW2ldID0gd3JhcHBlci5pbml0aWFsaXplID9cbiAgICAgICAgICB3cmFwcGVyLmluaXRpYWxpemUuY2FsbCh0aGlzKSA6XG4gICAgICAgICAgbnVsbDtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmICh0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9PT0gVHJhbnNhY3Rpb24uT0JTRVJWRURfRVJST1IpIHtcbiAgICAgICAgICAvLyBUaGUgaW5pdGlhbGl6ZXIgZm9yIHdyYXBwZXIgaSB0aHJldyBhbiBlcnJvcjsgaW5pdGlhbGl6ZSB0aGVcbiAgICAgICAgICAvLyByZW1haW5pbmcgd3JhcHBlcnMgYnV0IHNpbGVuY2UgYW55IGV4Y2VwdGlvbnMgZnJvbSB0aGVtIHRvIGVuc3VyZVxuICAgICAgICAgIC8vIHRoYXQgdGhlIGZpcnN0IGVycm9yIGlzIHRoZSBvbmUgdG8gYnViYmxlIHVwLlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVBbGwoaSArIDEpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlcyBlYWNoIG9mIGB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMuY2xvc2VbaV1gIGZ1bmN0aW9ucywgcGFzc2luZyBpbnRvXG4gICAqIHRoZW0gdGhlIHJlc3BlY3RpdmUgcmV0dXJuIHZhbHVlcyBvZiBgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzLmluaXRbaV1gXG4gICAqIChgY2xvc2VgcnMgdGhhdCBjb3JyZXNwb25kIHRvIGluaXRpYWxpemVycyB0aGF0IGZhaWxlZCB3aWxsIG5vdCBiZVxuICAgKiBpbnZva2VkKS5cbiAgICovXG4gIGNsb3NlQWxsOiBmdW5jdGlvbihzdGFydEluZGV4KSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHRoaXMuaXNJblRyYW5zYWN0aW9uKCksXG4gICAgICAnVHJhbnNhY3Rpb24uY2xvc2VBbGwoKTogQ2Fubm90IGNsb3NlIHRyYW5zYWN0aW9uIHdoZW4gbm9uZSBhcmUgb3Blbi4nXG4gICAgKSA6IGludmFyaWFudCh0aGlzLmlzSW5UcmFuc2FjdGlvbigpKSk7XG4gICAgdmFyIHRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnM7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCB0cmFuc2FjdGlvbldyYXBwZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd3JhcHBlciA9IHRyYW5zYWN0aW9uV3JhcHBlcnNbaV07XG4gICAgICB2YXIgaW5pdERhdGEgPSB0aGlzLndyYXBwZXJJbml0RGF0YVtpXTtcbiAgICAgIHZhciBlcnJvclRocm93bjtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGhcbiAgICAgICAgLy8gZXJyb3JUaHJvd24gc2V0IHRvIHRydWUgYmVmb3JlIHNldHRpbmcgaXQgdG8gZmFsc2UgYWZ0ZXIgY2FsbGluZ1xuICAgICAgICAvLyBjbG9zZSAtLSBpZiBpdCdzIHN0aWxsIHNldCB0byB0cnVlIGluIHRoZSBmaW5hbGx5IGJsb2NrLCBpdCBtZWFuc1xuICAgICAgICAvLyB3cmFwcGVyLmNsb3NlIHRocmV3LlxuICAgICAgICBlcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGlmIChpbml0RGF0YSAhPT0gVHJhbnNhY3Rpb24uT0JTRVJWRURfRVJST1IgJiYgd3JhcHBlci5jbG9zZSkge1xuICAgICAgICAgIHdyYXBwZXIuY2xvc2UuY2FsbCh0aGlzLCBpbml0RGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgIC8vIFRoZSBjbG9zZXIgZm9yIHdyYXBwZXIgaSB0aHJldyBhbiBlcnJvcjsgY2xvc2UgdGhlIHJlbWFpbmluZ1xuICAgICAgICAgIC8vIHdyYXBwZXJzIGJ1dCBzaWxlbmNlIGFueSBleGNlcHRpb25zIGZyb20gdGhlbSB0byBlbnN1cmUgdGhhdCB0aGVcbiAgICAgICAgICAvLyBmaXJzdCBlcnJvciBpcyB0aGUgb25lIHRvIGJ1YmJsZSB1cC5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUFsbChpICsgMSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLndyYXBwZXJJbml0RGF0YS5sZW5ndGggPSAwO1xuICB9XG59O1xuXG52YXIgVHJhbnNhY3Rpb24gPSB7XG5cbiAgTWl4aW46IE1peGluLFxuXG4gIC8qKlxuICAgKiBUb2tlbiB0byBsb29rIGZvciB0byBkZXRlcm1pbmUgaWYgYW4gZXJyb3Igb2NjdXJlZC5cbiAgICovXG4gIE9CU0VSVkVEX0VSUk9SOiB7fVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zYWN0aW9uO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1ZpZXdwb3J0TWV0cmljcy5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBWaWV3cG9ydE1ldHJpY3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBWaWV3cG9ydE1ldHJpY3MgPSB7XG5cbiAgY3VycmVudFNjcm9sbExlZnQ6IDAsXG5cbiAgY3VycmVudFNjcm9sbFRvcDogMCxcblxuICByZWZyZXNoU2Nyb2xsVmFsdWVzOiBmdW5jdGlvbihzY3JvbGxQb3NpdGlvbikge1xuICAgIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsTGVmdCA9IHNjcm9sbFBvc2l0aW9uLng7XG4gICAgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3AgPSBzY3JvbGxQb3NpdGlvbi55O1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVmlld3BvcnRNZXRyaWNzO1xuXG59LHt9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2FjY3VtdWxhdGVJbnRvLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBhY2N1bXVsYXRlSW50b1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKlxuICogQWNjdW11bGF0ZXMgaXRlbXMgdGhhdCBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBpbnRvIHRoZSBmaXJzdCBvbmUuIFRoaXNcbiAqIGlzIHVzZWQgdG8gY29uc2VydmUgbWVtb3J5IGJ5IGF2b2lkaW5nIGFycmF5IGFsbG9jYXRpb25zLCBhbmQgdGh1cyBzYWNyaWZpY2VzXG4gKiBBUEkgY2xlYW5uZXNzLiBTaW5jZSBgY3VycmVudGAgY2FuIGJlIG51bGwgYmVmb3JlIGJlaW5nIHBhc3NlZCBpbiBhbmQgbm90XG4gKiBudWxsIGFmdGVyIHRoaXMgZnVuY3Rpb24sIG1ha2Ugc3VyZSB0byBhc3NpZ24gaXQgYmFjayB0byBgY3VycmVudGA6XG4gKlxuICogYGEgPSBhY2N1bXVsYXRlSW50byhhLCBiKTtgXG4gKlxuICogVGhpcyBBUEkgc2hvdWxkIGJlIHNwYXJpbmdseSB1c2VkLiBUcnkgYGFjY3VtdWxhdGVgIGZvciBzb21ldGhpbmcgY2xlYW5lci5cbiAqXG4gKiBAcmV0dXJuIHsqfGFycmF5PCo+fSBBbiBhY2N1bXVsYXRpb24gb2YgaXRlbXMuXG4gKi9cblxuZnVuY3Rpb24gYWNjdW11bGF0ZUludG8oY3VycmVudCwgbmV4dCkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIG5leHQgIT0gbnVsbCxcbiAgICAnYWNjdW11bGF0ZUludG8oLi4uKTogQWNjdW11bGF0ZWQgaXRlbXMgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuJ1xuICApIDogaW52YXJpYW50KG5leHQgIT0gbnVsbCkpO1xuICBpZiAoY3VycmVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH1cblxuICAvLyBCb3RoIGFyZSBub3QgZW1wdHkuIFdhcm5pbmc6IE5ldmVyIGNhbGwgeC5jb25jYXQoeSkgd2hlbiB5b3UgYXJlIG5vdFxuICAvLyBjZXJ0YWluIHRoYXQgeCBpcyBhbiBBcnJheSAoeCBjb3VsZCBiZSBhIHN0cmluZyB3aXRoIGNvbmNhdCBtZXRob2QpLlxuICB2YXIgY3VycmVudElzQXJyYXkgPSBBcnJheS5pc0FycmF5KGN1cnJlbnQpO1xuICB2YXIgbmV4dElzQXJyYXkgPSBBcnJheS5pc0FycmF5KG5leHQpO1xuXG4gIGlmIChjdXJyZW50SXNBcnJheSAmJiBuZXh0SXNBcnJheSkge1xuICAgIGN1cnJlbnQucHVzaC5hcHBseShjdXJyZW50LCBuZXh0KTtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuXG4gIGlmIChjdXJyZW50SXNBcnJheSkge1xuICAgIGN1cnJlbnQucHVzaChuZXh0KTtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuXG4gIGlmIChuZXh0SXNBcnJheSkge1xuICAgIC8vIEEgYml0IHRvbyBkYW5nZXJvdXMgdG8gbXV0YXRlIGBuZXh0YC5cbiAgICByZXR1cm4gW2N1cnJlbnRdLmNvbmNhdChuZXh0KTtcbiAgfVxuXG4gIHJldHVybiBbY3VycmVudCwgbmV4dF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWNjdW11bGF0ZUludG87XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvYWRsZXIzMi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBhZGxlcjMyXG4gKi9cblxuLyoganNsaW50IGJpdHdpc2U6dHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBNT0QgPSA2NTUyMTtcblxuLy8gVGhpcyBpcyBhIGNsZWFuLXJvb20gaW1wbGVtZW50YXRpb24gb2YgYWRsZXIzMiBkZXNpZ25lZCBmb3IgZGV0ZWN0aW5nXG4vLyBpZiBtYXJrdXAgaXMgbm90IHdoYXQgd2UgZXhwZWN0IGl0IHRvIGJlLiBJdCBkb2VzIG5vdCBuZWVkIHRvIGJlXG4vLyBjcnlwdG9ncmFwaGljYWxseSBzdHJvbmcsIG9ubHkgcmVhc29uYWJseSBnb29kIGF0IGRldGVjdGluZyBpZiBtYXJrdXBcbi8vIGdlbmVyYXRlZCBvbiB0aGUgc2VydmVyIGlzIGRpZmZlcmVudCB0aGFuIHRoYXQgb24gdGhlIGNsaWVudC5cbmZ1bmN0aW9uIGFkbGVyMzIoZGF0YSkge1xuICB2YXIgYSA9IDE7XG4gIHZhciBiID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgYSA9IChhICsgZGF0YS5jaGFyQ29kZUF0KGkpKSAlIE1PRDtcbiAgICBiID0gKGIgKyBhKSAlIE1PRDtcbiAgfVxuICByZXR1cm4gYSB8IChiIDw8IDE2KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyO1xuXG59LHt9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2NhbWVsaXplLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNhbWVsaXplXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG5cbi8qKlxuICogQ2FtZWxjYXNlcyBhIGh5cGhlbmF0ZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gY2FtZWxpemUoJ2JhY2tncm91bmQtY29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZENvbG9yXCJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX2h5cGhlblBhdHRlcm4sIGZ1bmN0aW9uKF8sIGNoYXJhY3Rlcikge1xuICAgIHJldHVybiBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxpemU7XG5cbn0se31dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY2FtZWxpemVTdHlsZU5hbWUuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY2FtZWxpemVTdHlsZU5hbWVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjYW1lbGl6ZSA9IHJlcXVpcmUoXCIuL2NhbWVsaXplXCIpO1xuXG52YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcblxuLyoqXG4gKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJy1tb3otdHJhbnNpdGlvbicpXG4gKiAgIDwgXCJNb3pUcmFuc2l0aW9uXCJcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnLW1zLXRyYW5zaXRpb24nKVxuICogICA8IFwibXNUcmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBBbmRpIFNtaXRoIHN1Z2dlc3RzXG4gKiAoaHR0cDovL3d3dy5hbmRpc21pdGguY29tL2Jsb2cvMjAxMi8wMi9tb2Rlcm5penItcHJlZml4ZWQvKSwgYW4gYC1tc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGNhbWVsaXplKHN0cmluZy5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZVN0eWxlTmFtZTtcblxufSx7XCIuL2NhbWVsaXplXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jYW1lbGl6ZS5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jb250YWluc05vZGUuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY29udGFpbnNOb2RlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZShcIi4vaXNUZXh0Tm9kZVwiKTtcblxuLypqc2xpbnQgYml0d2lzZTp0cnVlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqXG4gKiBAcGFyYW0gez9ET01Ob2RlfSBvdXRlck5vZGUgT3V0ZXIgRE9NIG5vZGUuXG4gKiBAcGFyYW0gez9ET01Ob2RlfSBpbm5lck5vZGUgSW5uZXIgRE9NIG5vZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvdXRlck5vZGVgIGNvbnRhaW5zIG9yIGlzIGBpbm5lck5vZGVgLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb250YWlucykge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlO1xuXG59LHtcIi4vaXNUZXh0Tm9kZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaXNUZXh0Tm9kZS5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jcmVhdGVBcnJheUZyb21NaXhlZC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjcmVhdGVBcnJheUZyb21NaXhlZFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgdG9BcnJheSA9IHJlcXVpcmUoXCIuL3RvQXJyYXlcIik7XG5cbi8qKlxuICogUGVyZm9ybSBhIGhldXJpc3RpYyB0ZXN0IHRvIGRldGVybWluZSBpZiBhbiBvYmplY3QgaXMgXCJhcnJheS1saWtlXCIuXG4gKlxuICogICBBIG1vbmsgYXNrZWQgSm9zaHUsIGEgWmVuIG1hc3RlciwgXCJIYXMgYSBkb2cgQnVkZGhhIG5hdHVyZT9cIlxuICogICBKb3NodSByZXBsaWVkOiBcIk11LlwiXG4gKlxuICogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGl0cyBhcmd1bWVudCBoYXMgXCJhcnJheSBuYXR1cmVcIjogaXQgcmV0dXJuc1xuICogdHJ1ZSBpZiB0aGUgYXJndW1lbnQgaXMgYW4gYWN0dWFsIGFycmF5LCBhbiBgYXJndW1lbnRzJyBvYmplY3QsIG9yIGFuXG4gKiBIVE1MQ29sbGVjdGlvbiAoZS5nLiBub2RlLmNoaWxkTm9kZXMgb3Igbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgpKS5cbiAqXG4gKiBJdCB3aWxsIHJldHVybiBmYWxzZSBmb3Igb3RoZXIgYXJyYXktbGlrZSBvYmplY3RzIGxpa2UgRmlsZWxpc3QuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc0FycmF5TmF0dXJlKG9iaikge1xuICByZXR1cm4gKFxuICAgIC8vIG5vdCBudWxsL2ZhbHNlXG4gICAgISFvYmogJiZcbiAgICAvLyBhcnJheXMgYXJlIG9iamVjdHMsIE5vZGVMaXN0cyBhcmUgZnVuY3Rpb25zIGluIFNhZmFyaVxuICAgICh0eXBlb2Ygb2JqID09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT0gJ2Z1bmN0aW9uJykgJiZcbiAgICAvLyBxdWFja3MgbGlrZSBhbiBhcnJheVxuICAgICgnbGVuZ3RoJyBpbiBvYmopICYmXG4gICAgLy8gbm90IHdpbmRvd1xuICAgICEoJ3NldEludGVydmFsJyBpbiBvYmopICYmXG4gICAgLy8gbm8gRE9NIG5vZGUgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYW4gYXJyYXktbGlrZVxuICAgIC8vIGEgJ3NlbGVjdCcgZWxlbWVudCBoYXMgJ2xlbmd0aCcgYW5kICdpdGVtJyBwcm9wZXJ0aWVzIG9uIElFOFxuICAgICh0eXBlb2Ygb2JqLm5vZGVUeXBlICE9ICdudW1iZXInKSAmJlxuICAgIChcbiAgICAgIC8vIGEgcmVhbCBhcnJheVxuICAgICAgKC8vIEhUTUxDb2xsZWN0aW9uL05vZGVMaXN0XG4gICAgICAoQXJyYXkuaXNBcnJheShvYmopIHx8XG4gICAgICAvLyBhcmd1bWVudHNcbiAgICAgICgnY2FsbGVlJyBpbiBvYmopIHx8ICdpdGVtJyBpbiBvYmopKVxuICAgIClcbiAgKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhhdCB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXkgYnkgd3JhcHBpbmcgaXQgaW4gYW4gYXJyYXkgaWYgaXQgaXMgbm90LlxuICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhlIGFyZ3VtZW50IGlmIGl0IGlzIGFscmVhZHkgYW4gYXJyYXkuXG4gKlxuICogVGhpcyBpcyBtb3N0bHkgdXNlZnVsIGlkaW9tYXRpY2FsbHk6XG4gKlxuICogICB2YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKCdjcmVhdGVBcnJheUZyb21NaXhlZCcpO1xuICpcbiAqICAgZnVuY3Rpb24gdGFrZXNPbmVPck1vcmVUaGluZ3ModGhpbmdzKSB7XG4gKiAgICAgdGhpbmdzID0gY3JlYXRlQXJyYXlGcm9tTWl4ZWQodGhpbmdzKTtcbiAqICAgICAuLi5cbiAqICAgfVxuICpcbiAqIFRoaXMgYWxsb3dzIHlvdSB0byB0cmVhdCBgdGhpbmdzJyBhcyBhbiBhcnJheSwgYnV0IGFjY2VwdCBzY2FsYXJzIGluIHRoZSBBUEkuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gY29udmVydCBhbiBhcnJheS1saWtlIG9iamVjdCwgbGlrZSBgYXJndW1lbnRzYCwgaW50byBhbiBhcnJheVxuICogdXNlIHRvQXJyYXkgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5RnJvbU1peGVkKG9iaikge1xuICBpZiAoIWhhc0FycmF5TmF0dXJlKG9iaikpIHtcbiAgICByZXR1cm4gW29ial07XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5zbGljZSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b0FycmF5KG9iaik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBcnJheUZyb21NaXhlZDtcblxufSx7XCIuL3RvQXJyYXlcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3RvQXJyYXkuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gRGVmZWF0IGNpcmN1bGFyIHJlZmVyZW5jZXMgYnkgcmVxdWlyaW5nIHRoaXMgZGlyZWN0bHkuXG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIENyZWF0ZSBhIGNvbXBvbmVudCB0aGF0IHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIHdoZW4gdW5tb3VudGVkLlxuICpcbiAqIENvbXBvbmVudHMgbGlrZSA8aHRtbD4gPGhlYWQ+IGFuZCA8Ym9keT4gY2FuJ3QgYmUgcmVtb3ZlZCBvciBhZGRlZFxuICogZWFzaWx5IGluIGEgY3Jvc3MtYnJvd3NlciB3YXksIGhvd2V2ZXIgaXQncyB2YWx1YWJsZSB0byBiZSBhYmxlIHRvXG4gKiB0YWtlIGFkdmFudGFnZSBvZiBSZWFjdCdzIHJlY29uY2lsaWF0aW9uIGZvciBzdHlsaW5nIGFuZCA8dGl0bGU+XG4gKiBtYW5hZ2VtZW50LiBTbyB3ZSBqdXN0IGRvY3VtZW50IGl0IGFuZCB0aHJvdyBpbiBkYW5nZXJvdXMgY2FzZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgdGFnIHRvIHdyYXBcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBjb252ZW5pZW5jZSBjb25zdHJ1Y3RvciBvZiBuZXcgY29tcG9uZW50XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50KHRhZykge1xuICB2YXIgZWxlbWVudEZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSh0YWcpO1xuXG4gIHZhciBGdWxsUGFnZUNvbXBvbmVudCA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICAgIHRhZ05hbWU6IHRhZy50b1VwcGVyQ2FzZSgpLFxuICAgIGRpc3BsYXlOYW1lOiAnUmVhY3RGdWxsUGFnZUNvbXBvbmVudCcgKyB0YWcsXG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJyVzIHRyaWVkIHRvIHVubW91bnQuIEJlY2F1c2Ugb2YgY3Jvc3MtYnJvd3NlciBxdWlya3MgaXQgaXMgJyArXG4gICAgICAgICdpbXBvc3NpYmxlIHRvIHVubW91bnQgc29tZSB0b3AtbGV2ZWwgY29tcG9uZW50cyAoZWcgPGh0bWw+LCA8aGVhZD4sICcgK1xuICAgICAgICAnYW5kIDxib2R5PikgcmVsaWFibHkgYW5kIGVmZmljaWVudGx5LiBUbyBmaXggdGhpcywgaGF2ZSBhIHNpbmdsZSAnICtcbiAgICAgICAgJ3RvcC1sZXZlbCBjb21wb25lbnQgdGhhdCBuZXZlciB1bm1vdW50cyByZW5kZXIgdGhlc2UgZWxlbWVudHMuJyxcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZVxuICAgICAgKSA6IGludmFyaWFudChmYWxzZSkpO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnRGYWN0b3J5KHRoaXMucHJvcHMpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIEZ1bGxQYWdlQ29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdENsYXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENsYXNzLmpzXCIsXCIuL1JlYWN0RWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCIsXCIuL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY3JlYXRlTm9kZXNGcm9tTWFya3VwLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXBcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSwgc3ViOiB0cnVlICovXG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKFwiLi9jcmVhdGVBcnJheUZyb21NaXhlZFwiKTtcbnZhciBnZXRNYXJrdXBXcmFwID0gcmVxdWlyZShcIi4vZ2V0TWFya3VwV3JhcFwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogRHVtbXkgY29udGFpbmVyIHVzZWQgdG8gcmVuZGVyIGFsbCBtYXJrdXAuXG4gKi9cbnZhciBkdW1teU5vZGUgPVxuICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA6IG51bGw7XG5cbi8qKlxuICogUGF0dGVybiB1c2VkIGJ5IGBnZXROb2RlTmFtZWAuXG4gKi9cbnZhciBub2RlTmFtZVBhdHRlcm4gPSAvXlxccyo8KFxcdyspLztcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgYG5vZGVOYW1lYCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiBhIHN0cmluZyBvZiBtYXJrdXAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBTdHJpbmcgb2YgbWFya3VwLlxuICogQHJldHVybiB7P3N0cmluZ30gTm9kZSBuYW1lIG9mIHRoZSBzdXBwbGllZCBtYXJrdXAuXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVOYW1lKG1hcmt1cCkge1xuICB2YXIgbm9kZU5hbWVNYXRjaCA9IG1hcmt1cC5tYXRjaChub2RlTmFtZVBhdHRlcm4pO1xuICByZXR1cm4gbm9kZU5hbWVNYXRjaCAmJiBub2RlTmFtZU1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBub2RlcyByZW5kZXJlZCBmcm9tIHRoZSBzdXBwbGllZCBtYXJrdXAuIFRoZVxuICogb3B0aW9uYWxseSBzdXBwbGllZCBgaGFuZGxlU2NyaXB0YCBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgb25jZSBmb3IgZWFjaFxuICogPHNjcmlwdD4gZWxlbWVudCB0aGF0IGlzIHJlbmRlcmVkLiBJZiBubyBgaGFuZGxlU2NyaXB0YCBmdW5jdGlvbiBpcyBzdXBwbGllZCxcbiAqIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gaWYgYW55IDxzY3JpcHQ+IGVsZW1lbnRzIGFyZSByZW5kZXJlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIEEgc3RyaW5nIG9mIHZhbGlkIEhUTUwgbWFya3VwLlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGhhbmRsZVNjcmlwdCBJbnZva2VkIG9uY2UgZm9yIGVhY2ggcmVuZGVyZWQgPHNjcmlwdD4uXG4gKiBAcmV0dXJuIHthcnJheTxET01FbGVtZW50fERPTVRleHROb2RlPn0gQW4gYXJyYXkgb2YgcmVuZGVyZWQgbm9kZXMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXAsIGhhbmRsZVNjcmlwdCkge1xuICB2YXIgbm9kZSA9IGR1bW15Tm9kZTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudCghIWR1bW15Tm9kZSwgJ2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCBkdW1teSBub3QgaW5pdGlhbGl6ZWQnKSA6IGludmFyaWFudCghIWR1bW15Tm9kZSkpO1xuICB2YXIgbm9kZU5hbWUgPSBnZXROb2RlTmFtZShtYXJrdXApO1xuXG4gIHZhciB3cmFwID0gbm9kZU5hbWUgJiYgZ2V0TWFya3VwV3JhcChub2RlTmFtZSk7XG4gIGlmICh3cmFwKSB7XG4gICAgbm9kZS5pbm5lckhUTUwgPSB3cmFwWzFdICsgbWFya3VwICsgd3JhcFsyXTtcblxuICAgIHZhciB3cmFwRGVwdGggPSB3cmFwWzBdO1xuICAgIHdoaWxlICh3cmFwRGVwdGgtLSkge1xuICAgICAgbm9kZSA9IG5vZGUubGFzdENoaWxkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBub2RlLmlubmVySFRNTCA9IG1hcmt1cDtcbiAgfVxuXG4gIHZhciBzY3JpcHRzID0gbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gIGlmIChzY3JpcHRzLmxlbmd0aCkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBoYW5kbGVTY3JpcHQsXG4gICAgICAnY3JlYXRlTm9kZXNGcm9tTWFya3VwKC4uLik6IFVuZXhwZWN0ZWQgPHNjcmlwdD4gZWxlbWVudCByZW5kZXJlZC4nXG4gICAgKSA6IGludmFyaWFudChoYW5kbGVTY3JpcHQpKTtcbiAgICBjcmVhdGVBcnJheUZyb21NaXhlZChzY3JpcHRzKS5mb3JFYWNoKGhhbmRsZVNjcmlwdCk7XG4gIH1cblxuICB2YXIgbm9kZXMgPSBjcmVhdGVBcnJheUZyb21NaXhlZChub2RlLmNoaWxkTm9kZXMpO1xuICB3aGlsZSAobm9kZS5sYXN0Q2hpbGQpIHtcbiAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanNcIixcIi4vY3JlYXRlQXJyYXlGcm9tTWl4ZWRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2NyZWF0ZUFycmF5RnJvbU1peGVkLmpzXCIsXCIuL2dldE1hcmt1cFdyYXBcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldE1hcmt1cFdyYXAuanNcIixcIi4vaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGRhbmdlcm91c1N0eWxlVmFsdWVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ1NTUHJvcGVydHkgPSByZXF1aXJlKFwiLi9DU1NQcm9wZXJ0eVwiKTtcblxudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSBDU1NQcm9wZXJ0eS5pc1VuaXRsZXNzTnVtYmVyO1xuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSBpbnRvIHRoZSBwcm9wZXIgY3NzIHdyaXRhYmxlIHZhbHVlLiBUaGUgc3R5bGUgbmFtZSBgbmFtZWBcbiAqIHNob3VsZCBiZSBsb2dpY2FsIChubyBoeXBoZW5zKSwgYXMgc3BlY2lmaWVkXG4gKiBpbiBgQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcmAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQ1NTIHByb3BlcnR5IG5hbWUgc3VjaCBhcyBgdG9wTWFyZ2luYC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQ1NTIHByb3BlcnR5IHZhbHVlIHN1Y2ggYXMgYDEwcHhgLlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIHN0eWxlIHZhbHVlIHdpdGggZGltZW5zaW9ucyBhcHBsaWVkLlxuICovXG5mdW5jdGlvbiBkYW5nZXJvdXNTdHlsZVZhbHVlKG5hbWUsIHZhbHVlKSB7XG4gIC8vIE5vdGUgdGhhdCB3ZSd2ZSByZW1vdmVkIGVzY2FwZVRleHRGb3JCcm93c2VyKCkgY2FsbHMgaGVyZSBzaW5jZSB0aGVcbiAgLy8gd2hvbGUgc3RyaW5nIHdpbGwgYmUgZXNjYXBlZCB3aGVuIHRoZSBhdHRyaWJ1dGUgaXMgaW5qZWN0ZWQgaW50b1xuICAvLyB0aGUgbWFya3VwLiBJZiB5b3UgcHJvdmlkZSB1bnNhZmUgdXNlciBkYXRhIGhlcmUgdGhleSBjYW4gaW5qZWN0XG4gIC8vIGFyYml0cmFyeSBDU1Mgd2hpY2ggbWF5IGJlIHByb2JsZW1hdGljIChJIGNvdWxkbid0IHJlcHJvIHRoaXMpOlxuICAvLyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1hTU19GaWx0ZXJfRXZhc2lvbl9DaGVhdF9TaGVldFxuICAvLyBodHRwOi8vd3d3LnRoZXNwYW5uZXIuY28udWsvMjAwNy8xMS8yNi91bHRpbWF0ZS14c3MtY3NzLWluamVjdGlvbi9cbiAgLy8gVGhpcyBpcyBub3QgYW4gWFNTIGhvbGUgYnV0IGluc3RlYWQgYSBwb3RlbnRpYWwgQ1NTIGluamVjdGlvbiBpc3N1ZVxuICAvLyB3aGljaCBoYXMgbGVhZCB0byBhIGdyZWF0ZXIgZGlzY3Vzc2lvbiBhYm91dCBob3cgd2UncmUgZ29pbmcgdG9cbiAgLy8gdHJ1c3QgVVJMcyBtb3ZpbmcgZm9yd2FyZC4gU2VlICMyMTE1OTAxXG5cbiAgdmFyIGlzRW1wdHkgPSB2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8IHZhbHVlID09PSAnJztcbiAgaWYgKGlzRW1wdHkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgaXNOb25OdW1lcmljID0gaXNOYU4odmFsdWUpO1xuICBpZiAoaXNOb25OdW1lcmljIHx8IHZhbHVlID09PSAwIHx8XG4gICAgICBpc1VuaXRsZXNzTnVtYmVyLmhhc093blByb3BlcnR5KG5hbWUpICYmIGlzVW5pdGxlc3NOdW1iZXJbbmFtZV0pIHtcbiAgICByZXR1cm4gJycgKyB2YWx1ZTsgLy8gY2FzdCB0byBzdHJpbmdcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlICsgJ3B4Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkYW5nZXJvdXNTdHlsZVZhbHVlO1xuXG59LHtcIi4vQ1NTUHJvcGVydHlcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0NTU1Byb3BlcnR5LmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2VtcHR5RnVuY3Rpb24uanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZW1wdHlGdW5jdGlvblxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24oYXJnKSB7IHJldHVybiBhcmc7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9lbXB0eU9iamVjdC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZW1wdHlPYmplY3RcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGVtcHR5T2JqZWN0ID0ge307XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEVTQ0FQRV9MT09LVVAgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJz4nOiAnJmd0OycsXG4gICc8JzogJyZsdDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgJ1xcJyc6ICcmI3gyNzsnXG59O1xuXG52YXIgRVNDQVBFX1JFR0VYID0gL1smPjxcIiddL2c7XG5cbmZ1bmN0aW9uIGVzY2FwZXIobWF0Y2gpIHtcbiAgcmV0dXJuIEVTQ0FQRV9MT09LVVBbbWF0Y2hdO1xufVxuXG4vKipcbiAqIEVzY2FwZXMgdGV4dCB0byBwcmV2ZW50IHNjcmlwdGluZyBhdHRhY2tzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdGV4dCBUZXh0IHZhbHVlIHRvIGVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0ZXh0KSB7XG4gIHJldHVybiAoJycgKyB0ZXh0KS5yZXBsYWNlKEVTQ0FQRV9SRUdFWCwgZXNjYXBlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyO1xuXG59LHt9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZpbmRET01Ob2RlLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmaW5kRE9NTm9kZVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoXCIuL2lzTm9kZVwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBET00gbm9kZSByZW5kZXJlZCBieSB0aGlzIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudHxET01FbGVtZW50fSBjb21wb25lbnRPckVsZW1lbnRcbiAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IFRoZSByb290IG5vZGUgb2YgdGhpcyBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBmaW5kRE9NTm9kZShjb21wb25lbnRPckVsZW1lbnQpIHtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIHZhciBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgb3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyLFxuICAgICAgICAnJXMgaXMgYWNjZXNzaW5nIGdldERPTU5vZGUgb3IgZmluZERPTU5vZGUgaW5zaWRlIGl0cyByZW5kZXIoKS4gJyArXG4gICAgICAgICdyZW5kZXIoKSBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZS4gSXQgc2hvdWxkICcgK1xuICAgICAgICAnbmV2ZXIgYWNjZXNzIHNvbWV0aGluZyB0aGF0IHJlcXVpcmVzIHN0YWxlIGRhdGEgZnJvbSB0aGUgcHJldmlvdXMgJyArXG4gICAgICAgICdyZW5kZXIsIHN1Y2ggYXMgcmVmcy4gTW92ZSB0aGlzIGxvZ2ljIHRvIGNvbXBvbmVudERpZE1vdW50IGFuZCAnICtcbiAgICAgICAgJ2NvbXBvbmVudERpZFVwZGF0ZSBpbnN0ZWFkLicsXG4gICAgICAgIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnXG4gICAgICApIDogbnVsbCk7XG4gICAgICBvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoY29tcG9uZW50T3JFbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoaXNOb2RlKGNvbXBvbmVudE9yRWxlbWVudCkpIHtcbiAgICByZXR1cm4gY29tcG9uZW50T3JFbGVtZW50O1xuICB9XG4gIGlmIChSZWFjdEluc3RhbmNlTWFwLmhhcyhjb21wb25lbnRPckVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIFJlYWN0TW91bnQuZ2V0Tm9kZUZyb21JbnN0YW5jZShjb21wb25lbnRPckVsZW1lbnQpO1xuICB9XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlciA9PSBudWxsIHx8XG4gICAgdHlwZW9mIGNvbXBvbmVudE9yRWxlbWVudC5yZW5kZXIgIT09ICdmdW5jdGlvbicsXG4gICAgJ0NvbXBvbmVudCAod2l0aCBrZXlzOiAlcykgY29udGFpbnMgYHJlbmRlcmAgbWV0aG9kICcgK1xuICAgICdidXQgaXMgbm90IG1vdW50ZWQgaW4gdGhlIERPTScsXG4gICAgT2JqZWN0LmtleXMoY29tcG9uZW50T3JFbGVtZW50KVxuICApIDogaW52YXJpYW50KGNvbXBvbmVudE9yRWxlbWVudC5yZW5kZXIgPT0gbnVsbCB8fFxuICB0eXBlb2YgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlciAhPT0gJ2Z1bmN0aW9uJykpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGZhbHNlLFxuICAgICdFbGVtZW50IGFwcGVhcnMgdG8gYmUgbmVpdGhlciBSZWFjdENvbXBvbmVudCBub3IgRE9NTm9kZSAoa2V5czogJXMpJyxcbiAgICBPYmplY3Qua2V5cyhjb21wb25lbnRPckVsZW1lbnQpXG4gICkgOiBpbnZhcmlhbnQoZmFsc2UpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaW5kRE9NTm9kZTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RDdXJyZW50T3duZXJcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyLmpzXCIsXCIuL1JlYWN0SW5zdGFuY2VNYXBcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5zdGFuY2VNYXAuanNcIixcIi4vUmVhY3RNb3VudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNb3VudC5qc1wiLFwiLi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwiLi9pc05vZGVcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2lzTm9kZS5qc1wiLFwiLi93YXJuaW5nXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi93YXJuaW5nLmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZmxhdHRlbkNoaWxkcmVuLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmbGF0dGVuQ2hpbGRyZW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZShcIi4vdHJhdmVyc2VBbGxDaGlsZHJlblwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0cmF2ZXJzZUNvbnRleHQgQ29udGV4dCBwYXNzZWQgdGhyb3VnaCB0cmF2ZXJzYWwuXG4gKiBAcGFyYW0gez9SZWFjdENvbXBvbmVudH0gY2hpbGQgUmVhY3QgY2hpbGQgY29tcG9uZW50LlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFN0cmluZyBuYW1lIG9mIGtleSBwYXRoIHRvIGNoaWxkLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lKSB7XG4gIC8vIFdlIGZvdW5kIGEgY29tcG9uZW50IGluc3RhbmNlLlxuICB2YXIgcmVzdWx0ID0gdHJhdmVyc2VDb250ZXh0O1xuICB2YXIga2V5VW5pcXVlID0gIXJlc3VsdC5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAga2V5VW5pcXVlLFxuICAgICAgJ2ZsYXR0ZW5DaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksICcgK1xuICAgICAgJ2Alc2AuIENoaWxkIGtleXMgbXVzdCBiZSB1bmlxdWU7IHdoZW4gdHdvIGNoaWxkcmVuIHNoYXJlIGEga2V5LCBvbmx5ICcgK1xuICAgICAgJ3RoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIHVzZWQuJyxcbiAgICAgIG5hbWVcbiAgICApIDogbnVsbCk7XG4gIH1cbiAgaWYgKGtleVVuaXF1ZSAmJiBjaGlsZCAhPSBudWxsKSB7XG4gICAgcmVzdWx0W25hbWVdID0gY2hpbGQ7XG4gIH1cbn1cblxuLyoqXG4gKiBGbGF0dGVucyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuIEFueSBudWxsXG4gKiBjaGlsZHJlbiB3aWxsIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0aW5nIG9iamVjdC5cbiAqIEByZXR1cm4geyFvYmplY3R9IGZsYXR0ZW5lZCBjaGlsZHJlbiBrZXllZCBieSBuYW1lLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgcmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuQ2hpbGRyZW47XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL3RyYXZlcnNlQWxsQ2hpbGRyZW5cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3RyYXZlcnNlQWxsQ2hpbGRyZW4uanNcIixcIi4vd2FybmluZ1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvd2FybmluZy5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZvY3VzTm9kZS5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmb2N1c05vZGVcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgaW5wdXQvdGV4dGFyZWEgdG8gZm9jdXNcbiAqL1xuZnVuY3Rpb24gZm9jdXNOb2RlKG5vZGUpIHtcbiAgLy8gSUU4IGNhbiB0aHJvdyBcIkNhbid0IG1vdmUgZm9jdXMgdG8gdGhlIGNvbnRyb2wgYmVjYXVzZSBpdCBpcyBpbnZpc2libGUsXG4gIC8vIG5vdCBlbmFibGVkLCBvciBvZiBhIHR5cGUgdGhhdCBkb2VzIG5vdCBhY2NlcHQgdGhlIGZvY3VzLlwiIGZvciBhbGwga2luZHMgb2ZcbiAgLy8gcmVhc29ucyB0aGF0IGFyZSB0b28gZXhwZW5zaXZlIGFuZCBmcmFnaWxlIHRvIHRlc3QuXG4gIHRyeSB7XG4gICAgbm9kZS5mb2N1cygpO1xuICB9IGNhdGNoKGUpIHtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvY3VzTm9kZTtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9mb3JFYWNoQWNjdW11bGF0ZWQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZm9yRWFjaEFjY3VtdWxhdGVkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7YXJyYXl9IGFuIFwiYWNjdW11bGF0aW9uXCIgb2YgaXRlbXMgd2hpY2ggaXMgZWl0aGVyIGFuIEFycmF5IG9yXG4gKiBhIHNpbmdsZSBpdGVtLiBVc2VmdWwgd2hlbiBwYWlyZWQgd2l0aCB0aGUgYGFjY3VtdWxhdGVgIG1vZHVsZS4gVGhpcyBpcyBhXG4gKiBzaW1wbGUgdXRpbGl0eSB0aGF0IGFsbG93cyB1cyB0byByZWFzb24gYWJvdXQgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zLCBidXRcbiAqIGhhbmRsaW5nIHRoZSBjYXNlIHdoZW4gdGhlcmUgaXMgZXhhY3RseSBvbmUgaXRlbSAoYW5kIHdlIGRvIG5vdCBuZWVkIHRvXG4gKiBhbGxvY2F0ZSBhbiBhcnJheSkuXG4gKi9cbnZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSBmdW5jdGlvbihhcnIsIGNiLCBzY29wZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgYXJyLmZvckVhY2goY2IsIHNjb3BlKTtcbiAgfSBlbHNlIGlmIChhcnIpIHtcbiAgICBjYi5jYWxsKHNjb3BlLCBhcnIpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2hBY2N1bXVsYXRlZDtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEFjdGl2ZUVsZW1lbnRcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgYm9keSBpcyBub3QgeWV0IGRlZmluZWQuXG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoKSAvKj9ET01FbGVtZW50Ki8ge1xuICB0cnkge1xuICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IGRvY3VtZW50LmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7XG5cbn0se31dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRDaGFyQ29kZS5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudENoYXJDb2RlXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBgY2hhckNvZGVgIHJlcHJlc2VudHMgdGhlIGFjdHVhbCBcImNoYXJhY3RlciBjb2RlXCIgYW5kIGlzIHNhZmUgdG8gdXNlIHdpdGhcbiAqIGBTdHJpbmcuZnJvbUNoYXJDb2RlYC4gQXMgc3VjaCwgb25seSBrZXlzIHRoYXQgY29ycmVzcG9uZCB0byBwcmludGFibGVcbiAqIGNoYXJhY3RlcnMgcHJvZHVjZSBhIHZhbGlkIGBjaGFyQ29kZWAsIHRoZSBvbmx5IGV4Y2VwdGlvbiB0byB0aGlzIGlzIEVudGVyLlxuICogVGhlIFRhYi1rZXkgaXMgY29uc2lkZXJlZCBub24tcHJpbnRhYmxlIGFuZCBkb2VzIG5vdCBoYXZlIGEgYGNoYXJDb2RlYCxcbiAqIHByZXN1bWFibHkgYmVjYXVzZSBpdCBkb2VzIG5vdCBwcm9kdWNlIGEgdGFiLWNoYXJhY3RlciBpbiBicm93c2Vycy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgYGNoYXJDb2RlYCBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkge1xuICB2YXIgY2hhckNvZGU7XG4gIHZhciBrZXlDb2RlID0gbmF0aXZlRXZlbnQua2V5Q29kZTtcblxuICBpZiAoJ2NoYXJDb2RlJyBpbiBuYXRpdmVFdmVudCkge1xuICAgIGNoYXJDb2RlID0gbmF0aXZlRXZlbnQuY2hhckNvZGU7XG5cbiAgICAvLyBGRiBkb2VzIG5vdCBzZXQgYGNoYXJDb2RlYCBmb3IgdGhlIEVudGVyLWtleSwgY2hlY2sgYWdhaW5zdCBga2V5Q29kZWAuXG4gICAgaWYgKGNoYXJDb2RlID09PSAwICYmIGtleUNvZGUgPT09IDEzKSB7XG4gICAgICBjaGFyQ29kZSA9IDEzO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJRTggZG9lcyBub3QgaW1wbGVtZW50IGBjaGFyQ29kZWAsIGJ1dCBga2V5Q29kZWAgaGFzIHRoZSBjb3JyZWN0IHZhbHVlLlxuICAgIGNoYXJDb2RlID0ga2V5Q29kZTtcbiAgfVxuXG4gIC8vIFNvbWUgbm9uLXByaW50YWJsZSBrZXlzIGFyZSByZXBvcnRlZCBpbiBgY2hhckNvZGVgL2BrZXlDb2RlYCwgZGlzY2FyZCB0aGVtLlxuICAvLyBNdXN0IG5vdCBkaXNjYXJkIHRoZSAobm9uLSlwcmludGFibGUgRW50ZXIta2V5LlxuICBpZiAoY2hhckNvZGUgPj0gMzIgfHwgY2hhckNvZGUgPT09IDEzKSB7XG4gICAgcmV0dXJuIGNoYXJDb2RlO1xuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRDaGFyQ29kZTtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRFdmVudEtleS5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudEtleVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXRFdmVudENoYXJDb2RlID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRDaGFyQ29kZVwiKTtcblxuLyoqXG4gKiBOb3JtYWxpemF0aW9uIG9mIGRlcHJlY2F0ZWQgSFRNTDUgYGtleWAgdmFsdWVzXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50I0tleV9uYW1lc1xuICovXG52YXIgbm9ybWFsaXplS2V5ID0ge1xuICAnRXNjJzogJ0VzY2FwZScsXG4gICdTcGFjZWJhcic6ICcgJyxcbiAgJ0xlZnQnOiAnQXJyb3dMZWZ0JyxcbiAgJ1VwJzogJ0Fycm93VXAnLFxuICAnUmlnaHQnOiAnQXJyb3dSaWdodCcsXG4gICdEb3duJzogJ0Fycm93RG93bicsXG4gICdEZWwnOiAnRGVsZXRlJyxcbiAgJ1dpbic6ICdPUycsXG4gICdNZW51JzogJ0NvbnRleHRNZW51JyxcbiAgJ0FwcHMnOiAnQ29udGV4dE1lbnUnLFxuICAnU2Nyb2xsJzogJ1Njcm9sbExvY2snLFxuICAnTW96UHJpbnRhYmxlS2V5JzogJ1VuaWRlbnRpZmllZCdcbn07XG5cbi8qKlxuICogVHJhbnNsYXRpb24gZnJvbSBsZWdhY3kgYGtleUNvZGVgIHRvIEhUTUw1IGBrZXlgXG4gKiBPbmx5IHNwZWNpYWwga2V5cyBzdXBwb3J0ZWQsIGFsbCBvdGhlcnMgZGVwZW5kIG9uIGtleWJvYXJkIGxheW91dCBvciBicm93c2VyXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50I0tleV9uYW1lc1xuICovXG52YXIgdHJhbnNsYXRlVG9LZXkgPSB7XG4gIDg6ICdCYWNrc3BhY2UnLFxuICA5OiAnVGFiJyxcbiAgMTI6ICdDbGVhcicsXG4gIDEzOiAnRW50ZXInLFxuICAxNjogJ1NoaWZ0JyxcbiAgMTc6ICdDb250cm9sJyxcbiAgMTg6ICdBbHQnLFxuICAxOTogJ1BhdXNlJyxcbiAgMjA6ICdDYXBzTG9jaycsXG4gIDI3OiAnRXNjYXBlJyxcbiAgMzI6ICcgJyxcbiAgMzM6ICdQYWdlVXAnLFxuICAzNDogJ1BhZ2VEb3duJyxcbiAgMzU6ICdFbmQnLFxuICAzNjogJ0hvbWUnLFxuICAzNzogJ0Fycm93TGVmdCcsXG4gIDM4OiAnQXJyb3dVcCcsXG4gIDM5OiAnQXJyb3dSaWdodCcsXG4gIDQwOiAnQXJyb3dEb3duJyxcbiAgNDU6ICdJbnNlcnQnLFxuICA0NjogJ0RlbGV0ZScsXG4gIDExMjogJ0YxJywgMTEzOiAnRjInLCAxMTQ6ICdGMycsIDExNTogJ0Y0JywgMTE2OiAnRjUnLCAxMTc6ICdGNicsXG4gIDExODogJ0Y3JywgMTE5OiAnRjgnLCAxMjA6ICdGOScsIDEyMTogJ0YxMCcsIDEyMjogJ0YxMScsIDEyMzogJ0YxMicsXG4gIDE0NDogJ051bUxvY2snLFxuICAxNDU6ICdTY3JvbGxMb2NrJyxcbiAgMjI0OiAnTWV0YSdcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIGBrZXlgIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRFdmVudEtleShuYXRpdmVFdmVudCkge1xuICBpZiAobmF0aXZlRXZlbnQua2V5KSB7XG4gICAgLy8gTm9ybWFsaXplIGluY29uc2lzdGVudCB2YWx1ZXMgcmVwb3J0ZWQgYnkgYnJvd3NlcnMgZHVlIHRvXG4gICAgLy8gaW1wbGVtZW50YXRpb25zIG9mIGEgd29ya2luZyBkcmFmdCBzcGVjaWZpY2F0aW9uLlxuXG4gICAgLy8gRmlyZUZveCBpbXBsZW1lbnRzIGBrZXlgIGJ1dCByZXR1cm5zIGBNb3pQcmludGFibGVLZXlgIGZvciBhbGxcbiAgICAvLyBwcmludGFibGUgY2hhcmFjdGVycyAobm9ybWFsaXplZCB0byBgVW5pZGVudGlmaWVkYCksIGlnbm9yZSBpdC5cbiAgICB2YXIga2V5ID0gbm9ybWFsaXplS2V5W25hdGl2ZUV2ZW50LmtleV0gfHwgbmF0aXZlRXZlbnQua2V5O1xuICAgIGlmIChrZXkgIT09ICdVbmlkZW50aWZpZWQnKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIC8vIEJyb3dzZXIgZG9lcyBub3QgaW1wbGVtZW50IGBrZXlgLCBwb2x5ZmlsbCBhcyBtdWNoIG9mIGl0IGFzIHdlIGNhbi5cbiAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICB2YXIgY2hhckNvZGUgPSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KTtcblxuICAgIC8vIFRoZSBlbnRlci1rZXkgaXMgdGVjaG5pY2FsbHkgYm90aCBwcmludGFibGUgYW5kIG5vbi1wcmludGFibGUgYW5kIGNhblxuICAgIC8vIHRodXMgYmUgY2FwdHVyZWQgYnkgYGtleXByZXNzYCwgbm8gb3RoZXIgbm9uLXByaW50YWJsZSBrZXkgc2hvdWxkLlxuICAgIHJldHVybiBjaGFyQ29kZSA9PT0gMTMgPyAnRW50ZXInIDogU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gIH1cbiAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBuYXRpdmVFdmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgLy8gV2hpbGUgdXNlciBrZXlib2FyZCBsYXlvdXQgZGV0ZXJtaW5lcyB0aGUgYWN0dWFsIG1lYW5pbmcgb2YgZWFjaFxuICAgIC8vIGBrZXlDb2RlYCB2YWx1ZSwgYWxtb3N0IGFsbCBmdW5jdGlvbiBrZXlzIGhhdmUgYSB1bml2ZXJzYWwgdmFsdWUuXG4gICAgcmV0dXJuIHRyYW5zbGF0ZVRvS2V5W25hdGl2ZUV2ZW50LmtleUNvZGVdIHx8ICdVbmlkZW50aWZpZWQnO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudEtleTtcblxufSx7XCIuL2dldEV2ZW50Q2hhckNvZGVcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEV2ZW50Q2hhckNvZGUuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRNb2RpZmllclN0YXRlLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVHJhbnNsYXRpb24gZnJvbSBtb2RpZmllciBrZXkgdG8gdGhlIGFzc29jaWF0ZWQgcHJvcGVydHkgaW4gdGhlIGV2ZW50LlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2tleXMtTW9kaWZpZXJzXG4gKi9cblxudmFyIG1vZGlmaWVyS2V5VG9Qcm9wID0ge1xuICAnQWx0JzogJ2FsdEtleScsXG4gICdDb250cm9sJzogJ2N0cmxLZXknLFxuICAnTWV0YSc6ICdtZXRhS2V5JyxcbiAgJ1NoaWZ0JzogJ3NoaWZ0S2V5J1xufTtcblxuLy8gSUU4IGRvZXMgbm90IGltcGxlbWVudCBnZXRNb2RpZmllclN0YXRlIHNvIHdlIHNpbXBseSBtYXAgaXQgdG8gdGhlIG9ubHlcbi8vIG1vZGlmaWVyIGtleXMgZXhwb3NlZCBieSB0aGUgZXZlbnQgaXRzZWxmLCBkb2VzIG5vdCBzdXBwb3J0IExvY2sta2V5cy5cbi8vIEN1cnJlbnRseSwgYWxsIG1ham9yIGJyb3dzZXJzIGV4Y2VwdCBDaHJvbWUgc2VlbXMgdG8gc3VwcG9ydCBMb2NrLWtleXMuXG5mdW5jdGlvbiBtb2RpZmllclN0YXRlR2V0dGVyKGtleUFyZykge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgc3ludGhldGljRXZlbnQgPSB0aGlzO1xuICB2YXIgbmF0aXZlRXZlbnQgPSBzeW50aGV0aWNFdmVudC5uYXRpdmVFdmVudDtcbiAgaWYgKG5hdGl2ZUV2ZW50LmdldE1vZGlmaWVyU3RhdGUpIHtcbiAgICByZXR1cm4gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZShrZXlBcmcpO1xuICB9XG4gIHZhciBrZXlQcm9wID0gbW9kaWZpZXJLZXlUb1Byb3Bba2V5QXJnXTtcbiAgcmV0dXJuIGtleVByb3AgPyAhIW5hdGl2ZUV2ZW50W2tleVByb3BdIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50TW9kaWZpZXJTdGF0ZShuYXRpdmVFdmVudCkge1xuICByZXR1cm4gbW9kaWZpZXJTdGF0ZUdldHRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudE1vZGlmaWVyU3RhdGU7XG5cbn0se31dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRUYXJnZXQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRUYXJnZXRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdldHMgdGhlIHRhcmdldCBub2RlIGZyb20gYSBuYXRpdmUgYnJvd3NlciBldmVudCBieSBhY2NvdW50aW5nIGZvclxuICogaW5jb25zaXN0ZW5jaWVzIGluIGJyb3dzZXIgRE9NIEFQSXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7RE9NRXZlbnRUYXJnZXR9IFRhcmdldCBub2RlLlxuICovXG5mdW5jdGlvbiBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCkge1xuICB2YXIgdGFyZ2V0ID0gbmF0aXZlRXZlbnQudGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQgfHwgd2luZG93O1xuICAvLyBTYWZhcmkgbWF5IGZpcmUgZXZlbnRzIG9uIHRleHQgbm9kZXMgKE5vZGUuVEVYVF9OT0RFIGlzIDMpLlxuICAvLyBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvZXZlbnRzX3Byb3BlcnRpZXMuaHRtbFxuICByZXR1cm4gdGFyZ2V0Lm5vZGVUeXBlID09PSAzID8gdGFyZ2V0LnBhcmVudE5vZGUgOiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRUYXJnZXQ7XG5cbn0se31dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0SXRlcmF0b3JGbi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRJdGVyYXRvckZuXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsIFN5bWJvbCAqL1xudmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InOyAvLyBCZWZvcmUgU3ltYm9sIHNwZWMuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICpcbiAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICpcbiAqICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obXlJdGVyYWJsZSk7XG4gKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAqICAgICAgIC4uLlxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG1heWJlSXRlcmFibGVcbiAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoXG4gICAgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pXG4gICk7XG4gIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBpdGVyYXRvckZuO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SXRlcmF0b3JGbjtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRNYXJrdXBXcmFwLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRNYXJrdXBXcmFwXG4gKi9cblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogRHVtbXkgY29udGFpbmVyIHVzZWQgdG8gZGV0ZWN0IHdoaWNoIHdyYXBzIGFyZSBuZWNlc3NhcnkuXG4gKi9cbnZhciBkdW1teU5vZGUgPVxuICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA6IG51bGw7XG5cbi8qKlxuICogU29tZSBicm93c2VycyBjYW5ub3QgdXNlIGBpbm5lckhUTUxgIHRvIHJlbmRlciBjZXJ0YWluIGVsZW1lbnRzIHN0YW5kYWxvbmUsXG4gKiBzbyB3ZSB3cmFwIHRoZW0sIHJlbmRlciB0aGUgd3JhcHBlZCBub2RlcywgdGhlbiBleHRyYWN0IHRoZSBkZXNpcmVkIG5vZGUuXG4gKlxuICogSW4gSUU4LCBjZXJ0YWluIGVsZW1lbnRzIGNhbm5vdCByZW5kZXIgYWxvbmUsIHNvIHdyYXAgYWxsIGVsZW1lbnRzICgnKicpLlxuICovXG52YXIgc2hvdWxkV3JhcCA9IHtcbiAgLy8gRm9yY2Ugd3JhcHBpbmcgZm9yIFNWRyBlbGVtZW50cyBiZWNhdXNlIGlmIHRoZXkgZ2V0IGNyZWF0ZWQgaW5zaWRlIGEgPGRpdj4sXG4gIC8vIHRoZXkgd2lsbCBiZSBpbml0aWFsaXplZCBpbiB0aGUgd3JvbmcgbmFtZXNwYWNlIChhbmQgd2lsbCBub3QgZGlzcGxheSkuXG4gICdjaXJjbGUnOiB0cnVlLFxuICAnY2xpcFBhdGgnOiB0cnVlLFxuICAnZGVmcyc6IHRydWUsXG4gICdlbGxpcHNlJzogdHJ1ZSxcbiAgJ2cnOiB0cnVlLFxuICAnbGluZSc6IHRydWUsXG4gICdsaW5lYXJHcmFkaWVudCc6IHRydWUsXG4gICdwYXRoJzogdHJ1ZSxcbiAgJ3BvbHlnb24nOiB0cnVlLFxuICAncG9seWxpbmUnOiB0cnVlLFxuICAncmFkaWFsR3JhZGllbnQnOiB0cnVlLFxuICAncmVjdCc6IHRydWUsXG4gICdzdG9wJzogdHJ1ZSxcbiAgJ3RleHQnOiB0cnVlXG59O1xuXG52YXIgc2VsZWN0V3JhcCA9IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cInRydWVcIj4nLCAnPC9zZWxlY3Q+J107XG52YXIgdGFibGVXcmFwID0gWzEsICc8dGFibGU+JywgJzwvdGFibGU+J107XG52YXIgdHJXcmFwID0gWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J107XG5cbnZhciBzdmdXcmFwID0gWzEsICc8c3ZnPicsICc8L3N2Zz4nXTtcblxudmFyIG1hcmt1cFdyYXAgPSB7XG4gICcqJzogWzEsICc/PGRpdj4nLCAnPC9kaXY+J10sXG5cbiAgJ2FyZWEnOiBbMSwgJzxtYXA+JywgJzwvbWFwPiddLFxuICAnY29sJzogWzIsICc8dGFibGU+PHRib2R5PjwvdGJvZHk+PGNvbGdyb3VwPicsICc8L2NvbGdyb3VwPjwvdGFibGU+J10sXG4gICdsZWdlbmQnOiBbMSwgJzxmaWVsZHNldD4nLCAnPC9maWVsZHNldD4nXSxcbiAgJ3BhcmFtJzogWzEsICc8b2JqZWN0PicsICc8L29iamVjdD4nXSxcbiAgJ3RyJzogWzIsICc8dGFibGU+PHRib2R5PicsICc8L3Rib2R5PjwvdGFibGU+J10sXG5cbiAgJ29wdGdyb3VwJzogc2VsZWN0V3JhcCxcbiAgJ29wdGlvbic6IHNlbGVjdFdyYXAsXG5cbiAgJ2NhcHRpb24nOiB0YWJsZVdyYXAsXG4gICdjb2xncm91cCc6IHRhYmxlV3JhcCxcbiAgJ3Rib2R5JzogdGFibGVXcmFwLFxuICAndGZvb3QnOiB0YWJsZVdyYXAsXG4gICd0aGVhZCc6IHRhYmxlV3JhcCxcblxuICAndGQnOiB0cldyYXAsXG4gICd0aCc6IHRyV3JhcCxcblxuICAnY2lyY2xlJzogc3ZnV3JhcCxcbiAgJ2NsaXBQYXRoJzogc3ZnV3JhcCxcbiAgJ2RlZnMnOiBzdmdXcmFwLFxuICAnZWxsaXBzZSc6IHN2Z1dyYXAsXG4gICdnJzogc3ZnV3JhcCxcbiAgJ2xpbmUnOiBzdmdXcmFwLFxuICAnbGluZWFyR3JhZGllbnQnOiBzdmdXcmFwLFxuICAncGF0aCc6IHN2Z1dyYXAsXG4gICdwb2x5Z29uJzogc3ZnV3JhcCxcbiAgJ3BvbHlsaW5lJzogc3ZnV3JhcCxcbiAgJ3JhZGlhbEdyYWRpZW50Jzogc3ZnV3JhcCxcbiAgJ3JlY3QnOiBzdmdXcmFwLFxuICAnc3RvcCc6IHN2Z1dyYXAsXG4gICd0ZXh0Jzogc3ZnV3JhcFxufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXJrdXAgd3JhcCBjb25maWd1cmF0aW9uIGZvciB0aGUgc3VwcGxpZWQgYG5vZGVOYW1lYC5cbiAqXG4gKiBOT1RFOiBUaGlzIGxhemlseSBkZXRlY3RzIHdoaWNoIHdyYXBzIGFyZSBuZWNlc3NhcnkgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5vZGVOYW1lIExvd2VyY2FzZSBgbm9kZU5hbWVgLlxuICogQHJldHVybiB7P2FycmF5fSBNYXJrdXAgd3JhcCBjb25maWd1cmF0aW9uLCBpZiBhcHBsaWNhYmxlLlxuICovXG5mdW5jdGlvbiBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoISFkdW1teU5vZGUsICdNYXJrdXAgd3JhcHBpbmcgbm9kZSBub3QgaW5pdGlhbGl6ZWQnKSA6IGludmFyaWFudCghIWR1bW15Tm9kZSkpO1xuICBpZiAoIW1hcmt1cFdyYXAuaGFzT3duUHJvcGVydHkobm9kZU5hbWUpKSB7XG4gICAgbm9kZU5hbWUgPSAnKic7XG4gIH1cbiAgaWYgKCFzaG91bGRXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgIGlmIChub2RlTmFtZSA9PT0gJyonKSB7XG4gICAgICBkdW1teU5vZGUuaW5uZXJIVE1MID0gJzxsaW5rIC8+JztcbiAgICB9IGVsc2Uge1xuICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8JyArIG5vZGVOYW1lICsgJz48LycgKyBub2RlTmFtZSArICc+JztcbiAgICB9XG4gICAgc2hvdWxkV3JhcFtub2RlTmFtZV0gPSAhZHVtbXlOb2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIHNob3VsZFdyYXBbbm9kZU5hbWVdID8gbWFya3VwV3JhcFtub2RlTmFtZV0gOiBudWxsO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFya3VwV3JhcDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzXCIsXCIuL2ludmFyaWFudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzXCIsXCJfcHJvY2Vzc1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdpdmVuIGFueSBub2RlIHJldHVybiB0aGUgZmlyc3QgbGVhZiBub2RlIHdpdGhvdXQgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtET01FbGVtZW50fERPTVRleHROb2RlfVxuICovXG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIHdoaWxlIChub2RlICYmIG5vZGUuZmlyc3RDaGlsZCkge1xuICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogR2V0IHRoZSBuZXh0IHNpYmxpbmcgd2l0aGluIGEgY29udGFpbmVyLiBUaGlzIHdpbGwgd2FsayB1cCB0aGVcbiAqIERPTSBpZiBhIG5vZGUncyBzaWJsaW5ncyBoYXZlIGJlZW4gZXhoYXVzdGVkLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7P0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldFNpYmxpbmdOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG5vZGVzIHdoaWNoIGNvbnRhaW4gY2hhcmFjdGVycyBhdCBvZmZzZXQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSByb290XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KHJvb3QsIG9mZnNldCkge1xuICB2YXIgbm9kZSA9IGdldExlYWZOb2RlKHJvb3QpO1xuICB2YXIgbm9kZVN0YXJ0ID0gMDtcbiAgdmFyIG5vZGVFbmQgPSAwO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIG5vZGVFbmQgPSBub2RlU3RhcnQgKyBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcblxuICAgICAgaWYgKG5vZGVTdGFydCA8PSBvZmZzZXQgJiYgbm9kZUVuZCA+PSBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0IC0gbm9kZVN0YXJ0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG5vZGVTdGFydCA9IG5vZGVFbmQ7XG4gICAgfVxuXG4gICAgbm9kZSA9IGdldExlYWZOb2RlKGdldFNpYmxpbmdOb2RlKG5vZGUpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQ7XG5cbn0se31dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPQ19OT0RFX1RZUEUgPSA5O1xuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01Eb2N1bWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRoYXQgbWF5IGNvbnRhaW5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgUmVhY3QgY29tcG9uZW50XG4gKiBAcmV0dXJuIHs/Kn0gRE9NIGVsZW1lbnQgdGhhdCBtYXkgaGF2ZSB0aGUgcmVhY3RSb290IElELCBvciBudWxsLlxuICovXG5mdW5jdGlvbiBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKSB7XG4gIGlmICghY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5kb2N1bWVudEVsZW1lbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5maXJzdENoaWxkO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyO1xuXG59LHt9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldFRleHRDb250ZW50QWNjZXNzb3IuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBjb250ZW50S2V5ID0gbnVsbDtcblxuLyoqXG4gKiBHZXRzIHRoZSBrZXkgdXNlZCB0byBhY2Nlc3MgdGV4dCBjb250ZW50IG9uIGEgRE9NIG5vZGUuXG4gKlxuICogQHJldHVybiB7P3N0cmluZ30gS2V5IHVzZWQgdG8gYWNjZXNzIHRleHQgY29udGVudC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXRUZXh0Q29udGVudEFjY2Vzc29yKCkge1xuICBpZiAoIWNvbnRlbnRLZXkgJiYgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gICAgLy8gUHJlZmVyIHRleHRDb250ZW50IHRvIGlubmVyVGV4dCBiZWNhdXNlIG1hbnkgYnJvd3NlcnMgc3VwcG9ydCBib3RoIGJ1dFxuICAgIC8vIFNWRyA8dGV4dD4gZWxlbWVudHMgZG9uJ3Qgc3VwcG9ydCBpbm5lclRleHQgZXZlbiB3aGVuIDxkaXY+IGRvZXMuXG4gICAgY29udGVudEtleSA9ICd0ZXh0Q29udGVudCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID9cbiAgICAgICd0ZXh0Q29udGVudCcgOlxuICAgICAgJ2lubmVyVGV4dCc7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnRLZXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcjtcblxufSx7XCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvblxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIHN1cHBsaWVkIGVsZW1lbnQgb3Igd2luZG93LlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWVzIGFyZSB1bmJvdW5kZWQsIHVubGlrZSBgZ2V0U2Nyb2xsUG9zaXRpb25gLiBUaGlzIG1lYW5zIHRoZXlcbiAqIG1heSBiZSBuZWdhdGl2ZSBvciBleGNlZWQgdGhlIGVsZW1lbnQgYm91bmRhcmllcyAod2hpY2ggaXMgcG9zc2libGUgdXNpbmdcbiAqIGluZXJ0aWFsIHNjcm9sbGluZykuXG4gKlxuICogQHBhcmFtIHtET01XaW5kb3d8RE9NRWxlbWVudH0gc2Nyb2xsYWJsZVxuICogQHJldHVybiB7b2JqZWN0fSBNYXAgd2l0aCBgeGAgYW5kIGB5YCBrZXlzLlxuICovXG5mdW5jdGlvbiBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlKSB7XG4gIGlmIChzY3JvbGxhYmxlID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogc2Nyb2xsYWJsZS5zY3JvbGxMZWZ0LFxuICAgIHk6IHNjcm9sbGFibGUuc2Nyb2xsVG9wXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb247XG5cbn0se31dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaHlwaGVuYXRlLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGh5cGhlbmF0ZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgX3VwcGVyY2FzZVBhdHRlcm4gPSAvKFtBLVpdKS9nO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIHN0cmluZywgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICpcbiAqIEZvciBDU1Mgc3R5bGUgbmFtZXMsIHVzZSBgaHlwaGVuYXRlU3R5bGVOYW1lYCBpbnN0ZWFkIHdoaWNoIHdvcmtzIHByb3Blcmx5XG4gKiB3aXRoIGFsbCB2ZW5kb3IgcHJlZml4ZXMsIGluY2x1ZGluZyBgbXNgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaHlwaGVuYXRlKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX3VwcGVyY2FzZVBhdHRlcm4sICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZTtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaHlwaGVuYXRlU3R5bGVOYW1lXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaHlwaGVuYXRlID0gcmVxdWlyZShcIi4vaHlwaGVuYXRlXCIpO1xuXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdNb3pUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tb3otdHJhbnNpdGlvblwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdtc1RyYW5zaXRpb24nKVxuICogICA8IFwiLW1zLXRyYW5zaXRpb25cIlxuICpcbiAqIEFzIE1vZGVybml6ciBzdWdnZXN0cyAoaHR0cDovL21vZGVybml6ci5jb20vZG9jcy8jcHJlZml4ZWQpLCBhbiBgbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGAtbXMtYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZVN0eWxlTmFtZTtcblxufSx7XCIuL2h5cGhlbmF0ZVwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaHlwaGVuYXRlLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbXB0eUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbi8vIFRvIGF2b2lkIGEgY3ljbGljIGRlcGVuZGVuY3ksIHdlIGNyZWF0ZSB0aGUgZmluYWwgY2xhc3MgaW4gdGhpcyBtb2R1bGVcbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIgPSBmdW5jdGlvbigpIHsgfTtcbmFzc2lnbihcbiAgUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyLnByb3RvdHlwZSxcbiAgUmVhY3RDb21wb3NpdGVDb21wb25lbnQuTWl4aW4sXG4gIHtcbiAgICBfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDogaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFxuICB9XG4pO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSB0eXBlIHJlZmVyZW5jZSBpcyBhIGtub3duIGludGVybmFsIHR5cGUuIEkuZS4gbm90IGEgdXNlclxuICogcHJvdmlkZWQgY29tcG9zaXRlIHR5cGUuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHlwZVxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoaXMgaXMgYSB2YWxpZCBpbnRlcm5hbCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc0ludGVybmFsQ29tcG9uZW50VHlwZSh0eXBlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdHlwZS5wcm90b3R5cGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIHR5cGUucHJvdG90eXBlLm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHR5cGUucHJvdG90eXBlLnJlY2VpdmVDb21wb25lbnQgPT09ICdmdW5jdGlvbidcbiAgKTtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIFJlYWN0Tm9kZSwgY3JlYXRlIGFuIGluc3RhbmNlIHRoYXQgd2lsbCBhY3R1YWxseSBiZSBtb3VudGVkLlxuICpcbiAqIEBwYXJhbSB7UmVhY3ROb2RlfSBub2RlXG4gKiBAcGFyYW0geyp9IHBhcmVudENvbXBvc2l0ZVR5cGUgVGhlIGNvbXBvc2l0ZSB0eXBlIHRoYXQgcmVzb2x2ZWQgdGhpcy5cbiAqIEByZXR1cm4ge29iamVjdH0gQSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGVsZW1lbnQncyBjb25zdHJ1Y3Rvci5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZnVuY3Rpb24gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChub2RlLCBwYXJlbnRDb21wb3NpdGVUeXBlKSB7XG4gIHZhciBpbnN0YW5jZTtcblxuICBpZiAobm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSBmYWxzZSkge1xuICAgIG5vZGUgPSBSZWFjdEVtcHR5Q29tcG9uZW50LmVtcHR5RWxlbWVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgZWxlbWVudCA9IG5vZGU7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgIGVsZW1lbnQgJiYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpLFxuICAgICAgICAnT25seSBmdW5jdGlvbnMgb3Igc3RyaW5ncyBjYW4gYmUgbW91bnRlZCBhcyBSZWFjdCBjb21wb25lbnRzLidcbiAgICAgICkgOiBudWxsKTtcbiAgICB9XG5cbiAgICAvLyBTcGVjaWFsIGNhc2Ugc3RyaW5nIHZhbHVlc1xuICAgIGlmIChwYXJlbnRDb21wb3NpdGVUeXBlID09PSBlbGVtZW50LnR5cGUgJiZcbiAgICAgICAgdHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIEF2b2lkIHJlY3Vyc2lvbiBpZiB0aGUgd3JhcHBlciByZW5kZXJzIGl0c2VsZi5cbiAgICAgIGluc3RhbmNlID0gUmVhY3ROYXRpdmVDb21wb25lbnQuY3JlYXRlSW50ZXJuYWxDb21wb25lbnQoZWxlbWVudCk7XG4gICAgICAvLyBBbGwgbmF0aXZlIGNvbXBvbmVudHMgYXJlIGN1cnJlbnRseSB3cmFwcGVkIGluIGEgY29tcG9zaXRlIHNvIHdlJ3JlXG4gICAgICAvLyBzYWZlIHRvIGFzc3VtZSB0aGF0IHRoaXMgaXMgd2hhdCB3ZSBzaG91bGQgaW5zdGFudGlhdGUuXG4gICAgfSBlbHNlIGlmIChpc0ludGVybmFsQ29tcG9uZW50VHlwZShlbGVtZW50LnR5cGUpKSB7XG4gICAgICAvLyBUaGlzIGlzIHRlbXBvcmFyaWx5IGF2YWlsYWJsZSBmb3IgY3VzdG9tIGNvbXBvbmVudHMgdGhhdCBhcmUgbm90IHN0cmluZ1xuICAgICAgLy8gcmVwcmVzZW5hdGlvbnMuIEkuZS4gQVJULiBPbmNlIHRob3NlIGFyZSB1cGRhdGVkIHRvIHVzZSB0aGUgc3RyaW5nXG4gICAgICAvLyByZXByZXNlbnRhdGlvbiwgd2UgY2FuIGRyb3AgdGhpcyBjb2RlIHBhdGguXG4gICAgICBpbnN0YW5jZSA9IG5ldyBlbGVtZW50LnR5cGUoZWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlID0gbmV3IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlcigpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5vZGUgPT09ICdudW1iZXInKSB7XG4gICAgaW5zdGFuY2UgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5jcmVhdGVJbnN0YW5jZUZvclRleHQobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGZhbHNlLFxuICAgICAgJ0VuY291bnRlcmVkIGludmFsaWQgUmVhY3Qgbm9kZSBvZiB0eXBlICVzJyxcbiAgICAgIHR5cGVvZiBub2RlXG4gICAgKSA6IGludmFyaWFudChmYWxzZSkpO1xuICB9XG5cbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgdHlwZW9mIGluc3RhbmNlLmNvbnN0cnVjdCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIGluc3RhbmNlLm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2YgaW5zdGFuY2UucmVjZWl2ZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIGluc3RhbmNlLnVubW91bnRDb21wb25lbnQgPT09ICdmdW5jdGlvbicsXG4gICAgICAnT25seSBSZWFjdCBDb21wb25lbnRzIGNhbiBiZSBtb3VudGVkLidcbiAgICApIDogbnVsbCk7XG4gIH1cblxuICAvLyBTZXRzIHVwIHRoZSBpbnN0YW5jZS4gVGhpcyBjYW4gcHJvYmFibHkganVzdCBtb3ZlIGludG8gdGhlIGNvbnN0cnVjdG9yIG5vdy5cbiAgaW5zdGFuY2UuY29uc3RydWN0KG5vZGUpO1xuXG4gIC8vIFRoZXNlIHR3byBmaWVsZHMgYXJlIHVzZWQgYnkgdGhlIERPTSBhbmQgQVJUIGRpZmZpbmcgYWxnb3JpdGhtc1xuICAvLyByZXNwZWN0aXZlbHkuIEluc3RlYWQgb2YgdXNpbmcgZXhwYW5kb3Mgb24gY29tcG9uZW50cywgd2Ugc2hvdWxkIGJlXG4gIC8vIHN0b3JpbmcgdGhlIHN0YXRlIG5lZWRlZCBieSB0aGUgZGlmZmluZyBhbGdvcml0aG1zIGVsc2V3aGVyZS5cbiAgaW5zdGFuY2UuX21vdW50SW5kZXggPSAwO1xuICBpbnN0YW5jZS5fbW91bnRJbWFnZSA9IG51bGw7XG5cbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIGluc3RhbmNlLl9pc093bmVyTmVjZXNzYXJ5ID0gZmFsc2U7XG4gICAgaW5zdGFuY2UuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gZmFsc2U7XG4gIH1cblxuICAvLyBJbnRlcm5hbCBpbnN0YW5jZXMgc2hvdWxkIGZ1bGx5IGNvbnN0cnVjdGVkIGF0IHRoaXMgcG9pbnQsIHNvIHRoZXkgc2hvdWxkXG4gIC8vIG5vdCBnZXQgYW55IG5ldyBmaWVsZHMgYWRkZWQgdG8gdGhlbSBhdCB0aGlzIHBvaW50LlxuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgaWYgKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucykge1xuICAgICAgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKGluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1wiLFwiLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb3NpdGVDb21wb25lbnQuanNcIixcIi4vUmVhY3RFbXB0eUNvbXBvbmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbXB0eUNvbXBvbmVudC5qc1wiLFwiLi9SZWFjdE5hdGl2ZUNvbXBvbmVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3ROYXRpdmVDb21wb25lbnQuanNcIixcIi4vaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIixcIi4vd2FybmluZ1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvd2FybmluZy5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaW52YXJpYW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ0ludmFyaWFudCBWaW9sYXRpb246ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2lzRXZlbnRTdXBwb3J0ZWQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNFdmVudFN1cHBvcnRlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciB1c2VIYXNGZWF0dXJlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB1c2VIYXNGZWF0dXJlID1cbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJlxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUgJiZcbiAgICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gICAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGV2ZW50IGlzIHN1cHBvcnRlZCBpbiB0aGUgY3VycmVudCBleGVjdXRpb24gZW52aXJvbm1lbnQuXG4gKlxuICogTk9URTogVGhpcyB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseSBmb3Igbm9uLWdlbmVyaWMgZXZlbnRzIHN1Y2ggYXMgYGNoYW5nZWAsXG4gKiBgcmVzZXRgLCBgbG9hZGAsIGBlcnJvcmAsIGFuZCBgc2VsZWN0YC5cbiAqXG4gKiBCb3Jyb3dzIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVTdWZmaXggRXZlbnQgbmFtZSwgZS5nLiBcImNsaWNrXCIuXG4gKiBAcGFyYW0gez9ib29sZWFufSBjYXB0dXJlIENoZWNrIGlmIHRoZSBjYXB0dXJlIHBoYXNlIGlzIHN1cHBvcnRlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IGlzIHN1cHBvcnRlZC5cbiAqIEBpbnRlcm5hbFxuICogQGxpY2Vuc2UgTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4gKi9cbmZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lU3VmZml4LCBjYXB0dXJlKSB7XG4gIGlmICghRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NIHx8XG4gICAgICBjYXB0dXJlICYmICEoJ2FkZEV2ZW50TGlzdGVuZXInIGluIGRvY3VtZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lU3VmZml4O1xuICB2YXIgaXNTdXBwb3J0ZWQgPSBldmVudE5hbWUgaW4gZG9jdW1lbnQ7XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIGlmICghaXNTdXBwb3J0ZWQgJiYgdXNlSGFzRmVhdHVyZSAmJiBldmVudE5hbWVTdWZmaXggPT09ICd3aGVlbCcpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHdheSB0byB0ZXN0IHN1cHBvcnQgZm9yIHRoZSBgd2hlZWxgIGV2ZW50IGluIElFOSsuXG4gICAgaXNTdXBwb3J0ZWQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdFdmVudHMud2hlZWwnLCAnMy4wJyk7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFdmVudFN1cHBvcnRlZDtcblxufSx7XCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc05vZGUuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNOb2RlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICByZXR1cm4gISEob2JqZWN0ICYmIChcbiAgICAoKHR5cGVvZiBOb2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiZcbiAgICB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpXG4gICkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc1RleHRJbnB1dEVsZW1lbnQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNUZXh0SW5wdXRFbGVtZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBzZWUgaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdGhlLWlucHV0LWVsZW1lbnQuaHRtbCNpbnB1dC10eXBlLWF0dHItc3VtbWFyeVxuICovXG52YXIgc3VwcG9ydGVkSW5wdXRUeXBlcyA9IHtcbiAgJ2NvbG9yJzogdHJ1ZSxcbiAgJ2RhdGUnOiB0cnVlLFxuICAnZGF0ZXRpbWUnOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlLFxuICAnZW1haWwnOiB0cnVlLFxuICAnbW9udGgnOiB0cnVlLFxuICAnbnVtYmVyJzogdHJ1ZSxcbiAgJ3Bhc3N3b3JkJzogdHJ1ZSxcbiAgJ3JhbmdlJzogdHJ1ZSxcbiAgJ3NlYXJjaCc6IHRydWUsXG4gICd0ZWwnOiB0cnVlLFxuICAndGV4dCc6IHRydWUsXG4gICd0aW1lJzogdHJ1ZSxcbiAgJ3VybCc6IHRydWUsXG4gICd3ZWVrJzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gaXNUZXh0SW5wdXRFbGVtZW50KGVsZW0pIHtcbiAgcmV0dXJuIGVsZW0gJiYgKFxuICAgIChlbGVtLm5vZGVOYW1lID09PSAnSU5QVVQnICYmIHN1cHBvcnRlZElucHV0VHlwZXNbZWxlbS50eXBlXSB8fCBlbGVtLm5vZGVOYW1lID09PSAnVEVYVEFSRUEnKVxuICApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dElucHV0RWxlbWVudDtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc1RleHROb2RlLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzVGV4dE5vZGVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoXCIuL2lzTm9kZVwiKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlO1xuXG59LHtcIi4vaXNOb2RlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc05vZGUuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIva2V5TWlycm9yLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBrZXlNaXJyb3JcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYW4gZW51bWVyYXRpb24gd2l0aCBrZXlzIGVxdWFsIHRvIHRoZWlyIHZhbHVlLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqICAgdmFyIENPTE9SUyA9IGtleU1pcnJvcih7Ymx1ZTogbnVsbCwgcmVkOiBudWxsfSk7XG4gKiAgIHZhciBteUNvbG9yID0gQ09MT1JTLmJsdWU7XG4gKiAgIHZhciBpc0NvbG9yVmFsaWQgPSAhIUNPTE9SU1tteUNvbG9yXTtcbiAqXG4gKiBUaGUgbGFzdCBsaW5lIGNvdWxkIG5vdCBiZSBwZXJmb3JtZWQgaWYgdGhlIHZhbHVlcyBvZiB0aGUgZ2VuZXJhdGVkIGVudW0gd2VyZVxuICogbm90IGVxdWFsIHRvIHRoZWlyIGtleXMuXG4gKlxuICogICBJbnB1dDogIHtrZXkxOiB2YWwxLCBrZXkyOiB2YWwyfVxuICogICBPdXRwdXQ6IHtrZXkxOiBrZXkxLCBrZXkyOiBrZXkyfVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xudmFyIGtleU1pcnJvciA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgcmV0ID0ge307XG4gIHZhciBrZXk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgb2JqIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KG9iaiksXG4gICAgJ2tleU1pcnJvciguLi4pOiBBcmd1bWVudCBtdXN0IGJlIGFuIG9iamVjdC4nXG4gICkgOiBpbnZhcmlhbnQob2JqIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KG9iaikpKTtcbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHJldFtrZXldID0ga2V5O1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleU1pcnJvcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9rZXlPZi5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBrZXlPZlxuICovXG5cbi8qKlxuICogQWxsb3dzIGV4dHJhY3Rpb24gb2YgYSBtaW5pZmllZCBrZXkuIExldCdzIHRoZSBidWlsZCBzeXN0ZW0gbWluaWZ5IGtleXNcbiAqIHdpdGhvdXQgbG9vc2luZyB0aGUgYWJpbGl0eSB0byBkeW5hbWljYWxseSB1c2Uga2V5IHN0cmluZ3MgYXMgdmFsdWVzXG4gKiB0aGVtc2VsdmVzLiBQYXNzIGluIGFuIG9iamVjdCB3aXRoIGEgc2luZ2xlIGtleS92YWwgcGFpciBhbmQgaXQgd2lsbCByZXR1cm5cbiAqIHlvdSB0aGUgc3RyaW5nIGtleSBvZiB0aGF0IHNpbmdsZSByZWNvcmQuIFN1cHBvc2UgeW91IHdhbnQgdG8gZ3JhYiB0aGVcbiAqIHZhbHVlIGZvciBhIGtleSAnY2xhc3NOYW1lJyBpbnNpZGUgb2YgYW4gb2JqZWN0LiBLZXkvdmFsIG1pbmlmaWNhdGlvbiBtYXlcbiAqIGhhdmUgYWxpYXNlZCB0aGF0IGtleSB0byBiZSAneGExMicuIGtleU9mKHtjbGFzc05hbWU6IG51bGx9KSB3aWxsIHJldHVyblxuICogJ3hhMTInIGluIHRoYXQgY2FzZS4gUmVzb2x2ZSBrZXlzIHlvdSB3YW50IHRvIHVzZSBvbmNlIGF0IHN0YXJ0dXAgdGltZSwgdGhlblxuICogcmV1c2UgdGhvc2UgcmVzb2x1dGlvbnMuXG4gKi9cbnZhciBrZXlPZiA9IGZ1bmN0aW9uKG9uZUtleU9iaikge1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBvbmVLZXlPYmopIHtcbiAgICBpZiAoIW9uZUtleU9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlPZjtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9tYXBPYmplY3QuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgbWFwT2JqZWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBwcm92aWRlZCBgY2FsbGJhY2tgIG9uY2UgZm9yIGVhY2ggZW51bWVyYWJsZSBvd24gcHJvcGVydHkgaW4gdGhlXG4gKiBvYmplY3QgYW5kIGNvbnN0cnVjdHMgYSBuZXcgb2JqZWN0IGZyb20gdGhlIHJlc3VsdHMuIFRoZSBgY2FsbGJhY2tgIGlzXG4gKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICpcbiAqICAtIHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICogIC0gdGhlIHByb3BlcnR5IG5hbWVcbiAqICAtIHRoZSBvYmplY3QgYmVpbmcgdHJhdmVyc2VkXG4gKlxuICogUHJvcGVydGllcyB0aGF0IGFyZSBhZGRlZCBhZnRlciB0aGUgY2FsbCB0byBgbWFwT2JqZWN0YCB3aWxsIG5vdCBiZSB2aXNpdGVkXG4gKiBieSBgY2FsbGJhY2tgLiBJZiB0aGUgdmFsdWVzIG9mIGV4aXN0aW5nIHByb3BlcnRpZXMgYXJlIGNoYW5nZWQsIHRoZSB2YWx1ZVxuICogcGFzc2VkIHRvIGBjYWxsYmFja2Agd2lsbCBiZSB0aGUgdmFsdWUgYXQgdGhlIHRpbWUgYG1hcE9iamVjdGAgdmlzaXRzIHRoZW0uXG4gKiBQcm9wZXJ0aWVzIHRoYXQgYXJlIGRlbGV0ZWQgYmVmb3JlIGJlaW5nIHZpc2l0ZWQgYXJlIG5vdCB2aXNpdGVkLlxuICpcbiAqIEBncmVwIGZ1bmN0aW9uIG9iamVjdE1hcCgpXG4gKiBAZ3JlcCBmdW5jdGlvbiBvYmpNYXAoKVxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHsqfSBjb250ZXh0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBtYXBPYmplY3Qob2JqZWN0LCBjYWxsYmFjaywgY29udGV4dCkge1xuICBpZiAoIW9iamVjdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIG5hbWUpKSB7XG4gICAgICByZXN1bHRbbmFtZV0gPSBjYWxsYmFjay5jYWxsKGNvbnRleHQsIG9iamVjdFtuYW1lXSwgbmFtZSwgb2JqZWN0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBPYmplY3Q7XG5cbn0se31dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvbWVtb2l6ZVN0cmluZ09ubHkuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgbWVtb2l6ZVN0cmluZ09ubHlcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1lbW9pemVzIHRoZSByZXR1cm4gdmFsdWUgb2YgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgb25lIHN0cmluZyBhcmd1bWVudC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVTdHJpbmdPbmx5KGNhbGxiYWNrKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgaWYgKCFjYWNoZS5oYXNPd25Qcm9wZXJ0eShzdHJpbmcpKSB7XG4gICAgICBjYWNoZVtzdHJpbmddID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbc3RyaW5nXTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplU3RyaW5nT25seTtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9vbmx5Q2hpbGQuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG9ubHlDaGlsZFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgY2hpbGQgaW4gYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuIGFuZCB2ZXJpZmllcyB0aGF0IHRoZXJlXG4gKiBpcyBvbmx5IG9uZSBjaGlsZCBpbiB0aGUgY29sbGVjdGlvbi4gVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gb2YgdGhpc1xuICogZnVuY3Rpb24gYXNzdW1lcyB0aGF0IGEgc2luZ2xlIGNoaWxkIGdldHMgcGFzc2VkIHdpdGhvdXQgYSB3cmFwcGVyLCBidXQgdGhlXG4gKiBwdXJwb3NlIG9mIHRoaXMgaGVscGVyIGZ1bmN0aW9uIGlzIHRvIGFic3RyYWN0IGF3YXkgdGhlIHBhcnRpY3VsYXIgc3RydWN0dXJlXG4gKiBvZiBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IGNoaWxkcmVuIENoaWxkIGNvbGxlY3Rpb24gc3RydWN0dXJlLlxuICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IFRoZSBmaXJzdCBhbmQgb25seSBgUmVhY3RDb21wb25lbnRgIGNvbnRhaW5lZCBpbiB0aGVcbiAqIHN0cnVjdHVyZS5cbiAqL1xuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSxcbiAgICAnb25seUNoaWxkIG11c3QgYmUgcGFzc2VkIGEgY2hpbGRyZW4gd2l0aCBleGFjdGx5IG9uZSBjaGlsZC4nXG4gICkgOiBpbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkpO1xuICByZXR1cm4gY2hpbGRyZW47XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb25seUNoaWxkO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEVsZW1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qc1wiLFwiLi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3BlcmZvcm1hbmNlLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHBlcmZvcm1hbmNlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIHBlcmZvcm1hbmNlO1xuXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHBlcmZvcm1hbmNlID1cbiAgICB3aW5kb3cucGVyZm9ybWFuY2UgfHxcbiAgICB3aW5kb3cubXNQZXJmb3JtYW5jZSB8fFxuICAgIHdpbmRvdy53ZWJraXRQZXJmb3JtYW5jZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwZXJmb3JtYW5jZSB8fCB7fTtcblxufSx7XCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9wZXJmb3JtYW5jZU5vdy5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBwZXJmb3JtYW5jZU5vd1xuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgcGVyZm9ybWFuY2UgPSByZXF1aXJlKFwiLi9wZXJmb3JtYW5jZVwiKTtcblxuLyoqXG4gKiBEZXRlY3QgaWYgd2UgY2FuIHVzZSBgd2luZG93LnBlcmZvcm1hbmNlLm5vdygpYCBhbmQgZ3JhY2VmdWxseSBmYWxsYmFjayB0b1xuICogYERhdGUubm93KClgIGlmIGl0IGRvZXNuJ3QgZXhpc3QuIFdlIG5lZWQgdG8gc3VwcG9ydCBGaXJlZm94IDwgMTUgZm9yIG5vd1xuICogYmVjYXVzZSBvZiBGYWNlYm9vaydzIHRlc3RpbmcgaW5mcmFzdHJ1Y3R1cmUuXG4gKi9cbmlmICghcGVyZm9ybWFuY2UgfHwgIXBlcmZvcm1hbmNlLm5vdykge1xuICBwZXJmb3JtYW5jZSA9IERhdGU7XG59XG5cbnZhciBwZXJmb3JtYW5jZU5vdyA9IHBlcmZvcm1hbmNlLm5vdy5iaW5kKHBlcmZvcm1hbmNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwZXJmb3JtYW5jZU5vdztcblxufSx7XCIuL3BlcmZvcm1hbmNlXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9wZXJmb3JtYW5jZS5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlci5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9IHJlcXVpcmUoXCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiKTtcblxuLyoqXG4gKiBFc2NhcGVzIGF0dHJpYnV0ZSB2YWx1ZSB0byBwcmV2ZW50IHNjcmlwdGluZyBhdHRhY2tzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiBlc2NhcGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpIHtcbiAgcmV0dXJuICdcIicgKyBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodmFsdWUpICsgJ1wiJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlcjtcblxufSx7XCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3NldElubmVySFRNTC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzZXRJbm5lckhUTUxcbiAqL1xuXG4vKiBnbG9iYWxzIE1TQXBwICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBXSElURVNQQUNFX1RFU1QgPSAvXlsgXFxyXFxuXFx0XFxmXS87XG52YXIgTk9OVklTSUJMRV9URVNUID0gLzwoIS0tfGxpbmt8bm9zY3JpcHR8bWV0YXxzY3JpcHR8c3R5bGUpWyBcXHJcXG5cXHRcXGZcXC8+XS87XG5cbi8qKlxuICogU2V0IHRoZSBpbm5lckhUTUwgcHJvcGVydHkgb2YgYSBub2RlLCBlbnN1cmluZyB0aGF0IHdoaXRlc3BhY2UgaXMgcHJlc2VydmVkXG4gKiBldmVuIGluIElFOC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIHNldElubmVySFRNTCA9IGZ1bmN0aW9uKG5vZGUsIGh0bWwpIHtcbiAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xufTtcblxuLy8gV2luOCBhcHBzOiBBbGxvdyBhbGwgaHRtbCB0byBiZSBpbnNlcnRlZFxuaWYgKHR5cGVvZiBNU0FwcCAhPT0gJ3VuZGVmaW5lZCcgJiYgTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24pIHtcbiAgc2V0SW5uZXJIVE1MID0gZnVuY3Rpb24obm9kZSwgaHRtbCkge1xuICAgIE1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xuICAgIH0pO1xuICB9O1xufVxuXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIElFODogV2hlbiB1cGRhdGluZyBhIGp1c3QgY3JlYXRlZCBub2RlIHdpdGggaW5uZXJIVE1MIG9ubHkgbGVhZGluZ1xuICAvLyB3aGl0ZXNwYWNlIGlzIHJlbW92ZWQuIFdoZW4gdXBkYXRpbmcgYW4gZXhpc3Rpbmcgbm9kZSB3aXRoIGlubmVySFRNTFxuICAvLyB3aGl0ZXNwYWNlIGluIHJvb3QgVGV4dE5vZGVzIGlzIGFsc28gY29sbGFwc2VkLlxuICAvLyBAc2VlIHF1aXJrc21vZGUub3JnL2J1Z3JlcG9ydHMvYXJjaGl2ZXMvMjAwNC8xMS9pbm5lcmh0bWxfYW5kX3QuaHRtbFxuXG4gIC8vIEZlYXR1cmUgZGV0ZWN0aW9uOyBvbmx5IElFOCBpcyBrbm93biB0byBiZWhhdmUgaW1wcm9wZXJseSBsaWtlIHRoaXMuXG4gIHZhciB0ZXN0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0ZXN0RWxlbWVudC5pbm5lckhUTUwgPSAnICc7XG4gIGlmICh0ZXN0RWxlbWVudC5pbm5lckhUTUwgPT09ICcnKSB7XG4gICAgc2V0SW5uZXJIVE1MID0gZnVuY3Rpb24obm9kZSwgaHRtbCkge1xuICAgICAgLy8gTWFnaWMgdGhlb3J5OiBJRTggc3VwcG9zZWRseSBkaWZmZXJlbnRpYXRlcyBiZXR3ZWVuIGFkZGVkIGFuZCB1cGRhdGVkXG4gICAgICAvLyBub2RlcyB3aGVuIHByb2Nlc3NpbmcgaW5uZXJIVE1MLCBpbm5lckhUTUwgb24gdXBkYXRlZCBub2RlcyBzdWZmZXJzXG4gICAgICAvLyBmcm9tIHdvcnNlIHdoaXRlc3BhY2UgYmVoYXZpb3IuIFJlLWFkZGluZyBhIG5vZGUgbGlrZSB0aGlzIHRyaWdnZXJzXG4gICAgICAvLyB0aGUgaW5pdGlhbCBhbmQgbW9yZSBmYXZvcmFibGUgd2hpdGVzcGFjZSBiZWhhdmlvci5cbiAgICAgIC8vIFRPRE86IFdoYXQgdG8gZG8gb24gYSBkZXRhY2hlZCBub2RlP1xuICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5vZGUsIG5vZGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBhbHNvIGltcGxlbWVudCBhIHdvcmthcm91bmQgZm9yIG5vbi12aXNpYmxlIHRhZ3MgZGlzYXBwZWFyaW5nIGludG9cbiAgICAgIC8vIHRoaW4gYWlyIG9uIElFOCwgdGhpcyBvbmx5IGhhcHBlbnMgaWYgdGhlcmUgaXMgbm8gdmlzaWJsZSB0ZXh0XG4gICAgICAvLyBpbi1mcm9udCBvZiB0aGUgbm9uLXZpc2libGUgdGFncy4gUGlnZ3liYWNrIG9uIHRoZSB3aGl0ZXNwYWNlIGZpeFxuICAgICAgLy8gYW5kIHNpbXBseSBjaGVjayBpZiBhbnkgbm9uLXZpc2libGUgdGFncyBhcHBlYXIgaW4gdGhlIHNvdXJjZS5cbiAgICAgIGlmIChXSElURVNQQUNFX1RFU1QudGVzdChodG1sKSB8fFxuICAgICAgICAgIGh0bWxbMF0gPT09ICc8JyAmJiBOT05WSVNJQkxFX1RFU1QudGVzdChodG1sKSkge1xuICAgICAgICAvLyBSZWNvdmVyIGxlYWRpbmcgd2hpdGVzcGFjZSBieSB0ZW1wb3JhcmlseSBwcmVwZW5kaW5nIGFueSBjaGFyYWN0ZXIuXG4gICAgICAgIC8vIFxcdUZFRkYgaGFzIHRoZSBwb3RlbnRpYWwgYWR2YW50YWdlIG9mIGJlaW5nIHplcm8td2lkdGgvaW52aXNpYmxlLlxuICAgICAgICBub2RlLmlubmVySFRNTCA9ICdcXHVGRUZGJyArIGh0bWw7XG5cbiAgICAgICAgLy8gZGVsZXRlRGF0YSBsZWF2ZXMgYW4gZW1wdHkgYFRleHROb2RlYCB3aGljaCBvZmZzZXRzIHRoZSBpbmRleCBvZiBhbGxcbiAgICAgICAgLy8gY2hpbGRyZW4uIERlZmluaXRlbHkgd2FudCB0byBhdm9pZCB0aGlzLlxuICAgICAgICB2YXIgdGV4dE5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmICh0ZXh0Tm9kZS5kYXRhLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQodGV4dE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHROb2RlLmRlbGV0ZURhdGEoMCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0SW5uZXJIVE1MO1xuXG59LHtcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3NldFRleHRDb250ZW50LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNldFRleHRDb250ZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKFwiLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXJcIik7XG52YXIgc2V0SW5uZXJIVE1MID0gcmVxdWlyZShcIi4vc2V0SW5uZXJIVE1MXCIpO1xuXG4vKipcbiAqIFNldCB0aGUgdGV4dENvbnRlbnQgcHJvcGVydHkgb2YgYSBub2RlLCBlbnN1cmluZyB0aGF0IHdoaXRlc3BhY2UgaXMgcHJlc2VydmVkXG4gKiBldmVuIGluIElFOC4gaW5uZXJUZXh0IGlzIGEgcG9vciBzdWJzdGl0dXRlIGZvciB0ZXh0Q29udGVudCBhbmQsIGFtb25nIG1hbnlcbiAqIGlzc3VlcywgaW5zZXJ0cyA8YnI+IGluc3RlYWQgb2YgdGhlIGxpdGVyYWwgbmV3bGluZSBjaGFycy4gaW5uZXJIVE1MIGJlaGF2ZXNcbiAqIGFzIGl0IHNob3VsZC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIHNldFRleHRDb250ZW50ID0gZnVuY3Rpb24obm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn07XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgaWYgKCEoJ3RleHRDb250ZW50JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgc2V0VGV4dENvbnRlbnQgPSBmdW5jdGlvbihub2RlLCB0ZXh0KSB7XG4gICAgICBzZXRJbm5lckhUTUwobm9kZSwgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKHRleHQpKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VGV4dENvbnRlbnQ7XG5cbn0se1wiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanNcIixcIi4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIuanNcIixcIi4vc2V0SW5uZXJIVE1MXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9zZXRJbm5lckhUTUwuanNcIn1dLFwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvc2hhbGxvd0VxdWFsLmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNoYWxsb3dFcXVhbFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nXG4gKiBmYWxzZSB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW5cbiAqIG9iakEgYW5kIG9iakIuIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGtleTtcbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yIChrZXkgaW4gb2JqQSkge1xuICAgIGlmIChvYmpBLmhhc093blByb3BlcnR5KGtleSkgJiZcbiAgICAgICAgKCFvYmpCLmhhc093blByb3BlcnR5KGtleSkgfHwgb2JqQVtrZXldICE9PSBvYmpCW2tleV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIFRlc3QgZm9yIEIncyBrZXlzIG1pc3NpbmcgZnJvbSBBLlxuICBmb3IgKGtleSBpbiBvYmpCKSB7XG4gICAgaWYgKG9iakIuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhb2JqQS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDtcblxufSx7fV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbi8qKlxuICogR2l2ZW4gYSBgcHJldkVsZW1lbnRgIGFuZCBgbmV4dEVsZW1lbnRgLCBkZXRlcm1pbmVzIGlmIHRoZSBleGlzdGluZ1xuICogaW5zdGFuY2Ugc2hvdWxkIGJlIHVwZGF0ZWQgYXMgb3Bwb3NlZCB0byBiZWluZyBkZXN0cm95ZWQgb3IgcmVwbGFjZWQgYnkgYSBuZXdcbiAqIGluc3RhbmNlLiBCb3RoIGFyZ3VtZW50cyBhcmUgZWxlbWVudHMuIFRoaXMgZW5zdXJlcyB0aGF0IHRoaXMgbG9naWMgY2FuXG4gKiBvcGVyYXRlIG9uIHN0YXRlbGVzcyB0cmVlcyB3aXRob3V0IGFueSBiYWNraW5nIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gcHJldkVsZW1lbnRcbiAqIEBwYXJhbSB7P29iamVjdH0gbmV4dEVsZW1lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV4aXN0aW5nIGluc3RhbmNlIHNob3VsZCBiZSB1cGRhdGVkLlxuICogQHByb3RlY3RlZFxuICovXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpIHtcbiAgaWYgKHByZXZFbGVtZW50ICE9IG51bGwgJiYgbmV4dEVsZW1lbnQgIT0gbnVsbCkge1xuICAgIHZhciBwcmV2VHlwZSA9IHR5cGVvZiBwcmV2RWxlbWVudDtcbiAgICB2YXIgbmV4dFR5cGUgPSB0eXBlb2YgbmV4dEVsZW1lbnQ7XG4gICAgaWYgKHByZXZUeXBlID09PSAnc3RyaW5nJyB8fCBwcmV2VHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiAobmV4dFR5cGUgPT09ICdzdHJpbmcnIHx8IG5leHRUeXBlID09PSAnbnVtYmVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZXh0VHlwZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICBwcmV2RWxlbWVudC50eXBlID09PSBuZXh0RWxlbWVudC50eXBlICYmXG4gICAgICAgICAgcHJldkVsZW1lbnQua2V5ID09PSBuZXh0RWxlbWVudC5rZXkpIHtcbiAgICAgICAgdmFyIG93bmVyc01hdGNoID0gcHJldkVsZW1lbnQuX293bmVyID09PSBuZXh0RWxlbWVudC5fb3duZXI7XG4gICAgICAgIHZhciBwcmV2TmFtZSA9IG51bGw7XG4gICAgICAgIHZhciBuZXh0TmFtZSA9IG51bGw7XG4gICAgICAgIHZhciBuZXh0RGlzcGxheU5hbWUgPSBudWxsO1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgICAgaWYgKCFvd25lcnNNYXRjaCkge1xuICAgICAgICAgICAgaWYgKHByZXZFbGVtZW50Ll9vd25lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgcHJldkVsZW1lbnQuX293bmVyLmdldFB1YmxpY0luc3RhbmNlKCkgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHByZXZFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgcHJldk5hbWUgPVxuICAgICAgICAgICAgICAgIHByZXZFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHRFbGVtZW50Ll9vd25lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgbmV4dEVsZW1lbnQuX293bmVyLmdldFB1YmxpY0luc3RhbmNlKCkgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIG5leHRFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgbmV4dE5hbWUgPVxuICAgICAgICAgICAgICAgIG5leHRFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHRFbGVtZW50LnR5cGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIG5leHRFbGVtZW50LnR5cGUuZGlzcGxheU5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBuZXh0RGlzcGxheU5hbWUgPSBuZXh0RWxlbWVudC50eXBlLmRpc3BsYXlOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHRFbGVtZW50LnR5cGUgIT0gbnVsbCAmJiB0eXBlb2YgbmV4dEVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgbmV4dERpc3BsYXlOYW1lID0gbmV4dEVsZW1lbnQudHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV4dEVsZW1lbnQudHlwZSAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICBuZXh0RWxlbWVudC50eXBlID09PSAnaW5wdXQnIHx8XG4gICAgICAgICAgICAgICAgbmV4dEVsZW1lbnQudHlwZSA9PT0gJ3RleHRhcmVhJykge1xuICAgICAgICAgICAgICBpZiAoKHByZXZFbGVtZW50Ll9vd25lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICBwcmV2RWxlbWVudC5fb3duZXIuX2lzT3duZXJOZWNlc3NhcnkgPT09IGZhbHNlKSB8fFxuICAgICAgICAgICAgICAgICAgKG5leHRFbGVtZW50Ll9vd25lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICBuZXh0RWxlbWVudC5fb3duZXIuX2lzT3duZXJOZWNlc3NhcnkgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2RWxlbWVudC5fb3duZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgcHJldkVsZW1lbnQuX293bmVyLl9pc093bmVyTmVjZXNzYXJ5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5leHRFbGVtZW50Ll9vd25lciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBuZXh0RWxlbWVudC5fb3duZXIuX2lzT3duZXJOZWNlc3NhcnkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgJzwlcyAvPiBpcyBiZWluZyByZW5kZXJlZCBieSBib3RoICVzIGFuZCAlcyB1c2luZyB0aGUgc2FtZSAnICtcbiAgICAgICAgICAgICAgICAgICdrZXkgKCVzKSBpbiB0aGUgc2FtZSBwbGFjZS4gQ3VycmVudGx5LCB0aGlzIG1lYW5zIHRoYXQgJyArXG4gICAgICAgICAgICAgICAgICAndGhleSBkb25cXCd0IHByZXNlcnZlIHN0YXRlLiBUaGlzIGJlaGF2aW9yIHNob3VsZCBiZSB2ZXJ5ICcgK1xuICAgICAgICAgICAgICAgICAgJ3JhcmUgc28gd2VcXCdyZSBjb25zaWRlcmluZyBkZXByZWNhdGluZyBpdC4gUGxlYXNlIGNvbnRhY3QgJyArXG4gICAgICAgICAgICAgICAgICAndGhlIFJlYWN0IHRlYW0gYW5kIGV4cGxhaW4geW91ciB1c2UgY2FzZSBzbyB0aGF0IHdlIGNhbiAnICtcbiAgICAgICAgICAgICAgICAgICd0YWtlIHRoYXQgaW50byBjb25zaWRlcmF0aW9uLicsXG4gICAgICAgICAgICAgICAgICBuZXh0RGlzcGxheU5hbWUgfHwgJ1Vua25vd24gQ29tcG9uZW50JyxcbiAgICAgICAgICAgICAgICAgIHByZXZOYW1lIHx8ICdbVW5rbm93bl0nLFxuICAgICAgICAgICAgICAgICAgbmV4dE5hbWUgfHwgJ1tVbmtub3duXScsXG4gICAgICAgICAgICAgICAgICBwcmV2RWxlbWVudC5rZXlcbiAgICAgICAgICAgICAgICApIDogbnVsbCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG93bmVyc01hdGNoO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL3dhcm5pbmdcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3dhcm5pbmcuanNcIixcIl9wcm9jZXNzXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi90b0FycmF5LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB0b0FycmF5XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogQ29udmVydCBhcnJheS1saWtlIG9iamVjdHMgdG8gYXJyYXlzLlxuICpcbiAqIFRoaXMgQVBJIGFzc3VtZXMgdGhlIGNhbGxlciBrbm93cyB0aGUgY29udGVudHMgb2YgdGhlIGRhdGEgdHlwZS4gRm9yIGxlc3NcbiAqIHdlbGwgZGVmaW5lZCBpbnB1dHMgdXNlIGNyZWF0ZUFycmF5RnJvbU1peGVkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fGZ1bmN0aW9ufGZpbGVsaXN0fSBvYmpcbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiB0b0FycmF5KG9iaikge1xuICB2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aDtcblxuICAvLyBTb21lIGJyb3dzZSBidWlsdGluIG9iamVjdHMgY2FuIHJlcG9ydCB0eXBlb2YgJ2Z1bmN0aW9uJyAoZS5nLiBOb2RlTGlzdCBpblxuICAvLyBvbGQgdmVyc2lvbnMgb2YgU2FmYXJpKS5cbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAhQXJyYXkuaXNBcnJheShvYmopICYmXG4gICAgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpLFxuICAgICd0b0FycmF5OiBBcnJheS1saWtlIG9iamVjdCBleHBlY3RlZCdcbiAgKSA6IGludmFyaWFudCghQXJyYXkuaXNBcnJheShvYmopICYmXG4gICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSkpO1xuXG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgdHlwZW9mIGxlbmd0aCA9PT0gJ251bWJlcicsXG4gICAgJ3RvQXJyYXk6IE9iamVjdCBuZWVkcyBhIGxlbmd0aCBwcm9wZXJ0eSdcbiAgKSA6IGludmFyaWFudCh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJykpO1xuXG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgbGVuZ3RoID09PSAwIHx8XG4gICAgKGxlbmd0aCAtIDEpIGluIG9iaixcbiAgICAndG9BcnJheTogT2JqZWN0IHNob3VsZCBoYXZlIGtleXMgZm9yIGluZGljZXMnXG4gICkgOiBpbnZhcmlhbnQobGVuZ3RoID09PSAwIHx8XG4gIChsZW5ndGggLSAxKSBpbiBvYmopKTtcblxuICAvLyBPbGQgSUUgZG9lc24ndCBnaXZlIGNvbGxlY3Rpb25zIGFjY2VzcyB0byBoYXNPd25Qcm9wZXJ0eS4gQXNzdW1lIGlucHV0c1xuICAvLyB3aXRob3V0IG1ldGhvZCB3aWxsIHRocm93IGR1cmluZyB0aGUgc2xpY2UgY2FsbCBhbmQgc2tpcCBzdHJhaWdodCB0byB0aGVcbiAgLy8gZmFsbGJhY2suXG4gIGlmIChvYmouaGFzT3duUHJvcGVydHkpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG9iaik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSUUgPCA5IGRvZXMgbm90IHN1cHBvcnQgQXJyYXkjc2xpY2Ugb24gY29sbGVjdGlvbnMgb2JqZWN0c1xuICAgIH1cbiAgfVxuXG4gIC8vIEZhbGwgYmFjayB0byBjb3B5aW5nIGtleSBieSBrZXkuIFRoaXMgYXNzdW1lcyBhbGwga2V5cyBoYXZlIGEgdmFsdWUsXG4gIC8vIHNvIHdpbGwgbm90IHByZXNlcnZlIHNwYXJzZWx5IHBvcHVsYXRlZCBpbnB1dHMuXG4gIHZhciByZXQgPSBBcnJheShsZW5ndGgpO1xuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbGVuZ3RoOyBpaSsrKSB7XG4gICAgcmV0W2lpXSA9IG9ialtpaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9pbnZhcmlhbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3RyYXZlcnNlQWxsQ2hpbGRyZW4uanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHRyYXZlcnNlQWxsQ2hpbGRyZW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RGcmFnbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RnJhZ21lbnRcIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcblxudmFyIGdldEl0ZXJhdG9yRm4gPSByZXF1aXJlKFwiLi9nZXRJdGVyYXRvckZuXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIFNFUEFSQVRPUiA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLlNFUEFSQVRPUjtcbnZhciBTVUJTRVBBUkFUT1IgPSAnOic7XG5cbi8qKlxuICogVE9ETzogVGVzdCB0aGF0IGEgc2luZ2xlIGNoaWxkIGFuZCBhbiBhcnJheSB3aXRoIG9uZSBpdGVtIGhhdmUgdGhlIHNhbWUga2V5XG4gKiBwYXR0ZXJuLlxuICovXG5cbnZhciB1c2VyUHJvdmlkZWRLZXlFc2NhcGVyTG9va3VwID0ge1xuICAnPSc6ICc9MCcsXG4gICcuJzogJz0xJyxcbiAgJzonOiAnPTInXG59O1xuXG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXggPSAvWz0uOl0vZztcblxudmFyIGRpZFdhcm5BYm91dE1hcHMgPSBmYWxzZTtcblxuZnVuY3Rpb24gdXNlclByb3ZpZGVkS2V5RXNjYXBlcihtYXRjaCkge1xuICByZXR1cm4gdXNlclByb3ZpZGVkS2V5RXNjYXBlckxvb2t1cFttYXRjaF07XG59XG5cbi8qKlxuICogR2VuZXJhdGUgYSBrZXkgc3RyaW5nIHRoYXQgaWRlbnRpZmllcyBhIGNvbXBvbmVudCB3aXRoaW4gYSBzZXQuXG4gKlxuICogQHBhcmFtIHsqfSBjb21wb25lbnQgQSBjb21wb25lbnQgdGhhdCBjb3VsZCBjb250YWluIGEgbWFudWFsIGtleS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCB0aGF0IGlzIHVzZWQgaWYgYSBtYW51YWwga2V5IGlzIG5vdCBwcm92aWRlZC5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50S2V5KGNvbXBvbmVudCwgaW5kZXgpIHtcbiAgaWYgKGNvbXBvbmVudCAmJiBjb21wb25lbnQua2V5ICE9IG51bGwpIHtcbiAgICAvLyBFeHBsaWNpdCBrZXlcbiAgICByZXR1cm4gd3JhcFVzZXJQcm92aWRlZEtleShjb21wb25lbnQua2V5KTtcbiAgfVxuICAvLyBJbXBsaWNpdCBrZXkgZGV0ZXJtaW5lZCBieSB0aGUgaW5kZXggaW4gdGhlIHNldFxuICByZXR1cm4gaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuXG4vKipcbiAqIEVzY2FwZSBhIGNvbXBvbmVudCBrZXkgc28gdGhhdCBpdCBpcyBzYWZlIHRvIHVzZSBpbiBhIHJlYWN0aWQuXG4gKlxuICogQHBhcmFtIHsqfSBrZXkgQ29tcG9uZW50IGtleSB0byBiZSBlc2NhcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiBlc2NhcGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UoXG4gICAgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsXG4gICAgdXNlclByb3ZpZGVkS2V5RXNjYXBlclxuICApO1xufVxuXG4vKipcbiAqIFdyYXAgYSBga2V5YCB2YWx1ZSBleHBsaWNpdGx5IHByb3ZpZGVkIGJ5IHRoZSB1c2VyIHRvIGRpc3Rpbmd1aXNoIGl0IGZyb21cbiAqIGltcGxpY2l0bHktZ2VuZXJhdGVkIGtleXMgZ2VuZXJhdGVkIGJ5IGEgY29tcG9uZW50J3MgaW5kZXggaW4gaXRzIHBhcmVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFZhbHVlIG9mIGEgdXNlci1wcm92aWRlZCBga2V5YCBhdHRyaWJ1dGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gd3JhcFVzZXJQcm92aWRlZEtleShrZXkpIHtcbiAgcmV0dXJuICckJyArIGVzY2FwZVVzZXJQcm92aWRlZEtleShrZXkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lU29GYXIgTmFtZSBvZiB0aGUga2V5IHBhdGggc28gZmFyLlxuICogQHBhcmFtIHshbnVtYmVyfSBpbmRleFNvRmFyIE51bWJlciBvZiBjaGlsZHJlbiBlbmNvdW50ZXJlZCB1bnRpbCB0aGlzIHBvaW50LlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aXRoIGVhY2ggY2hpbGQgZm91bmQuXG4gKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgVXNlZCB0byBwYXNzIGluZm9ybWF0aW9uIHRocm91Z2hvdXQgdGhlIHRyYXZlcnNhbFxuICogcHJvY2Vzcy5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChcbiAgY2hpbGRyZW4sXG4gIG5hbWVTb0ZhcixcbiAgaW5kZXhTb0ZhcixcbiAgY2FsbGJhY2ssXG4gIHRyYXZlcnNlQ29udGV4dFxuKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuXG4gIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBBbGwgb2YgdGhlIGFib3ZlIGFyZSBwZXJjZWl2ZWQgYXMgbnVsbC5cbiAgICBjaGlsZHJlbiA9IG51bGw7XG4gIH1cblxuICBpZiAoY2hpbGRyZW4gPT09IG51bGwgfHxcbiAgICAgIHR5cGUgPT09ICdzdHJpbmcnIHx8XG4gICAgICB0eXBlID09PSAnbnVtYmVyJyB8fFxuICAgICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgIGNhbGxiYWNrKFxuICAgICAgdHJhdmVyc2VDb250ZXh0LFxuICAgICAgY2hpbGRyZW4sXG4gICAgICAvLyBJZiBpdCdzIHRoZSBvbmx5IGNoaWxkLCB0cmVhdCB0aGUgbmFtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBhbiBhcnJheVxuICAgICAgLy8gc28gdGhhdCBpdCdzIGNvbnNpc3RlbnQgaWYgdGhlIG51bWJlciBvZiBjaGlsZHJlbiBncm93cy5cbiAgICAgIG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyLFxuICAgICAgaW5kZXhTb0ZhclxuICAgICk7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICB2YXIgY2hpbGQsIG5leHROYW1lLCBuZXh0SW5kZXg7XG4gIHZhciBzdWJ0cmVlQ291bnQgPSAwOyAvLyBDb3VudCBvZiBjaGlsZHJlbiBmb3VuZCBpbiB0aGUgY3VycmVudCBzdWJ0cmVlLlxuXG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBuZXh0TmFtZSA9IChcbiAgICAgICAgKG5hbWVTb0ZhciAhPT0gJycgPyBuYW1lU29GYXIgKyBTVUJTRVBBUkFUT1IgOiBTRVBBUkFUT1IpICtcbiAgICAgICAgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCBpKVxuICAgICAgKTtcbiAgICAgIG5leHRJbmRleCA9IGluZGV4U29GYXIgKyBzdWJ0cmVlQ291bnQ7XG4gICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBuZXh0TmFtZSxcbiAgICAgICAgbmV4dEluZGV4LFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgdHJhdmVyc2VDb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4oY2hpbGRyZW4pO1xuICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwoY2hpbGRyZW4pO1xuICAgICAgdmFyIHN0ZXA7XG4gICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gY2hpbGRyZW4uZW50cmllcykge1xuICAgICAgICB2YXIgaWkgPSAwO1xuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgY2hpbGQgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgIG5leHROYW1lID0gKFxuICAgICAgICAgICAgKG5hbWVTb0ZhciAhPT0gJycgPyBuYW1lU29GYXIgKyBTVUJTRVBBUkFUT1IgOiBTRVBBUkFUT1IpICtcbiAgICAgICAgICAgIGdldENvbXBvbmVudEtleShjaGlsZCwgaWkrKylcbiAgICAgICAgICApO1xuICAgICAgICAgIG5leHRJbmRleCA9IGluZGV4U29GYXIgKyBzdWJ0cmVlQ291bnQ7XG4gICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKFxuICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICBuZXh0TmFtZSxcbiAgICAgICAgICAgIG5leHRJbmRleCxcbiAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgdHJhdmVyc2VDb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgICAgZGlkV2FybkFib3V0TWFwcyxcbiAgICAgICAgICAgICdVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIG5vdCB5ZXQgZnVsbHkgc3VwcG9ydGVkLiBJdCBpcyBhbiAnICtcbiAgICAgICAgICAgICdleHBlcmltZW50YWwgZmVhdHVyZSB0aGF0IG1pZ2h0IGJlIHJlbW92ZWQuIENvbnZlcnQgaXQgdG8gYSAnICtcbiAgICAgICAgICAgICdzZXF1ZW5jZSAvIGl0ZXJhYmxlIG9mIGtleWVkIFJlYWN0RWxlbWVudHMgaW5zdGVhZC4nXG4gICAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICAgIGRpZFdhcm5BYm91dE1hcHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEl0ZXJhdG9yIHdpbGwgcHJvdmlkZSBlbnRyeSBbayx2XSB0dXBsZXMgcmF0aGVyIHRoYW4gdmFsdWVzLlxuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgIGNoaWxkID0gZW50cnlbMV07XG4gICAgICAgICAgICBuZXh0TmFtZSA9IChcbiAgICAgICAgICAgICAgKG5hbWVTb0ZhciAhPT0gJycgPyBuYW1lU29GYXIgKyBTVUJTRVBBUkFUT1IgOiBTRVBBUkFUT1IpICtcbiAgICAgICAgICAgICAgd3JhcFVzZXJQcm92aWRlZEtleShlbnRyeVswXSkgKyBTVUJTRVBBUkFUT1IgK1xuICAgICAgICAgICAgICBnZXRDb21wb25lbnRLZXkoY2hpbGQsIDApXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbmV4dEluZGV4ID0gaW5kZXhTb0ZhciArIHN1YnRyZWVDb3VudDtcbiAgICAgICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChcbiAgICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICAgIG5leHROYW1lLFxuICAgICAgICAgICAgICBuZXh0SW5kZXgsXG4gICAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgICB0cmF2ZXJzZUNvbnRleHRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgY2hpbGRyZW4ubm9kZVR5cGUgIT09IDEsXG4gICAgICAgICd0cmF2ZXJzZUFsbENoaWxkcmVuKC4uLik6IEVuY291bnRlcmVkIGFuIGludmFsaWQgY2hpbGQ7IERPTSAnICtcbiAgICAgICAgJ2VsZW1lbnRzIGFyZSBub3QgdmFsaWQgY2hpbGRyZW4gb2YgUmVhY3QgY29tcG9uZW50cy4nXG4gICAgICApIDogaW52YXJpYW50KGNoaWxkcmVuLm5vZGVUeXBlICE9PSAxKSk7XG4gICAgICB2YXIgZnJhZ21lbnQgPSBSZWFjdEZyYWdtZW50LmV4dHJhY3QoY2hpbGRyZW4pO1xuICAgICAgZm9yICh2YXIga2V5IGluIGZyYWdtZW50KSB7XG4gICAgICAgIGlmIChmcmFnbWVudC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgY2hpbGQgPSBmcmFnbWVudFtrZXldO1xuICAgICAgICAgIG5leHROYW1lID0gKFxuICAgICAgICAgICAgKG5hbWVTb0ZhciAhPT0gJycgPyBuYW1lU29GYXIgKyBTVUJTRVBBUkFUT1IgOiBTRVBBUkFUT1IpICtcbiAgICAgICAgICAgIHdyYXBVc2VyUHJvdmlkZWRLZXkoa2V5KSArIFNVQlNFUEFSQVRPUiArXG4gICAgICAgICAgICBnZXRDb21wb25lbnRLZXkoY2hpbGQsIDApXG4gICAgICAgICAgKTtcbiAgICAgICAgICBuZXh0SW5kZXggPSBpbmRleFNvRmFyICsgc3VidHJlZUNvdW50O1xuICAgICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChcbiAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgbmV4dE5hbWUsXG4gICAgICAgICAgICBuZXh0SW5kZXgsXG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgIHRyYXZlcnNlQ29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3VidHJlZUNvdW50O1xufVxuXG4vKipcbiAqIFRyYXZlcnNlcyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAsIGJ1dFxuICogbWlnaHQgYWxzbyBiZSBzcGVjaWZpZWQgdGhyb3VnaCBhdHRyaWJ1dGVzOlxuICpcbiAqIC0gYHRyYXZlcnNlQWxsQ2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbiwgLi4uKWBcbiAqIC0gYHRyYXZlcnNlQWxsQ2hpbGRyZW4odGhpcy5wcm9wcy5sZWZ0UGFuZWxDaGlsZHJlbiwgLi4uKWBcbiAqXG4gKiBUaGUgYHRyYXZlcnNlQ29udGV4dGAgaXMgYW4gb3B0aW9uYWwgYXJndW1lbnQgdGhhdCBpcyBwYXNzZWQgdGhyb3VnaCB0aGVcbiAqIGVudGlyZSB0cmF2ZXJzYWwuIEl0IGNhbiBiZSB1c2VkIHRvIHN0b3JlIGFjY3VtdWxhdGlvbnMgb3IgYW55dGhpbmcgZWxzZSB0aGF0XG4gKiB0aGUgY2FsbGJhY2sgbWlnaHQgZmluZCByZWxldmFudC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIG9iamVjdC5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBjYWxsYmFjayBUbyBpbnZva2UgdXBvbiB0cmF2ZXJzaW5nIGVhY2ggY2hpbGQuXG4gKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgQ29udGV4dCBmb3IgdHJhdmVyc2FsLlxuICogQHJldHVybiB7IW51bWJlcn0gVGhlIG51bWJlciBvZiBjaGlsZHJlbiBpbiB0aGlzIHN1YnRyZWUuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgJycsIDAsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyYXZlcnNlQWxsQ2hpbGRyZW47XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0RWxlbWVudFwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzXCIsXCIuL1JlYWN0RnJhZ21lbnRcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RnJhZ21lbnQuanNcIixcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5zdGFuY2VIYW5kbGVzLmpzXCIsXCIuL2dldEl0ZXJhdG9yRm5cIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEl0ZXJhdG9yRm4uanNcIixcIi4vaW52YXJpYW50XCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pbnZhcmlhbnQuanNcIixcIi4vd2FybmluZ1wiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvd2FybmluZy5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3dhcm5pbmcuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHdhcm5pbmdcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0ICkge2ZvciAodmFyIGFyZ3M9W10sJF9fMD0yLCRfXzE9YXJndW1lbnRzLmxlbmd0aDskX18wPCRfXzE7JF9fMCsrKSBhcmdzLnB1c2goYXJndW1lbnRzWyRfXzBdKTtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAvXltzXFxXXSokLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQuaW5kZXhPZignRmFpbGVkIENvbXBvc2l0ZSBwcm9wVHlwZTogJykgPT09IDApIHtcbiAgICAgIHJldHVybjsgLy8gSWdub3JlIENvbXBvc2l0ZUNvbXBvbmVudCBwcm9wdHlwZSBjaGVjay5cbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSAge3JldHVybiBhcmdzW2FyZ0luZGV4KytdO30pO1xuICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vZW1wdHlGdW5jdGlvblwiOlwiL1VzZXJzL0RhbmUvUHJvamVjdHMvbWVldHVwL3R3aXR0ZXItc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZW1wdHlGdW5jdGlvbi5qc1wiLFwiX3Byb2Nlc3NcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL1JlYWN0Jyk7XG5cbn0se1wiLi9saWIvUmVhY3RcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0LmpzXCJ9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvY2xpZW50LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnZW1pdHRlcicpO1xudmFyIHJlZHVjZSA9IHJlcXVpcmUoJ3JlZHVjZScpO1xuXG4vKipcbiAqIFJvb3QgcmVmZXJlbmNlIGZvciBpZnJhbWVzLlxuICovXG5cbnZhciByb290ID0gJ3VuZGVmaW5lZCcgPT0gdHlwZW9mIHdpbmRvd1xuICA/ICh0aGlzIHx8IHNlbGYpXG4gIDogd2luZG93O1xuXG4vKipcbiAqIE5vb3AuXG4gKi9cblxuZnVuY3Rpb24gbm9vcCgpe307XG5cbi8qKlxuICogQ2hlY2sgaWYgYG9iamAgaXMgYSBob3N0IG9iamVjdCxcbiAqIHdlIGRvbid0IHdhbnQgdG8gc2VyaWFsaXplIHRoZXNlIDopXG4gKlxuICogVE9ETzogZnV0dXJlIHByb29mLCBtb3ZlIHRvIGNvbXBvZW50IGxhbmRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNIb3N0KG9iaikge1xuICB2YXIgc3RyID0ge30udG9TdHJpbmcuY2FsbChvYmopO1xuXG4gIHN3aXRjaCAoc3RyKSB7XG4gICAgY2FzZSAnW29iamVjdCBGaWxlXSc6XG4gICAgY2FzZSAnW29iamVjdCBCbG9iXSc6XG4gICAgY2FzZSAnW29iamVjdCBGb3JtRGF0YV0nOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIERldGVybWluZSBYSFIuXG4gKi9cblxucmVxdWVzdC5nZXRYSFIgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChyb290LlhNTEh0dHBSZXF1ZXN0XG4gICAgICAmJiAoIXJvb3QubG9jYXRpb24gfHwgJ2ZpbGU6JyAhPSByb290LmxvY2F0aW9uLnByb3RvY29sXG4gICAgICAgICAgfHwgIXJvb3QuQWN0aXZlWE9iamVjdCkpIHtcbiAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0O1xuICB9IGVsc2Uge1xuICAgIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgnTWljcm9zb2Z0LlhNTEhUVFAnKTsgfSBjYXRjaChlKSB7fVxuICAgIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgnTXN4bWwyLlhNTEhUVFAuNi4wJyk7IH0gY2F0Y2goZSkge31cbiAgICB0cnkgeyByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01zeG1sMi5YTUxIVFRQLjMuMCcpOyB9IGNhdGNoKGUpIHt9XG4gICAgdHJ5IHsgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNc3htbDIuWE1MSFRUUCcpOyB9IGNhdGNoKGUpIHt9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGFkZGVkIHRvIHN1cHBvcnQgSUUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbnZhciB0cmltID0gJycudHJpbVxuICA/IGZ1bmN0aW9uKHMpIHsgcmV0dXJuIHMudHJpbSgpOyB9XG4gIDogZnVuY3Rpb24ocykgeyByZXR1cm4gcy5yZXBsYWNlKC8oXlxccyp8XFxzKiQpL2csICcnKTsgfTtcblxuLyoqXG4gKiBDaGVjayBpZiBgb2JqYCBpcyBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gb2JqID09PSBPYmplY3Qob2JqKTtcbn1cblxuLyoqXG4gKiBTZXJpYWxpemUgdGhlIGdpdmVuIGBvYmpgLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZShvYmopIHtcbiAgaWYgKCFpc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICB2YXIgcGFpcnMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChudWxsICE9IG9ialtrZXldKSB7XG4gICAgICBwYWlycy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpXG4gICAgICAgICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtrZXldKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYWlycy5qb2luKCcmJyk7XG59XG5cbi8qKlxuICogRXhwb3NlIHNlcmlhbGl6YXRpb24gbWV0aG9kLlxuICovXG5cbiByZXF1ZXN0LnNlcmlhbGl6ZU9iamVjdCA9IHNlcmlhbGl6ZTtcblxuIC8qKlxuICAqIFBhcnNlIHRoZSBnaXZlbiB4LXd3dy1mb3JtLXVybGVuY29kZWQgYHN0cmAuXG4gICpcbiAgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gICogQHJldHVybiB7T2JqZWN0fVxuICAqIEBhcGkgcHJpdmF0ZVxuICAqL1xuXG5mdW5jdGlvbiBwYXJzZVN0cmluZyhzdHIpIHtcbiAgdmFyIG9iaiA9IHt9O1xuICB2YXIgcGFpcnMgPSBzdHIuc3BsaXQoJyYnKTtcbiAgdmFyIHBhcnRzO1xuICB2YXIgcGFpcjtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGFpcnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBwYWlyID0gcGFpcnNbaV07XG4gICAgcGFydHMgPSBwYWlyLnNwbGl0KCc9Jyk7XG4gICAgb2JqW2RlY29kZVVSSUNvbXBvbmVudChwYXJ0c1swXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcnRzWzFdKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogRXhwb3NlIHBhcnNlci5cbiAqL1xuXG5yZXF1ZXN0LnBhcnNlU3RyaW5nID0gcGFyc2VTdHJpbmc7XG5cbi8qKlxuICogRGVmYXVsdCBNSU1FIHR5cGUgbWFwLlxuICpcbiAqICAgICBzdXBlcmFnZW50LnR5cGVzLnhtbCA9ICdhcHBsaWNhdGlvbi94bWwnO1xuICpcbiAqL1xuXG5yZXF1ZXN0LnR5cGVzID0ge1xuICBodG1sOiAndGV4dC9odG1sJyxcbiAganNvbjogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICB4bWw6ICdhcHBsaWNhdGlvbi94bWwnLFxuICB1cmxlbmNvZGVkOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgJ2Zvcm0nOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgJ2Zvcm0tZGF0YSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG4vKipcbiAqIERlZmF1bHQgc2VyaWFsaXphdGlvbiBtYXAuXG4gKlxuICogICAgIHN1cGVyYWdlbnQuc2VyaWFsaXplWydhcHBsaWNhdGlvbi94bWwnXSA9IGZ1bmN0aW9uKG9iail7XG4gKiAgICAgICByZXR1cm4gJ2dlbmVyYXRlZCB4bWwgaGVyZSc7XG4gKiAgICAgfTtcbiAqXG4gKi9cblxuIHJlcXVlc3Quc2VyaWFsaXplID0ge1xuICAgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc6IHNlcmlhbGl6ZSxcbiAgICdhcHBsaWNhdGlvbi9qc29uJzogSlNPTi5zdHJpbmdpZnlcbiB9O1xuXG4gLyoqXG4gICogRGVmYXVsdCBwYXJzZXJzLlxuICAqXG4gICogICAgIHN1cGVyYWdlbnQucGFyc2VbJ2FwcGxpY2F0aW9uL3htbCddID0gZnVuY3Rpb24oc3RyKXtcbiAgKiAgICAgICByZXR1cm4geyBvYmplY3QgcGFyc2VkIGZyb20gc3RyIH07XG4gICogICAgIH07XG4gICpcbiAgKi9cblxucmVxdWVzdC5wYXJzZSA9IHtcbiAgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc6IHBhcnNlU3RyaW5nLFxuICAnYXBwbGljYXRpb24vanNvbic6IEpTT04ucGFyc2Vcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGhlYWRlciBgc3RyYCBpbnRvXG4gKiBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgbWFwcGVkIGZpZWxkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcihzdHIpIHtcbiAgdmFyIGxpbmVzID0gc3RyLnNwbGl0KC9cXHI/XFxuLyk7XG4gIHZhciBmaWVsZHMgPSB7fTtcbiAgdmFyIGluZGV4O1xuICB2YXIgbGluZTtcbiAgdmFyIGZpZWxkO1xuICB2YXIgdmFsO1xuXG4gIGxpbmVzLnBvcCgpOyAvLyB0cmFpbGluZyBDUkxGXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGxpbmVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgbGluZSA9IGxpbmVzW2ldO1xuICAgIGluZGV4ID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAgZmllbGQgPSBsaW5lLnNsaWNlKDAsIGluZGV4KS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHRyaW0obGluZS5zbGljZShpbmRleCArIDEpKTtcbiAgICBmaWVsZHNbZmllbGRdID0gdmFsO1xuICB9XG5cbiAgcmV0dXJuIGZpZWxkcztcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIG1pbWUgdHlwZSBmb3IgdGhlIGdpdmVuIGBzdHJgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHR5cGUoc3RyKXtcbiAgcmV0dXJuIHN0ci5zcGxpdCgvICo7ICovKS5zaGlmdCgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gaGVhZGVyIGZpZWxkIHBhcmFtZXRlcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyYW1zKHN0cil7XG4gIHJldHVybiByZWR1Y2Uoc3RyLnNwbGl0KC8gKjsgKi8pLCBmdW5jdGlvbihvYmosIHN0cil7XG4gICAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KC8gKj0gKi8pXG4gICAgICAsIGtleSA9IHBhcnRzLnNoaWZ0KClcbiAgICAgICwgdmFsID0gcGFydHMuc2hpZnQoKTtcblxuICAgIGlmIChrZXkgJiYgdmFsKSBvYmpba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gb2JqO1xuICB9LCB7fSk7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFJlc3BvbnNlYCB3aXRoIHRoZSBnaXZlbiBgeGhyYC5cbiAqXG4gKiAgLSBzZXQgZmxhZ3MgKC5vaywgLmVycm9yLCBldGMpXG4gKiAgLSBwYXJzZSBoZWFkZXJcbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgQWxpYXNpbmcgYHN1cGVyYWdlbnRgIGFzIGByZXF1ZXN0YCBpcyBuaWNlOlxuICpcbiAqICAgICAgcmVxdWVzdCA9IHN1cGVyYWdlbnQ7XG4gKlxuICogIFdlIGNhbiB1c2UgdGhlIHByb21pc2UtbGlrZSBBUEksIG9yIHBhc3MgY2FsbGJhY2tzOlxuICpcbiAqICAgICAgcmVxdWVzdC5nZXQoJy8nKS5lbmQoZnVuY3Rpb24ocmVzKXt9KTtcbiAqICAgICAgcmVxdWVzdC5nZXQoJy8nLCBmdW5jdGlvbihyZXMpe30pO1xuICpcbiAqICBTZW5kaW5nIGRhdGEgY2FuIGJlIGNoYWluZWQ6XG4gKlxuICogICAgICByZXF1ZXN0XG4gKiAgICAgICAgLnBvc3QoJy91c2VyJylcbiAqICAgICAgICAuc2VuZCh7IG5hbWU6ICd0aicgfSlcbiAqICAgICAgICAuZW5kKGZ1bmN0aW9uKHJlcyl7fSk7XG4gKlxuICogIE9yIHBhc3NlZCB0byBgLnNlbmQoKWA6XG4gKlxuICogICAgICByZXF1ZXN0XG4gKiAgICAgICAgLnBvc3QoJy91c2VyJylcbiAqICAgICAgICAuc2VuZCh7IG5hbWU6ICd0aicgfSwgZnVuY3Rpb24ocmVzKXt9KTtcbiAqXG4gKiAgT3IgcGFzc2VkIHRvIGAucG9zdCgpYDpcbiAqXG4gKiAgICAgIHJlcXVlc3RcbiAqICAgICAgICAucG9zdCgnL3VzZXInLCB7IG5hbWU6ICd0aicgfSlcbiAqICAgICAgICAuZW5kKGZ1bmN0aW9uKHJlcyl7fSk7XG4gKlxuICogT3IgZnVydGhlciByZWR1Y2VkIHRvIGEgc2luZ2xlIGNhbGwgZm9yIHNpbXBsZSBjYXNlczpcbiAqXG4gKiAgICAgIHJlcXVlc3RcbiAqICAgICAgICAucG9zdCgnL3VzZXInLCB7IG5hbWU6ICd0aicgfSwgZnVuY3Rpb24ocmVzKXt9KTtcbiAqXG4gKiBAcGFyYW0ge1hNTEhUVFBSZXF1ZXN0fSB4aHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBSZXNwb25zZShyZXEsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHRoaXMucmVxID0gcmVxO1xuICB0aGlzLnhociA9IHRoaXMucmVxLnhocjtcbiAgLy8gcmVzcG9uc2VUZXh0IGlzIGFjY2Vzc2libGUgb25seSBpZiByZXNwb25zZVR5cGUgaXMgJycgb3IgJ3RleHQnIGFuZCBvbiBvbGRlciBicm93c2Vyc1xuICB0aGlzLnRleHQgPSAoKHRoaXMucmVxLm1ldGhvZCAhPSdIRUFEJyAmJiAodGhpcy54aHIucmVzcG9uc2VUeXBlID09PSAnJyB8fCB0aGlzLnhoci5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JykpIHx8IHR5cGVvZiB0aGlzLnhoci5yZXNwb25zZVR5cGUgPT09ICd1bmRlZmluZWQnKVxuICAgICA/IHRoaXMueGhyLnJlc3BvbnNlVGV4dFxuICAgICA6IG51bGw7XG4gIHRoaXMuc3RhdHVzVGV4dCA9IHRoaXMucmVxLnhoci5zdGF0dXNUZXh0O1xuICB0aGlzLnNldFN0YXR1c1Byb3BlcnRpZXModGhpcy54aHIuc3RhdHVzKTtcbiAgdGhpcy5oZWFkZXIgPSB0aGlzLmhlYWRlcnMgPSBwYXJzZUhlYWRlcih0aGlzLnhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSk7XG4gIC8vIGdldEFsbFJlc3BvbnNlSGVhZGVycyBzb21ldGltZXMgZmFsc2VseSByZXR1cm5zIFwiXCIgZm9yIENPUlMgcmVxdWVzdHMsIGJ1dFxuICAvLyBnZXRSZXNwb25zZUhlYWRlciBzdGlsbCB3b3Jrcy4gc28gd2UgZ2V0IGNvbnRlbnQtdHlwZSBldmVuIGlmIGdldHRpbmdcbiAgLy8gb3RoZXIgaGVhZGVycyBmYWlscy5cbiAgdGhpcy5oZWFkZXJbJ2NvbnRlbnQtdHlwZSddID0gdGhpcy54aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ2NvbnRlbnQtdHlwZScpO1xuICB0aGlzLnNldEhlYWRlclByb3BlcnRpZXModGhpcy5oZWFkZXIpO1xuICB0aGlzLmJvZHkgPSB0aGlzLnJlcS5tZXRob2QgIT0gJ0hFQUQnXG4gICAgPyB0aGlzLnBhcnNlQm9keSh0aGlzLnRleHQgPyB0aGlzLnRleHQgOiB0aGlzLnhoci5yZXNwb25zZSlcbiAgICA6IG51bGw7XG59XG5cbi8qKlxuICogR2V0IGNhc2UtaW5zZW5zaXRpdmUgYGZpZWxkYCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVzcG9uc2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGZpZWxkKXtcbiAgcmV0dXJuIHRoaXMuaGVhZGVyW2ZpZWxkLnRvTG93ZXJDYXNlKCldO1xufTtcblxuLyoqXG4gKiBTZXQgaGVhZGVyIHJlbGF0ZWQgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gYC50eXBlYCB0aGUgY29udGVudCB0eXBlIHdpdGhvdXQgcGFyYW1zXG4gKlxuICogQSByZXNwb25zZSBvZiBcIkNvbnRlbnQtVHlwZTogdGV4dC9wbGFpbjsgY2hhcnNldD11dGYtOFwiXG4gKiB3aWxsIHByb3ZpZGUgeW91IHdpdGggYSBgLnR5cGVgIG9mIFwidGV4dC9wbGFpblwiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlc3BvbnNlLnByb3RvdHlwZS5zZXRIZWFkZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24oaGVhZGVyKXtcbiAgLy8gY29udGVudC10eXBlXG4gIHZhciBjdCA9IHRoaXMuaGVhZGVyWydjb250ZW50LXR5cGUnXSB8fCAnJztcbiAgdGhpcy50eXBlID0gdHlwZShjdCk7XG5cbiAgLy8gcGFyYW1zXG4gIHZhciBvYmogPSBwYXJhbXMoY3QpO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB0aGlzW2tleV0gPSBvYmpba2V5XTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGJvZHkgYHN0cmAuXG4gKlxuICogVXNlZCBmb3IgYXV0by1wYXJzaW5nIG9mIGJvZGllcy4gUGFyc2Vyc1xuICogYXJlIGRlZmluZWQgb24gdGhlIGBzdXBlcmFnZW50LnBhcnNlYCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXNwb25zZS5wcm90b3R5cGUucGFyc2VCb2R5ID0gZnVuY3Rpb24oc3RyKXtcbiAgdmFyIHBhcnNlID0gcmVxdWVzdC5wYXJzZVt0aGlzLnR5cGVdO1xuICByZXR1cm4gcGFyc2UgJiYgc3RyICYmIChzdHIubGVuZ3RoIHx8IHN0ciBpbnN0YW5jZW9mIE9iamVjdClcbiAgICA/IHBhcnNlKHN0cilcbiAgICA6IG51bGw7XG59O1xuXG4vKipcbiAqIFNldCBmbGFncyBzdWNoIGFzIGAub2tgIGJhc2VkIG9uIGBzdGF0dXNgLlxuICpcbiAqIEZvciBleGFtcGxlIGEgMnh4IHJlc3BvbnNlIHdpbGwgZ2l2ZSB5b3UgYSBgLm9rYCBvZiBfX3RydWVfX1xuICogd2hlcmVhcyA1eHggd2lsbCBiZSBfX2ZhbHNlX18gYW5kIGAuZXJyb3JgIHdpbGwgYmUgX190cnVlX18uIFRoZVxuICogYC5jbGllbnRFcnJvcmAgYW5kIGAuc2VydmVyRXJyb3JgIGFyZSBhbHNvIGF2YWlsYWJsZSB0byBiZSBtb3JlXG4gKiBzcGVjaWZpYywgYW5kIGAuc3RhdHVzVHlwZWAgaXMgdGhlIGNsYXNzIG9mIGVycm9yIHJhbmdpbmcgZnJvbSAxLi41XG4gKiBzb21ldGltZXMgdXNlZnVsIGZvciBtYXBwaW5nIHJlc3BvbmQgY29sb3JzIGV0Yy5cbiAqXG4gKiBcInN1Z2FyXCIgcHJvcGVydGllcyBhcmUgYWxzbyBkZWZpbmVkIGZvciBjb21tb24gY2FzZXMuIEN1cnJlbnRseSBwcm92aWRpbmc6XG4gKlxuICogICAtIC5ub0NvbnRlbnRcbiAqICAgLSAuYmFkUmVxdWVzdFxuICogICAtIC51bmF1dGhvcml6ZWRcbiAqICAgLSAubm90QWNjZXB0YWJsZVxuICogICAtIC5ub3RGb3VuZFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlc3BvbnNlLnByb3RvdHlwZS5zZXRTdGF0dXNQcm9wZXJ0aWVzID0gZnVuY3Rpb24oc3RhdHVzKXtcbiAgLy8gaGFuZGxlIElFOSBidWc6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTAwNDY5NzIvbXNpZS1yZXR1cm5zLXN0YXR1cy1jb2RlLW9mLTEyMjMtZm9yLWFqYXgtcmVxdWVzdFxuICBpZiAoc3RhdHVzID09PSAxMjIzKSB7XG4gICAgc3RhdHVzID0gMjA0O1xuICB9XG5cbiAgdmFyIHR5cGUgPSBzdGF0dXMgLyAxMDAgfCAwO1xuXG4gIC8vIHN0YXR1cyAvIGNsYXNzXG4gIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICB0aGlzLnN0YXR1c1R5cGUgPSB0eXBlO1xuXG4gIC8vIGJhc2ljc1xuICB0aGlzLmluZm8gPSAxID09IHR5cGU7XG4gIHRoaXMub2sgPSAyID09IHR5cGU7XG4gIHRoaXMuY2xpZW50RXJyb3IgPSA0ID09IHR5cGU7XG4gIHRoaXMuc2VydmVyRXJyb3IgPSA1ID09IHR5cGU7XG4gIHRoaXMuZXJyb3IgPSAoNCA9PSB0eXBlIHx8IDUgPT0gdHlwZSlcbiAgICA/IHRoaXMudG9FcnJvcigpXG4gICAgOiBmYWxzZTtcblxuICAvLyBzdWdhclxuICB0aGlzLmFjY2VwdGVkID0gMjAyID09IHN0YXR1cztcbiAgdGhpcy5ub0NvbnRlbnQgPSAyMDQgPT0gc3RhdHVzO1xuICB0aGlzLmJhZFJlcXVlc3QgPSA0MDAgPT0gc3RhdHVzO1xuICB0aGlzLnVuYXV0aG9yaXplZCA9IDQwMSA9PSBzdGF0dXM7XG4gIHRoaXMubm90QWNjZXB0YWJsZSA9IDQwNiA9PSBzdGF0dXM7XG4gIHRoaXMubm90Rm91bmQgPSA0MDQgPT0gc3RhdHVzO1xuICB0aGlzLmZvcmJpZGRlbiA9IDQwMyA9PSBzdGF0dXM7XG59O1xuXG4vKipcbiAqIFJldHVybiBhbiBgRXJyb3JgIHJlcHJlc2VudGF0aXZlIG9mIHRoaXMgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybiB7RXJyb3J9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlc3BvbnNlLnByb3RvdHlwZS50b0Vycm9yID0gZnVuY3Rpb24oKXtcbiAgdmFyIHJlcSA9IHRoaXMucmVxO1xuICB2YXIgbWV0aG9kID0gcmVxLm1ldGhvZDtcbiAgdmFyIHVybCA9IHJlcS51cmw7XG5cbiAgdmFyIG1zZyA9ICdjYW5ub3QgJyArIG1ldGhvZCArICcgJyArIHVybCArICcgKCcgKyB0aGlzLnN0YXR1cyArICcpJztcbiAgdmFyIGVyciA9IG5ldyBFcnJvcihtc2cpO1xuICBlcnIuc3RhdHVzID0gdGhpcy5zdGF0dXM7XG4gIGVyci5tZXRob2QgPSBtZXRob2Q7XG4gIGVyci51cmwgPSB1cmw7XG5cbiAgcmV0dXJuIGVycjtcbn07XG5cbi8qKlxuICogRXhwb3NlIGBSZXNwb25zZWAuXG4gKi9cblxucmVxdWVzdC5SZXNwb25zZSA9IFJlc3BvbnNlO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFJlcXVlc3RgIHdpdGggdGhlIGdpdmVuIGBtZXRob2RgIGFuZCBgdXJsYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFJlcXVlc3QobWV0aG9kLCB1cmwpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFbWl0dGVyLmNhbGwodGhpcyk7XG4gIHRoaXMuX3F1ZXJ5ID0gdGhpcy5fcXVlcnkgfHwgW107XG4gIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICB0aGlzLnVybCA9IHVybDtcbiAgdGhpcy5oZWFkZXIgPSB7fTtcbiAgdGhpcy5faGVhZGVyID0ge307XG4gIHRoaXMub24oJ2VuZCcsIGZ1bmN0aW9uKCl7XG4gICAgdmFyIGVyciA9IG51bGw7XG4gICAgdmFyIHJlcyA9IG51bGw7XG5cbiAgICB0cnkge1xuICAgICAgcmVzID0gbmV3IFJlc3BvbnNlKHNlbGYpO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgZXJyID0gbmV3IEVycm9yKCdQYXJzZXIgaXMgdW5hYmxlIHRvIHBhcnNlIHRoZSByZXNwb25zZScpO1xuICAgICAgZXJyLnBhcnNlID0gdHJ1ZTtcbiAgICAgIGVyci5vcmlnaW5hbCA9IGU7XG4gICAgICByZXR1cm4gc2VsZi5jYWxsYmFjayhlcnIpO1xuICAgIH1cblxuICAgIHNlbGYuZW1pdCgncmVzcG9uc2UnLCByZXMpO1xuXG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuIHNlbGYuY2FsbGJhY2soZXJyLCByZXMpO1xuICAgIH1cblxuICAgIGlmIChyZXMuc3RhdHVzID49IDIwMCAmJiByZXMuc3RhdHVzIDwgMzAwKSB7XG4gICAgICByZXR1cm4gc2VsZi5jYWxsYmFjayhlcnIsIHJlcyk7XG4gICAgfVxuXG4gICAgdmFyIG5ld19lcnIgPSBuZXcgRXJyb3IocmVzLnN0YXR1c1RleHQgfHwgJ1Vuc3VjY2Vzc2Z1bCBIVFRQIHJlc3BvbnNlJyk7XG4gICAgbmV3X2Vyci5vcmlnaW5hbCA9IGVycjtcbiAgICBuZXdfZXJyLnJlc3BvbnNlID0gcmVzO1xuICAgIG5ld19lcnIuc3RhdHVzID0gcmVzLnN0YXR1cztcblxuICAgIHNlbGYuY2FsbGJhY2soZXJyIHx8IG5ld19lcnIsIHJlcyk7XG4gIH0pO1xufVxuXG4vKipcbiAqIE1peGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFJlcXVlc3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBBbGxvdyBmb3IgZXh0ZW5zaW9uXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24oZm4pIHtcbiAgZm4odGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIFNldCB0aW1lb3V0IHRvIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uKG1zKXtcbiAgdGhpcy5fdGltZW91dCA9IG1zO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2xlYXIgcHJldmlvdXMgdGltZW91dC5cbiAqXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xlYXJUaW1lb3V0ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5fdGltZW91dCA9IDA7XG4gIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBYm9ydCB0aGUgcmVxdWVzdCwgYW5kIGNsZWFyIHBvdGVudGlhbCB0aW1lb3V0LlxuICpcbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24oKXtcbiAgaWYgKHRoaXMuYWJvcnRlZCkgcmV0dXJuO1xuICB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICB0aGlzLnhoci5hYm9ydCgpO1xuICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICB0aGlzLmVtaXQoJ2Fib3J0Jyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgaGVhZGVyIGBmaWVsZGAgdG8gYHZhbGAsIG9yIG11bHRpcGxlIGZpZWxkcyB3aXRoIG9uZSBvYmplY3QuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgICByZXEuZ2V0KCcvJylcbiAqICAgICAgICAuc2V0KCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpXG4gKiAgICAgICAgLnNldCgnWC1BUEktS2V5JywgJ2Zvb2JhcicpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogICAgICByZXEuZ2V0KCcvJylcbiAqICAgICAgICAuc2V0KHsgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsICdYLUFQSS1LZXknOiAnZm9vYmFyJyB9KVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gZmllbGRcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWxcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihmaWVsZCwgdmFsKXtcbiAgaWYgKGlzT2JqZWN0KGZpZWxkKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBmaWVsZCkge1xuICAgICAgdGhpcy5zZXQoa2V5LCBmaWVsZFtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdGhpcy5faGVhZGVyW2ZpZWxkLnRvTG93ZXJDYXNlKCldID0gdmFsO1xuICB0aGlzLmhlYWRlcltmaWVsZF0gPSB2YWw7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgaGVhZGVyIGBmaWVsZGAuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgIHJlcS5nZXQoJy8nKVxuICogICAgICAgIC51bnNldCgnVXNlci1BZ2VudCcpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUudW5zZXQgPSBmdW5jdGlvbihmaWVsZCl7XG4gIGRlbGV0ZSB0aGlzLl9oZWFkZXJbZmllbGQudG9Mb3dlckNhc2UoKV07XG4gIGRlbGV0ZSB0aGlzLmhlYWRlcltmaWVsZF07XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBHZXQgY2FzZS1pbnNlbnNpdGl2ZSBoZWFkZXIgYGZpZWxkYCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmdldEhlYWRlciA9IGZ1bmN0aW9uKGZpZWxkKXtcbiAgcmV0dXJuIHRoaXMuX2hlYWRlcltmaWVsZC50b0xvd2VyQ2FzZSgpXTtcbn07XG5cbi8qKlxuICogU2V0IENvbnRlbnQtVHlwZSB0byBgdHlwZWAsIG1hcHBpbmcgdmFsdWVzIGZyb20gYHJlcXVlc3QudHlwZXNgLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgc3VwZXJhZ2VudC50eXBlcy54bWwgPSAnYXBwbGljYXRpb24veG1sJztcbiAqXG4gKiAgICAgIHJlcXVlc3QucG9zdCgnLycpXG4gKiAgICAgICAgLnR5cGUoJ3htbCcpXG4gKiAgICAgICAgLnNlbmQoeG1sc3RyaW5nKVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqICAgICAgcmVxdWVzdC5wb3N0KCcvJylcbiAqICAgICAgICAudHlwZSgnYXBwbGljYXRpb24veG1sJylcbiAqICAgICAgICAuc2VuZCh4bWxzdHJpbmcpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS50eXBlID0gZnVuY3Rpb24odHlwZSl7XG4gIHRoaXMuc2V0KCdDb250ZW50LVR5cGUnLCByZXF1ZXN0LnR5cGVzW3R5cGVdIHx8IHR5cGUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IEFjY2VwdCB0byBgdHlwZWAsIG1hcHBpbmcgdmFsdWVzIGZyb20gYHJlcXVlc3QudHlwZXNgLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgc3VwZXJhZ2VudC50eXBlcy5qc29uID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICpcbiAqICAgICAgcmVxdWVzdC5nZXQoJy9hZ2VudCcpXG4gKiAgICAgICAgLmFjY2VwdCgnanNvbicpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogICAgICByZXF1ZXN0LmdldCgnL2FnZW50JylcbiAqICAgICAgICAuYWNjZXB0KCdhcHBsaWNhdGlvbi9qc29uJylcbiAqICAgICAgICAuZW5kKGNhbGxiYWNrKTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWNjZXB0XG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24odHlwZSl7XG4gIHRoaXMuc2V0KCdBY2NlcHQnLCByZXF1ZXN0LnR5cGVzW3R5cGVdIHx8IHR5cGUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IEF1dGhvcml6YXRpb24gZmllbGQgdmFsdWUgd2l0aCBgdXNlcmAgYW5kIGBwYXNzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXNlclxuICogQHBhcmFtIHtTdHJpbmd9IHBhc3NcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5hdXRoID0gZnVuY3Rpb24odXNlciwgcGFzcyl7XG4gIHZhciBzdHIgPSBidG9hKHVzZXIgKyAnOicgKyBwYXNzKTtcbiAgdGhpcy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArIHN0cik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4qIEFkZCBxdWVyeS1zdHJpbmcgYHZhbGAuXG4qXG4qIEV4YW1wbGVzOlxuKlxuKiAgIHJlcXVlc3QuZ2V0KCcvc2hvZXMnKVxuKiAgICAgLnF1ZXJ5KCdzaXplPTEwJylcbiogICAgIC5xdWVyeSh7IGNvbG9yOiAnYmx1ZScgfSlcbipcbiogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSB2YWxcbiogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4qIEBhcGkgcHVibGljXG4qL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uKHZhbCl7XG4gIGlmICgnc3RyaW5nJyAhPSB0eXBlb2YgdmFsKSB2YWwgPSBzZXJpYWxpemUodmFsKTtcbiAgaWYgKHZhbCkgdGhpcy5fcXVlcnkucHVzaCh2YWwpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogV3JpdGUgdGhlIGZpZWxkIGBuYW1lYCBhbmQgYHZhbGAgZm9yIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiXG4gKiByZXF1ZXN0IGJvZGllcy5cbiAqXG4gKiBgYGAganNcbiAqIHJlcXVlc3QucG9zdCgnL3VwbG9hZCcpXG4gKiAgIC5maWVsZCgnZm9vJywgJ2JhcicpXG4gKiAgIC5lbmQoY2FsbGJhY2spO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7U3RyaW5nfEJsb2J8RmlsZX0gdmFsXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuZmllbGQgPSBmdW5jdGlvbihuYW1lLCB2YWwpe1xuICBpZiAoIXRoaXMuX2Zvcm1EYXRhKSB0aGlzLl9mb3JtRGF0YSA9IG5ldyByb290LkZvcm1EYXRhKCk7XG4gIHRoaXMuX2Zvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWwpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUXVldWUgdGhlIGdpdmVuIGBmaWxlYCBhcyBhbiBhdHRhY2htZW50IHRvIHRoZSBzcGVjaWZpZWQgYGZpZWxkYCxcbiAqIHdpdGggb3B0aW9uYWwgYGZpbGVuYW1lYC5cbiAqXG4gKiBgYGAganNcbiAqIHJlcXVlc3QucG9zdCgnL3VwbG9hZCcpXG4gKiAgIC5hdHRhY2gobmV3IEJsb2IoWyc8YSBpZD1cImFcIj48YiBpZD1cImJcIj5oZXkhPC9iPjwvYT4nXSwgeyB0eXBlOiBcInRleHQvaHRtbFwifSkpXG4gKiAgIC5lbmQoY2FsbGJhY2spO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKiBAcGFyYW0ge0Jsb2J8RmlsZX0gZmlsZVxuICogQHBhcmFtIHtTdHJpbmd9IGZpbGVuYW1lXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYXR0YWNoID0gZnVuY3Rpb24oZmllbGQsIGZpbGUsIGZpbGVuYW1lKXtcbiAgaWYgKCF0aGlzLl9mb3JtRGF0YSkgdGhpcy5fZm9ybURhdGEgPSBuZXcgcm9vdC5Gb3JtRGF0YSgpO1xuICB0aGlzLl9mb3JtRGF0YS5hcHBlbmQoZmllbGQsIGZpbGUsIGZpbGVuYW1lKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmQgYGRhdGFgLCBkZWZhdWx0aW5nIHRoZSBgLnR5cGUoKWAgdG8gXCJqc29uXCIgd2hlblxuICogYW4gb2JqZWN0IGlzIGdpdmVuLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgIC8vIHF1ZXJ5c3RyaW5nXG4gKiAgICAgICByZXF1ZXN0LmdldCgnL3NlYXJjaCcpXG4gKiAgICAgICAgIC5lbmQoY2FsbGJhY2spXG4gKlxuICogICAgICAgLy8gbXVsdGlwbGUgZGF0YSBcIndyaXRlc1wiXG4gKiAgICAgICByZXF1ZXN0LmdldCgnL3NlYXJjaCcpXG4gKiAgICAgICAgIC5zZW5kKHsgc2VhcmNoOiAncXVlcnknIH0pXG4gKiAgICAgICAgIC5zZW5kKHsgcmFuZ2U6ICcxLi41JyB9KVxuICogICAgICAgICAuc2VuZCh7IG9yZGVyOiAnZGVzYycgfSlcbiAqICAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiAgICAgICAvLyBtYW51YWwganNvblxuICogICAgICAgcmVxdWVzdC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgIC50eXBlKCdqc29uJylcbiAqICAgICAgICAgLnNlbmQoJ3tcIm5hbWVcIjpcInRqXCJ9KVxuICogICAgICAgICAuZW5kKGNhbGxiYWNrKVxuICpcbiAqICAgICAgIC8vIGF1dG8ganNvblxuICogICAgICAgcmVxdWVzdC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgIC5zZW5kKHsgbmFtZTogJ3RqJyB9KVxuICogICAgICAgICAuZW5kKGNhbGxiYWNrKVxuICpcbiAqICAgICAgIC8vIG1hbnVhbCB4LXd3dy1mb3JtLXVybGVuY29kZWRcbiAqICAgICAgIHJlcXVlc3QucG9zdCgnL3VzZXInKVxuICogICAgICAgICAudHlwZSgnZm9ybScpXG4gKiAgICAgICAgIC5zZW5kKCduYW1lPXRqJylcbiAqICAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiAgICAgICAvLyBhdXRvIHgtd3d3LWZvcm0tdXJsZW5jb2RlZFxuICogICAgICAgcmVxdWVzdC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgIC50eXBlKCdmb3JtJylcbiAqICAgICAgICAgLnNlbmQoeyBuYW1lOiAndGonIH0pXG4gKiAgICAgICAgIC5lbmQoY2FsbGJhY2spXG4gKlxuICogICAgICAgLy8gZGVmYXVsdHMgdG8geC13d3ctZm9ybS11cmxlbmNvZGVkXG4gICogICAgICByZXF1ZXN0LnBvc3QoJy91c2VyJylcbiAgKiAgICAgICAgLnNlbmQoJ25hbWU9dG9iaScpXG4gICogICAgICAgIC5zZW5kKCdzcGVjaWVzPWZlcnJldCcpXG4gICogICAgICAgIC5lbmQoY2FsbGJhY2spXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBkYXRhXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKGRhdGEpe1xuICB2YXIgb2JqID0gaXNPYmplY3QoZGF0YSk7XG4gIHZhciB0eXBlID0gdGhpcy5nZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuXG4gIC8vIG1lcmdlXG4gIGlmIChvYmogJiYgaXNPYmplY3QodGhpcy5fZGF0YSkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgdGhpcy5fZGF0YVtrZXldID0gZGF0YVtrZXldO1xuICAgIH1cbiAgfSBlbHNlIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZGF0YSkge1xuICAgIGlmICghdHlwZSkgdGhpcy50eXBlKCdmb3JtJyk7XG4gICAgdHlwZSA9IHRoaXMuZ2V0SGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgPT0gdHlwZSkge1xuICAgICAgdGhpcy5fZGF0YSA9IHRoaXMuX2RhdGFcbiAgICAgICAgPyB0aGlzLl9kYXRhICsgJyYnICsgZGF0YVxuICAgICAgICA6IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2RhdGEgPSAodGhpcy5fZGF0YSB8fCAnJykgKyBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgfVxuXG4gIGlmICghb2JqIHx8IGlzSG9zdChkYXRhKSkgcmV0dXJuIHRoaXM7XG4gIGlmICghdHlwZSkgdGhpcy50eXBlKCdqc29uJyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBJbnZva2UgdGhlIGNhbGxiYWNrIHdpdGggYGVycmAgYW5kIGByZXNgXG4gKiBhbmQgaGFuZGxlIGFyaXR5IGNoZWNrLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVyclxuICogQHBhcmFtIHtSZXNwb25zZX0gcmVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jYWxsYmFjayA9IGZ1bmN0aW9uKGVyciwgcmVzKXtcbiAgdmFyIGZuID0gdGhpcy5fY2FsbGJhY2s7XG4gIHRoaXMuY2xlYXJUaW1lb3V0KCk7XG4gIGZuKGVyciwgcmVzKTtcbn07XG5cbi8qKlxuICogSW52b2tlIGNhbGxiYWNrIHdpdGggeC1kb21haW4gZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY3Jvc3NEb21haW5FcnJvciA9IGZ1bmN0aW9uKCl7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IoJ09yaWdpbiBpcyBub3QgYWxsb3dlZCBieSBBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nKTtcbiAgZXJyLmNyb3NzRG9tYWluID0gdHJ1ZTtcbiAgdGhpcy5jYWxsYmFjayhlcnIpO1xufTtcblxuLyoqXG4gKiBJbnZva2UgY2FsbGJhY2sgd2l0aCB0aW1lb3V0IGVycm9yLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLnRpbWVvdXRFcnJvciA9IGZ1bmN0aW9uKCl7XG4gIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgdmFyIGVyciA9IG5ldyBFcnJvcigndGltZW91dCBvZiAnICsgdGltZW91dCArICdtcyBleGNlZWRlZCcpO1xuICBlcnIudGltZW91dCA9IHRpbWVvdXQ7XG4gIHRoaXMuY2FsbGJhY2soZXJyKTtcbn07XG5cbi8qKlxuICogRW5hYmxlIHRyYW5zbWlzc2lvbiBvZiBjb29raWVzIHdpdGggeC1kb21haW4gcmVxdWVzdHMuXG4gKlxuICogTm90ZSB0aGF0IGZvciB0aGlzIHRvIHdvcmsgdGhlIG9yaWdpbiBtdXN0IG5vdCBiZVxuICogdXNpbmcgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIiB3aXRoIGEgd2lsZGNhcmQsXG4gKiBhbmQgYWxzbyBtdXN0IHNldCBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzXCJcbiAqIHRvIFwidHJ1ZVwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUud2l0aENyZWRlbnRpYWxzID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5fd2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEluaXRpYXRlIHJlcXVlc3QsIGludm9raW5nIGNhbGxiYWNrIGBmbihyZXMpYFxuICogd2l0aCBhbiBpbnN0YW5jZW9mIGBSZXNwb25zZWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbihmbil7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHhociA9IHRoaXMueGhyID0gcmVxdWVzdC5nZXRYSFIoKTtcbiAgdmFyIHF1ZXJ5ID0gdGhpcy5fcXVlcnkuam9pbignJicpO1xuICB2YXIgdGltZW91dCA9IHRoaXMuX3RpbWVvdXQ7XG4gIHZhciBkYXRhID0gdGhpcy5fZm9ybURhdGEgfHwgdGhpcy5fZGF0YTtcblxuICAvLyBzdG9yZSBjYWxsYmFja1xuICB0aGlzLl9jYWxsYmFjayA9IGZuIHx8IG5vb3A7XG5cbiAgLy8gc3RhdGUgY2hhbmdlXG4gIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpe1xuICAgIGlmICg0ICE9IHhoci5yZWFkeVN0YXRlKSByZXR1cm47XG5cbiAgICAvLyBJbiBJRTksIHJlYWRzIHRvIGFueSBwcm9wZXJ0eSAoZS5nLiBzdGF0dXMpIG9mZiBvZiBhbiBhYm9ydGVkIFhIUiB3aWxsXG4gICAgLy8gcmVzdWx0IGluIHRoZSBlcnJvciBcIkNvdWxkIG5vdCBjb21wbGV0ZSB0aGUgb3BlcmF0aW9uIGR1ZSB0byBlcnJvciBjMDBjMDIzZlwiXG4gICAgdmFyIHN0YXR1cztcbiAgICB0cnkgeyBzdGF0dXMgPSB4aHIuc3RhdHVzIH0gY2F0Y2goZSkgeyBzdGF0dXMgPSAwOyB9XG5cbiAgICBpZiAoMCA9PSBzdGF0dXMpIHtcbiAgICAgIGlmIChzZWxmLnRpbWVkb3V0KSByZXR1cm4gc2VsZi50aW1lb3V0RXJyb3IoKTtcbiAgICAgIGlmIChzZWxmLmFib3J0ZWQpIHJldHVybjtcbiAgICAgIHJldHVybiBzZWxmLmNyb3NzRG9tYWluRXJyb3IoKTtcbiAgICB9XG4gICAgc2VsZi5lbWl0KCdlbmQnKTtcbiAgfTtcblxuICAvLyBwcm9ncmVzc1xuICB2YXIgaGFuZGxlUHJvZ3Jlc3MgPSBmdW5jdGlvbihlKXtcbiAgICBpZiAoZS50b3RhbCA+IDApIHtcbiAgICAgIGUucGVyY2VudCA9IGUubG9hZGVkIC8gZS50b3RhbCAqIDEwMDtcbiAgICB9XG4gICAgc2VsZi5lbWl0KCdwcm9ncmVzcycsIGUpO1xuICB9O1xuICBpZiAodGhpcy5oYXNMaXN0ZW5lcnMoJ3Byb2dyZXNzJykpIHtcbiAgICB4aHIub25wcm9ncmVzcyA9IGhhbmRsZVByb2dyZXNzO1xuICB9XG4gIHRyeSB7XG4gICAgaWYgKHhoci51cGxvYWQgJiYgdGhpcy5oYXNMaXN0ZW5lcnMoJ3Byb2dyZXNzJykpIHtcbiAgICAgIHhoci51cGxvYWQub25wcm9ncmVzcyA9IGhhbmRsZVByb2dyZXNzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7XG4gICAgLy8gQWNjZXNzaW5nIHhoci51cGxvYWQgZmFpbHMgaW4gSUUgZnJvbSBhIHdlYiB3b3JrZXIsIHNvIGp1c3QgcHJldGVuZCBpdCBkb2Vzbid0IGV4aXN0LlxuICAgIC8vIFJlcG9ydGVkIGhlcmU6XG4gICAgLy8gaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy84MzcyNDUveG1saHR0cHJlcXVlc3QtdXBsb2FkLXRocm93cy1pbnZhbGlkLWFyZ3VtZW50LXdoZW4tdXNlZC1mcm9tLXdlYi13b3JrZXItY29udGV4dFxuICB9XG5cbiAgLy8gdGltZW91dFxuICBpZiAodGltZW91dCAmJiAhdGhpcy5fdGltZXIpIHtcbiAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHNlbGYudGltZWRvdXQgPSB0cnVlO1xuICAgICAgc2VsZi5hYm9ydCgpO1xuICAgIH0sIHRpbWVvdXQpO1xuICB9XG5cbiAgLy8gcXVlcnlzdHJpbmdcbiAgaWYgKHF1ZXJ5KSB7XG4gICAgcXVlcnkgPSByZXF1ZXN0LnNlcmlhbGl6ZU9iamVjdChxdWVyeSk7XG4gICAgdGhpcy51cmwgKz0gfnRoaXMudXJsLmluZGV4T2YoJz8nKVxuICAgICAgPyAnJicgKyBxdWVyeVxuICAgICAgOiAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIC8vIGluaXRpYXRlIHJlcXVlc3RcbiAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJsLCB0cnVlKTtcblxuICAvLyBDT1JTXG4gIGlmICh0aGlzLl93aXRoQ3JlZGVudGlhbHMpIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuXG4gIC8vIGJvZHlcbiAgaWYgKCdHRVQnICE9IHRoaXMubWV0aG9kICYmICdIRUFEJyAhPSB0aGlzLm1ldGhvZCAmJiAnc3RyaW5nJyAhPSB0eXBlb2YgZGF0YSAmJiAhaXNIb3N0KGRhdGEpKSB7XG4gICAgLy8gc2VyaWFsaXplIHN0dWZmXG4gICAgdmFyIHNlcmlhbGl6ZSA9IHJlcXVlc3Quc2VyaWFsaXplW3RoaXMuZ2V0SGVhZGVyKCdDb250ZW50LVR5cGUnKV07XG4gICAgaWYgKHNlcmlhbGl6ZSkgZGF0YSA9IHNlcmlhbGl6ZShkYXRhKTtcbiAgfVxuXG4gIC8vIHNldCBoZWFkZXIgZmllbGRzXG4gIGZvciAodmFyIGZpZWxkIGluIHRoaXMuaGVhZGVyKSB7XG4gICAgaWYgKG51bGwgPT0gdGhpcy5oZWFkZXJbZmllbGRdKSBjb250aW51ZTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihmaWVsZCwgdGhpcy5oZWFkZXJbZmllbGRdKTtcbiAgfVxuXG4gIC8vIHNlbmQgc3R1ZmZcbiAgdGhpcy5lbWl0KCdyZXF1ZXN0JywgdGhpcyk7XG4gIHhoci5zZW5kKGRhdGEpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRXhwb3NlIGBSZXF1ZXN0YC5cbiAqL1xuXG5yZXF1ZXN0LlJlcXVlc3QgPSBSZXF1ZXN0O1xuXG4vKipcbiAqIElzc3VlIGEgcmVxdWVzdDpcbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICByZXF1ZXN0KCdHRVQnLCAnL3VzZXJzJykuZW5kKGNhbGxiYWNrKVxuICogICAgcmVxdWVzdCgnL3VzZXJzJykuZW5kKGNhbGxiYWNrKVxuICogICAgcmVxdWVzdCgnL3VzZXJzJywgY2FsbGJhY2spXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHVybCBvciBjYWxsYmFja1xuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcmVxdWVzdChtZXRob2QsIHVybCkge1xuICAvLyBjYWxsYmFja1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgdXJsKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KCdHRVQnLCBtZXRob2QpLmVuZCh1cmwpO1xuICB9XG5cbiAgLy8gdXJsIGZpcnN0XG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QoJ0dFVCcsIG1ldGhvZCk7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlcXVlc3QobWV0aG9kLCB1cmwpO1xufVxuXG4vKipcbiAqIEdFVCBgdXJsYCB3aXRoIG9wdGlvbmFsIGNhbGxiYWNrIGBmbihyZXMpYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge01peGVkfEZ1bmN0aW9ufSBkYXRhIG9yIGZuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucmVxdWVzdC5nZXQgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGZuKXtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ0dFVCcsIHVybCk7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBkYXRhKSBmbiA9IGRhdGEsIGRhdGEgPSBudWxsO1xuICBpZiAoZGF0YSkgcmVxLnF1ZXJ5KGRhdGEpO1xuICBpZiAoZm4pIHJlcS5lbmQoZm4pO1xuICByZXR1cm4gcmVxO1xufTtcblxuLyoqXG4gKiBIRUFEIGB1cmxgIHdpdGggb3B0aW9uYWwgY2FsbGJhY2sgYGZuKHJlcylgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7TWl4ZWR8RnVuY3Rpb259IGRhdGEgb3IgZm5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5yZXF1ZXN0LmhlYWQgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGZuKXtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ0hFQUQnLCB1cmwpO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgZGF0YSkgZm4gPSBkYXRhLCBkYXRhID0gbnVsbDtcbiAgaWYgKGRhdGEpIHJlcS5zZW5kKGRhdGEpO1xuICBpZiAoZm4pIHJlcS5lbmQoZm4pO1xuICByZXR1cm4gcmVxO1xufTtcblxuLyoqXG4gKiBERUxFVEUgYHVybGAgd2l0aCBvcHRpb25hbCBjYWxsYmFjayBgZm4ocmVzKWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnJlcXVlc3QuZGVsID0gZnVuY3Rpb24odXJsLCBmbil7XG4gIHZhciByZXEgPSByZXF1ZXN0KCdERUxFVEUnLCB1cmwpO1xuICBpZiAoZm4pIHJlcS5lbmQoZm4pO1xuICByZXR1cm4gcmVxO1xufTtcblxuLyoqXG4gKiBQQVRDSCBgdXJsYCB3aXRoIG9wdGlvbmFsIGBkYXRhYCBhbmQgY2FsbGJhY2sgYGZuKHJlcylgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7TWl4ZWR9IGRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5yZXF1ZXN0LnBhdGNoID0gZnVuY3Rpb24odXJsLCBkYXRhLCBmbil7XG4gIHZhciByZXEgPSByZXF1ZXN0KCdQQVRDSCcsIHVybCk7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBkYXRhKSBmbiA9IGRhdGEsIGRhdGEgPSBudWxsO1xuICBpZiAoZGF0YSkgcmVxLnNlbmQoZGF0YSk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuXG4vKipcbiAqIFBPU1QgYHVybGAgd2l0aCBvcHRpb25hbCBgZGF0YWAgYW5kIGNhbGxiYWNrIGBmbihyZXMpYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge01peGVkfSBkYXRhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucmVxdWVzdC5wb3N0ID0gZnVuY3Rpb24odXJsLCBkYXRhLCBmbil7XG4gIHZhciByZXEgPSByZXF1ZXN0KCdQT1NUJywgdXJsKTtcbiAgaWYgKCdmdW5jdGlvbicgPT0gdHlwZW9mIGRhdGEpIGZuID0gZGF0YSwgZGF0YSA9IG51bGw7XG4gIGlmIChkYXRhKSByZXEuc2VuZChkYXRhKTtcbiAgaWYgKGZuKSByZXEuZW5kKGZuKTtcbiAgcmV0dXJuIHJlcTtcbn07XG5cbi8qKlxuICogUFVUIGB1cmxgIHdpdGggb3B0aW9uYWwgYGRhdGFgIGFuZCBjYWxsYmFjayBgZm4ocmVzKWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtNaXhlZHxGdW5jdGlvbn0gZGF0YSBvciBmblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnJlcXVlc3QucHV0ID0gZnVuY3Rpb24odXJsLCBkYXRhLCBmbil7XG4gIHZhciByZXEgPSByZXF1ZXN0KCdQVVQnLCB1cmwpO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgZGF0YSkgZm4gPSBkYXRhLCBkYXRhID0gbnVsbDtcbiAgaWYgKGRhdGEpIHJlcS5zZW5kKGRhdGEpO1xuICBpZiAoZm4pIHJlcS5lbmQoZm4pO1xuICByZXR1cm4gcmVxO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgYHJlcXVlc3RgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWVzdDtcblxufSx7XCJlbWl0dGVyXCI6XCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1lbWl0dGVyL2luZGV4LmpzXCIsXCJyZWR1Y2VcIjpcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9ub2RlX21vZHVsZXMvcmVkdWNlLWNvbXBvbmVudC9pbmRleC5qc1wifV0sXCIvVXNlcnMvRGFuZS9Qcm9qZWN0cy9tZWV0dXAvdHdpdHRlci1zdHJlYW0vbm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1lbWl0dGVyL2luZGV4LmpzXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXG4vKipcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XG59O1xuXG4vKipcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUub24gPVxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcbiAgKHRoaXMuX2NhbGxiYWNrc1tldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdIHx8IFtdKVxuICAgIC5wdXNoKGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG5cbiAgZnVuY3Rpb24gb24oKSB7XG4gICAgc2VsZi5vZmYoZXZlbnQsIG9uKTtcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgb24uZm4gPSBmbjtcbiAgdGhpcy5vbihldmVudCwgb24pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcblxuICAvLyBhbGxcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1tldmVudF07XG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcblxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzW2V2ZW50XTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXG4gIHZhciBjYjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge01peGVkfSAuLi5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzW2V2ZW50XTtcblxuICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1tldmVudF0gfHwgW107XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XG59O1xuXG59LHt9XSxcIi9Vc2Vycy9EYW5lL1Byb2plY3RzL21lZXR1cC90d2l0dGVyLXN0cmVhbS9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9ub2RlX21vZHVsZXMvcmVkdWNlLWNvbXBvbmVudC9pbmRleC5qc1wiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblxuLyoqXG4gKiBSZWR1Y2UgYGFycmAgd2l0aCBgZm5gLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7TWl4ZWR9IGluaXRpYWxcbiAqXG4gKiBUT0RPOiBjb21iYXRpYmxlIGVycm9yIGhhbmRsaW5nP1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBmbiwgaW5pdGlhbCl7ICBcbiAgdmFyIGlkeCA9IDA7XG4gIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICB2YXIgY3VyciA9IGFyZ3VtZW50cy5sZW5ndGggPT0gM1xuICAgID8gaW5pdGlhbFxuICAgIDogYXJyW2lkeCsrXTtcblxuICB3aGlsZSAoaWR4IDwgbGVuKSB7XG4gICAgY3VyciA9IGZuLmNhbGwobnVsbCwgY3VyciwgYXJyW2lkeF0sICsraWR4LCBhcnIpO1xuICB9XG4gIFxuICByZXR1cm4gY3Vycjtcbn07XG59LHt9XX0se30sW1wiLi9hcHAvaW5kZXguanNcIl0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9